
/***************************** Include Files *******************************/
#include "pspl.h"
#include "xparameters.h"
#include "stdio.h"
#include "xil_io.h"
#include "testvector.h"

/************************** Constant Definitions ***************************/
#define READ_WRITE_MUL_FACTOR 0x10

/************************** Function Definitions ***************************/
/**
 *
 * Run a self-test on the driver/device. Note this may be a destructive test if
 * resets of the device are performed.
 *
 * If the hardware system is not built correctly, this function may never
 * return to the caller.
 *
 * @param   baseaddr_p is the base address of the PSPLinstance to be worked on.
 *
 * @return
 *
 *    - XST_SUCCESS   if all self-test code passed
 *    - XST_FAILURE   if any self-test code failed
 *
 * @note    Caching must be turned off for this function to work.
 * @note    Self test may fail if data memory and device are not on the same bus.
 *
 */
XStatus PSPL_Reg_SelfTest(void * baseaddr_p)
{
	u32 baseaddr;
	int write_loop_index;
	int read_loop_index;
	int Index;

	baseaddr = (u32) baseaddr_p;

	xil_printf("******************************\n\r");
	xil_printf("* User Peripheral Self Test\n\r");
	xil_printf("******************************\n\n\r");

	/*
	 * Write to user logic slave module register(s) and read back
	 */
	xil_printf("User logic slave module test...\n\r");

	for (write_loop_index = 0 ; write_loop_index < 4; write_loop_index++)
	  PSPL_mWriteReg (baseaddr, write_loop_index*4, (write_loop_index+1)*READ_WRITE_MUL_FACTOR);
	for (read_loop_index = 0 ; read_loop_index < 4; read_loop_index++)
	  if ( PSPL_mReadReg (baseaddr, read_loop_index*4) != (read_loop_index+1)*READ_WRITE_MUL_FACTOR){
	    xil_printf ("Error reading register value at address %x\n", (int)baseaddr + read_loop_index*4);
	    return XST_FAILURE;
	  }

	xil_printf("   - slave register write/read passed\n\n\r");

	return XST_SUCCESS;
}

int main()
{
	printf("Jay\n");
	void * addr = 0x43C00000;
	PSPL_Reg_SelfTest(addr);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG0_OFFSET, testvector[0][0]<<24|testvector[0][1]<<16|testvector[0][2]<<8|testvector[0][3]);
	/*PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG1_OFFSET, testvector[0][4]<<24|testvector[0][3]<<16|testvector[0][2]<<8|testvector[0][1]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG2_OFFSET, testvector[0][8]<<24|testvector[0][7]<<16|testvector[0][6]<<8|testvector[0][5]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG3_OFFSET, testvector[0][12]<<24|testvector[0][11]<<16|testvector[0][10]<<8|testvector[0][9]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG4_OFFSET, testvector[0][16]<<24|testvector[0][15]<<16|testvector[0][14]<<8|testvector[0][13]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG5_OFFSET, testvector[0][20]<<24|testvector[0][19]<<16|testvector[0][18]<<8|testvector[0][17]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG6_OFFSET, testvector[0][24]<<24|testvector[0][23]<<16|testvector[0][22]<<8|testvector[0][21]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG7_OFFSET, testvector[0][28]<<24|testvector[0][27]<<16|testvector[0][26]<<8|testvector[0][25]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG8_OFFSET, testvector[0][32]<<24|testvector[0][31]<<16|testvector[0][30]<<8|testvector[0][29]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG9_OFFSET, testvector[0][36]<<24|testvector[0][35]<<16|testvector[0][34]<<8|testvector[0][33]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG10_OFFSET, testvector[0][40]<<24|testvector[0][39]<<16|testvector[0][38]<<8|testvector[0][37]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG11_OFFSET, testvector[0][44]<<24|testvector[0][43]<<16|testvector[0][42]<<8|testvector[0][41]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG12_OFFSET, testvector[0][48]<<24|testvector[0][47]<<16|testvector[0][46]<<8|testvector[0][45]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG13_OFFSET, testvector[0][52]<<24|testvector[0][51]<<16|testvector[0][50]<<8|testvector[0][49]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG14_OFFSET, testvector[0][56]<<24|testvector[0][55]<<16|testvector[0][54]<<8|testvector[0][53]);
	PSPL_mWriteReg(XPAR_PSPL_0_S00_AXI_BASEADDR, PSPL_S00_AXI_SLV_REG15_OFFSET, testvector[0][60]<<24|testvector[0][59]<<16|testvector[0][58]<<8|testvector[0][57]);
*/


}
