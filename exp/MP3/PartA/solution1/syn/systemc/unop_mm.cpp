// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "unop_mm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic unop_mm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic unop_mm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> unop_mm::ap_ST_fsm_state1 = "1";
const sc_lv<7> unop_mm::ap_ST_fsm_state2 = "10";
const sc_lv<7> unop_mm::ap_ST_fsm_state3 = "100";
const sc_lv<7> unop_mm::ap_ST_fsm_state4 = "1000";
const sc_lv<7> unop_mm::ap_ST_fsm_state5 = "10000";
const sc_lv<7> unop_mm::ap_ST_fsm_state6 = "100000";
const sc_lv<7> unop_mm::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> unop_mm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> unop_mm::ap_const_lv32_1 = "1";
const sc_lv<32> unop_mm::ap_const_lv32_2 = "10";
const sc_lv<1> unop_mm::ap_const_lv1_1 = "1";
const sc_lv<32> unop_mm::ap_const_lv32_3 = "11";
const sc_lv<32> unop_mm::ap_const_lv32_4 = "100";
const sc_lv<32> unop_mm::ap_const_lv32_5 = "101";
const sc_lv<31> unop_mm::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<1> unop_mm::ap_const_lv1_0 = "0";
const sc_lv<32> unop_mm::ap_const_lv32_6 = "110";
const sc_lv<31> unop_mm::ap_const_lv31_1 = "1";
const bool unop_mm::ap_const_boolean_1 = true;

unop_mm::unop_mm(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_9_fu_248_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_2_fu_263_p1 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_address0);
    sensitive << ( C_addr_reg_330 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_C_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_C_d0);
    sensitive << ( tmp_10_reg_368 );
    sensitive << ( C_load_reg_373 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_C_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_190_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_190_p2 );

    SC_METHOD(thread_i_1_fu_195_p2);
    sensitive << ( i_reg_108 );

    SC_METHOD(thread_i_cast_fu_186_p1);
    sensitive << ( i_reg_108 );

    SC_METHOD(thread_j_1_fu_210_p2);
    sensitive << ( j_reg_143 );

    SC_METHOD(thread_j_cast_fu_201_p1);
    sensitive << ( j_reg_143 );

    SC_METHOD(thread_k_1_fu_236_p2);
    sensitive << ( k_reg_154 );

    SC_METHOD(thread_k_cast_fu_227_p1);
    sensitive << ( k_reg_154 );

    SC_METHOD(thread_next_mul2_fu_181_p2);
    sensitive << ( nA );
    sensitive << ( phi_mul1_reg_119 );

    SC_METHOD(thread_next_mul4_fu_176_p2);
    sensitive << ( nC );
    sensitive << ( phi_mul3_reg_131 );

    SC_METHOD(thread_next_mul_fu_253_p2);
    sensitive << ( nB );
    sensitive << ( phi_mul_reg_165 );

    SC_METHOD(thread_tmp_10_fu_268_p2);
    sensitive << ( A_load_reg_358 );
    sensitive << ( B_load_reg_363 );

    SC_METHOD(thread_tmp_2_fu_263_p1);
    sensitive << ( tmp_6_fu_258_p2 );

    SC_METHOD(thread_tmp_3_fu_205_p2);
    sensitive << ( nC );
    sensitive << ( j_cast_fu_201_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_4_fu_216_p2);
    sensitive << ( j_cast_fu_201_p1 );
    sensitive << ( phi_mul3_reg_131 );

    SC_METHOD(thread_tmp_5_fu_222_p1);
    sensitive << ( tmp_4_fu_216_p2 );

    SC_METHOD(thread_tmp_6_fu_258_p2);
    sensitive << ( j_cast_reg_317 );
    sensitive << ( phi_mul_reg_165 );

    SC_METHOD(thread_tmp_7_fu_231_p2);
    sensitive << ( nA );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_cast_fu_227_p1 );

    SC_METHOD(thread_tmp_8_fu_242_p2);
    sensitive << ( phi_mul1_reg_119 );
    sensitive << ( k_cast_fu_227_p1 );

    SC_METHOD(thread_tmp_9_fu_248_p1);
    sensitive << ( tmp_8_fu_242_p2 );

    SC_METHOD(thread_tmp_fu_190_p2);
    sensitive << ( mC );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast_fu_186_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_fu_205_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_7_fu_231_p2 );
    sensitive << ( tmp_fu_190_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "unop_mm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, C_address0, "(port)C_address0");
    sc_trace(mVcdFile, C_ce0, "(port)C_ce0");
    sc_trace(mVcdFile, C_we0, "(port)C_we0");
    sc_trace(mVcdFile, C_d0, "(port)C_d0");
    sc_trace(mVcdFile, C_q0, "(port)C_q0");
    sc_trace(mVcdFile, mA, "(port)mA");
    sc_trace(mVcdFile, nA, "(port)nA");
    sc_trace(mVcdFile, mB, "(port)mB");
    sc_trace(mVcdFile, nB, "(port)nB");
    sc_trace(mVcdFile, mC, "(port)mC");
    sc_trace(mVcdFile, nC, "(port)nC");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, next_mul4_fu_176_p2, "next_mul4_fu_176_p2");
    sc_trace(mVcdFile, next_mul4_reg_299, "next_mul4_reg_299");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, next_mul2_fu_181_p2, "next_mul2_fu_181_p2");
    sc_trace(mVcdFile, next_mul2_reg_304, "next_mul2_reg_304");
    sc_trace(mVcdFile, i_1_fu_195_p2, "i_1_fu_195_p2");
    sc_trace(mVcdFile, i_1_reg_312, "i_1_reg_312");
    sc_trace(mVcdFile, j_cast_fu_201_p1, "j_cast_fu_201_p1");
    sc_trace(mVcdFile, j_cast_reg_317, "j_cast_reg_317");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_1_fu_210_p2, "j_1_fu_210_p2");
    sc_trace(mVcdFile, j_1_reg_325, "j_1_reg_325");
    sc_trace(mVcdFile, C_addr_reg_330, "C_addr_reg_330");
    sc_trace(mVcdFile, tmp_3_fu_205_p2, "tmp_3_fu_205_p2");
    sc_trace(mVcdFile, k_1_fu_236_p2, "k_1_fu_236_p2");
    sc_trace(mVcdFile, k_1_reg_338, "k_1_reg_338");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_7_fu_231_p2, "tmp_7_fu_231_p2");
    sc_trace(mVcdFile, next_mul_fu_253_p2, "next_mul_fu_253_p2");
    sc_trace(mVcdFile, next_mul_reg_348, "next_mul_reg_348");
    sc_trace(mVcdFile, A_load_reg_358, "A_load_reg_358");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, B_load_reg_363, "B_load_reg_363");
    sc_trace(mVcdFile, tmp_10_fu_268_p2, "tmp_10_fu_268_p2");
    sc_trace(mVcdFile, tmp_10_reg_368, "tmp_10_reg_368");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, C_load_reg_373, "C_load_reg_373");
    sc_trace(mVcdFile, i_reg_108, "i_reg_108");
    sc_trace(mVcdFile, phi_mul1_reg_119, "phi_mul1_reg_119");
    sc_trace(mVcdFile, phi_mul3_reg_131, "phi_mul3_reg_131");
    sc_trace(mVcdFile, j_reg_143, "j_reg_143");
    sc_trace(mVcdFile, tmp_fu_190_p2, "tmp_fu_190_p2");
    sc_trace(mVcdFile, k_reg_154, "k_reg_154");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, phi_mul_reg_165, "phi_mul_reg_165");
    sc_trace(mVcdFile, tmp_5_fu_222_p1, "tmp_5_fu_222_p1");
    sc_trace(mVcdFile, tmp_9_fu_248_p1, "tmp_9_fu_248_p1");
    sc_trace(mVcdFile, tmp_2_fu_263_p1, "tmp_2_fu_263_p1");
    sc_trace(mVcdFile, i_cast_fu_186_p1, "i_cast_fu_186_p1");
    sc_trace(mVcdFile, tmp_4_fu_216_p2, "tmp_4_fu_216_p2");
    sc_trace(mVcdFile, k_cast_fu_227_p1, "k_cast_fu_227_p1");
    sc_trace(mVcdFile, tmp_8_fu_242_p2, "tmp_8_fu_242_p2");
    sc_trace(mVcdFile, tmp_6_fu_258_p2, "tmp_6_fu_258_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("unop_mm.hdltvin.dat");
    mHdltvoutHandle.open("unop_mm.hdltvout.dat");
}

unop_mm::~unop_mm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void unop_mm::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(tmp_3_fu_205_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_reg_108 = i_1_reg_312.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_108 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(tmp_7_fu_231_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        j_reg_143 = j_1_reg_325.read();
    } else if ((esl_seteq<1,1,1>(tmp_fu_190_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_reg_143 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        k_reg_154 = k_1_reg_338.read();
    } else if ((esl_seteq<1,1,1>(tmp_3_fu_205_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        k_reg_154 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(tmp_3_fu_205_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        phi_mul1_reg_119 = next_mul2_reg_304.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul1_reg_119 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(tmp_3_fu_205_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        phi_mul3_reg_131 = next_mul4_reg_299.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul3_reg_131 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        phi_mul_reg_165 = next_mul_reg_348.read();
    } else if ((esl_seteq<1,1,1>(tmp_3_fu_205_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        phi_mul_reg_165 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        A_load_reg_358 = A_q0.read();
        B_load_reg_363 = B_q0.read();
    }
    if ((esl_seteq<1,1,1>(tmp_3_fu_205_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        C_addr_reg_330 =  (sc_lv<14>) (tmp_5_fu_222_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        C_load_reg_373 = C_q0.read();
        tmp_10_reg_368 = tmp_10_fu_268_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_312 = i_1_fu_195_p2.read();
        next_mul2_reg_304 = next_mul2_fu_181_p2.read();
        next_mul4_reg_299 = next_mul4_fu_176_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_325 = j_1_fu_210_p2.read();
        j_cast_reg_317 = j_cast_fu_201_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_1_reg_338 = k_1_fu_236_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_7_fu_231_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        next_mul_reg_348 = next_mul_fu_253_p2.read();
    }
}

void unop_mm::thread_A_address0() {
    A_address0 =  (sc_lv<14>) (tmp_9_fu_248_p1.read());
}

void unop_mm::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void unop_mm::thread_B_address0() {
    B_address0 =  (sc_lv<14>) (tmp_2_fu_263_p1.read());
}

void unop_mm::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void unop_mm::thread_C_address0() {
    C_address0 = C_addr_reg_330.read();
}

void unop_mm::thread_C_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        C_ce0 = ap_const_logic_1;
    } else {
        C_ce0 = ap_const_logic_0;
    }
}

void unop_mm::thread_C_d0() {
    C_d0 = (!C_load_reg_373.read().is_01() || !tmp_10_reg_368.read().is_01())? sc_lv<32>(): (sc_biguint<32>(C_load_reg_373.read()) + sc_biguint<32>(tmp_10_reg_368.read()));
}

void unop_mm::thread_C_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        C_we0 = ap_const_logic_1;
    } else {
        C_we0 = ap_const_logic_0;
    }
}

void unop_mm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void unop_mm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void unop_mm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void unop_mm::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void unop_mm::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void unop_mm::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void unop_mm::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void unop_mm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_190_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void unop_mm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void unop_mm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_190_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void unop_mm::thread_i_1_fu_195_p2() {
    i_1_fu_195_p2 = (!i_reg_108.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_108.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void unop_mm::thread_i_cast_fu_186_p1() {
    i_cast_fu_186_p1 = esl_zext<32,31>(i_reg_108.read());
}

void unop_mm::thread_j_1_fu_210_p2() {
    j_1_fu_210_p2 = (!j_reg_143.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_reg_143.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void unop_mm::thread_j_cast_fu_201_p1() {
    j_cast_fu_201_p1 = esl_zext<32,31>(j_reg_143.read());
}

void unop_mm::thread_k_1_fu_236_p2() {
    k_1_fu_236_p2 = (!k_reg_154.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(k_reg_154.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void unop_mm::thread_k_cast_fu_227_p1() {
    k_cast_fu_227_p1 = esl_zext<32,31>(k_reg_154.read());
}

void unop_mm::thread_next_mul2_fu_181_p2() {
    next_mul2_fu_181_p2 = (!phi_mul1_reg_119.read().is_01() || !nA.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul1_reg_119.read()) + sc_biguint<32>(nA.read()));
}

void unop_mm::thread_next_mul4_fu_176_p2() {
    next_mul4_fu_176_p2 = (!phi_mul3_reg_131.read().is_01() || !nC.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul3_reg_131.read()) + sc_biguint<32>(nC.read()));
}

void unop_mm::thread_next_mul_fu_253_p2() {
    next_mul_fu_253_p2 = (!phi_mul_reg_165.read().is_01() || !nB.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_165.read()) + sc_biguint<32>(nB.read()));
}

void unop_mm::thread_tmp_10_fu_268_p2() {
    tmp_10_fu_268_p2 = (!B_load_reg_363.read().is_01() || !A_load_reg_358.read().is_01())? sc_lv<32>(): sc_bigint<32>(B_load_reg_363.read()) * sc_bigint<32>(A_load_reg_358.read());
}

void unop_mm::thread_tmp_2_fu_263_p1() {
    tmp_2_fu_263_p1 = esl_sext<64,32>(tmp_6_fu_258_p2.read());
}

void unop_mm::thread_tmp_3_fu_205_p2() {
    tmp_3_fu_205_p2 = (!j_cast_fu_201_p1.read().is_01() || !nC.read().is_01())? sc_lv<1>(): (sc_bigint<32>(j_cast_fu_201_p1.read()) < sc_bigint<32>(nC.read()));
}

void unop_mm::thread_tmp_4_fu_216_p2() {
    tmp_4_fu_216_p2 = (!j_cast_fu_201_p1.read().is_01() || !phi_mul3_reg_131.read().is_01())? sc_lv<32>(): (sc_biguint<32>(j_cast_fu_201_p1.read()) + sc_biguint<32>(phi_mul3_reg_131.read()));
}

void unop_mm::thread_tmp_5_fu_222_p1() {
    tmp_5_fu_222_p1 = esl_sext<64,32>(tmp_4_fu_216_p2.read());
}

void unop_mm::thread_tmp_6_fu_258_p2() {
    tmp_6_fu_258_p2 = (!phi_mul_reg_165.read().is_01() || !j_cast_reg_317.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_165.read()) + sc_biguint<32>(j_cast_reg_317.read()));
}

void unop_mm::thread_tmp_7_fu_231_p2() {
    tmp_7_fu_231_p2 = (!k_cast_fu_227_p1.read().is_01() || !nA.read().is_01())? sc_lv<1>(): (sc_bigint<32>(k_cast_fu_227_p1.read()) < sc_bigint<32>(nA.read()));
}

void unop_mm::thread_tmp_8_fu_242_p2() {
    tmp_8_fu_242_p2 = (!k_cast_fu_227_p1.read().is_01() || !phi_mul1_reg_119.read().is_01())? sc_lv<32>(): (sc_biguint<32>(k_cast_fu_227_p1.read()) + sc_biguint<32>(phi_mul1_reg_119.read()));
}

void unop_mm::thread_tmp_9_fu_248_p1() {
    tmp_9_fu_248_p1 = esl_sext<64,32>(tmp_8_fu_242_p2.read());
}

void unop_mm::thread_tmp_fu_190_p2() {
    tmp_fu_190_p2 = (!i_cast_fu_186_p1.read().is_01() || !mC.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_186_p1.read()) < sc_bigint<32>(mC.read()));
}

void unop_mm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_190_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_3_fu_205_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(tmp_7_fu_231_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void unop_mm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_address0\" :  \"" << C_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_ce0\" :  \"" << C_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_we0\" :  \"" << C_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_d0\" :  \"" << C_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_q0\" :  \"" << C_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mA\" :  \"" << mA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nA\" :  \"" << nA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mB\" :  \"" << mB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nB\" :  \"" << nB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mC\" :  \"" << mC.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"nC\" :  \"" << nC.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

