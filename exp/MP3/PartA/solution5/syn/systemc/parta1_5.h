// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _parta1_5_HH_
#define _parta1_5_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "parta1_5_mul_mul_bkb.h"

namespace ap_rtl {

struct parta1_5 : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<14> > B_address0;
    sc_out< sc_logic > B_ce0;
    sc_in< sc_lv<32> > B_q0;
    sc_out< sc_lv<14> > C_address0;
    sc_out< sc_logic > C_ce0;
    sc_out< sc_logic > C_we0;
    sc_out< sc_lv<32> > C_d0;
    sc_in< sc_lv<32> > C_q0;
    sc_in< sc_lv<32> > mA;
    sc_in< sc_lv<32> > nA;
    sc_in< sc_lv<32> > mB;
    sc_in< sc_lv<32> > nB;
    sc_in< sc_lv<32> > mC;
    sc_in< sc_lv<32> > nC;


    // Module declarations
    parta1_5(sc_module_name name);
    SC_HAS_PROCESS(parta1_5);

    ~parta1_5();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    parta1_5_mul_mul_bkb<1,1,8,15,15>* parta1_5_mul_mul_bkb_U1;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > indvar_flatten_reg_163;
    sc_signal< sc_lv<31> > j_reg_174;
    sc_signal< sc_lv<31> > k_reg_185;
    sc_signal< sc_lv<64> > bound_fu_204_p2;
    sc_signal< sc_lv<64> > bound_reg_352;
    sc_signal< sc_lv<15> > tmp_1_fu_210_p1;
    sc_signal< sc_lv<15> > tmp_1_reg_357;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<38> > next_mul_fu_220_p2;
    sc_signal< sc_lv<38> > next_mul_reg_363;
    sc_signal< sc_lv<1> > tmp_fu_230_p2;
    sc_signal< sc_lv<31> > i_1_fu_235_p2;
    sc_signal< sc_lv<31> > i_1_reg_372;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_250_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_377;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_377_pp0_iter1_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_377_pp0_iter2_reg;
    sc_signal< sc_lv<64> > indvar_flatten_next_fu_255_p2;
    sc_signal< sc_lv<64> > indvar_flatten_next_reg_381;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<31> > k_mid2_fu_267_p3;
    sc_signal< sc_lv<31> > k_mid2_reg_386;
    sc_signal< sc_lv<31> > tmp_3_mid2_v_fu_275_p3;
    sc_signal< sc_lv<31> > tmp_3_mid2_v_reg_391;
    sc_signal< sc_lv<15> > tmp_2_fu_283_p1;
    sc_signal< sc_lv<15> > tmp_2_reg_396;
    sc_signal< sc_lv<15> > tmp_6_fu_287_p1;
    sc_signal< sc_lv<15> > tmp_6_reg_402;
    sc_signal< sc_lv<15> > tmp_3_fu_337_p2;
    sc_signal< sc_lv<15> > tmp_3_reg_408;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state4_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage1_iter1;
    sc_signal< bool > ap_block_state8_pp0_stage1_iter2;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<14> > C_addr_1_reg_414;
    sc_signal< sc_lv<14> > C_addr_1_reg_414_pp0_iter1_reg;
    sc_signal< sc_lv<31> > k_1_fu_300_p2;
    sc_signal< sc_lv<31> > k_1_reg_419;
    sc_signal< sc_lv<32> > A_load_reg_434;
    sc_signal< sc_lv<32> > B_load_reg_439;
    sc_signal< sc_lv<32> > tmp_7_fu_327_p2;
    sc_signal< sc_lv<32> > tmp_7_reg_444;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<31> > i_reg_141;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<38> > phi_mul_reg_152;
    sc_signal< sc_lv<64> > ap_phi_mux_indvar_flatten_phi_fu_167_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<31> > ap_phi_mux_j_phi_fu_178_p4;
    sc_signal< sc_lv<31> > ap_phi_mux_k_phi_fu_189_p4;
    sc_signal< sc_lv<64> > tmp_9_cast_fu_295_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > tmp_10_cast_fu_313_p1;
    sc_signal< sc_lv<64> > tmp_11_cast_fu_322_p1;
    sc_signal< sc_lv<32> > bound_fu_204_p0;
    sc_signal< sc_lv<32> > bound_fu_204_p1;
    sc_signal< sc_lv<32> > i_cast_fu_226_p1;
    sc_signal< sc_lv<32> > k_cast_fu_241_p1;
    sc_signal< sc_lv<1> > tmp_5_fu_245_p2;
    sc_signal< sc_lv<31> > j_1_fu_261_p2;
    sc_signal< sc_lv<15> > tmp_9_fu_291_p2;
    sc_signal< sc_lv<15> > tmp_10_fu_309_p2;
    sc_signal< sc_lv<15> > tmp_11_fu_318_p2;
    sc_signal< sc_lv<8> > tmp_3_fu_337_p0;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<64> > bound_fu_204_p00;
    sc_signal< sc_lv<64> > bound_fu_204_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_pp0_stage1;
    static const sc_lv<5> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<38> ap_const_lv38_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<38> ap_const_lv38_64;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<15> ap_const_lv15_64;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_B_address0();
    void thread_B_ce0();
    void thread_C_address0();
    void thread_C_ce0();
    void thread_C_d0();
    void thread_C_we0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage1_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_block_state6_pp0_stage1_iter1();
    void thread_ap_block_state7_pp0_stage0_iter2();
    void thread_ap_block_state8_pp0_stage1_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_167_p4();
    void thread_ap_phi_mux_j_phi_fu_178_p4();
    void thread_ap_phi_mux_k_phi_fu_189_p4();
    void thread_ap_ready();
    void thread_bound_fu_204_p0();
    void thread_bound_fu_204_p00();
    void thread_bound_fu_204_p1();
    void thread_bound_fu_204_p10();
    void thread_bound_fu_204_p2();
    void thread_exitcond_flatten_fu_250_p2();
    void thread_i_1_fu_235_p2();
    void thread_i_cast_fu_226_p1();
    void thread_indvar_flatten_next_fu_255_p2();
    void thread_j_1_fu_261_p2();
    void thread_k_1_fu_300_p2();
    void thread_k_cast_fu_241_p1();
    void thread_k_mid2_fu_267_p3();
    void thread_next_mul_fu_220_p2();
    void thread_tmp_10_cast_fu_313_p1();
    void thread_tmp_10_fu_309_p2();
    void thread_tmp_11_cast_fu_322_p1();
    void thread_tmp_11_fu_318_p2();
    void thread_tmp_1_fu_210_p1();
    void thread_tmp_2_fu_283_p1();
    void thread_tmp_3_fu_337_p0();
    void thread_tmp_3_mid2_v_fu_275_p3();
    void thread_tmp_5_fu_245_p2();
    void thread_tmp_6_fu_287_p1();
    void thread_tmp_7_fu_327_p2();
    void thread_tmp_9_cast_fu_295_p1();
    void thread_tmp_9_fu_291_p2();
    void thread_tmp_fu_230_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
