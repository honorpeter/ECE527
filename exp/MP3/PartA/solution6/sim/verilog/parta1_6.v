// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="parta1_6,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=689,HLS_SYN_LUT=1160,HLS_VERSION=2018_2}" *)

module parta1_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        mA,
        nA,
        mB,
        nB,
        mC,
        nC
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [13:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [13:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
input  [31:0] mA;
input  [31:0] nA;
input  [31:0] mB;
input  [31:0] nB;
input  [31:0] mC;
input  [31:0] nC;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] A_address0;
reg A_ce0;
reg[13:0] B_address0;
reg B_ce0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] reg_259;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state14;
reg  signed [31:0] reg_263;
wire   [31:0] grp_fu_267_p2;
reg   [31:0] reg_273;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
wire   [14:0] tmp_1_fu_277_p1;
reg   [14:0] tmp_1_reg_610;
wire    ap_CS_fsm_state2;
wire   [37:0] next_mul2_fu_287_p2;
reg   [37:0] next_mul2_reg_619;
wire   [30:0] i_1_fu_302_p2;
reg   [30:0] i_1_reg_627;
wire   [0:0] tmp_fu_297_p2;
wire   [14:0] tmp_3_fu_308_p1;
reg   [14:0] tmp_3_reg_636;
wire    ap_CS_fsm_state3;
wire   [37:0] next_mul_fu_317_p2;
reg   [37:0] next_mul_reg_644;
wire   [30:0] j_1_fu_332_p2;
reg   [30:0] j_1_reg_652;
reg   [13:0] C_addr_1_reg_657;
wire   [0:0] tmp_2_fu_327_p2;
wire   [31:0] tmp_22_fu_419_p3;
reg   [31:0] tmp_22_reg_662;
wire   [0:0] tmp_23_fu_427_p2;
reg   [0:0] tmp_23_reg_667;
wire    ap_CS_fsm_state4;
reg   [31:0] C_load_reg_681;
wire   [31:0] tmp_8_fu_456_p2;
reg   [31:0] tmp_8_reg_686;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_5_1_fu_468_p2;
reg   [0:0] tmp_5_1_reg_691;
wire   [31:0] tmp_8_1_fu_497_p2;
reg   [31:0] tmp_8_1_reg_705;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_5_2_fu_509_p2;
reg   [0:0] tmp_5_2_reg_710;
reg   [31:0] tmp_7_2_reg_724;
wire    ap_CS_fsm_state12;
wire   [31:0] tmp_8_2_fu_538_p2;
reg   [31:0] tmp_8_2_reg_729;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_5_3_fu_549_p2;
wire   [31:0] k_1_3_fu_578_p2;
reg   [31:0] k_1_3_reg_747;
reg   [30:0] i_reg_203;
reg   [37:0] phi_mul1_reg_214;
reg   [30:0] j_reg_225;
reg   [37:0] phi_mul_reg_236;
reg   [31:0] k_reg_247;
wire    ap_CS_fsm_state16;
wire   [63:0] tmp_11_cast_fu_347_p1;
wire   [63:0] tmp_12_cast_fu_441_p1;
wire   [63:0] tmp_13_cast_fu_451_p1;
wire   [63:0] tmp_14_cast_fu_482_p1;
wire   [63:0] tmp_15_cast_fu_492_p1;
wire   [63:0] tmp_16_cast_fu_523_p1;
wire   [63:0] tmp_17_cast_fu_533_p1;
wire   [63:0] tmp_18_cast_fu_563_p1;
wire   [63:0] tmp_19_cast_fu_573_p1;
wire   [31:0] tmp_8_3_fu_584_p2;
wire   [31:0] i_cast_fu_293_p1;
wire   [31:0] j_cast_fu_323_p1;
wire   [14:0] tmp_6_fu_338_p1;
wire   [14:0] tmp_s_fu_342_p2;
wire   [31:0] nA_op_op_fu_359_p2;
wire   [31:0] p_neg_fu_372_p2;
wire   [29:0] p_lshr_fu_377_p4;
wire   [0:0] tmp_10_fu_364_p3;
wire   [29:0] p_neg_t_fu_387_p2;
wire   [29:0] tmp_11_fu_393_p4;
wire   [0:0] tmp_9_fu_352_p3;
wire   [29:0] tmp_20_fu_403_p3;
wire   [29:0] tmp_21_fu_411_p3;
wire   [14:0] tmp_24_fu_432_p1;
wire   [14:0] tmp_12_fu_436_p2;
wire   [14:0] tmp_13_fu_446_p2;
wire   [31:0] k_1_s_fu_462_p2;
wire   [14:0] tmp_25_fu_473_p1;
wire   [14:0] tmp_14_fu_477_p2;
wire   [14:0] tmp_15_fu_487_p2;
wire   [31:0] k_1_1_fu_503_p2;
wire   [14:0] tmp_26_fu_514_p1;
wire   [14:0] tmp_16_fu_518_p2;
wire   [14:0] tmp_17_fu_528_p2;
wire   [31:0] k_1_2_fu_543_p2;
wire   [14:0] tmp_27_fu_554_p1;
wire   [14:0] tmp_18_fu_558_p2;
wire   [14:0] tmp_19_fu_568_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_327_p2 == 1'd0))) begin
        i_reg_203 <= i_1_reg_627;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_203 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ((tmp_5_3_fu_549_p2 == 1'd0) | (tmp_5_2_reg_710 == 1'd0) | (tmp_5_1_reg_691 == 1'd0) | (tmp_23_reg_667 == 1'd1)))) begin
        j_reg_225 <= j_1_reg_652;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_297_p2 == 1'd1))) begin
        j_reg_225 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        k_reg_247 <= k_1_3_reg_747;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_327_p2 == 1'd1))) begin
        k_reg_247 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_327_p2 == 1'd0))) begin
        phi_mul1_reg_214 <= next_mul2_reg_619;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul1_reg_214 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ((tmp_5_3_fu_549_p2 == 1'd0) | (tmp_5_2_reg_710 == 1'd0) | (tmp_5_1_reg_691 == 1'd0) | (tmp_23_reg_667 == 1'd1)))) begin
        phi_mul_reg_236 <= next_mul_reg_644;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_297_p2 == 1'd1))) begin
        phi_mul_reg_236 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_327_p2 == 1'd1))) begin
        C_addr_1_reg_657 <= tmp_11_cast_fu_347_p1;
        tmp_22_reg_662[31 : 2] <= tmp_22_fu_419_p3[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        C_load_reg_681 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_627 <= i_1_fu_302_p2;
        next_mul2_reg_619 <= next_mul2_fu_287_p2;
        tmp_1_reg_610 <= tmp_1_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_652 <= j_1_fu_332_p2;
        next_mul_reg_644 <= next_mul_fu_317_p2;
        tmp_3_reg_636 <= tmp_3_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_23_reg_667 == 1'd0) & (tmp_5_3_fu_549_p2 == 1'd1) & (tmp_5_2_reg_710 == 1'd1) & (tmp_5_1_reg_691 == 1'd1))) begin
        k_1_3_reg_747 <= k_1_3_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_259 <= A_q0;
        reg_263 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_273 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_23_reg_667 <= tmp_23_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_5_1_reg_691 <= tmp_5_1_fu_468_p2;
        tmp_8_reg_686 <= tmp_8_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_5_2_reg_710 <= tmp_5_2_fu_509_p2;
        tmp_8_1_reg_705 <= tmp_8_1_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_7_2_reg_724 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_23_reg_667 == 1'd0) & (tmp_5_2_reg_710 == 1'd1) & (tmp_5_1_reg_691 == 1'd1))) begin
        tmp_8_2_reg_729 <= tmp_8_2_fu_538_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        A_address0 = tmp_18_cast_fu_563_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = tmp_16_cast_fu_523_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = tmp_14_cast_fu_482_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = tmp_12_cast_fu_441_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        B_address0 = tmp_19_cast_fu_573_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        B_address0 = tmp_17_cast_fu_533_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_address0 = tmp_15_cast_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = tmp_13_cast_fu_451_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        C_d0 = tmp_8_3_fu_584_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        C_d0 = tmp_8_2_fu_538_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        C_d0 = tmp_8_1_fu_497_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_d0 = tmp_8_fu_456_p2;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state13) & (tmp_23_reg_667 == 1'd0) & (tmp_5_2_reg_710 == 1'd1) & (tmp_5_1_reg_691 == 1'd1)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_297_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_297_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_297_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_327_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_23_fu_427_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_5_1_fu_468_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_5_2_fu_509_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & ((tmp_5_3_fu_549_p2 == 1'd0) | (tmp_5_2_reg_710 == 1'd0) | (tmp_5_1_reg_691 == 1'd0) | (tmp_23_reg_667 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_address0 = C_addr_1_reg_657;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_267_p2 = ($signed(reg_263) * $signed(reg_259));

assign i_1_fu_302_p2 = (31'd1 + i_reg_203);

assign i_cast_fu_293_p1 = i_reg_203;

assign j_1_fu_332_p2 = (31'd1 + j_reg_225);

assign j_cast_fu_323_p1 = j_reg_225;

assign k_1_1_fu_503_p2 = (k_reg_247 | 32'd2);

assign k_1_2_fu_543_p2 = (k_reg_247 | 32'd3);

assign k_1_3_fu_578_p2 = (32'd4 + k_reg_247);

assign k_1_s_fu_462_p2 = (k_reg_247 | 32'd1);

assign nA_op_op_fu_359_p2 = (32'd3 + nA);

assign next_mul2_fu_287_p2 = (38'd100 + phi_mul1_reg_214);

assign next_mul_fu_317_p2 = (38'd100 + phi_mul_reg_236);

assign p_lshr_fu_377_p4 = {{p_neg_fu_372_p2[31:2]}};

assign p_neg_fu_372_p2 = ($signed(32'd4294967293) - $signed(nA));

assign p_neg_t_fu_387_p2 = (30'd0 - p_lshr_fu_377_p4);

assign tmp_10_fu_364_p3 = nA_op_op_fu_359_p2[32'd31];

assign tmp_11_cast_fu_347_p1 = tmp_s_fu_342_p2;

assign tmp_11_fu_393_p4 = {{nA_op_op_fu_359_p2[31:2]}};

assign tmp_12_cast_fu_441_p1 = tmp_12_fu_436_p2;

assign tmp_12_fu_436_p2 = (tmp_1_reg_610 + tmp_24_fu_432_p1);

assign tmp_13_cast_fu_451_p1 = tmp_13_fu_446_p2;

assign tmp_13_fu_446_p2 = (tmp_3_reg_636 + tmp_24_fu_432_p1);

assign tmp_14_cast_fu_482_p1 = tmp_14_fu_477_p2;

assign tmp_14_fu_477_p2 = (tmp_1_reg_610 + tmp_25_fu_473_p1);

assign tmp_15_cast_fu_492_p1 = tmp_15_fu_487_p2;

assign tmp_15_fu_487_p2 = (tmp_3_reg_636 + tmp_25_fu_473_p1);

assign tmp_16_cast_fu_523_p1 = tmp_16_fu_518_p2;

assign tmp_16_fu_518_p2 = (tmp_1_reg_610 + tmp_26_fu_514_p1);

assign tmp_17_cast_fu_533_p1 = tmp_17_fu_528_p2;

assign tmp_17_fu_528_p2 = (tmp_3_reg_636 + tmp_26_fu_514_p1);

assign tmp_18_cast_fu_563_p1 = tmp_18_fu_558_p2;

assign tmp_18_fu_558_p2 = (tmp_1_reg_610 + tmp_27_fu_554_p1);

assign tmp_19_cast_fu_573_p1 = tmp_19_fu_568_p2;

assign tmp_19_fu_568_p2 = (tmp_3_reg_636 + tmp_27_fu_554_p1);

assign tmp_1_fu_277_p1 = phi_mul1_reg_214[14:0];

assign tmp_20_fu_403_p3 = ((tmp_10_fu_364_p3[0:0] === 1'b1) ? p_neg_t_fu_387_p2 : tmp_11_fu_393_p4);

assign tmp_21_fu_411_p3 = ((tmp_9_fu_352_p3[0:0] === 1'b1) ? 30'd0 : tmp_20_fu_403_p3);

assign tmp_22_fu_419_p3 = {{tmp_21_fu_411_p3}, {2'd0}};

assign tmp_23_fu_427_p2 = ((k_reg_247 == tmp_22_reg_662) ? 1'b1 : 1'b0);

assign tmp_24_fu_432_p1 = k_reg_247[14:0];

assign tmp_25_fu_473_p1 = k_1_s_fu_462_p2[14:0];

assign tmp_26_fu_514_p1 = k_1_1_fu_503_p2[14:0];

assign tmp_27_fu_554_p1 = k_1_2_fu_543_p2[14:0];

assign tmp_2_fu_327_p2 = (($signed(j_cast_fu_323_p1) < $signed(nC)) ? 1'b1 : 1'b0);

assign tmp_3_fu_308_p1 = phi_mul_reg_236[14:0];

assign tmp_5_1_fu_468_p2 = (($signed(k_1_s_fu_462_p2) < $signed(nA)) ? 1'b1 : 1'b0);

assign tmp_5_2_fu_509_p2 = (($signed(k_1_1_fu_503_p2) < $signed(nA)) ? 1'b1 : 1'b0);

assign tmp_5_3_fu_549_p2 = (($signed(k_1_2_fu_543_p2) < $signed(nA)) ? 1'b1 : 1'b0);

assign tmp_6_fu_338_p1 = j_reg_225[14:0];

assign tmp_8_1_fu_497_p2 = (tmp_8_reg_686 + reg_273);

assign tmp_8_2_fu_538_p2 = (tmp_8_1_reg_705 + tmp_7_2_reg_724);

assign tmp_8_3_fu_584_p2 = (tmp_8_2_reg_729 + reg_273);

assign tmp_8_fu_456_p2 = (reg_273 + C_load_reg_681);

assign tmp_9_fu_352_p3 = nA[32'd31];

assign tmp_fu_297_p2 = (($signed(i_cast_fu_293_p1) < $signed(mC)) ? 1'b1 : 1'b0);

assign tmp_s_fu_342_p2 = (tmp_6_fu_338_p1 + tmp_1_reg_610);

always @ (posedge ap_clk) begin
    tmp_22_reg_662[1:0] <= 2'b00;
end

endmodule //parta1_6
