-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity partb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mA : IN STD_LOGIC_VECTOR (31 downto 0);
    nA : IN STD_LOGIC_VECTOR (31 downto 0);
    mB : IN STD_LOGIC_VECTOR (31 downto 0);
    nB : IN STD_LOGIC_VECTOR (31 downto 0);
    mC : IN STD_LOGIC_VECTOR (31 downto 0);
    nC : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of partb is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "partb,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=18,HLS_SYN_FF=1840,HLS_SYN_LUT=2161,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv38_64 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001100100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv15_64 : STD_LOGIC_VECTOR (14 downto 0) := "000000001100100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_277 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_reg_288 : STD_LOGIC_VECTOR (30 downto 0);
    signal j2_reg_299 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten1_reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal i3_reg_321 : STD_LOGIC_VECTOR (30 downto 0);
    signal j4_reg_332 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten3_reg_411 : STD_LOGIC_VECTOR (63 downto 0);
    signal i7_reg_422 : STD_LOGIC_VECTOR (30 downto 0);
    signal j8_reg_433 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_444_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_reg_997 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_448_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul_reg_1002 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_463_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_1011 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_fu_475_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_1016 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_490_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_1024 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_cast_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_cast_reg_1029 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_1039_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_7_mid2_v_fu_544_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_mid2_v_reg_1048 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_552_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_reg_1053 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_11_fu_556_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_11_reg_1058 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_2_fu_560_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_cast_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_reg_1068 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_fu_576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_reg_1078 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_flatten1_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next1_fu_596_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_5_mid2_v_fu_616_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_mid2_v_reg_1094 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_fu_624_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_reg_1099 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_fu_628_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_reg_1104 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_3_fu_632_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_flatten2_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next3_fu_656_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next3_reg_1123 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_mid2_v_fu_668_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_mid2_v_reg_1128 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_fu_676_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_20_reg_1133 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_fu_931_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_reg_1138 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j6_mid2_fu_680_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal j6_mid2_reg_1145 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_23_fu_687_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_reg_1150 : STD_LOGIC_VECTOR (14 downto 0);
    signal C_i_addr_1_reg_1156 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_36_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state15_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal tmp_37_reg_1166_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_1166_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_1_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_1_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_1_reg_1180_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_1_reg_1180_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_1_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal A_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_i_load_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal B_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_i_load_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_i_load_1_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_i_load_1_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_1_fu_838_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_1_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal sum_1_1_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_fu_852_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal exitcond_flatten3_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state20_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state22_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal exitcond_flatten3_reg_1244_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_871_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_16_mid2_v_fu_891_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_mid2_v_reg_1253 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_38_fu_899_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_38_reg_1258 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_39_fu_903_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_39_reg_1263 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_5_fu_907_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_21_cast_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_reg_1273 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran18to19_state15 : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state20 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal A_i_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal A_i_ce0 : STD_LOGIC;
    signal A_i_we0 : STD_LOGIC;
    signal A_i_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal A_i_ce1 : STD_LOGIC;
    signal B_i_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal B_i_ce0 : STD_LOGIC;
    signal B_i_we0 : STD_LOGIC;
    signal B_i_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal B_i_ce1 : STD_LOGIC;
    signal C_i_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal C_i_ce0 : STD_LOGIC;
    signal C_i_we0 : STD_LOGIC;
    signal C_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_244 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_255 : STD_LOGIC_VECTOR (37 downto 0);
    signal j_reg_266 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_phi_mux_i1_phi_fu_292_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i3_phi_fu_325_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal indvar_flatten2_reg_343 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i5_reg_354 : STD_LOGIC_VECTOR (30 downto 0);
    signal j6_reg_365 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_lcssa_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i7_phi_fu_426_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal tmp_12_cast_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal tmp_27_cast_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_475_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_496_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_fu_500_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal j2_cast_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_530_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j2_mid2_fu_536_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_917_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal bound4_fu_576_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j4_cast_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_602_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j4_mid2_fu_608_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_924_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal j6_cast_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_662_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_691_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_14_fu_691_p2 : signal is "no";
    signal nA_op_op_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_726_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_32_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_736_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_33_fu_742_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_31_fu_701_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_752_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_35_fu_760_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_40_fu_781_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_22_fu_785_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of tmp_22_fu_785_p2 : signal is "no";
    signal grp_fu_936_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_1_s_fu_799_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_810_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_fu_814_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of tmp_27_fu_814_p2 : signal is "no";
    signal grp_fu_944_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal j8_cast_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_877_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j8_mid2_fu_883_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_952_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_917_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_924_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_931_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_936_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_944_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_952_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal bound4_fu_576_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_fu_576_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_475_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_475_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component partb_mac_muladd_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component partb_mul_mul_8nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component partb_A_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component partb_C_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_i_U : component partb_A_i
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_i_address0,
        ce0 => A_i_ce0,
        we0 => A_i_we0,
        d0 => A_q0,
        q0 => A_i_q0,
        address1 => A_i_address1,
        ce1 => A_i_ce1,
        q1 => A_i_q1);

    B_i_U : component partb_A_i
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_i_address0,
        ce0 => B_i_ce0,
        we0 => B_i_we0,
        d0 => B_q0,
        q0 => B_i_q0,
        address1 => B_i_address1,
        ce1 => B_i_ce1,
        q1 => B_i_q1);

    C_i_U : component partb_C_i
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_i_address0,
        ce0 => C_i_ce0,
        we0 => C_i_we0,
        d0 => C_i_d0,
        q0 => C_i_q0);

    partb_mac_muladd_bkb_U1 : component partb_mac_muladd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_917_p0,
        din1 => tmp_4_reg_1053,
        din2 => tmp_11_reg_1058,
        dout => grp_fu_917_p3);

    partb_mac_muladd_bkb_U2 : component partb_mac_muladd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_924_p0,
        din1 => tmp_15_reg_1099,
        din2 => tmp_18_reg_1104,
        dout => grp_fu_924_p3);

    partb_mul_mul_8nscud_U3 : component partb_mul_mul_8nscud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => tmp_13_fu_931_p0,
        din1 => tmp_20_reg_1133,
        dout => tmp_13_fu_931_p2);

    partb_mac_muladd_bkb_U4 : component partb_mac_muladd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_936_p0,
        din1 => tmp_40_fu_781_p1,
        din2 => tmp_23_reg_1150,
        dout => grp_fu_936_p3);

    partb_mac_muladd_bkb_U5 : component partb_mac_muladd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_944_p0,
        din1 => tmp_41_fu_810_p1,
        din2 => tmp_23_reg_1150,
        dout => grp_fu_944_p3);

    partb_mac_muladd_bkb_U6 : component partb_mac_muladd_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_952_p0,
        din1 => tmp_38_reg_1258,
        din2 => tmp_39_reg_1263,
        dout => grp_fu_952_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_458_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_458_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_predicate_tran18to19_state15 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_flatten2_fu_651_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state20)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state20);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_flatten2_fu_651_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_1039 = ap_const_lv1_0))) then 
                i1_reg_288 <= tmp_7_mid2_v_reg_1048;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_458_p2 = ap_const_lv1_0))) then 
                i1_reg_288 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i3_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_reg_1085 = ap_const_lv1_0))) then 
                i3_reg_321 <= tmp_5_mid2_v_reg_1094;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i3_reg_321 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i5_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i5_reg_354 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i5_reg_354 <= tmp_12_mid2_v_reg_1128;
            end if; 
        end if;
    end process;

    i7_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_flatten2_fu_651_p2 = ap_const_lv1_1))) then 
                i7_reg_422 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten3_reg_1244 = ap_const_lv1_0))) then 
                i7_reg_422 <= tmp_16_mid2_v_reg_1253;
            end if; 
        end if;
    end process;

    i_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_485_p2 = ap_const_lv1_0))) then 
                i_reg_244 <= i_1_reg_1011;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_244 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_fu_591_p2 = ap_const_lv1_0))) then 
                indvar_flatten1_reg_310 <= indvar_flatten_next1_fu_596_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten1_reg_310 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten2_reg_343 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvar_flatten2_reg_343 <= indvar_flatten_next3_reg_1123;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_flatten2_fu_651_p2 = ap_const_lv1_1))) then 
                indvar_flatten3_reg_411 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten3_fu_866_p2 = ap_const_lv1_0))) then 
                indvar_flatten3_reg_411 <= indvar_flatten_next2_fu_871_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_519_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_277 <= indvar_flatten_next_fu_524_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_458_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_277 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j2_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_519_p2 = ap_const_lv1_0))) then 
                j2_reg_299 <= j_2_fu_560_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_458_p2 = ap_const_lv1_0))) then 
                j2_reg_299 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j4_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_fu_591_p2 = ap_const_lv1_0))) then 
                j4_reg_332 <= j_3_fu_632_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j4_reg_332 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j6_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j6_reg_365 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j6_reg_365 <= j_4_fu_852_p2;
            end if; 
        end if;
    end process;

    j8_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_flatten2_fu_651_p2 = ap_const_lv1_1))) then 
                j8_reg_433 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten3_fu_866_p2 = ap_const_lv1_0))) then 
                j8_reg_433 <= j_5_fu_907_p2;
            end if; 
        end if;
    end process;

    j_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_458_p2 = ap_const_lv1_1))) then 
                j_reg_266 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_266 <= j_1_reg_1024;
            end if; 
        end if;
    end process;

    k_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_reg_377 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_17_1_fu_805_p2 = ap_const_lv1_1) and (tmp_37_fu_776_p2 = ap_const_lv1_0))) then 
                k_reg_377 <= k_1_1_fu_828_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_485_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_255 <= next_mul_reg_1002;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_255 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    sum_lcssa_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then
                if (((tmp_17_1_reg_1180_pp2_iter2_reg = ap_const_lv1_0) and (tmp_37_reg_1166_pp2_iter2_reg = ap_const_lv1_0))) then 
                    sum_lcssa_reg_400 <= sum_1_fu_842_p2;
                elsif ((tmp_37_reg_1166_pp2_iter2_reg = ap_const_lv1_1)) then 
                    sum_lcssa_reg_400 <= sum_reg_388;
                end if;
            end if; 
        end if;
    end process;

    sum_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_reg_388 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (tmp_17_1_reg_1180_pp2_iter2_reg = ap_const_lv1_1) and (tmp_37_reg_1166_pp2_iter2_reg = ap_const_lv1_0))) then 
                sum_reg_388 <= sum_1_1_fu_847_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_17_1_reg_1180 = ap_const_lv1_1) and (tmp_37_reg_1166 = ap_const_lv1_0))) then
                A_i_load_1_reg_1209 <= A_i_q1;
                B_i_load_1_reg_1214 <= B_i_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_37_reg_1166 = ap_const_lv1_0))) then
                A_i_load_reg_1199 <= A_i_q0;
                B_i_load_reg_1204 <= B_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                C_i_addr_1_reg_1156 <= tmp_16_cast_fu_696_p1(14 - 1 downto 0);
                j6_mid2_reg_1145 <= j6_mid2_fu_680_p3;
                tmp_23_reg_1150 <= tmp_23_fu_687_p1;
                    tmp_36_reg_1161(31 downto 1) <= tmp_36_fu_768_p3(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                bound4_reg_1078 <= bound4_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_458_p2 = ap_const_lv1_0))) then
                bound_reg_1016 <= bound_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond_flatten1_reg_1085 <= exitcond_flatten1_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond_flatten3_reg_1244 <= exitcond_flatten3_fu_866_p2;
                exitcond_flatten3_reg_1244_pp3_iter1_reg <= exitcond_flatten3_reg_1244;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_1039 <= exitcond_flatten_fu_519_p2;
                exitcond_flatten_reg_1039_pp0_iter1_reg <= exitcond_flatten_reg_1039;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_1011 <= i_1_fu_463_p2;
                next_mul_reg_1002 <= next_mul_fu_448_p2;
                tmp_1_reg_997 <= tmp_1_fu_444_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                indvar_flatten_next3_reg_1123 <= indvar_flatten_next3_fu_656_p2;
                tmp_12_reg_1114 <= tmp_12_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_1024 <= j_1_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_519_p2 = ap_const_lv1_0))) then
                tmp_11_reg_1058 <= tmp_11_fu_556_p1;
                tmp_4_reg_1053 <= tmp_4_fu_552_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_flatten2_fu_651_p2 = ap_const_lv1_0))) then
                tmp_12_mid2_v_reg_1128 <= tmp_12_mid2_v_fu_668_p3;
                tmp_20_reg_1133 <= tmp_20_fu_676_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_13_reg_1138 <= tmp_13_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_fu_591_p2 = ap_const_lv1_0))) then
                tmp_15_reg_1099 <= tmp_15_fu_624_p1;
                tmp_18_reg_1104 <= tmp_18_fu_628_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten3_fu_866_p2 = ap_const_lv1_0))) then
                tmp_16_mid2_v_reg_1253 <= tmp_16_mid2_v_fu_891_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_37_fu_776_p2 = ap_const_lv1_0))) then
                tmp_17_1_reg_1180 <= tmp_17_1_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_17_1_reg_1180_pp2_iter1_reg <= tmp_17_1_reg_1180;
                tmp_37_reg_1166 <= tmp_37_fu_776_p2;
                tmp_37_reg_1166_pp2_iter1_reg <= tmp_37_reg_1166;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                tmp_17_1_reg_1180_pp2_iter2_reg <= tmp_17_1_reg_1180_pp2_iter1_reg;
                tmp_37_reg_1166_pp2_iter2_reg <= tmp_37_reg_1166_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_17_1_reg_1180_pp2_iter1_reg = ap_const_lv1_1) and (tmp_37_reg_1166_pp2_iter1_reg = ap_const_lv1_0))) then
                tmp_20_1_reg_1224 <= tmp_20_1_fu_838_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten3_reg_1244 = ap_const_lv1_0))) then
                tmp_21_cast_reg_1273 <= tmp_21_cast_fu_913_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (tmp_37_reg_1166_pp2_iter1_reg = ap_const_lv1_0))) then
                tmp_25_reg_1219 <= tmp_25_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten3_fu_866_p2 = ap_const_lv1_0))) then
                tmp_38_reg_1258 <= tmp_38_fu_899_p1;
                tmp_39_reg_1263 <= tmp_39_fu_903_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_485_p2 = ap_const_lv1_1))) then
                    tmp_5_cast_reg_1029(14 downto 0) <= tmp_5_cast_fu_505_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_fu_591_p2 = ap_const_lv1_0))) then
                tmp_5_mid2_v_reg_1094 <= tmp_5_mid2_v_fu_616_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_519_p2 = ap_const_lv1_0))) then
                tmp_7_mid2_v_reg_1048 <= tmp_7_mid2_v_fu_544_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_1039 = ap_const_lv1_0))) then
                tmp_9_cast_reg_1068 <= tmp_9_cast_fu_566_p1;
            end if;
        end if;
    end process;
    tmp_5_cast_reg_1029(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    tmp_36_reg_1161(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_458_p2, ap_CS_fsm_state3, tmp_2_fu_485_p2, exitcond_flatten_fu_519_p2, ap_enable_reg_pp0_iter0, exitcond_flatten1_fu_591_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state12, exitcond_flatten2_fu_651_p2, ap_enable_reg_pp2_iter3, exitcond_flatten3_fu_866_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_458_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_485_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_519_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_519_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten1_fu_591_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten1_fu_591_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_flatten2_fu_651_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_fu_866_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (exitcond_flatten3_fu_866_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_5_cast_fu_505_p1(14 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_i_address0_assign_proc : process(tmp_5_cast_reg_1029, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state4, tmp_24_cast_fu_790_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_i_address0 <= tmp_24_cast_fu_790_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_i_address0 <= tmp_5_cast_reg_1029(14 - 1 downto 0);
        else 
            A_i_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    A_i_address1 <= tmp_28_cast_fu_819_p1(14 - 1 downto 0);

    A_i_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            A_i_ce0 <= ap_const_logic_1;
        else 
            A_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_i_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            A_i_ce1 <= ap_const_logic_1;
        else 
            A_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_i_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_i_we0 <= ap_const_logic_1;
        else 
            A_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_9_cast_fu_566_p1(14 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_i_address0_assign_proc : process(tmp_9_cast_reg_1068, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp2_stage0, tmp_27_cast_fu_795_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            B_i_address0 <= tmp_27_cast_fu_795_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            B_i_address0 <= tmp_9_cast_reg_1068(14 - 1 downto 0);
        else 
            B_i_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    B_i_address1 <= tmp_30_cast_fu_824_p1(14 - 1 downto 0);

    B_i_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            B_i_ce0 <= ap_const_logic_1;
        else 
            B_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_i_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            B_i_ce1 <= ap_const_logic_1;
        else 
            B_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_i_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_flatten_reg_1039_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_1039_pp0_iter1_reg = ap_const_lv1_0))) then 
            B_i_we0 <= ap_const_logic_1;
        else 
            B_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= tmp_21_cast_reg_1273(14 - 1 downto 0);

    C_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= C_i_q0;

    C_i_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, C_i_addr_1_reg_1156, ap_CS_fsm_state19, ap_CS_fsm_pp3_stage0, tmp_21_cast_fu_913_p1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_12_cast_fu_638_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            C_i_address0 <= tmp_21_cast_fu_913_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            C_i_address0 <= C_i_addr_1_reg_1156;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            C_i_address0 <= tmp_12_cast_fu_638_p1(14 - 1 downto 0);
        else 
            C_i_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    C_i_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state19, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            C_i_ce0 <= ap_const_logic_1;
        else 
            C_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_i_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state19, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, sum_lcssa_reg_400)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            C_i_d0 <= sum_lcssa_reg_400;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            C_i_d0 <= ap_const_lv32_0;
        else 
            C_i_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_i_we0_assign_proc : process(exitcond_flatten1_reg_1085, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state19, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond_flatten1_reg_1085 = ap_const_lv1_0)))) then 
            C_i_we0 <= ap_const_logic_1;
        else 
            C_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_we0_assign_proc : process(ap_block_pp3_stage0_11001, exitcond_flatten3_reg_1244_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (exitcond_flatten3_reg_1244_pp3_iter1_reg = ap_const_lv1_0))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(14);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(exitcond_flatten_fu_519_p2)
    begin
        if ((exitcond_flatten_fu_519_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(exitcond_flatten1_fu_591_p2)
    begin
        if ((exitcond_flatten1_fu_591_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state20_assign_proc : process(exitcond_flatten3_fu_866_p2)
    begin
        if ((exitcond_flatten3_fu_866_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_phi_fu_292_p4_assign_proc : process(i1_reg_288, exitcond_flatten_reg_1039, ap_CS_fsm_pp0_stage0, tmp_7_mid2_v_reg_1048, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1039 = ap_const_lv1_0))) then 
            ap_phi_mux_i1_phi_fu_292_p4 <= tmp_7_mid2_v_reg_1048;
        else 
            ap_phi_mux_i1_phi_fu_292_p4 <= i1_reg_288;
        end if; 
    end process;


    ap_phi_mux_i3_phi_fu_325_p4_assign_proc : process(i3_reg_321, exitcond_flatten1_reg_1085, ap_CS_fsm_pp1_stage0, tmp_5_mid2_v_reg_1094, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten1_reg_1085 = ap_const_lv1_0))) then 
            ap_phi_mux_i3_phi_fu_325_p4 <= tmp_5_mid2_v_reg_1094;
        else 
            ap_phi_mux_i3_phi_fu_325_p4 <= i3_reg_321;
        end if; 
    end process;


    ap_phi_mux_i7_phi_fu_426_p4_assign_proc : process(i7_reg_422, exitcond_flatten3_reg_1244, ap_CS_fsm_pp3_stage0, tmp_16_mid2_v_reg_1253, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond_flatten3_reg_1244 = ap_const_lv1_0))) then 
            ap_phi_mux_i7_phi_fu_426_p4 <= tmp_16_mid2_v_reg_1253;
        else 
            ap_phi_mux_i7_phi_fu_426_p4 <= i7_reg_422;
        end if; 
    end process;


    ap_predicate_tran18to19_state15_assign_proc : process(tmp_37_fu_776_p2, tmp_17_1_fu_805_p2)
    begin
                ap_predicate_tran18to19_state15 <= ((tmp_37_fu_776_p2 = ap_const_lv1_1) or ((tmp_17_1_fu_805_p2 = ap_const_lv1_0) and (tmp_37_fu_776_p2 = ap_const_lv1_0)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound4_fu_576_p0 <= bound4_fu_576_p00(32 - 1 downto 0);
    bound4_fu_576_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nC),64));
    bound4_fu_576_p1 <= bound4_fu_576_p10(32 - 1 downto 0);
    bound4_fu_576_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mC),64));
    bound4_fu_576_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_fu_576_p0) * unsigned(bound4_fu_576_p1), 64));
    bound_fu_475_p0 <= bound_fu_475_p00(32 - 1 downto 0);
    bound_fu_475_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nB),64));
    bound_fu_475_p1 <= bound_fu_475_p10(32 - 1 downto 0);
    bound_fu_475_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mB),64));
    bound_fu_475_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_475_p0) * unsigned(bound_fu_475_p1), 64));
    exitcond_flatten1_fu_591_p2 <= "1" when (indvar_flatten1_reg_310 = bound4_reg_1078) else "0";
    exitcond_flatten2_fu_651_p2 <= "1" when (indvar_flatten2_reg_343 = bound4_reg_1078) else "0";
    exitcond_flatten3_fu_866_p2 <= "1" when (indvar_flatten3_reg_411 = bound4_reg_1078) else "0";
    exitcond_flatten_fu_519_p2 <= "1" when (indvar_flatten_reg_277 = bound_reg_1016) else "0";
    grp_fu_917_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    grp_fu_924_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    grp_fu_936_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    grp_fu_944_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    grp_fu_952_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    i_1_fu_463_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i_reg_244));
    i_2_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_i1_phi_fu_292_p4));
    i_3_fu_602_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_i3_phi_fu_325_p4));
    i_4_fu_662_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i5_reg_354));
    i_5_fu_877_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_i7_phi_fu_426_p4));
    i_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_244),32));
    indvar_flatten_next1_fu_596_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_310) + unsigned(ap_const_lv64_1));
    indvar_flatten_next2_fu_871_p2 <= std_logic_vector(unsigned(indvar_flatten3_reg_411) + unsigned(ap_const_lv64_1));
    indvar_flatten_next3_fu_656_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_343) + unsigned(ap_const_lv64_1));
    indvar_flatten_next_fu_524_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_277) + unsigned(ap_const_lv64_1));
    j2_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_299),32));
    j2_mid2_fu_536_p3 <= 
        j2_reg_299 when (tmp_8_fu_514_p2(0) = '1') else 
        ap_const_lv31_0;
    j4_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_332),32));
    j4_mid2_fu_608_p3 <= 
        j4_reg_332 when (tmp_6_fu_586_p2(0) = '1') else 
        ap_const_lv31_0;
    j6_cast_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_reg_365),32));
    j6_mid2_fu_680_p3 <= 
        j6_reg_365 when (tmp_12_reg_1114(0) = '1') else 
        ap_const_lv31_0;
    j8_cast_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j8_reg_433),32));
    j8_mid2_fu_883_p3 <= 
        j8_reg_433 when (tmp_16_fu_861_p2(0) = '1') else 
        ap_const_lv31_0;
    j_1_fu_490_p2 <= std_logic_vector(unsigned(j_reg_266) + unsigned(ap_const_lv31_1));
    j_2_fu_560_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(j2_mid2_fu_536_p3));
    j_3_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(j4_mid2_fu_608_p3));
    j_4_fu_852_p2 <= std_logic_vector(unsigned(j6_mid2_reg_1145) + unsigned(ap_const_lv31_1));
    j_5_fu_907_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(j8_mid2_fu_883_p3));
    j_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_266),32));
    k_1_1_fu_828_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(k_reg_377));
    k_1_s_fu_799_p2 <= (k_reg_377 or ap_const_lv32_1);
    nA_op_op_fu_708_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(nA));
    next_mul_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul_reg_255));
    p_lshr_fu_726_p4 <= p_neg_fu_721_p2(31 downto 1);
    p_neg_fu_721_p2 <= (nA xor ap_const_lv32_FFFFFFFF);
    p_neg_t_fu_736_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_726_p4));
    sum_1_1_fu_847_p2 <= std_logic_vector(unsigned(tmp_20_1_reg_1224) + unsigned(sum_1_fu_842_p2));
    sum_1_fu_842_p2 <= std_logic_vector(unsigned(tmp_25_reg_1219) + unsigned(sum_reg_388));
    tmp_11_fu_556_p1 <= j2_mid2_fu_536_p3(15 - 1 downto 0);
        tmp_12_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_924_p3),64));

    tmp_12_fu_646_p2 <= "1" when (signed(j6_cast_fu_642_p1) < signed(nC)) else "0";
    tmp_12_mid2_v_fu_668_p3 <= 
        i5_reg_354 when (tmp_12_fu_646_p2(0) = '1') else 
        i_4_fu_662_p2;
    tmp_13_fu_931_p0 <= ap_const_lv15_64(8 - 1 downto 0);
    tmp_14_fu_691_p2 <= std_logic_vector(unsigned(tmp_23_fu_687_p1) + unsigned(tmp_13_reg_1138));
    tmp_15_fu_624_p1 <= tmp_5_mid2_v_fu_616_p3(15 - 1 downto 0);
        tmp_16_cast_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_691_p2),64));

    tmp_16_fu_861_p2 <= "1" when (signed(j8_cast_fu_857_p1) < signed(nC)) else "0";
    tmp_16_mid2_v_fu_891_p3 <= 
        ap_phi_mux_i7_phi_fu_426_p4 when (tmp_16_fu_861_p2(0) = '1') else 
        i_5_fu_877_p2;
    tmp_17_1_fu_805_p2 <= "1" when (signed(k_1_s_fu_799_p2) < signed(nA)) else "0";
    tmp_18_fu_628_p1 <= j4_mid2_fu_608_p3(15 - 1 downto 0);
    tmp_1_fu_444_p1 <= phi_mul_reg_255(15 - 1 downto 0);
    tmp_20_1_fu_838_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_i_load_1_reg_1214) * signed(A_i_load_1_reg_1209))), 32));
    tmp_20_fu_676_p1 <= tmp_12_mid2_v_fu_668_p3(15 - 1 downto 0);
        tmp_21_cast_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_952_p3),64));

    tmp_22_fu_785_p2 <= std_logic_vector(signed(tmp_13_reg_1138) + signed(tmp_40_fu_781_p1));
    tmp_23_fu_687_p1 <= j6_mid2_fu_680_p3(15 - 1 downto 0);
        tmp_24_cast_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_785_p2),64));

    tmp_25_fu_834_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_i_load_reg_1204) * signed(A_i_load_reg_1199))), 32));
        tmp_27_cast_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_936_p3),64));

    tmp_27_fu_814_p2 <= std_logic_vector(signed(tmp_13_reg_1138) + signed(tmp_41_fu_810_p1));
        tmp_28_cast_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_fu_814_p2),64));

    tmp_2_fu_485_p2 <= "1" when (signed(j_cast_fu_481_p1) < signed(nA)) else "0";
        tmp_30_cast_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_944_p3),64));

    tmp_31_fu_701_p3 <= nA(31 downto 31);
    tmp_32_fu_713_p3 <= nA_op_op_fu_708_p2(31 downto 31);
    tmp_33_fu_742_p4 <= nA_op_op_fu_708_p2(31 downto 1);
    tmp_34_fu_752_p3 <= 
        p_neg_t_fu_736_p2 when (tmp_32_fu_713_p3(0) = '1') else 
        tmp_33_fu_742_p4;
    tmp_35_fu_760_p3 <= 
        ap_const_lv31_0 when (tmp_31_fu_701_p3(0) = '1') else 
        tmp_34_fu_752_p3;
    tmp_36_fu_768_p3 <= (tmp_35_fu_760_p3 & ap_const_lv1_0);
    tmp_37_fu_776_p2 <= "1" when (k_reg_377 = tmp_36_reg_1161) else "0";
    tmp_38_fu_899_p1 <= tmp_16_mid2_v_fu_891_p3(15 - 1 downto 0);
    tmp_39_fu_903_p1 <= j8_mid2_fu_883_p3(15 - 1 downto 0);
    tmp_3_fu_496_p1 <= j_reg_266(15 - 1 downto 0);
    tmp_40_fu_781_p1 <= k_reg_377(15 - 1 downto 0);
    tmp_41_fu_810_p1 <= k_1_s_fu_799_p2(15 - 1 downto 0);
    tmp_4_fu_552_p1 <= tmp_7_mid2_v_fu_544_p3(15 - 1 downto 0);
    tmp_5_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_500_p2),64));
    tmp_5_fu_500_p2 <= std_logic_vector(unsigned(tmp_1_reg_997) + unsigned(tmp_3_fu_496_p1));
    tmp_5_mid2_v_fu_616_p3 <= 
        ap_phi_mux_i3_phi_fu_325_p4 when (tmp_6_fu_586_p2(0) = '1') else 
        i_3_fu_602_p2;
    tmp_6_fu_586_p2 <= "1" when (signed(j4_cast_fu_582_p1) < signed(nC)) else "0";
    tmp_7_mid2_v_fu_544_p3 <= 
        ap_phi_mux_i1_phi_fu_292_p4 when (tmp_8_fu_514_p2(0) = '1') else 
        i_2_fu_530_p2;
    tmp_8_fu_514_p2 <= "1" when (signed(j2_cast_fu_510_p1) < signed(nB)) else "0";
        tmp_9_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_917_p3),64));

    tmp_fu_458_p2 <= "1" when (signed(i_cast_fu_454_p1) < signed(mA)) else "0";
end behav;
