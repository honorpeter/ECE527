-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity partb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    mA : IN STD_LOGIC_VECTOR (31 downto 0);
    nA : IN STD_LOGIC_VECTOR (31 downto 0);
    mB : IN STD_LOGIC_VECTOR (31 downto 0);
    nB : IN STD_LOGIC_VECTOR (31 downto 0);
    mC : IN STD_LOGIC_VECTOR (31 downto 0);
    nC : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of partb is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "partb,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=3,HLS_SYN_FF=1402,HLS_SYN_LUT=1413,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv38_64 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001100100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1_fu_404_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_reg_767 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_408_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul_reg_772 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_1_fu_423_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_780 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_fu_438_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_788 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_24_cast_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_reg_793 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_458_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_reg_803 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal next_mul2_fu_462_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul2_reg_808 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_2_fu_477_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_816 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_fu_492_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_reg_824 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_26_cast_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_reg_829 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_512_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_reg_839 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal next_mul4_fu_516_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul4_reg_844 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_3_fu_531_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_852 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_3_fu_546_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_15_fu_566_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_reg_865 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal next_mul8_fu_570_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul8_reg_871 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_4_fu_585_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_4_reg_879 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_4_fu_600_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_4_reg_887 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_23_fu_606_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_reg_892 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_i_addr_1_reg_897 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_1_fu_633_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_1_reg_905 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_17_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul6_fu_653_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul6_reg_915 : STD_LOGIC_VECTOR (37 downto 0);
    signal A_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_i_load_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal B_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_i_load_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sum_1_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_22_fu_678_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_22_reg_945 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal next_mul1_fu_682_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul1_reg_950 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_5_fu_697_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_5_reg_958 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_5_fu_712_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_5_reg_966 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_35_cast_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_reg_971 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_i_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal A_i_ce0 : STD_LOGIC;
    signal A_i_we0 : STD_LOGIC;
    signal B_i_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal B_i_ce0 : STD_LOGIC;
    signal B_i_we0 : STD_LOGIC;
    signal C_i_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal C_i_ce0 : STD_LOGIC;
    signal C_i_we0 : STD_LOGIC;
    signal C_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_204 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul_reg_215 : STD_LOGIC_VECTOR (37 downto 0);
    signal j_reg_226 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_237 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul1_reg_248 : STD_LOGIC_VECTOR (37 downto 0);
    signal j2_reg_259 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_3_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i3_reg_270 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul3_reg_281 : STD_LOGIC_VECTOR (37 downto 0);
    signal j4_reg_292 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i5_reg_303 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul7_reg_314 : STD_LOGIC_VECTOR (37 downto 0);
    signal j6_reg_325 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_349 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul5_reg_360 : STD_LOGIC_VECTOR (37 downto 0);
    signal i7_reg_371 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul9_reg_382 : STD_LOGIC_VECTOR (37 downto 0);
    signal j8_reg_393 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_14_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_cast_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_444_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_448_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i1_cast_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j2_cast_fu_483_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_498_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_502_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i3_cast_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j4_cast_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_552_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_19_fu_556_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i5_cast_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j6_cast_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_610_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_cast_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_639_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_fu_643_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_620_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_28_fu_659_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i7_cast_fu_688_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j8_cast_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_718_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_30_fu_722_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component partb_A_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_i_U : component partb_A_i
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_i_address0,
        ce0 => A_i_ce0,
        we0 => A_i_we0,
        d0 => A_q0,
        q0 => A_i_q0);

    B_i_U : component partb_A_i
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_i_address0,
        ce0 => B_i_ce0,
        we0 => B_i_we0,
        d0 => B_q0,
        q0 => B_i_q0);

    C_i_U : component partb_A_i
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_i_address0,
        ce0 => C_i_ce0,
        we0 => C_i_we0,
        d0 => C_i_d0,
        q0 => C_i_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_237 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_8_fu_487_p2 = ap_const_lv1_0))) then 
                i1_reg_237 <= i_2_reg_816;
            end if; 
        end if;
    end process;

    i3_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i3_reg_270 <= ap_const_lv31_0;
            elsif (((tmp_6_fu_541_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i3_reg_270 <= i_3_reg_852;
            end if; 
        end if;
    end process;

    i5_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i5_reg_303 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_13_fu_595_p2 = ap_const_lv1_0))) then 
                i5_reg_303 <= i_4_reg_879;
            end if; 
        end if;
    end process;

    i7_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_fu_580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i7_reg_371 <= ap_const_lv31_0;
            elsif (((tmp_18_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i7_reg_371 <= i_5_reg_958;
            end if; 
        end if;
    end process;

    i_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_204 <= i_1_reg_780;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_204 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j2_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j2_reg_259 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j2_reg_259 <= j_2_reg_824;
            end if; 
        end if;
    end process;

    j4_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_526_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j4_reg_292 <= ap_const_lv31_0;
            elsif (((tmp_6_fu_541_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j4_reg_292 <= j_3_fu_546_p2;
            end if; 
        end if;
    end process;

    j6_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_17_fu_628_p2 = ap_const_lv1_0))) then 
                j6_reg_325 <= j_4_reg_887;
            elsif (((tmp_10_fu_580_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j6_reg_325 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j8_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_14_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                j8_reg_393 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j8_reg_393 <= j_5_reg_966;
            end if; 
        end if;
    end process;

    j_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_226 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_226 <= j_1_reg_788;
            end if; 
        end if;
    end process;

    k_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                k_reg_349 <= k_1_reg_905;
            elsif (((tmp_13_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                k_reg_349 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul1_reg_248 <= ap_const_lv38_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_8_fu_487_p2 = ap_const_lv1_0))) then 
                phi_mul1_reg_248 <= next_mul2_reg_808;
            end if; 
        end if;
    end process;

    phi_mul3_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul3_reg_281 <= ap_const_lv38_0;
            elsif (((tmp_6_fu_541_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_mul3_reg_281 <= next_mul4_reg_844;
            end if; 
        end if;
    end process;

    phi_mul5_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                phi_mul5_reg_360 <= next_mul6_reg_915;
            elsif (((tmp_13_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                phi_mul5_reg_360 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    phi_mul7_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                phi_mul7_reg_314 <= ap_const_lv38_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_13_fu_595_p2 = ap_const_lv1_0))) then 
                phi_mul7_reg_314 <= next_mul8_reg_871;
            end if; 
        end if;
    end process;

    phi_mul9_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_fu_580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                phi_mul9_reg_382 <= ap_const_lv38_0;
            elsif (((tmp_18_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                phi_mul9_reg_382 <= next_mul1_reg_950;
            end if; 
        end if;
    end process;

    phi_mul_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_215 <= next_mul_reg_772;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_215 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    sum_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                sum_reg_336 <= sum_1_fu_673_p2;
            elsif (((tmp_13_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                sum_reg_336 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                A_i_load_reg_925 <= A_i_q0;
                B_i_load_reg_930 <= B_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_fu_595_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                C_i_addr_1_reg_897 <= tmp_30_cast_fu_615_p1(14 - 1 downto 0);
                tmp_23_reg_892 <= tmp_23_fu_606_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_780 <= i_1_fu_423_p2;
                next_mul_reg_772 <= next_mul_fu_408_p2;
                tmp_1_reg_767 <= tmp_1_fu_404_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_816 <= i_2_fu_477_p2;
                next_mul2_reg_808 <= next_mul2_fu_462_p2;
                tmp_4_reg_803 <= tmp_4_fu_458_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_3_reg_852 <= i_3_fu_531_p2;
                next_mul4_reg_844 <= next_mul4_fu_516_p2;
                tmp_7_reg_839 <= tmp_7_fu_512_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_4_reg_879 <= i_4_fu_585_p2;
                next_mul8_reg_871 <= next_mul8_fu_570_p2;
                tmp_15_reg_865 <= tmp_15_fu_566_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_5_reg_958 <= i_5_fu_697_p2;
                next_mul1_reg_950 <= next_mul1_fu_682_p2;
                tmp_22_reg_945 <= tmp_22_fu_678_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_788 <= j_1_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_2_reg_824 <= j_2_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_4_reg_887 <= j_4_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                j_5_reg_966 <= j_5_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                k_1_reg_905 <= k_1_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_628_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                next_mul6_reg_915 <= next_mul6_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_20_reg_935 <= tmp_20_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_433_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_24_cast_reg_793(14 downto 0) <= tmp_24_cast_fu_453_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_487_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_26_cast_reg_829(14 downto 0) <= tmp_26_cast_fu_507_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_18_fu_707_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    tmp_35_cast_reg_971(14 downto 0) <= tmp_35_cast_fu_727_p1(14 downto 0);
            end if;
        end if;
    end process;
    tmp_24_cast_reg_793(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    tmp_26_cast_reg_829(63 downto 15) <= "0000000000000000000000000000000000000000000000000";
    tmp_35_cast_reg_971(63 downto 15) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_2_fu_433_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_8_fu_487_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_13_fu_595_p2, ap_CS_fsm_state12, tmp_17_fu_628_p2, ap_CS_fsm_state16, ap_CS_fsm_state17, tmp_18_fu_707_p2, tmp_fu_418_p2, tmp_3_fu_472_p2, tmp_6_fu_541_p2, tmp_9_fu_526_p2, tmp_10_fu_580_p2, tmp_14_fu_692_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_2_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((tmp_3_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_8_fu_487_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((tmp_9_fu_526_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((tmp_6_fu_541_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((tmp_10_fu_580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_13_fu_595_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_17_fu_628_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state16 => 
                if (((tmp_14_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((tmp_18_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_24_cast_fu_453_p1(14 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_i_address0_assign_proc : process(tmp_24_cast_reg_793, ap_CS_fsm_state12, ap_CS_fsm_state4, tmp_32_cast_fu_648_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_i_address0 <= tmp_32_cast_fu_648_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_i_address0 <= tmp_24_cast_reg_793(14 - 1 downto 0);
        else 
            A_i_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    A_i_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            A_i_ce0 <= ap_const_logic_1;
        else 
            A_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_i_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_i_we0 <= ap_const_logic_1;
        else 
            A_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_26_cast_fu_507_p1(14 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_i_address0_assign_proc : process(tmp_26_cast_reg_829, ap_CS_fsm_state12, ap_CS_fsm_state7, tmp_34_cast_fu_664_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            B_i_address0 <= tmp_34_cast_fu_664_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            B_i_address0 <= tmp_26_cast_reg_829(14 - 1 downto 0);
        else 
            B_i_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    B_i_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            B_i_ce0 <= ap_const_logic_1;
        else 
            B_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_i_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            B_i_we0 <= ap_const_logic_1;
        else 
            B_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= tmp_35_cast_reg_971(14 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= C_i_q0;

    C_i_address0_assign_proc : process(ap_CS_fsm_state9, C_i_addr_1_reg_897, ap_CS_fsm_state12, ap_CS_fsm_state17, tmp_35_cast_fu_727_p1, tmp_28_cast_fu_561_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_i_address0 <= tmp_35_cast_fu_727_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_i_address0 <= C_i_addr_1_reg_897;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            C_i_address0 <= tmp_28_cast_fu_561_p1(14 - 1 downto 0);
        else 
            C_i_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    C_i_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            C_i_ce0 <= ap_const_logic_1;
        else 
            C_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_i_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, sum_reg_336)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_i_d0 <= sum_reg_336;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            C_i_d0 <= ap_const_lv32_0;
        else 
            C_i_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_i_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, tmp_17_fu_628_p2, tmp_6_fu_541_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_17_fu_628_p2 = ap_const_lv1_0)) or ((tmp_6_fu_541_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            C_i_we0 <= ap_const_logic_1;
        else 
            C_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state16, tmp_14_fu_692_p2)
    begin
        if (((tmp_14_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, tmp_14_fu_692_p2)
    begin
        if (((tmp_14_fu_692_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i1_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_237),32));
    i3_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_270),32));
    i5_cast_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_303),32));
    i7_cast_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i7_reg_371),32));
    i_1_fu_423_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i_reg_204));
    i_2_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i1_reg_237));
    i_3_fu_531_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i3_reg_270));
    i_4_fu_585_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i5_reg_303));
    i_5_fu_697_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i7_reg_371));
    i_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_204),32));
    j2_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_259),32));
    j4_cast_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_292),32));
    j6_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_reg_325),32));
    j8_cast_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j8_reg_393),32));
    j_1_fu_438_p2 <= std_logic_vector(unsigned(j_reg_226) + unsigned(ap_const_lv31_1));
    j_2_fu_492_p2 <= std_logic_vector(unsigned(j2_reg_259) + unsigned(ap_const_lv31_1));
    j_3_fu_546_p2 <= std_logic_vector(unsigned(j4_reg_292) + unsigned(ap_const_lv31_1));
    j_4_fu_600_p2 <= std_logic_vector(unsigned(j6_reg_325) + unsigned(ap_const_lv31_1));
    j_5_fu_712_p2 <= std_logic_vector(unsigned(j8_reg_393) + unsigned(ap_const_lv31_1));
    j_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_226),32));
    k_1_fu_633_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(k_reg_349));
    k_cast_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_349),32));
    next_mul1_fu_682_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul9_reg_382));
    next_mul2_fu_462_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul1_reg_248));
    next_mul4_fu_516_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul3_reg_281));
    next_mul6_fu_653_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul5_reg_360));
    next_mul8_fu_570_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul7_reg_314));
    next_mul_fu_408_p2 <= std_logic_vector(unsigned(ap_const_lv38_64) + unsigned(phi_mul_reg_215));
    sum_1_fu_673_p2 <= std_logic_vector(unsigned(sum_reg_336) + unsigned(tmp_20_reg_935));
    tmp_10_fu_580_p2 <= "1" when (signed(i5_cast_fu_576_p1) < signed(mC)) else "0";
    tmp_11_fu_498_p1 <= j2_reg_259(15 - 1 downto 0);
    tmp_12_fu_502_p2 <= std_logic_vector(unsigned(tmp_4_reg_803) + unsigned(tmp_11_fu_498_p1));
    tmp_13_fu_595_p2 <= "1" when (signed(j6_cast_fu_591_p1) < signed(nC)) else "0";
    tmp_14_fu_692_p2 <= "1" when (signed(i7_cast_fu_688_p1) < signed(mC)) else "0";
    tmp_15_fu_566_p1 <= phi_mul7_reg_314(15 - 1 downto 0);
    tmp_16_fu_552_p1 <= j4_reg_292(15 - 1 downto 0);
    tmp_17_fu_628_p2 <= "1" when (signed(k_cast_fu_624_p1) < signed(nA)) else "0";
    tmp_18_fu_707_p2 <= "1" when (signed(j8_cast_fu_703_p1) < signed(nC)) else "0";
    tmp_19_fu_556_p2 <= std_logic_vector(unsigned(tmp_7_reg_839) + unsigned(tmp_16_fu_552_p1));
    tmp_1_fu_404_p1 <= phi_mul_reg_215(15 - 1 downto 0);
    tmp_20_fu_669_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(B_i_load_reg_930) * signed(A_i_load_reg_925))), 32));
    tmp_22_fu_678_p1 <= phi_mul9_reg_382(15 - 1 downto 0);
    tmp_23_fu_606_p1 <= j6_reg_325(15 - 1 downto 0);
    tmp_24_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_448_p2),64));
    tmp_24_fu_610_p2 <= std_logic_vector(unsigned(tmp_15_reg_865) + unsigned(tmp_23_fu_606_p1));
    tmp_25_fu_620_p1 <= phi_mul5_reg_360(15 - 1 downto 0);
    tmp_26_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_502_p2),64));
    tmp_26_fu_639_p1 <= k_reg_349(15 - 1 downto 0);
    tmp_27_fu_643_p2 <= std_logic_vector(unsigned(tmp_15_reg_865) + unsigned(tmp_26_fu_639_p1));
    tmp_28_cast_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_556_p2),64));
    tmp_28_fu_659_p2 <= std_logic_vector(unsigned(tmp_25_fu_620_p1) + unsigned(tmp_23_reg_892));
    tmp_29_fu_718_p1 <= j8_reg_393(15 - 1 downto 0);
    tmp_2_fu_433_p2 <= "1" when (signed(j_cast_fu_429_p1) < signed(nA)) else "0";
    tmp_30_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_610_p2),64));
    tmp_30_fu_722_p2 <= std_logic_vector(unsigned(tmp_22_reg_945) + unsigned(tmp_29_fu_718_p1));
    tmp_32_cast_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_643_p2),64));
    tmp_34_cast_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_659_p2),64));
    tmp_35_cast_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_722_p2),64));
    tmp_3_fu_472_p2 <= "1" when (signed(i1_cast_fu_468_p1) < signed(mB)) else "0";
    tmp_4_fu_458_p1 <= phi_mul1_reg_248(15 - 1 downto 0);
    tmp_5_fu_444_p1 <= j_reg_226(15 - 1 downto 0);
    tmp_6_fu_541_p2 <= "1" when (signed(j4_cast_fu_537_p1) < signed(nC)) else "0";
    tmp_7_fu_512_p1 <= phi_mul3_reg_281(15 - 1 downto 0);
    tmp_8_fu_487_p2 <= "1" when (signed(j2_cast_fu_483_p1) < signed(nB)) else "0";
    tmp_9_fu_526_p2 <= "1" when (signed(i3_cast_fu_522_p1) < signed(mC)) else "0";
    tmp_fu_418_p2 <= "1" when (signed(i_cast_fu_414_p1) < signed(mA)) else "0";
    tmp_s_fu_448_p2 <= std_logic_vector(unsigned(tmp_1_reg_767) + unsigned(tmp_5_fu_444_p1));
end behav;
