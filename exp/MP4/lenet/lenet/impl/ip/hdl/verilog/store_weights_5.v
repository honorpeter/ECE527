// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module store_weights_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        weights_offset,
        weights_oc_address0,
        weights_oc_ce0,
        weights_oc_we0,
        weights_oc_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [31:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [31:0] m_axi_weights_WDATA;
output  [3:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [31:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [31:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [29:0] weights_offset;
output  [15:0] weights_oc_address0;
output   weights_oc_ce0;
output   weights_oc_we0;
output  [31:0] weights_oc_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weights_ARVALID;
reg m_axi_weights_RREADY;
reg weights_oc_ce0;
reg weights_oc_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    weights_blk_n_R;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_258_p2;
wire   [63:0] sext_fu_143_p1;
reg   [63:0] sext_reg_279;
wire   [6:0] i_1_fu_153_p2;
reg   [6:0] i_1_reg_287;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_1_cast_fu_167_p1;
reg   [11:0] tmp_1_cast_reg_292;
wire   [0:0] exitcond3_fu_147_p2;
wire   [4:0] l_1_fu_177_p2;
reg   [4:0] l_1_reg_300;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_7_fu_208_p2;
reg   [63:0] tmp_7_reg_305;
wire   [0:0] exitcond2_fu_171_p2;
wire   [2:0] j_1_fu_220_p2;
reg   [2:0] j_1_reg_313;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_s_fu_241_p2;
reg   [63:0] tmp_s_reg_318;
wire   [0:0] exitcond1_fu_214_p2;
reg   [31:0] weights_addr_reg_323;
wire   [2:0] k_1_fu_264_p2;
reg   [2:0] k_1_reg_332;
reg    ap_block_state12;
wire   [63:0] tmp_9_fu_274_p2;
reg   [63:0] tmp_9_reg_337;
reg   [31:0] weights_addr_read_reg_342;
reg   [6:0] i_reg_99;
reg   [4:0] l_reg_110;
reg   [2:0] j_reg_121;
reg   [2:0] k_reg_132;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_5_fu_247_p2;
reg    ap_reg_ioackin_m_axi_weights_ARREADY;
reg    ap_sig_ioackin_m_axi_weights_ARREADY;
wire   [10:0] tmp_fu_159_p3;
wire   [11:0] tmp_2_cast_fu_183_p1;
wire   [11:0] tmp_3_fu_187_p2;
wire   [13:0] tmp_1_fu_196_p3;
wire   [63:0] tmp_3_cast_fu_192_p1;
wire   [63:0] p_shl_fu_204_p1;
wire   [63:0] tmp_4_fu_226_p1;
wire   [63:0] tmp_8_fu_230_p2;
wire   [63:0] tmp_2_fu_235_p2;
wire   [63:0] tmp_6_fu_270_p1;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_reg_ioackin_m_axi_weights_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_m_axi_weights_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
            end else if ((m_axi_weights_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_171_p2 == 1'd1))) begin
        i_reg_99 <= i_1_reg_287;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_99 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_258_p2 == 1'd0) & (m_axi_weights_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_258_p2 == 1'd1))) begin
        j_reg_121 <= j_1_reg_313;
    end else if (((exitcond2_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_reg_132 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        k_reg_132 <= k_1_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_214_p2 == 1'd1))) begin
        l_reg_110 <= l_1_reg_300;
    end else if (((exitcond3_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        l_reg_110 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_287 <= i_1_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_313 <= j_1_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_258_p2 == 1'd0) & (m_axi_weights_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
        k_1_reg_332 <= k_1_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        l_1_reg_300 <= l_1_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_reg_279[29 : 0] <= sext_fu_143_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_cast_reg_292[10 : 4] <= tmp_1_cast_fu_167_p1[10 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_7_reg_305 <= tmp_7_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_258_p2 == 1'd0) & (m_axi_weights_RVALID == 1'b0)) & (exitcond_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_9_reg_337 <= tmp_9_fu_274_p2;
        weights_addr_read_reg_342 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_s_reg_318 <= tmp_s_fu_241_p2;
        weights_addr_reg_323 <= tmp_5_fu_247_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_147_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_147_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_weights_ARREADY = m_axi_weights_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weights_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_weights_ARVALID = 1'b1;
    end else begin
        m_axi_weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_258_p2 == 1'd0) & (m_axi_weights_RVALID == 1'b0)) & (exitcond_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_weights_RREADY = 1'b1;
    end else begin
        m_axi_weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_blk_n_AR = m_axi_weights_ARREADY;
    end else begin
        weights_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        weights_blk_n_R = m_axi_weights_RVALID;
    end else begin
        weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weights_oc_ce0 = 1'b1;
    end else begin
        weights_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weights_oc_we0 = 1'b1;
    end else begin
        weights_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_147_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_171_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_214_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if ((~((exitcond_fu_258_p2 == 1'd0) & (m_axi_weights_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state12) & (exitcond_fu_258_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((exitcond_fu_258_p2 == 1'd0) & (m_axi_weights_RVALID == 1'b0)) & (exitcond_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state12 = ((exitcond_fu_258_p2 == 1'd0) & (m_axi_weights_RVALID == 1'b0));
end

assign exitcond1_fu_214_p2 = ((j_reg_121 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_171_p2 = ((l_reg_110 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond3_fu_147_p2 = ((i_reg_99 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_258_p2 = ((k_reg_132 == 3'd5) ? 1'b1 : 1'b0);

assign i_1_fu_153_p2 = (i_reg_99 + 7'd1);

assign j_1_fu_220_p2 = (j_reg_121 + 3'd1);

assign k_1_fu_264_p2 = (k_reg_132 + 3'd1);

assign l_1_fu_177_p2 = (l_reg_110 + 5'd1);

assign m_axi_weights_ARADDR = weights_addr_reg_323;

assign m_axi_weights_ARBURST = 2'd0;

assign m_axi_weights_ARCACHE = 4'd0;

assign m_axi_weights_ARID = 1'd0;

assign m_axi_weights_ARLEN = 32'd5;

assign m_axi_weights_ARLOCK = 2'd0;

assign m_axi_weights_ARPROT = 3'd0;

assign m_axi_weights_ARQOS = 4'd0;

assign m_axi_weights_ARREGION = 4'd0;

assign m_axi_weights_ARSIZE = 3'd0;

assign m_axi_weights_ARUSER = 1'd0;

assign m_axi_weights_AWADDR = 32'd0;

assign m_axi_weights_AWBURST = 2'd0;

assign m_axi_weights_AWCACHE = 4'd0;

assign m_axi_weights_AWID = 1'd0;

assign m_axi_weights_AWLEN = 32'd0;

assign m_axi_weights_AWLOCK = 2'd0;

assign m_axi_weights_AWPROT = 3'd0;

assign m_axi_weights_AWQOS = 4'd0;

assign m_axi_weights_AWREGION = 4'd0;

assign m_axi_weights_AWSIZE = 3'd0;

assign m_axi_weights_AWUSER = 1'd0;

assign m_axi_weights_AWVALID = 1'b0;

assign m_axi_weights_BREADY = 1'b0;

assign m_axi_weights_WDATA = 32'd0;

assign m_axi_weights_WID = 1'd0;

assign m_axi_weights_WLAST = 1'b0;

assign m_axi_weights_WSTRB = 4'd0;

assign m_axi_weights_WUSER = 1'd0;

assign m_axi_weights_WVALID = 1'b0;

assign p_shl_fu_204_p1 = tmp_1_fu_196_p3;

assign sext_fu_143_p1 = weights_offset;

assign tmp_1_cast_fu_167_p1 = tmp_fu_159_p3;

assign tmp_1_fu_196_p3 = {{tmp_3_fu_187_p2}, {2'd0}};

assign tmp_2_cast_fu_183_p1 = l_reg_110;

assign tmp_2_fu_235_p2 = tmp_8_fu_230_p2 << 64'd2;

assign tmp_3_cast_fu_192_p1 = tmp_3_fu_187_p2;

assign tmp_3_fu_187_p2 = (tmp_1_cast_reg_292 + tmp_2_cast_fu_183_p1);

assign tmp_4_fu_226_p1 = j_reg_121;

assign tmp_5_fu_247_p2 = (sext_reg_279 + tmp_s_fu_241_p2);

assign tmp_6_fu_270_p1 = k_reg_132;

assign tmp_7_fu_208_p2 = (tmp_3_cast_fu_192_p1 + p_shl_fu_204_p1);

assign tmp_8_fu_230_p2 = (tmp_7_reg_305 + tmp_4_fu_226_p1);

assign tmp_9_fu_274_p2 = (tmp_6_fu_270_p1 + tmp_s_reg_318);

assign tmp_fu_159_p3 = {{i_reg_99}, {4'd0}};

assign tmp_s_fu_241_p2 = (tmp_8_fu_230_p2 + tmp_2_fu_235_p2);

assign weights_oc_address0 = tmp_9_reg_337;

assign weights_oc_d0 = weights_addr_read_reg_342;

always @ (posedge ap_clk) begin
    sext_reg_279[63:30] <= 34'b0000000000000000000000000000000000;
    tmp_1_cast_reg_292[3:0] <= 4'b0000;
    tmp_1_cast_reg_292[11] <= 1'b0;
end

endmodule //store_weights_5
