// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_11_fu_102_p2;
reg   [2:0] i_11_reg_263;
wire    ap_CS_fsm_state2;
wire  signed [8:0] tmp_48_cast_fu_138_p1;
reg  signed [8:0] tmp_48_cast_reg_268;
wire   [0:0] exitcond2_fu_96_p2;
wire   [3:0] j_7_fu_148_p2;
reg   [3:0] j_7_reg_276;
wire    ap_CS_fsm_state3;
wire   [11:0] tmp_33_fu_187_p2;
reg   [11:0] tmp_33_reg_281;
wire   [0:0] exitcond1_fu_142_p2;
wire   [3:0] k_6_fu_199_p2;
reg   [3:0] k_6_reg_289;
wire    ap_CS_fsm_state4;
reg   [10:0] output_addr_reg_294;
wire   [0:0] exitcond_fu_193_p2;
reg   [31:0] output_load_reg_299;
wire    ap_CS_fsm_state5;
reg   [2:0] i_reg_58;
reg   [3:0] j_reg_69;
reg   [3:0] k_reg_80;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_53_cast_fu_214_p1;
wire   [0:0] tmp_15_fu_254_p2;
wire   [6:0] tmp_fu_108_p3;
wire   [3:0] tmp_s_fu_120_p3;
wire   [7:0] p_shl_cast_fu_116_p1;
wire   [7:0] p_shl1_cast_fu_128_p1;
wire   [7:0] tmp_31_fu_132_p2;
wire   [8:0] tmp_cast_fu_154_p1;
wire   [8:0] tmp_32_fu_158_p2;
wire   [7:0] tmp_18_fu_163_p1;
wire   [9:0] tmp_19_fu_175_p3;
wire   [11:0] p_shl2_cast_fu_167_p3;
wire  signed [11:0] p_shl3_cast_fu_183_p1;
wire   [11:0] tmp_9_cast_fu_205_p1;
wire   [11:0] tmp_34_fu_209_p2;
wire   [31:0] output_load_to_int_fu_219_p1;
wire   [7:0] tmp_11_fu_222_p4;
wire   [22:0] tmp_20_fu_232_p1;
wire   [0:0] notrhs_fu_242_p2;
wire   [0:0] notlhs_fu_236_p2;
wire   [0:0] tmp_13_fu_248_p2;
wire   [0:0] tmp_14_fu_91_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

conv1_fcmp_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv1_fcmp_32ns_3dEe_U38(
    .din0(output_load_reg_299),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_14_fu_91_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_58 <= i_11_reg_263;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_58 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_69 <= j_7_reg_276;
    end else if (((exitcond2_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_69 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_80 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        k_reg_80 <= k_6_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_11_reg_263 <= i_11_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_7_reg_276 <= j_7_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_6_reg_289 <= k_6_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        output_addr_reg_294 <= tmp_53_cast_fu_214_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_load_reg_299 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_33_reg_281[11 : 1] <= tmp_33_fu_187_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_48_cast_reg_268[8 : 1] <= tmp_48_cast_fu_138_p1[8 : 1];
    end
end

always @ (*) begin
    if ((((exitcond2_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = output_addr_reg_294;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = tmp_53_cast_fu_214_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_15_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_96_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign exitcond1_fu_142_p2 = ((j_reg_69 == 4'd14) ? 1'b1 : 1'b0);

assign exitcond2_fu_96_p2 = ((i_reg_58 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_fu_193_p2 = ((k_reg_80 == 4'd14) ? 1'b1 : 1'b0);

assign i_11_fu_102_p2 = (i_reg_58 + 3'd1);

assign j_7_fu_148_p2 = (j_reg_69 + 4'd1);

assign k_6_fu_199_p2 = (k_reg_80 + 4'd1);

assign notlhs_fu_236_p2 = ((tmp_11_fu_222_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_242_p2 = ((tmp_20_fu_232_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_load_to_int_fu_219_p1 = output_load_reg_299;

assign output_r_d0 = 32'd0;

assign p_shl1_cast_fu_128_p1 = tmp_s_fu_120_p3;

assign p_shl2_cast_fu_167_p3 = {{tmp_18_fu_163_p1}, {4'd0}};

assign p_shl3_cast_fu_183_p1 = $signed(tmp_19_fu_175_p3);

assign p_shl_cast_fu_116_p1 = tmp_fu_108_p3;

assign tmp_11_fu_222_p4 = {{output_load_to_int_fu_219_p1[30:23]}};

assign tmp_13_fu_248_p2 = (notrhs_fu_242_p2 | notlhs_fu_236_p2);

assign tmp_15_fu_254_p2 = (tmp_14_fu_91_p2 & tmp_13_fu_248_p2);

assign tmp_18_fu_163_p1 = tmp_32_fu_158_p2[7:0];

assign tmp_19_fu_175_p3 = {{tmp_32_fu_158_p2}, {1'd0}};

assign tmp_20_fu_232_p1 = output_load_to_int_fu_219_p1[22:0];

assign tmp_31_fu_132_p2 = (p_shl_cast_fu_116_p1 - p_shl1_cast_fu_128_p1);

assign tmp_32_fu_158_p2 = ($signed(tmp_48_cast_reg_268) + $signed(tmp_cast_fu_154_p1));

assign tmp_33_fu_187_p2 = ($signed(p_shl2_cast_fu_167_p3) - $signed(p_shl3_cast_fu_183_p1));

assign tmp_34_fu_209_p2 = (tmp_33_reg_281 + tmp_9_cast_fu_205_p1);

assign tmp_48_cast_fu_138_p1 = $signed(tmp_31_fu_132_p2);

assign tmp_53_cast_fu_214_p1 = tmp_34_fu_209_p2;

assign tmp_9_cast_fu_205_p1 = k_reg_80;

assign tmp_cast_fu_154_p1 = j_reg_69;

assign tmp_fu_108_p3 = {{i_reg_58}, {4'd0}};

assign tmp_s_fu_120_p3 = {{i_reg_58}, {1'd0}};

always @ (posedge ap_clk) begin
    tmp_48_cast_reg_268[0] <= 1'b0;
    tmp_33_reg_281[0] <= 1'b0;
end

endmodule //relu_2
