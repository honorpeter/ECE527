// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv1,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.570950,HLS_SYN_LAT=527161,HLS_SYN_TPT=none,HLS_SYN_MEM=177,HLS_SYN_DSP=33,HLS_SYN_FF=28858,HLS_SYN_LUT=32857,HLS_VERSION=2018_2}" *)

module conv1 (
        ap_clk,
        ap_rst_n,
        m_axi_DATA_INPUT_AWVALID,
        m_axi_DATA_INPUT_AWREADY,
        m_axi_DATA_INPUT_AWADDR,
        m_axi_DATA_INPUT_AWID,
        m_axi_DATA_INPUT_AWLEN,
        m_axi_DATA_INPUT_AWSIZE,
        m_axi_DATA_INPUT_AWBURST,
        m_axi_DATA_INPUT_AWLOCK,
        m_axi_DATA_INPUT_AWCACHE,
        m_axi_DATA_INPUT_AWPROT,
        m_axi_DATA_INPUT_AWQOS,
        m_axi_DATA_INPUT_AWREGION,
        m_axi_DATA_INPUT_AWUSER,
        m_axi_DATA_INPUT_WVALID,
        m_axi_DATA_INPUT_WREADY,
        m_axi_DATA_INPUT_WDATA,
        m_axi_DATA_INPUT_WSTRB,
        m_axi_DATA_INPUT_WLAST,
        m_axi_DATA_INPUT_WID,
        m_axi_DATA_INPUT_WUSER,
        m_axi_DATA_INPUT_ARVALID,
        m_axi_DATA_INPUT_ARREADY,
        m_axi_DATA_INPUT_ARADDR,
        m_axi_DATA_INPUT_ARID,
        m_axi_DATA_INPUT_ARLEN,
        m_axi_DATA_INPUT_ARSIZE,
        m_axi_DATA_INPUT_ARBURST,
        m_axi_DATA_INPUT_ARLOCK,
        m_axi_DATA_INPUT_ARCACHE,
        m_axi_DATA_INPUT_ARPROT,
        m_axi_DATA_INPUT_ARQOS,
        m_axi_DATA_INPUT_ARREGION,
        m_axi_DATA_INPUT_ARUSER,
        m_axi_DATA_INPUT_RVALID,
        m_axi_DATA_INPUT_RREADY,
        m_axi_DATA_INPUT_RDATA,
        m_axi_DATA_INPUT_RLAST,
        m_axi_DATA_INPUT_RID,
        m_axi_DATA_INPUT_RUSER,
        m_axi_DATA_INPUT_RRESP,
        m_axi_DATA_INPUT_BVALID,
        m_axi_DATA_INPUT_BREADY,
        m_axi_DATA_INPUT_BRESP,
        m_axi_DATA_INPUT_BID,
        m_axi_DATA_INPUT_BUSER,
        m_axi_DATA_WEIGHT_AWVALID,
        m_axi_DATA_WEIGHT_AWREADY,
        m_axi_DATA_WEIGHT_AWADDR,
        m_axi_DATA_WEIGHT_AWID,
        m_axi_DATA_WEIGHT_AWLEN,
        m_axi_DATA_WEIGHT_AWSIZE,
        m_axi_DATA_WEIGHT_AWBURST,
        m_axi_DATA_WEIGHT_AWLOCK,
        m_axi_DATA_WEIGHT_AWCACHE,
        m_axi_DATA_WEIGHT_AWPROT,
        m_axi_DATA_WEIGHT_AWQOS,
        m_axi_DATA_WEIGHT_AWREGION,
        m_axi_DATA_WEIGHT_AWUSER,
        m_axi_DATA_WEIGHT_WVALID,
        m_axi_DATA_WEIGHT_WREADY,
        m_axi_DATA_WEIGHT_WDATA,
        m_axi_DATA_WEIGHT_WSTRB,
        m_axi_DATA_WEIGHT_WLAST,
        m_axi_DATA_WEIGHT_WID,
        m_axi_DATA_WEIGHT_WUSER,
        m_axi_DATA_WEIGHT_ARVALID,
        m_axi_DATA_WEIGHT_ARREADY,
        m_axi_DATA_WEIGHT_ARADDR,
        m_axi_DATA_WEIGHT_ARID,
        m_axi_DATA_WEIGHT_ARLEN,
        m_axi_DATA_WEIGHT_ARSIZE,
        m_axi_DATA_WEIGHT_ARBURST,
        m_axi_DATA_WEIGHT_ARLOCK,
        m_axi_DATA_WEIGHT_ARCACHE,
        m_axi_DATA_WEIGHT_ARPROT,
        m_axi_DATA_WEIGHT_ARQOS,
        m_axi_DATA_WEIGHT_ARREGION,
        m_axi_DATA_WEIGHT_ARUSER,
        m_axi_DATA_WEIGHT_RVALID,
        m_axi_DATA_WEIGHT_RREADY,
        m_axi_DATA_WEIGHT_RDATA,
        m_axi_DATA_WEIGHT_RLAST,
        m_axi_DATA_WEIGHT_RID,
        m_axi_DATA_WEIGHT_RUSER,
        m_axi_DATA_WEIGHT_RRESP,
        m_axi_DATA_WEIGHT_BVALID,
        m_axi_DATA_WEIGHT_BREADY,
        m_axi_DATA_WEIGHT_BRESP,
        m_axi_DATA_WEIGHT_BID,
        m_axi_DATA_WEIGHT_BUSER,
        m_axi_DATA_BIAS_AWVALID,
        m_axi_DATA_BIAS_AWREADY,
        m_axi_DATA_BIAS_AWADDR,
        m_axi_DATA_BIAS_AWID,
        m_axi_DATA_BIAS_AWLEN,
        m_axi_DATA_BIAS_AWSIZE,
        m_axi_DATA_BIAS_AWBURST,
        m_axi_DATA_BIAS_AWLOCK,
        m_axi_DATA_BIAS_AWCACHE,
        m_axi_DATA_BIAS_AWPROT,
        m_axi_DATA_BIAS_AWQOS,
        m_axi_DATA_BIAS_AWREGION,
        m_axi_DATA_BIAS_AWUSER,
        m_axi_DATA_BIAS_WVALID,
        m_axi_DATA_BIAS_WREADY,
        m_axi_DATA_BIAS_WDATA,
        m_axi_DATA_BIAS_WSTRB,
        m_axi_DATA_BIAS_WLAST,
        m_axi_DATA_BIAS_WID,
        m_axi_DATA_BIAS_WUSER,
        m_axi_DATA_BIAS_ARVALID,
        m_axi_DATA_BIAS_ARREADY,
        m_axi_DATA_BIAS_ARADDR,
        m_axi_DATA_BIAS_ARID,
        m_axi_DATA_BIAS_ARLEN,
        m_axi_DATA_BIAS_ARSIZE,
        m_axi_DATA_BIAS_ARBURST,
        m_axi_DATA_BIAS_ARLOCK,
        m_axi_DATA_BIAS_ARCACHE,
        m_axi_DATA_BIAS_ARPROT,
        m_axi_DATA_BIAS_ARQOS,
        m_axi_DATA_BIAS_ARREGION,
        m_axi_DATA_BIAS_ARUSER,
        m_axi_DATA_BIAS_RVALID,
        m_axi_DATA_BIAS_RREADY,
        m_axi_DATA_BIAS_RDATA,
        m_axi_DATA_BIAS_RLAST,
        m_axi_DATA_BIAS_RID,
        m_axi_DATA_BIAS_RUSER,
        m_axi_DATA_BIAS_RRESP,
        m_axi_DATA_BIAS_BVALID,
        m_axi_DATA_BIAS_BREADY,
        m_axi_DATA_BIAS_BRESP,
        m_axi_DATA_BIAS_BID,
        m_axi_DATA_BIAS_BUSER,
        m_axi_DATA_OUTPUT_AWVALID,
        m_axi_DATA_OUTPUT_AWREADY,
        m_axi_DATA_OUTPUT_AWADDR,
        m_axi_DATA_OUTPUT_AWID,
        m_axi_DATA_OUTPUT_AWLEN,
        m_axi_DATA_OUTPUT_AWSIZE,
        m_axi_DATA_OUTPUT_AWBURST,
        m_axi_DATA_OUTPUT_AWLOCK,
        m_axi_DATA_OUTPUT_AWCACHE,
        m_axi_DATA_OUTPUT_AWPROT,
        m_axi_DATA_OUTPUT_AWQOS,
        m_axi_DATA_OUTPUT_AWREGION,
        m_axi_DATA_OUTPUT_AWUSER,
        m_axi_DATA_OUTPUT_WVALID,
        m_axi_DATA_OUTPUT_WREADY,
        m_axi_DATA_OUTPUT_WDATA,
        m_axi_DATA_OUTPUT_WSTRB,
        m_axi_DATA_OUTPUT_WLAST,
        m_axi_DATA_OUTPUT_WID,
        m_axi_DATA_OUTPUT_WUSER,
        m_axi_DATA_OUTPUT_ARVALID,
        m_axi_DATA_OUTPUT_ARREADY,
        m_axi_DATA_OUTPUT_ARADDR,
        m_axi_DATA_OUTPUT_ARID,
        m_axi_DATA_OUTPUT_ARLEN,
        m_axi_DATA_OUTPUT_ARSIZE,
        m_axi_DATA_OUTPUT_ARBURST,
        m_axi_DATA_OUTPUT_ARLOCK,
        m_axi_DATA_OUTPUT_ARCACHE,
        m_axi_DATA_OUTPUT_ARPROT,
        m_axi_DATA_OUTPUT_ARQOS,
        m_axi_DATA_OUTPUT_ARREGION,
        m_axi_DATA_OUTPUT_ARUSER,
        m_axi_DATA_OUTPUT_RVALID,
        m_axi_DATA_OUTPUT_RREADY,
        m_axi_DATA_OUTPUT_RDATA,
        m_axi_DATA_OUTPUT_RLAST,
        m_axi_DATA_OUTPUT_RID,
        m_axi_DATA_OUTPUT_RUSER,
        m_axi_DATA_OUTPUT_RRESP,
        m_axi_DATA_OUTPUT_BVALID,
        m_axi_DATA_OUTPUT_BREADY,
        m_axi_DATA_OUTPUT_BRESP,
        m_axi_DATA_OUTPUT_BID,
        m_axi_DATA_OUTPUT_BUSER,
        s_axi_CTL_AWVALID,
        s_axi_CTL_AWREADY,
        s_axi_CTL_AWADDR,
        s_axi_CTL_WVALID,
        s_axi_CTL_WREADY,
        s_axi_CTL_WDATA,
        s_axi_CTL_WSTRB,
        s_axi_CTL_ARVALID,
        s_axi_CTL_ARREADY,
        s_axi_CTL_ARADDR,
        s_axi_CTL_RVALID,
        s_axi_CTL_RREADY,
        s_axi_CTL_RDATA,
        s_axi_CTL_RRESP,
        s_axi_CTL_BVALID,
        s_axi_CTL_BREADY,
        s_axi_CTL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;
parameter    C_S_AXI_CTL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_INPUT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_INPUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_INPUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_INPUT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_INPUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_WEIGHT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_WEIGHT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_WEIGHT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_WEIGHT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_BIAS_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_BIAS_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BIAS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_USER_VALUE = 0;
parameter    C_M_AXI_DATA_BIAS_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_BIAS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_OUTPUT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_OUTPUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_OUTPUT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_OUTPUT_CACHE_VALUE = 3;

parameter C_S_AXI_CTL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_INPUT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_WEIGHT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_BIAS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_OUTPUT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DATA_INPUT_AWVALID;
input   m_axi_DATA_INPUT_AWREADY;
output  [C_M_AXI_DATA_INPUT_ADDR_WIDTH - 1:0] m_axi_DATA_INPUT_AWADDR;
output  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_AWID;
output  [7:0] m_axi_DATA_INPUT_AWLEN;
output  [2:0] m_axi_DATA_INPUT_AWSIZE;
output  [1:0] m_axi_DATA_INPUT_AWBURST;
output  [1:0] m_axi_DATA_INPUT_AWLOCK;
output  [3:0] m_axi_DATA_INPUT_AWCACHE;
output  [2:0] m_axi_DATA_INPUT_AWPROT;
output  [3:0] m_axi_DATA_INPUT_AWQOS;
output  [3:0] m_axi_DATA_INPUT_AWREGION;
output  [C_M_AXI_DATA_INPUT_AWUSER_WIDTH - 1:0] m_axi_DATA_INPUT_AWUSER;
output   m_axi_DATA_INPUT_WVALID;
input   m_axi_DATA_INPUT_WREADY;
output  [C_M_AXI_DATA_INPUT_DATA_WIDTH - 1:0] m_axi_DATA_INPUT_WDATA;
output  [C_M_AXI_DATA_INPUT_WSTRB_WIDTH - 1:0] m_axi_DATA_INPUT_WSTRB;
output   m_axi_DATA_INPUT_WLAST;
output  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_WID;
output  [C_M_AXI_DATA_INPUT_WUSER_WIDTH - 1:0] m_axi_DATA_INPUT_WUSER;
output   m_axi_DATA_INPUT_ARVALID;
input   m_axi_DATA_INPUT_ARREADY;
output  [C_M_AXI_DATA_INPUT_ADDR_WIDTH - 1:0] m_axi_DATA_INPUT_ARADDR;
output  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_ARID;
output  [7:0] m_axi_DATA_INPUT_ARLEN;
output  [2:0] m_axi_DATA_INPUT_ARSIZE;
output  [1:0] m_axi_DATA_INPUT_ARBURST;
output  [1:0] m_axi_DATA_INPUT_ARLOCK;
output  [3:0] m_axi_DATA_INPUT_ARCACHE;
output  [2:0] m_axi_DATA_INPUT_ARPROT;
output  [3:0] m_axi_DATA_INPUT_ARQOS;
output  [3:0] m_axi_DATA_INPUT_ARREGION;
output  [C_M_AXI_DATA_INPUT_ARUSER_WIDTH - 1:0] m_axi_DATA_INPUT_ARUSER;
input   m_axi_DATA_INPUT_RVALID;
output   m_axi_DATA_INPUT_RREADY;
input  [C_M_AXI_DATA_INPUT_DATA_WIDTH - 1:0] m_axi_DATA_INPUT_RDATA;
input   m_axi_DATA_INPUT_RLAST;
input  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_RID;
input  [C_M_AXI_DATA_INPUT_RUSER_WIDTH - 1:0] m_axi_DATA_INPUT_RUSER;
input  [1:0] m_axi_DATA_INPUT_RRESP;
input   m_axi_DATA_INPUT_BVALID;
output   m_axi_DATA_INPUT_BREADY;
input  [1:0] m_axi_DATA_INPUT_BRESP;
input  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_BID;
input  [C_M_AXI_DATA_INPUT_BUSER_WIDTH - 1:0] m_axi_DATA_INPUT_BUSER;
output   m_axi_DATA_WEIGHT_AWVALID;
input   m_axi_DATA_WEIGHT_AWREADY;
output  [C_M_AXI_DATA_WEIGHT_ADDR_WIDTH - 1:0] m_axi_DATA_WEIGHT_AWADDR;
output  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_AWID;
output  [7:0] m_axi_DATA_WEIGHT_AWLEN;
output  [2:0] m_axi_DATA_WEIGHT_AWSIZE;
output  [1:0] m_axi_DATA_WEIGHT_AWBURST;
output  [1:0] m_axi_DATA_WEIGHT_AWLOCK;
output  [3:0] m_axi_DATA_WEIGHT_AWCACHE;
output  [2:0] m_axi_DATA_WEIGHT_AWPROT;
output  [3:0] m_axi_DATA_WEIGHT_AWQOS;
output  [3:0] m_axi_DATA_WEIGHT_AWREGION;
output  [C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_AWUSER;
output   m_axi_DATA_WEIGHT_WVALID;
input   m_axi_DATA_WEIGHT_WREADY;
output  [C_M_AXI_DATA_WEIGHT_DATA_WIDTH - 1:0] m_axi_DATA_WEIGHT_WDATA;
output  [C_M_AXI_DATA_WEIGHT_WSTRB_WIDTH - 1:0] m_axi_DATA_WEIGHT_WSTRB;
output   m_axi_DATA_WEIGHT_WLAST;
output  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_WID;
output  [C_M_AXI_DATA_WEIGHT_WUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_WUSER;
output   m_axi_DATA_WEIGHT_ARVALID;
input   m_axi_DATA_WEIGHT_ARREADY;
output  [C_M_AXI_DATA_WEIGHT_ADDR_WIDTH - 1:0] m_axi_DATA_WEIGHT_ARADDR;
output  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_ARID;
output  [7:0] m_axi_DATA_WEIGHT_ARLEN;
output  [2:0] m_axi_DATA_WEIGHT_ARSIZE;
output  [1:0] m_axi_DATA_WEIGHT_ARBURST;
output  [1:0] m_axi_DATA_WEIGHT_ARLOCK;
output  [3:0] m_axi_DATA_WEIGHT_ARCACHE;
output  [2:0] m_axi_DATA_WEIGHT_ARPROT;
output  [3:0] m_axi_DATA_WEIGHT_ARQOS;
output  [3:0] m_axi_DATA_WEIGHT_ARREGION;
output  [C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_ARUSER;
input   m_axi_DATA_WEIGHT_RVALID;
output   m_axi_DATA_WEIGHT_RREADY;
input  [C_M_AXI_DATA_WEIGHT_DATA_WIDTH - 1:0] m_axi_DATA_WEIGHT_RDATA;
input   m_axi_DATA_WEIGHT_RLAST;
input  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_RID;
input  [C_M_AXI_DATA_WEIGHT_RUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_RUSER;
input  [1:0] m_axi_DATA_WEIGHT_RRESP;
input   m_axi_DATA_WEIGHT_BVALID;
output   m_axi_DATA_WEIGHT_BREADY;
input  [1:0] m_axi_DATA_WEIGHT_BRESP;
input  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_BID;
input  [C_M_AXI_DATA_WEIGHT_BUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_BUSER;
output   m_axi_DATA_BIAS_AWVALID;
input   m_axi_DATA_BIAS_AWREADY;
output  [C_M_AXI_DATA_BIAS_ADDR_WIDTH - 1:0] m_axi_DATA_BIAS_AWADDR;
output  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_AWID;
output  [7:0] m_axi_DATA_BIAS_AWLEN;
output  [2:0] m_axi_DATA_BIAS_AWSIZE;
output  [1:0] m_axi_DATA_BIAS_AWBURST;
output  [1:0] m_axi_DATA_BIAS_AWLOCK;
output  [3:0] m_axi_DATA_BIAS_AWCACHE;
output  [2:0] m_axi_DATA_BIAS_AWPROT;
output  [3:0] m_axi_DATA_BIAS_AWQOS;
output  [3:0] m_axi_DATA_BIAS_AWREGION;
output  [C_M_AXI_DATA_BIAS_AWUSER_WIDTH - 1:0] m_axi_DATA_BIAS_AWUSER;
output   m_axi_DATA_BIAS_WVALID;
input   m_axi_DATA_BIAS_WREADY;
output  [C_M_AXI_DATA_BIAS_DATA_WIDTH - 1:0] m_axi_DATA_BIAS_WDATA;
output  [C_M_AXI_DATA_BIAS_WSTRB_WIDTH - 1:0] m_axi_DATA_BIAS_WSTRB;
output   m_axi_DATA_BIAS_WLAST;
output  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_WID;
output  [C_M_AXI_DATA_BIAS_WUSER_WIDTH - 1:0] m_axi_DATA_BIAS_WUSER;
output   m_axi_DATA_BIAS_ARVALID;
input   m_axi_DATA_BIAS_ARREADY;
output  [C_M_AXI_DATA_BIAS_ADDR_WIDTH - 1:0] m_axi_DATA_BIAS_ARADDR;
output  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_ARID;
output  [7:0] m_axi_DATA_BIAS_ARLEN;
output  [2:0] m_axi_DATA_BIAS_ARSIZE;
output  [1:0] m_axi_DATA_BIAS_ARBURST;
output  [1:0] m_axi_DATA_BIAS_ARLOCK;
output  [3:0] m_axi_DATA_BIAS_ARCACHE;
output  [2:0] m_axi_DATA_BIAS_ARPROT;
output  [3:0] m_axi_DATA_BIAS_ARQOS;
output  [3:0] m_axi_DATA_BIAS_ARREGION;
output  [C_M_AXI_DATA_BIAS_ARUSER_WIDTH - 1:0] m_axi_DATA_BIAS_ARUSER;
input   m_axi_DATA_BIAS_RVALID;
output   m_axi_DATA_BIAS_RREADY;
input  [C_M_AXI_DATA_BIAS_DATA_WIDTH - 1:0] m_axi_DATA_BIAS_RDATA;
input   m_axi_DATA_BIAS_RLAST;
input  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_RID;
input  [C_M_AXI_DATA_BIAS_RUSER_WIDTH - 1:0] m_axi_DATA_BIAS_RUSER;
input  [1:0] m_axi_DATA_BIAS_RRESP;
input   m_axi_DATA_BIAS_BVALID;
output   m_axi_DATA_BIAS_BREADY;
input  [1:0] m_axi_DATA_BIAS_BRESP;
input  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_BID;
input  [C_M_AXI_DATA_BIAS_BUSER_WIDTH - 1:0] m_axi_DATA_BIAS_BUSER;
output   m_axi_DATA_OUTPUT_AWVALID;
input   m_axi_DATA_OUTPUT_AWREADY;
output  [C_M_AXI_DATA_OUTPUT_ADDR_WIDTH - 1:0] m_axi_DATA_OUTPUT_AWADDR;
output  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_AWID;
output  [7:0] m_axi_DATA_OUTPUT_AWLEN;
output  [2:0] m_axi_DATA_OUTPUT_AWSIZE;
output  [1:0] m_axi_DATA_OUTPUT_AWBURST;
output  [1:0] m_axi_DATA_OUTPUT_AWLOCK;
output  [3:0] m_axi_DATA_OUTPUT_AWCACHE;
output  [2:0] m_axi_DATA_OUTPUT_AWPROT;
output  [3:0] m_axi_DATA_OUTPUT_AWQOS;
output  [3:0] m_axi_DATA_OUTPUT_AWREGION;
output  [C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_AWUSER;
output   m_axi_DATA_OUTPUT_WVALID;
input   m_axi_DATA_OUTPUT_WREADY;
output  [C_M_AXI_DATA_OUTPUT_DATA_WIDTH - 1:0] m_axi_DATA_OUTPUT_WDATA;
output  [C_M_AXI_DATA_OUTPUT_WSTRB_WIDTH - 1:0] m_axi_DATA_OUTPUT_WSTRB;
output   m_axi_DATA_OUTPUT_WLAST;
output  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_WID;
output  [C_M_AXI_DATA_OUTPUT_WUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_WUSER;
output   m_axi_DATA_OUTPUT_ARVALID;
input   m_axi_DATA_OUTPUT_ARREADY;
output  [C_M_AXI_DATA_OUTPUT_ADDR_WIDTH - 1:0] m_axi_DATA_OUTPUT_ARADDR;
output  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_ARID;
output  [7:0] m_axi_DATA_OUTPUT_ARLEN;
output  [2:0] m_axi_DATA_OUTPUT_ARSIZE;
output  [1:0] m_axi_DATA_OUTPUT_ARBURST;
output  [1:0] m_axi_DATA_OUTPUT_ARLOCK;
output  [3:0] m_axi_DATA_OUTPUT_ARCACHE;
output  [2:0] m_axi_DATA_OUTPUT_ARPROT;
output  [3:0] m_axi_DATA_OUTPUT_ARQOS;
output  [3:0] m_axi_DATA_OUTPUT_ARREGION;
output  [C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_ARUSER;
input   m_axi_DATA_OUTPUT_RVALID;
output   m_axi_DATA_OUTPUT_RREADY;
input  [C_M_AXI_DATA_OUTPUT_DATA_WIDTH - 1:0] m_axi_DATA_OUTPUT_RDATA;
input   m_axi_DATA_OUTPUT_RLAST;
input  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_RID;
input  [C_M_AXI_DATA_OUTPUT_RUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_RUSER;
input  [1:0] m_axi_DATA_OUTPUT_RRESP;
input   m_axi_DATA_OUTPUT_BVALID;
output   m_axi_DATA_OUTPUT_BREADY;
input  [1:0] m_axi_DATA_OUTPUT_BRESP;
input  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_BID;
input  [C_M_AXI_DATA_OUTPUT_BUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_BUSER;
input   s_axi_CTL_AWVALID;
output   s_axi_CTL_AWREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_AWADDR;
input   s_axi_CTL_WVALID;
output   s_axi_CTL_WREADY;
input  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_WDATA;
input  [C_S_AXI_CTL_WSTRB_WIDTH - 1:0] s_axi_CTL_WSTRB;
input   s_axi_CTL_ARVALID;
output   s_axi_CTL_ARREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_ARADDR;
output   s_axi_CTL_RVALID;
input   s_axi_CTL_RREADY;
output  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_RDATA;
output  [1:0] s_axi_CTL_RRESP;
output   s_axi_CTL_BVALID;
input   s_axi_CTL_BREADY;
output  [1:0] s_axi_CTL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] weights;
wire   [31:0] weights_3;
wire   [31:0] weights_5;
wire   [31:0] weights_6;
wire   [31:0] bias;
wire   [31:0] bias_3;
wire   [31:0] bias_5;
wire   [31:0] bias_6;
wire   [31:0] output_r;
wire   [31:0] ap_return;
wire    DATA_INPUT_AWREADY;
wire    DATA_INPUT_WREADY;
reg    DATA_INPUT_ARVALID;
wire    DATA_INPUT_ARREADY;
wire    DATA_INPUT_RVALID;
reg    DATA_INPUT_RREADY;
wire   [31:0] DATA_INPUT_RDATA;
wire    DATA_INPUT_RLAST;
wire   [0:0] DATA_INPUT_RID;
wire   [0:0] DATA_INPUT_RUSER;
wire   [1:0] DATA_INPUT_RRESP;
wire    DATA_INPUT_BVALID;
wire   [1:0] DATA_INPUT_BRESP;
wire   [0:0] DATA_INPUT_BID;
wire   [0:0] DATA_INPUT_BUSER;
wire    DATA_WEIGHT_AWREADY;
wire    DATA_WEIGHT_WREADY;
reg    DATA_WEIGHT_ARVALID;
wire    DATA_WEIGHT_ARREADY;
reg   [31:0] DATA_WEIGHT_ARADDR;
reg   [0:0] DATA_WEIGHT_ARID;
reg   [31:0] DATA_WEIGHT_ARLEN;
reg   [2:0] DATA_WEIGHT_ARSIZE;
reg   [1:0] DATA_WEIGHT_ARBURST;
reg   [1:0] DATA_WEIGHT_ARLOCK;
reg   [3:0] DATA_WEIGHT_ARCACHE;
reg   [2:0] DATA_WEIGHT_ARPROT;
reg   [3:0] DATA_WEIGHT_ARQOS;
reg   [3:0] DATA_WEIGHT_ARREGION;
reg   [0:0] DATA_WEIGHT_ARUSER;
wire    DATA_WEIGHT_RVALID;
reg    DATA_WEIGHT_RREADY;
wire   [31:0] DATA_WEIGHT_RDATA;
wire    DATA_WEIGHT_RLAST;
wire   [0:0] DATA_WEIGHT_RID;
wire   [0:0] DATA_WEIGHT_RUSER;
wire   [1:0] DATA_WEIGHT_RRESP;
wire    DATA_WEIGHT_BVALID;
wire   [1:0] DATA_WEIGHT_BRESP;
wire   [0:0] DATA_WEIGHT_BID;
wire   [0:0] DATA_WEIGHT_BUSER;
wire    DATA_BIAS_AWREADY;
wire    DATA_BIAS_WREADY;
reg    DATA_BIAS_ARVALID;
wire    DATA_BIAS_ARREADY;
reg   [31:0] DATA_BIAS_ARADDR;
reg   [0:0] DATA_BIAS_ARID;
reg   [31:0] DATA_BIAS_ARLEN;
reg   [2:0] DATA_BIAS_ARSIZE;
reg   [1:0] DATA_BIAS_ARBURST;
reg   [1:0] DATA_BIAS_ARLOCK;
reg   [3:0] DATA_BIAS_ARCACHE;
reg   [2:0] DATA_BIAS_ARPROT;
reg   [3:0] DATA_BIAS_ARQOS;
reg   [3:0] DATA_BIAS_ARREGION;
reg   [0:0] DATA_BIAS_ARUSER;
wire    DATA_BIAS_RVALID;
reg    DATA_BIAS_RREADY;
wire   [31:0] DATA_BIAS_RDATA;
wire    DATA_BIAS_RLAST;
wire   [0:0] DATA_BIAS_RID;
wire   [0:0] DATA_BIAS_RUSER;
wire   [1:0] DATA_BIAS_RRESP;
wire    DATA_BIAS_BVALID;
wire   [1:0] DATA_BIAS_BRESP;
wire   [0:0] DATA_BIAS_BID;
wire   [0:0] DATA_BIAS_BUSER;
reg    DATA_OUTPUT_AWVALID;
wire    DATA_OUTPUT_AWREADY;
reg    DATA_OUTPUT_WVALID;
wire    DATA_OUTPUT_WREADY;
wire    DATA_OUTPUT_ARREADY;
wire    DATA_OUTPUT_RVALID;
wire   [31:0] DATA_OUTPUT_RDATA;
wire    DATA_OUTPUT_RLAST;
wire   [0:0] DATA_OUTPUT_RID;
wire   [0:0] DATA_OUTPUT_RUSER;
wire   [1:0] DATA_OUTPUT_RRESP;
wire    DATA_OUTPUT_BVALID;
reg    DATA_OUTPUT_BREADY;
wire   [1:0] DATA_OUTPUT_BRESP;
wire   [0:0] DATA_OUTPUT_BID;
wire   [0:0] DATA_OUTPUT_BUSER;
reg   [29:0] output1_reg_713;
reg   [29:0] bias_s_reg_718;
reg   [29:0] bias_1_reg_723;
reg   [29:0] bias_2_reg_728;
reg   [29:0] bias1_reg_733;
reg   [29:0] weights_s_reg_738;
reg   [29:0] weights_1_reg_743;
reg   [29:0] weights_2_reg_748;
reg   [29:0] weights3_reg_753;
reg   [29:0] input1_reg_758;
wire   [6:0] i_fu_603_p2;
reg   [6:0] i_reg_766;
wire    ap_CS_fsm_state21;
reg   [6:0] output5_oc_0_0_add_reg_771;
wire   [0:0] exitcond2_i_fu_597_p2;
wire   [31:0] output5_oc_0_0_q0;
reg   [31:0] output5_oc_0_0_loa_reg_776;
wire    ap_CS_fsm_state22;
wire   [3:0] i_18_fu_661_p2;
reg   [3:0] i_18_reg_788;
wire    ap_CS_fsm_state25;
reg   [3:0] output6_oc_addr_reg_793;
wire   [0:0] exitcond_i1_fu_655_p2;
wire   [31:0] output6_oc_q0;
reg   [31:0] output6_oc_load_reg_798;
wire    ap_CS_fsm_state26;
reg   [9:0] input_oc_0_address0;
reg    input_oc_0_ce0;
reg    input_oc_0_we0;
wire   [31:0] input_oc_0_q0;
reg    input_oc_0_ce1;
wire   [31:0] input_oc_0_q1;
reg   [7:0] weights_oc_0_address0;
reg    weights_oc_0_ce0;
reg    weights_oc_0_we0;
wire   [31:0] weights_oc_0_q0;
reg    weights_oc_0_ce1;
wire   [31:0] weights_oc_0_q1;
reg   [11:0] weights_3_oc_address0;
reg    weights_3_oc_ce0;
reg    weights_3_oc_we0;
wire   [31:0] weights_3_oc_q0;
reg    weights_3_oc_ce1;
wire   [31:0] weights_3_oc_q1;
reg   [15:0] weights_5_oc_address0;
reg    weights_5_oc_ce0;
reg    weights_5_oc_we0;
wire   [31:0] weights_5_oc_q0;
reg   [2:0] bias_oc_address0;
reg    bias_oc_ce0;
reg    bias_oc_we0;
wire   [31:0] bias_oc_q0;
reg   [3:0] bias_3_oc_address0;
reg    bias_3_oc_ce0;
reg    bias_3_oc_we0;
wire   [31:0] bias_3_oc_q0;
reg   [6:0] bias_5_oc_address0;
reg    bias_5_oc_ce0;
reg    bias_5_oc_we0;
wire   [31:0] bias_5_oc_q0;
reg   [12:0] output1_oc_address0;
reg    output1_oc_ce0;
reg    output1_oc_we0;
reg   [31:0] output1_oc_d0;
wire   [31:0] output1_oc_q0;
reg   [10:0] output2_oc_address0;
reg    output2_oc_ce0;
reg    output2_oc_we0;
reg   [31:0] output2_oc_d0;
wire   [31:0] output2_oc_q0;
reg    output2_oc_ce1;
wire   [31:0] output2_oc_q1;
reg   [10:0] output3_oc_address0;
reg    output3_oc_ce0;
reg    output3_oc_we0;
reg   [31:0] output3_oc_d0;
wire   [31:0] output3_oc_q0;
reg   [8:0] output4_oc_address0;
reg    output4_oc_ce0;
reg    output4_oc_we0;
reg   [31:0] output4_oc_d0;
wire   [31:0] output4_oc_q0;
reg   [6:0] output5_oc_0_0_address0;
reg    output5_oc_0_0_ce0;
reg    output5_oc_0_0_we0;
reg   [31:0] output5_oc_0_0_d0;
reg   [3:0] output6_oc_address0;
reg    output6_oc_ce0;
reg    output6_oc_we0;
reg   [31:0] output6_oc_d0;
wire    grp_convolution_3_fu_354_ap_start;
wire    grp_convolution_3_fu_354_ap_done;
wire    grp_convolution_3_fu_354_ap_idle;
wire    grp_convolution_3_fu_354_ap_ready;
wire   [10:0] grp_convolution_3_fu_354_input_r_address0;
wire    grp_convolution_3_fu_354_input_r_ce0;
wire   [10:0] grp_convolution_3_fu_354_input_r_address1;
wire    grp_convolution_3_fu_354_input_r_ce1;
wire   [11:0] grp_convolution_3_fu_354_weights_address0;
wire    grp_convolution_3_fu_354_weights_ce0;
wire   [11:0] grp_convolution_3_fu_354_weights_address1;
wire    grp_convolution_3_fu_354_weights_ce1;
wire   [3:0] grp_convolution_3_fu_354_bias_address0;
wire    grp_convolution_3_fu_354_bias_ce0;
wire   [10:0] grp_convolution_3_fu_354_output_r_address0;
wire    grp_convolution_3_fu_354_output_r_ce0;
wire    grp_convolution_3_fu_354_output_r_we0;
wire   [31:0] grp_convolution_3_fu_354_output_r_d0;
wire    grp_convulution1_fu_362_ap_start;
wire    grp_convulution1_fu_362_ap_done;
wire    grp_convulution1_fu_362_ap_idle;
wire    grp_convulution1_fu_362_ap_ready;
wire   [9:0] grp_convulution1_fu_362_input_0_address0;
wire    grp_convulution1_fu_362_input_0_ce0;
wire   [9:0] grp_convulution1_fu_362_input_0_address1;
wire    grp_convulution1_fu_362_input_0_ce1;
wire   [7:0] grp_convulution1_fu_362_weights_0_address0;
wire    grp_convulution1_fu_362_weights_0_ce0;
wire   [7:0] grp_convulution1_fu_362_weights_0_address1;
wire    grp_convulution1_fu_362_weights_0_ce1;
wire   [2:0] grp_convulution1_fu_362_bias_address0;
wire    grp_convulution1_fu_362_bias_ce0;
wire   [12:0] grp_convulution1_fu_362_output_r_address0;
wire    grp_convulution1_fu_362_output_r_ce0;
wire    grp_convulution1_fu_362_output_r_we0;
wire   [31:0] grp_convulution1_fu_362_output_r_d0;
wire    grp_fc_6_fu_370_ap_start;
wire    grp_fc_6_fu_370_ap_done;
wire    grp_fc_6_fu_370_ap_idle;
wire    grp_fc_6_fu_370_ap_ready;
wire   [6:0] grp_fc_6_fu_370_input_0_0_address0;
wire    grp_fc_6_fu_370_input_0_0_ce0;
wire    grp_fc_6_fu_370_m_axi_weights_AWVALID;
wire   [31:0] grp_fc_6_fu_370_m_axi_weights_AWADDR;
wire   [0:0] grp_fc_6_fu_370_m_axi_weights_AWID;
wire   [31:0] grp_fc_6_fu_370_m_axi_weights_AWLEN;
wire   [2:0] grp_fc_6_fu_370_m_axi_weights_AWSIZE;
wire   [1:0] grp_fc_6_fu_370_m_axi_weights_AWBURST;
wire   [1:0] grp_fc_6_fu_370_m_axi_weights_AWLOCK;
wire   [3:0] grp_fc_6_fu_370_m_axi_weights_AWCACHE;
wire   [2:0] grp_fc_6_fu_370_m_axi_weights_AWPROT;
wire   [3:0] grp_fc_6_fu_370_m_axi_weights_AWQOS;
wire   [3:0] grp_fc_6_fu_370_m_axi_weights_AWREGION;
wire   [0:0] grp_fc_6_fu_370_m_axi_weights_AWUSER;
wire    grp_fc_6_fu_370_m_axi_weights_WVALID;
wire   [31:0] grp_fc_6_fu_370_m_axi_weights_WDATA;
wire   [3:0] grp_fc_6_fu_370_m_axi_weights_WSTRB;
wire    grp_fc_6_fu_370_m_axi_weights_WLAST;
wire   [0:0] grp_fc_6_fu_370_m_axi_weights_WID;
wire   [0:0] grp_fc_6_fu_370_m_axi_weights_WUSER;
wire    grp_fc_6_fu_370_m_axi_weights_ARVALID;
wire   [31:0] grp_fc_6_fu_370_m_axi_weights_ARADDR;
wire   [0:0] grp_fc_6_fu_370_m_axi_weights_ARID;
wire   [31:0] grp_fc_6_fu_370_m_axi_weights_ARLEN;
wire   [2:0] grp_fc_6_fu_370_m_axi_weights_ARSIZE;
wire   [1:0] grp_fc_6_fu_370_m_axi_weights_ARBURST;
wire   [1:0] grp_fc_6_fu_370_m_axi_weights_ARLOCK;
wire   [3:0] grp_fc_6_fu_370_m_axi_weights_ARCACHE;
wire   [2:0] grp_fc_6_fu_370_m_axi_weights_ARPROT;
wire   [3:0] grp_fc_6_fu_370_m_axi_weights_ARQOS;
wire   [3:0] grp_fc_6_fu_370_m_axi_weights_ARREGION;
wire   [0:0] grp_fc_6_fu_370_m_axi_weights_ARUSER;
wire    grp_fc_6_fu_370_m_axi_weights_RREADY;
wire    grp_fc_6_fu_370_m_axi_weights_BREADY;
wire    grp_fc_6_fu_370_m_axi_bias_AWVALID;
wire   [31:0] grp_fc_6_fu_370_m_axi_bias_AWADDR;
wire   [0:0] grp_fc_6_fu_370_m_axi_bias_AWID;
wire   [31:0] grp_fc_6_fu_370_m_axi_bias_AWLEN;
wire   [2:0] grp_fc_6_fu_370_m_axi_bias_AWSIZE;
wire   [1:0] grp_fc_6_fu_370_m_axi_bias_AWBURST;
wire   [1:0] grp_fc_6_fu_370_m_axi_bias_AWLOCK;
wire   [3:0] grp_fc_6_fu_370_m_axi_bias_AWCACHE;
wire   [2:0] grp_fc_6_fu_370_m_axi_bias_AWPROT;
wire   [3:0] grp_fc_6_fu_370_m_axi_bias_AWQOS;
wire   [3:0] grp_fc_6_fu_370_m_axi_bias_AWREGION;
wire   [0:0] grp_fc_6_fu_370_m_axi_bias_AWUSER;
wire    grp_fc_6_fu_370_m_axi_bias_WVALID;
wire   [31:0] grp_fc_6_fu_370_m_axi_bias_WDATA;
wire   [3:0] grp_fc_6_fu_370_m_axi_bias_WSTRB;
wire    grp_fc_6_fu_370_m_axi_bias_WLAST;
wire   [0:0] grp_fc_6_fu_370_m_axi_bias_WID;
wire   [0:0] grp_fc_6_fu_370_m_axi_bias_WUSER;
wire    grp_fc_6_fu_370_m_axi_bias_ARVALID;
wire   [31:0] grp_fc_6_fu_370_m_axi_bias_ARADDR;
wire   [0:0] grp_fc_6_fu_370_m_axi_bias_ARID;
wire   [31:0] grp_fc_6_fu_370_m_axi_bias_ARLEN;
wire   [2:0] grp_fc_6_fu_370_m_axi_bias_ARSIZE;
wire   [1:0] grp_fc_6_fu_370_m_axi_bias_ARBURST;
wire   [1:0] grp_fc_6_fu_370_m_axi_bias_ARLOCK;
wire   [3:0] grp_fc_6_fu_370_m_axi_bias_ARCACHE;
wire   [2:0] grp_fc_6_fu_370_m_axi_bias_ARPROT;
wire   [3:0] grp_fc_6_fu_370_m_axi_bias_ARQOS;
wire   [3:0] grp_fc_6_fu_370_m_axi_bias_ARREGION;
wire   [0:0] grp_fc_6_fu_370_m_axi_bias_ARUSER;
wire    grp_fc_6_fu_370_m_axi_bias_RREADY;
wire    grp_fc_6_fu_370_m_axi_bias_BREADY;
wire   [3:0] grp_fc_6_fu_370_output_r_address0;
wire    grp_fc_6_fu_370_output_r_ce0;
wire    grp_fc_6_fu_370_output_r_we0;
wire   [31:0] grp_fc_6_fu_370_output_r_d0;
wire    grp_convolution_5_fu_382_ap_start;
wire    grp_convolution_5_fu_382_ap_done;
wire    grp_convolution_5_fu_382_ap_idle;
wire    grp_convolution_5_fu_382_ap_ready;
wire   [8:0] grp_convolution_5_fu_382_input_r_address0;
wire    grp_convolution_5_fu_382_input_r_ce0;
wire   [15:0] grp_convolution_5_fu_382_weights_address0;
wire    grp_convolution_5_fu_382_weights_ce0;
wire   [6:0] grp_convolution_5_fu_382_bias_address0;
wire    grp_convolution_5_fu_382_bias_ce0;
wire   [6:0] grp_convolution_5_fu_382_output_0_0_address0;
wire    grp_convolution_5_fu_382_output_0_0_ce0;
wire    grp_convolution_5_fu_382_output_0_0_we0;
wire   [31:0] grp_convolution_5_fu_382_output_0_0_d0;
wire    grp_maxpool_2_fu_390_ap_start;
wire    grp_maxpool_2_fu_390_ap_done;
wire    grp_maxpool_2_fu_390_ap_idle;
wire    grp_maxpool_2_fu_390_ap_ready;
wire   [12:0] grp_maxpool_2_fu_390_input_r_address0;
wire    grp_maxpool_2_fu_390_input_r_ce0;
wire   [10:0] grp_maxpool_2_fu_390_output_r_address0;
wire    grp_maxpool_2_fu_390_output_r_ce0;
wire    grp_maxpool_2_fu_390_output_r_we0;
wire   [31:0] grp_maxpool_2_fu_390_output_r_d0;
wire    grp_maxpool_4_fu_396_ap_start;
wire    grp_maxpool_4_fu_396_ap_done;
wire    grp_maxpool_4_fu_396_ap_idle;
wire    grp_maxpool_4_fu_396_ap_ready;
wire   [10:0] grp_maxpool_4_fu_396_input_r_address0;
wire    grp_maxpool_4_fu_396_input_r_ce0;
wire   [8:0] grp_maxpool_4_fu_396_output_r_address0;
wire    grp_maxpool_4_fu_396_output_r_ce0;
wire    grp_maxpool_4_fu_396_output_r_we0;
wire   [31:0] grp_maxpool_4_fu_396_output_r_d0;
wire    grp_store_weights_5_fu_402_ap_start;
wire    grp_store_weights_5_fu_402_ap_done;
wire    grp_store_weights_5_fu_402_ap_idle;
wire    grp_store_weights_5_fu_402_ap_ready;
wire    grp_store_weights_5_fu_402_m_axi_weights_AWVALID;
wire   [31:0] grp_store_weights_5_fu_402_m_axi_weights_AWADDR;
wire   [0:0] grp_store_weights_5_fu_402_m_axi_weights_AWID;
wire   [31:0] grp_store_weights_5_fu_402_m_axi_weights_AWLEN;
wire   [2:0] grp_store_weights_5_fu_402_m_axi_weights_AWSIZE;
wire   [1:0] grp_store_weights_5_fu_402_m_axi_weights_AWBURST;
wire   [1:0] grp_store_weights_5_fu_402_m_axi_weights_AWLOCK;
wire   [3:0] grp_store_weights_5_fu_402_m_axi_weights_AWCACHE;
wire   [2:0] grp_store_weights_5_fu_402_m_axi_weights_AWPROT;
wire   [3:0] grp_store_weights_5_fu_402_m_axi_weights_AWQOS;
wire   [3:0] grp_store_weights_5_fu_402_m_axi_weights_AWREGION;
wire   [0:0] grp_store_weights_5_fu_402_m_axi_weights_AWUSER;
wire    grp_store_weights_5_fu_402_m_axi_weights_WVALID;
wire   [31:0] grp_store_weights_5_fu_402_m_axi_weights_WDATA;
wire   [3:0] grp_store_weights_5_fu_402_m_axi_weights_WSTRB;
wire    grp_store_weights_5_fu_402_m_axi_weights_WLAST;
wire   [0:0] grp_store_weights_5_fu_402_m_axi_weights_WID;
wire   [0:0] grp_store_weights_5_fu_402_m_axi_weights_WUSER;
wire    grp_store_weights_5_fu_402_m_axi_weights_ARVALID;
wire   [31:0] grp_store_weights_5_fu_402_m_axi_weights_ARADDR;
wire   [0:0] grp_store_weights_5_fu_402_m_axi_weights_ARID;
wire   [31:0] grp_store_weights_5_fu_402_m_axi_weights_ARLEN;
wire   [2:0] grp_store_weights_5_fu_402_m_axi_weights_ARSIZE;
wire   [1:0] grp_store_weights_5_fu_402_m_axi_weights_ARBURST;
wire   [1:0] grp_store_weights_5_fu_402_m_axi_weights_ARLOCK;
wire   [3:0] grp_store_weights_5_fu_402_m_axi_weights_ARCACHE;
wire   [2:0] grp_store_weights_5_fu_402_m_axi_weights_ARPROT;
wire   [3:0] grp_store_weights_5_fu_402_m_axi_weights_ARQOS;
wire   [3:0] grp_store_weights_5_fu_402_m_axi_weights_ARREGION;
wire   [0:0] grp_store_weights_5_fu_402_m_axi_weights_ARUSER;
wire    grp_store_weights_5_fu_402_m_axi_weights_RREADY;
wire    grp_store_weights_5_fu_402_m_axi_weights_BREADY;
wire   [15:0] grp_store_weights_5_fu_402_weights_oc_address0;
wire    grp_store_weights_5_fu_402_weights_oc_ce0;
wire    grp_store_weights_5_fu_402_weights_oc_we0;
wire   [31:0] grp_store_weights_5_fu_402_weights_oc_d0;
wire    grp_store_weights_3_fu_410_ap_start;
wire    grp_store_weights_3_fu_410_ap_done;
wire    grp_store_weights_3_fu_410_ap_idle;
wire    grp_store_weights_3_fu_410_ap_ready;
wire    grp_store_weights_3_fu_410_m_axi_weights_AWVALID;
wire   [31:0] grp_store_weights_3_fu_410_m_axi_weights_AWADDR;
wire   [0:0] grp_store_weights_3_fu_410_m_axi_weights_AWID;
wire   [31:0] grp_store_weights_3_fu_410_m_axi_weights_AWLEN;
wire   [2:0] grp_store_weights_3_fu_410_m_axi_weights_AWSIZE;
wire   [1:0] grp_store_weights_3_fu_410_m_axi_weights_AWBURST;
wire   [1:0] grp_store_weights_3_fu_410_m_axi_weights_AWLOCK;
wire   [3:0] grp_store_weights_3_fu_410_m_axi_weights_AWCACHE;
wire   [2:0] grp_store_weights_3_fu_410_m_axi_weights_AWPROT;
wire   [3:0] grp_store_weights_3_fu_410_m_axi_weights_AWQOS;
wire   [3:0] grp_store_weights_3_fu_410_m_axi_weights_AWREGION;
wire   [0:0] grp_store_weights_3_fu_410_m_axi_weights_AWUSER;
wire    grp_store_weights_3_fu_410_m_axi_weights_WVALID;
wire   [31:0] grp_store_weights_3_fu_410_m_axi_weights_WDATA;
wire   [3:0] grp_store_weights_3_fu_410_m_axi_weights_WSTRB;
wire    grp_store_weights_3_fu_410_m_axi_weights_WLAST;
wire   [0:0] grp_store_weights_3_fu_410_m_axi_weights_WID;
wire   [0:0] grp_store_weights_3_fu_410_m_axi_weights_WUSER;
wire    grp_store_weights_3_fu_410_m_axi_weights_ARVALID;
wire   [31:0] grp_store_weights_3_fu_410_m_axi_weights_ARADDR;
wire   [0:0] grp_store_weights_3_fu_410_m_axi_weights_ARID;
wire   [31:0] grp_store_weights_3_fu_410_m_axi_weights_ARLEN;
wire   [2:0] grp_store_weights_3_fu_410_m_axi_weights_ARSIZE;
wire   [1:0] grp_store_weights_3_fu_410_m_axi_weights_ARBURST;
wire   [1:0] grp_store_weights_3_fu_410_m_axi_weights_ARLOCK;
wire   [3:0] grp_store_weights_3_fu_410_m_axi_weights_ARCACHE;
wire   [2:0] grp_store_weights_3_fu_410_m_axi_weights_ARPROT;
wire   [3:0] grp_store_weights_3_fu_410_m_axi_weights_ARQOS;
wire   [3:0] grp_store_weights_3_fu_410_m_axi_weights_ARREGION;
wire   [0:0] grp_store_weights_3_fu_410_m_axi_weights_ARUSER;
wire    grp_store_weights_3_fu_410_m_axi_weights_RREADY;
wire    grp_store_weights_3_fu_410_m_axi_weights_BREADY;
wire   [11:0] grp_store_weights_3_fu_410_weights_oc_address0;
wire    grp_store_weights_3_fu_410_weights_oc_ce0;
wire    grp_store_weights_3_fu_410_weights_oc_we0;
wire   [31:0] grp_store_weights_3_fu_410_weights_oc_d0;
wire    grp_relu_1_fu_418_ap_start;
wire    grp_relu_1_fu_418_ap_done;
wire    grp_relu_1_fu_418_ap_idle;
wire    grp_relu_1_fu_418_ap_ready;
wire   [12:0] grp_relu_1_fu_418_output_r_address0;
wire    grp_relu_1_fu_418_output_r_ce0;
wire    grp_relu_1_fu_418_output_r_we0;
wire   [31:0] grp_relu_1_fu_418_output_r_d0;
wire    grp_relu_3_fu_423_ap_start;
wire    grp_relu_3_fu_423_ap_done;
wire    grp_relu_3_fu_423_ap_idle;
wire    grp_relu_3_fu_423_ap_ready;
wire   [10:0] grp_relu_3_fu_423_output_r_address0;
wire    grp_relu_3_fu_423_output_r_ce0;
wire    grp_relu_3_fu_423_output_r_we0;
wire   [31:0] grp_relu_3_fu_423_output_r_d0;
wire    grp_relu_4_fu_428_ap_start;
wire    grp_relu_4_fu_428_ap_done;
wire    grp_relu_4_fu_428_ap_idle;
wire    grp_relu_4_fu_428_ap_ready;
wire   [8:0] grp_relu_4_fu_428_output_r_address0;
wire    grp_relu_4_fu_428_output_r_ce0;
wire    grp_relu_4_fu_428_output_r_we0;
wire   [31:0] grp_relu_4_fu_428_output_r_d0;
wire    grp_relu_2_fu_433_ap_start;
wire    grp_relu_2_fu_433_ap_done;
wire    grp_relu_2_fu_433_ap_idle;
wire    grp_relu_2_fu_433_ap_ready;
wire   [10:0] grp_relu_2_fu_433_output_r_address0;
wire    grp_relu_2_fu_433_output_r_ce0;
wire    grp_relu_2_fu_433_output_r_we0;
wire   [31:0] grp_relu_2_fu_433_output_r_d0;
wire    grp_store_weights_fu_438_ap_start;
wire    grp_store_weights_fu_438_ap_done;
wire    grp_store_weights_fu_438_ap_idle;
wire    grp_store_weights_fu_438_ap_ready;
wire    grp_store_weights_fu_438_m_axi_weights_AWVALID;
wire   [31:0] grp_store_weights_fu_438_m_axi_weights_AWADDR;
wire   [0:0] grp_store_weights_fu_438_m_axi_weights_AWID;
wire   [31:0] grp_store_weights_fu_438_m_axi_weights_AWLEN;
wire   [2:0] grp_store_weights_fu_438_m_axi_weights_AWSIZE;
wire   [1:0] grp_store_weights_fu_438_m_axi_weights_AWBURST;
wire   [1:0] grp_store_weights_fu_438_m_axi_weights_AWLOCK;
wire   [3:0] grp_store_weights_fu_438_m_axi_weights_AWCACHE;
wire   [2:0] grp_store_weights_fu_438_m_axi_weights_AWPROT;
wire   [3:0] grp_store_weights_fu_438_m_axi_weights_AWQOS;
wire   [3:0] grp_store_weights_fu_438_m_axi_weights_AWREGION;
wire   [0:0] grp_store_weights_fu_438_m_axi_weights_AWUSER;
wire    grp_store_weights_fu_438_m_axi_weights_WVALID;
wire   [31:0] grp_store_weights_fu_438_m_axi_weights_WDATA;
wire   [3:0] grp_store_weights_fu_438_m_axi_weights_WSTRB;
wire    grp_store_weights_fu_438_m_axi_weights_WLAST;
wire   [0:0] grp_store_weights_fu_438_m_axi_weights_WID;
wire   [0:0] grp_store_weights_fu_438_m_axi_weights_WUSER;
wire    grp_store_weights_fu_438_m_axi_weights_ARVALID;
wire   [31:0] grp_store_weights_fu_438_m_axi_weights_ARADDR;
wire   [0:0] grp_store_weights_fu_438_m_axi_weights_ARID;
wire   [31:0] grp_store_weights_fu_438_m_axi_weights_ARLEN;
wire   [2:0] grp_store_weights_fu_438_m_axi_weights_ARSIZE;
wire   [1:0] grp_store_weights_fu_438_m_axi_weights_ARBURST;
wire   [1:0] grp_store_weights_fu_438_m_axi_weights_ARLOCK;
wire   [3:0] grp_store_weights_fu_438_m_axi_weights_ARCACHE;
wire   [2:0] grp_store_weights_fu_438_m_axi_weights_ARPROT;
wire   [3:0] grp_store_weights_fu_438_m_axi_weights_ARQOS;
wire   [3:0] grp_store_weights_fu_438_m_axi_weights_ARREGION;
wire   [0:0] grp_store_weights_fu_438_m_axi_weights_ARUSER;
wire    grp_store_weights_fu_438_m_axi_weights_RREADY;
wire    grp_store_weights_fu_438_m_axi_weights_BREADY;
wire   [7:0] grp_store_weights_fu_438_weights_oc_0_address0;
wire    grp_store_weights_fu_438_weights_oc_0_ce0;
wire    grp_store_weights_fu_438_weights_oc_0_we0;
wire   [31:0] grp_store_weights_fu_438_weights_oc_0_d0;
wire    grp_store_input_fu_447_ap_start;
wire    grp_store_input_fu_447_ap_done;
wire    grp_store_input_fu_447_ap_idle;
wire    grp_store_input_fu_447_ap_ready;
wire    grp_store_input_fu_447_m_axi_input_r_AWVALID;
wire   [31:0] grp_store_input_fu_447_m_axi_input_r_AWADDR;
wire   [0:0] grp_store_input_fu_447_m_axi_input_r_AWID;
wire   [31:0] grp_store_input_fu_447_m_axi_input_r_AWLEN;
wire   [2:0] grp_store_input_fu_447_m_axi_input_r_AWSIZE;
wire   [1:0] grp_store_input_fu_447_m_axi_input_r_AWBURST;
wire   [1:0] grp_store_input_fu_447_m_axi_input_r_AWLOCK;
wire   [3:0] grp_store_input_fu_447_m_axi_input_r_AWCACHE;
wire   [2:0] grp_store_input_fu_447_m_axi_input_r_AWPROT;
wire   [3:0] grp_store_input_fu_447_m_axi_input_r_AWQOS;
wire   [3:0] grp_store_input_fu_447_m_axi_input_r_AWREGION;
wire   [0:0] grp_store_input_fu_447_m_axi_input_r_AWUSER;
wire    grp_store_input_fu_447_m_axi_input_r_WVALID;
wire   [31:0] grp_store_input_fu_447_m_axi_input_r_WDATA;
wire   [3:0] grp_store_input_fu_447_m_axi_input_r_WSTRB;
wire    grp_store_input_fu_447_m_axi_input_r_WLAST;
wire   [0:0] grp_store_input_fu_447_m_axi_input_r_WID;
wire   [0:0] grp_store_input_fu_447_m_axi_input_r_WUSER;
wire    grp_store_input_fu_447_m_axi_input_r_ARVALID;
wire   [31:0] grp_store_input_fu_447_m_axi_input_r_ARADDR;
wire   [0:0] grp_store_input_fu_447_m_axi_input_r_ARID;
wire   [31:0] grp_store_input_fu_447_m_axi_input_r_ARLEN;
wire   [2:0] grp_store_input_fu_447_m_axi_input_r_ARSIZE;
wire   [1:0] grp_store_input_fu_447_m_axi_input_r_ARBURST;
wire   [1:0] grp_store_input_fu_447_m_axi_input_r_ARLOCK;
wire   [3:0] grp_store_input_fu_447_m_axi_input_r_ARCACHE;
wire   [2:0] grp_store_input_fu_447_m_axi_input_r_ARPROT;
wire   [3:0] grp_store_input_fu_447_m_axi_input_r_ARQOS;
wire   [3:0] grp_store_input_fu_447_m_axi_input_r_ARREGION;
wire   [0:0] grp_store_input_fu_447_m_axi_input_r_ARUSER;
wire    grp_store_input_fu_447_m_axi_input_r_RREADY;
wire    grp_store_input_fu_447_m_axi_input_r_BREADY;
wire   [9:0] grp_store_input_fu_447_input_oc_0_address0;
wire    grp_store_input_fu_447_input_oc_0_ce0;
wire    grp_store_input_fu_447_input_oc_0_we0;
wire   [31:0] grp_store_input_fu_447_input_oc_0_d0;
wire    grp_store_bias_5_fu_456_ap_start;
wire    grp_store_bias_5_fu_456_ap_done;
wire    grp_store_bias_5_fu_456_ap_idle;
wire    grp_store_bias_5_fu_456_ap_ready;
wire    grp_store_bias_5_fu_456_m_axi_bias_AWVALID;
wire   [31:0] grp_store_bias_5_fu_456_m_axi_bias_AWADDR;
wire   [0:0] grp_store_bias_5_fu_456_m_axi_bias_AWID;
wire   [31:0] grp_store_bias_5_fu_456_m_axi_bias_AWLEN;
wire   [2:0] grp_store_bias_5_fu_456_m_axi_bias_AWSIZE;
wire   [1:0] grp_store_bias_5_fu_456_m_axi_bias_AWBURST;
wire   [1:0] grp_store_bias_5_fu_456_m_axi_bias_AWLOCK;
wire   [3:0] grp_store_bias_5_fu_456_m_axi_bias_AWCACHE;
wire   [2:0] grp_store_bias_5_fu_456_m_axi_bias_AWPROT;
wire   [3:0] grp_store_bias_5_fu_456_m_axi_bias_AWQOS;
wire   [3:0] grp_store_bias_5_fu_456_m_axi_bias_AWREGION;
wire   [0:0] grp_store_bias_5_fu_456_m_axi_bias_AWUSER;
wire    grp_store_bias_5_fu_456_m_axi_bias_WVALID;
wire   [31:0] grp_store_bias_5_fu_456_m_axi_bias_WDATA;
wire   [3:0] grp_store_bias_5_fu_456_m_axi_bias_WSTRB;
wire    grp_store_bias_5_fu_456_m_axi_bias_WLAST;
wire   [0:0] grp_store_bias_5_fu_456_m_axi_bias_WID;
wire   [0:0] grp_store_bias_5_fu_456_m_axi_bias_WUSER;
wire    grp_store_bias_5_fu_456_m_axi_bias_ARVALID;
wire   [31:0] grp_store_bias_5_fu_456_m_axi_bias_ARADDR;
wire   [0:0] grp_store_bias_5_fu_456_m_axi_bias_ARID;
wire   [31:0] grp_store_bias_5_fu_456_m_axi_bias_ARLEN;
wire   [2:0] grp_store_bias_5_fu_456_m_axi_bias_ARSIZE;
wire   [1:0] grp_store_bias_5_fu_456_m_axi_bias_ARBURST;
wire   [1:0] grp_store_bias_5_fu_456_m_axi_bias_ARLOCK;
wire   [3:0] grp_store_bias_5_fu_456_m_axi_bias_ARCACHE;
wire   [2:0] grp_store_bias_5_fu_456_m_axi_bias_ARPROT;
wire   [3:0] grp_store_bias_5_fu_456_m_axi_bias_ARQOS;
wire   [3:0] grp_store_bias_5_fu_456_m_axi_bias_ARREGION;
wire   [0:0] grp_store_bias_5_fu_456_m_axi_bias_ARUSER;
wire    grp_store_bias_5_fu_456_m_axi_bias_RREADY;
wire    grp_store_bias_5_fu_456_m_axi_bias_BREADY;
wire   [6:0] grp_store_bias_5_fu_456_bias_oc_address0;
wire    grp_store_bias_5_fu_456_bias_oc_ce0;
wire    grp_store_bias_5_fu_456_bias_oc_we0;
wire   [31:0] grp_store_bias_5_fu_456_bias_oc_d0;
wire    grp_store_bias_3_fu_464_ap_start;
wire    grp_store_bias_3_fu_464_ap_done;
wire    grp_store_bias_3_fu_464_ap_idle;
wire    grp_store_bias_3_fu_464_ap_ready;
wire    grp_store_bias_3_fu_464_m_axi_bias_AWVALID;
wire   [31:0] grp_store_bias_3_fu_464_m_axi_bias_AWADDR;
wire   [0:0] grp_store_bias_3_fu_464_m_axi_bias_AWID;
wire   [31:0] grp_store_bias_3_fu_464_m_axi_bias_AWLEN;
wire   [2:0] grp_store_bias_3_fu_464_m_axi_bias_AWSIZE;
wire   [1:0] grp_store_bias_3_fu_464_m_axi_bias_AWBURST;
wire   [1:0] grp_store_bias_3_fu_464_m_axi_bias_AWLOCK;
wire   [3:0] grp_store_bias_3_fu_464_m_axi_bias_AWCACHE;
wire   [2:0] grp_store_bias_3_fu_464_m_axi_bias_AWPROT;
wire   [3:0] grp_store_bias_3_fu_464_m_axi_bias_AWQOS;
wire   [3:0] grp_store_bias_3_fu_464_m_axi_bias_AWREGION;
wire   [0:0] grp_store_bias_3_fu_464_m_axi_bias_AWUSER;
wire    grp_store_bias_3_fu_464_m_axi_bias_WVALID;
wire   [31:0] grp_store_bias_3_fu_464_m_axi_bias_WDATA;
wire   [3:0] grp_store_bias_3_fu_464_m_axi_bias_WSTRB;
wire    grp_store_bias_3_fu_464_m_axi_bias_WLAST;
wire   [0:0] grp_store_bias_3_fu_464_m_axi_bias_WID;
wire   [0:0] grp_store_bias_3_fu_464_m_axi_bias_WUSER;
wire    grp_store_bias_3_fu_464_m_axi_bias_ARVALID;
wire   [31:0] grp_store_bias_3_fu_464_m_axi_bias_ARADDR;
wire   [0:0] grp_store_bias_3_fu_464_m_axi_bias_ARID;
wire   [31:0] grp_store_bias_3_fu_464_m_axi_bias_ARLEN;
wire   [2:0] grp_store_bias_3_fu_464_m_axi_bias_ARSIZE;
wire   [1:0] grp_store_bias_3_fu_464_m_axi_bias_ARBURST;
wire   [1:0] grp_store_bias_3_fu_464_m_axi_bias_ARLOCK;
wire   [3:0] grp_store_bias_3_fu_464_m_axi_bias_ARCACHE;
wire   [2:0] grp_store_bias_3_fu_464_m_axi_bias_ARPROT;
wire   [3:0] grp_store_bias_3_fu_464_m_axi_bias_ARQOS;
wire   [3:0] grp_store_bias_3_fu_464_m_axi_bias_ARREGION;
wire   [0:0] grp_store_bias_3_fu_464_m_axi_bias_ARUSER;
wire    grp_store_bias_3_fu_464_m_axi_bias_RREADY;
wire    grp_store_bias_3_fu_464_m_axi_bias_BREADY;
wire   [3:0] grp_store_bias_3_fu_464_bias_oc_address0;
wire    grp_store_bias_3_fu_464_bias_oc_ce0;
wire    grp_store_bias_3_fu_464_bias_oc_we0;
wire   [31:0] grp_store_bias_3_fu_464_bias_oc_d0;
wire    grp_store_output_fu_472_ap_start;
wire    grp_store_output_fu_472_ap_done;
wire    grp_store_output_fu_472_ap_idle;
wire    grp_store_output_fu_472_ap_ready;
wire    grp_store_output_fu_472_m_axi_output_r_AWVALID;
wire   [31:0] grp_store_output_fu_472_m_axi_output_r_AWADDR;
wire   [0:0] grp_store_output_fu_472_m_axi_output_r_AWID;
wire   [31:0] grp_store_output_fu_472_m_axi_output_r_AWLEN;
wire   [2:0] grp_store_output_fu_472_m_axi_output_r_AWSIZE;
wire   [1:0] grp_store_output_fu_472_m_axi_output_r_AWBURST;
wire   [1:0] grp_store_output_fu_472_m_axi_output_r_AWLOCK;
wire   [3:0] grp_store_output_fu_472_m_axi_output_r_AWCACHE;
wire   [2:0] grp_store_output_fu_472_m_axi_output_r_AWPROT;
wire   [3:0] grp_store_output_fu_472_m_axi_output_r_AWQOS;
wire   [3:0] grp_store_output_fu_472_m_axi_output_r_AWREGION;
wire   [0:0] grp_store_output_fu_472_m_axi_output_r_AWUSER;
wire    grp_store_output_fu_472_m_axi_output_r_WVALID;
wire   [31:0] grp_store_output_fu_472_m_axi_output_r_WDATA;
wire   [3:0] grp_store_output_fu_472_m_axi_output_r_WSTRB;
wire    grp_store_output_fu_472_m_axi_output_r_WLAST;
wire   [0:0] grp_store_output_fu_472_m_axi_output_r_WID;
wire   [0:0] grp_store_output_fu_472_m_axi_output_r_WUSER;
wire    grp_store_output_fu_472_m_axi_output_r_ARVALID;
wire   [31:0] grp_store_output_fu_472_m_axi_output_r_ARADDR;
wire   [0:0] grp_store_output_fu_472_m_axi_output_r_ARID;
wire   [31:0] grp_store_output_fu_472_m_axi_output_r_ARLEN;
wire   [2:0] grp_store_output_fu_472_m_axi_output_r_ARSIZE;
wire   [1:0] grp_store_output_fu_472_m_axi_output_r_ARBURST;
wire   [1:0] grp_store_output_fu_472_m_axi_output_r_ARLOCK;
wire   [3:0] grp_store_output_fu_472_m_axi_output_r_ARCACHE;
wire   [2:0] grp_store_output_fu_472_m_axi_output_r_ARPROT;
wire   [3:0] grp_store_output_fu_472_m_axi_output_r_ARQOS;
wire   [3:0] grp_store_output_fu_472_m_axi_output_r_ARREGION;
wire   [0:0] grp_store_output_fu_472_m_axi_output_r_ARUSER;
wire    grp_store_output_fu_472_m_axi_output_r_RREADY;
wire    grp_store_output_fu_472_m_axi_output_r_BREADY;
wire   [3:0] grp_store_output_fu_472_output_oc_address0;
wire    grp_store_output_fu_472_output_oc_ce0;
wire    grp_store_bias_fu_480_ap_start;
wire    grp_store_bias_fu_480_ap_done;
wire    grp_store_bias_fu_480_ap_idle;
wire    grp_store_bias_fu_480_ap_ready;
wire    grp_store_bias_fu_480_m_axi_bias_AWVALID;
wire   [31:0] grp_store_bias_fu_480_m_axi_bias_AWADDR;
wire   [0:0] grp_store_bias_fu_480_m_axi_bias_AWID;
wire   [31:0] grp_store_bias_fu_480_m_axi_bias_AWLEN;
wire   [2:0] grp_store_bias_fu_480_m_axi_bias_AWSIZE;
wire   [1:0] grp_store_bias_fu_480_m_axi_bias_AWBURST;
wire   [1:0] grp_store_bias_fu_480_m_axi_bias_AWLOCK;
wire   [3:0] grp_store_bias_fu_480_m_axi_bias_AWCACHE;
wire   [2:0] grp_store_bias_fu_480_m_axi_bias_AWPROT;
wire   [3:0] grp_store_bias_fu_480_m_axi_bias_AWQOS;
wire   [3:0] grp_store_bias_fu_480_m_axi_bias_AWREGION;
wire   [0:0] grp_store_bias_fu_480_m_axi_bias_AWUSER;
wire    grp_store_bias_fu_480_m_axi_bias_WVALID;
wire   [31:0] grp_store_bias_fu_480_m_axi_bias_WDATA;
wire   [3:0] grp_store_bias_fu_480_m_axi_bias_WSTRB;
wire    grp_store_bias_fu_480_m_axi_bias_WLAST;
wire   [0:0] grp_store_bias_fu_480_m_axi_bias_WID;
wire   [0:0] grp_store_bias_fu_480_m_axi_bias_WUSER;
wire    grp_store_bias_fu_480_m_axi_bias_ARVALID;
wire   [31:0] grp_store_bias_fu_480_m_axi_bias_ARADDR;
wire   [0:0] grp_store_bias_fu_480_m_axi_bias_ARID;
wire   [31:0] grp_store_bias_fu_480_m_axi_bias_ARLEN;
wire   [2:0] grp_store_bias_fu_480_m_axi_bias_ARSIZE;
wire   [1:0] grp_store_bias_fu_480_m_axi_bias_ARBURST;
wire   [1:0] grp_store_bias_fu_480_m_axi_bias_ARLOCK;
wire   [3:0] grp_store_bias_fu_480_m_axi_bias_ARCACHE;
wire   [2:0] grp_store_bias_fu_480_m_axi_bias_ARPROT;
wire   [3:0] grp_store_bias_fu_480_m_axi_bias_ARQOS;
wire   [3:0] grp_store_bias_fu_480_m_axi_bias_ARREGION;
wire   [0:0] grp_store_bias_fu_480_m_axi_bias_ARUSER;
wire    grp_store_bias_fu_480_m_axi_bias_RREADY;
wire    grp_store_bias_fu_480_m_axi_bias_BREADY;
wire   [2:0] grp_store_bias_fu_480_bias_oc_address0;
wire    grp_store_bias_fu_480_bias_oc_ce0;
wire    grp_store_bias_fu_480_bias_oc_we0;
wire   [31:0] grp_store_bias_fu_480_bias_oc_d0;
reg   [6:0] i_i_reg_332;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state23;
reg   [3:0] i_i1_reg_343;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state27;
reg    grp_convolution_3_fu_354_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    grp_convulution1_fu_362_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_fc_6_fu_370_ap_start_reg;
reg    grp_convolution_5_fu_382_ap_start_reg;
wire    ap_CS_fsm_state19;
reg    grp_maxpool_2_fu_390_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_maxpool_4_fu_396_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    grp_store_weights_5_fu_402_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_store_weights_3_fu_410_ap_start_reg;
reg    grp_relu_1_fu_418_ap_start_reg;
reg    grp_relu_3_fu_423_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg    grp_relu_4_fu_428_ap_start_reg;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg    grp_relu_2_fu_433_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_store_weights_fu_438_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_store_input_fu_447_ap_start_reg;
reg    grp_store_bias_5_fu_456_ap_start_reg;
reg    grp_store_bias_3_fu_464_ap_start_reg;
reg    grp_store_output_fu_472_ap_start_reg;
wire    ap_CS_fsm_state28;
reg    grp_store_bias_fu_480_ap_start_reg;
wire   [63:0] tmp_i_fu_609_p1;
wire   [63:0] tmp_i1_fu_667_p1;
wire   [0:0] tmp_43_fu_649_p2;
wire   [0:0] tmp_47_fu_707_p2;
reg   [31:0] grp_fu_489_p0;
wire   [31:0] output_0_0_assign_s_fu_614_p1;
wire   [7:0] tmp_s_fu_617_p4;
wire   [22:0] tmp_360_fu_627_p1;
wire   [0:0] notrhs_fu_637_p2;
wire   [0:0] notlhs_fu_631_p2;
wire   [0:0] tmp_41_fu_643_p2;
wire   [0:0] grp_fu_489_p2;
wire   [31:0] output_assign_load_t_fu_672_p1;
wire   [7:0] tmp_fu_675_p4;
wire   [22:0] tmp_361_fu_685_p1;
wire   [0:0] notrhs5_fu_695_p2;
wire   [0:0] notlhs4_fu_689_p2;
wire   [0:0] tmp_45_fu_701_p2;
reg   [27:0] ap_NS_fsm;
reg    ap_block_state2_on_subcall_done;
reg    ap_block_state4_on_subcall_done;
reg    ap_block_state6_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 grp_convolution_3_fu_354_ap_start_reg = 1'b0;
#0 grp_convulution1_fu_362_ap_start_reg = 1'b0;
#0 grp_fc_6_fu_370_ap_start_reg = 1'b0;
#0 grp_convolution_5_fu_382_ap_start_reg = 1'b0;
#0 grp_maxpool_2_fu_390_ap_start_reg = 1'b0;
#0 grp_maxpool_4_fu_396_ap_start_reg = 1'b0;
#0 grp_store_weights_5_fu_402_ap_start_reg = 1'b0;
#0 grp_store_weights_3_fu_410_ap_start_reg = 1'b0;
#0 grp_relu_1_fu_418_ap_start_reg = 1'b0;
#0 grp_relu_3_fu_423_ap_start_reg = 1'b0;
#0 grp_relu_4_fu_428_ap_start_reg = 1'b0;
#0 grp_relu_2_fu_433_ap_start_reg = 1'b0;
#0 grp_store_weights_fu_438_ap_start_reg = 1'b0;
#0 grp_store_input_fu_447_ap_start_reg = 1'b0;
#0 grp_store_bias_5_fu_456_ap_start_reg = 1'b0;
#0 grp_store_bias_3_fu_464_ap_start_reg = 1'b0;
#0 grp_store_output_fu_472_ap_start_reg = 1'b0;
#0 grp_store_bias_fu_480_ap_start_reg = 1'b0;
end

conv1_CTL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTL_DATA_WIDTH ))
conv1_CTL_s_axi_U(
    .AWVALID(s_axi_CTL_AWVALID),
    .AWREADY(s_axi_CTL_AWREADY),
    .AWADDR(s_axi_CTL_AWADDR),
    .WVALID(s_axi_CTL_WVALID),
    .WREADY(s_axi_CTL_WREADY),
    .WDATA(s_axi_CTL_WDATA),
    .WSTRB(s_axi_CTL_WSTRB),
    .ARVALID(s_axi_CTL_ARVALID),
    .ARREADY(s_axi_CTL_ARREADY),
    .ARADDR(s_axi_CTL_ARADDR),
    .RVALID(s_axi_CTL_RVALID),
    .RREADY(s_axi_CTL_RREADY),
    .RDATA(s_axi_CTL_RDATA),
    .RRESP(s_axi_CTL_RRESP),
    .BVALID(s_axi_CTL_BVALID),
    .BREADY(s_axi_CTL_BREADY),
    .BRESP(s_axi_CTL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .input_r(input_r),
    .weights(weights),
    .weights_3(weights_3),
    .weights_5(weights_5),
    .weights_6(weights_6),
    .bias(bias),
    .bias_3(bias_3),
    .bias_5(bias_5),
    .bias_6(bias_6),
    .output_r(output_r)
);

conv1_DATA_INPUT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_INPUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_INPUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_INPUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_INPUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_INPUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_INPUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_INPUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_INPUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_INPUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_INPUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_INPUT_CACHE_VALUE ))
conv1_DATA_INPUT_m_axi_U(
    .AWVALID(m_axi_DATA_INPUT_AWVALID),
    .AWREADY(m_axi_DATA_INPUT_AWREADY),
    .AWADDR(m_axi_DATA_INPUT_AWADDR),
    .AWID(m_axi_DATA_INPUT_AWID),
    .AWLEN(m_axi_DATA_INPUT_AWLEN),
    .AWSIZE(m_axi_DATA_INPUT_AWSIZE),
    .AWBURST(m_axi_DATA_INPUT_AWBURST),
    .AWLOCK(m_axi_DATA_INPUT_AWLOCK),
    .AWCACHE(m_axi_DATA_INPUT_AWCACHE),
    .AWPROT(m_axi_DATA_INPUT_AWPROT),
    .AWQOS(m_axi_DATA_INPUT_AWQOS),
    .AWREGION(m_axi_DATA_INPUT_AWREGION),
    .AWUSER(m_axi_DATA_INPUT_AWUSER),
    .WVALID(m_axi_DATA_INPUT_WVALID),
    .WREADY(m_axi_DATA_INPUT_WREADY),
    .WDATA(m_axi_DATA_INPUT_WDATA),
    .WSTRB(m_axi_DATA_INPUT_WSTRB),
    .WLAST(m_axi_DATA_INPUT_WLAST),
    .WID(m_axi_DATA_INPUT_WID),
    .WUSER(m_axi_DATA_INPUT_WUSER),
    .ARVALID(m_axi_DATA_INPUT_ARVALID),
    .ARREADY(m_axi_DATA_INPUT_ARREADY),
    .ARADDR(m_axi_DATA_INPUT_ARADDR),
    .ARID(m_axi_DATA_INPUT_ARID),
    .ARLEN(m_axi_DATA_INPUT_ARLEN),
    .ARSIZE(m_axi_DATA_INPUT_ARSIZE),
    .ARBURST(m_axi_DATA_INPUT_ARBURST),
    .ARLOCK(m_axi_DATA_INPUT_ARLOCK),
    .ARCACHE(m_axi_DATA_INPUT_ARCACHE),
    .ARPROT(m_axi_DATA_INPUT_ARPROT),
    .ARQOS(m_axi_DATA_INPUT_ARQOS),
    .ARREGION(m_axi_DATA_INPUT_ARREGION),
    .ARUSER(m_axi_DATA_INPUT_ARUSER),
    .RVALID(m_axi_DATA_INPUT_RVALID),
    .RREADY(m_axi_DATA_INPUT_RREADY),
    .RDATA(m_axi_DATA_INPUT_RDATA),
    .RLAST(m_axi_DATA_INPUT_RLAST),
    .RID(m_axi_DATA_INPUT_RID),
    .RUSER(m_axi_DATA_INPUT_RUSER),
    .RRESP(m_axi_DATA_INPUT_RRESP),
    .BVALID(m_axi_DATA_INPUT_BVALID),
    .BREADY(m_axi_DATA_INPUT_BREADY),
    .BRESP(m_axi_DATA_INPUT_BRESP),
    .BID(m_axi_DATA_INPUT_BID),
    .BUSER(m_axi_DATA_INPUT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_INPUT_ARVALID),
    .I_ARREADY(DATA_INPUT_ARREADY),
    .I_ARADDR(grp_store_input_fu_447_m_axi_input_r_ARADDR),
    .I_ARID(grp_store_input_fu_447_m_axi_input_r_ARID),
    .I_ARLEN(grp_store_input_fu_447_m_axi_input_r_ARLEN),
    .I_ARSIZE(grp_store_input_fu_447_m_axi_input_r_ARSIZE),
    .I_ARLOCK(grp_store_input_fu_447_m_axi_input_r_ARLOCK),
    .I_ARCACHE(grp_store_input_fu_447_m_axi_input_r_ARCACHE),
    .I_ARQOS(grp_store_input_fu_447_m_axi_input_r_ARQOS),
    .I_ARPROT(grp_store_input_fu_447_m_axi_input_r_ARPROT),
    .I_ARUSER(grp_store_input_fu_447_m_axi_input_r_ARUSER),
    .I_ARBURST(grp_store_input_fu_447_m_axi_input_r_ARBURST),
    .I_ARREGION(grp_store_input_fu_447_m_axi_input_r_ARREGION),
    .I_RVALID(DATA_INPUT_RVALID),
    .I_RREADY(DATA_INPUT_RREADY),
    .I_RDATA(DATA_INPUT_RDATA),
    .I_RID(DATA_INPUT_RID),
    .I_RUSER(DATA_INPUT_RUSER),
    .I_RRESP(DATA_INPUT_RRESP),
    .I_RLAST(DATA_INPUT_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_INPUT_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_INPUT_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_INPUT_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_INPUT_BRESP),
    .I_BID(DATA_INPUT_BID),
    .I_BUSER(DATA_INPUT_BUSER)
);

conv1_DATA_WEIGHT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_WEIGHT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_WEIGHT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_WEIGHT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_WEIGHT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_WEIGHT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_WEIGHT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_WEIGHT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_WEIGHT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_WEIGHT_CACHE_VALUE ))
conv1_DATA_WEIGHT_m_axi_U(
    .AWVALID(m_axi_DATA_WEIGHT_AWVALID),
    .AWREADY(m_axi_DATA_WEIGHT_AWREADY),
    .AWADDR(m_axi_DATA_WEIGHT_AWADDR),
    .AWID(m_axi_DATA_WEIGHT_AWID),
    .AWLEN(m_axi_DATA_WEIGHT_AWLEN),
    .AWSIZE(m_axi_DATA_WEIGHT_AWSIZE),
    .AWBURST(m_axi_DATA_WEIGHT_AWBURST),
    .AWLOCK(m_axi_DATA_WEIGHT_AWLOCK),
    .AWCACHE(m_axi_DATA_WEIGHT_AWCACHE),
    .AWPROT(m_axi_DATA_WEIGHT_AWPROT),
    .AWQOS(m_axi_DATA_WEIGHT_AWQOS),
    .AWREGION(m_axi_DATA_WEIGHT_AWREGION),
    .AWUSER(m_axi_DATA_WEIGHT_AWUSER),
    .WVALID(m_axi_DATA_WEIGHT_WVALID),
    .WREADY(m_axi_DATA_WEIGHT_WREADY),
    .WDATA(m_axi_DATA_WEIGHT_WDATA),
    .WSTRB(m_axi_DATA_WEIGHT_WSTRB),
    .WLAST(m_axi_DATA_WEIGHT_WLAST),
    .WID(m_axi_DATA_WEIGHT_WID),
    .WUSER(m_axi_DATA_WEIGHT_WUSER),
    .ARVALID(m_axi_DATA_WEIGHT_ARVALID),
    .ARREADY(m_axi_DATA_WEIGHT_ARREADY),
    .ARADDR(m_axi_DATA_WEIGHT_ARADDR),
    .ARID(m_axi_DATA_WEIGHT_ARID),
    .ARLEN(m_axi_DATA_WEIGHT_ARLEN),
    .ARSIZE(m_axi_DATA_WEIGHT_ARSIZE),
    .ARBURST(m_axi_DATA_WEIGHT_ARBURST),
    .ARLOCK(m_axi_DATA_WEIGHT_ARLOCK),
    .ARCACHE(m_axi_DATA_WEIGHT_ARCACHE),
    .ARPROT(m_axi_DATA_WEIGHT_ARPROT),
    .ARQOS(m_axi_DATA_WEIGHT_ARQOS),
    .ARREGION(m_axi_DATA_WEIGHT_ARREGION),
    .ARUSER(m_axi_DATA_WEIGHT_ARUSER),
    .RVALID(m_axi_DATA_WEIGHT_RVALID),
    .RREADY(m_axi_DATA_WEIGHT_RREADY),
    .RDATA(m_axi_DATA_WEIGHT_RDATA),
    .RLAST(m_axi_DATA_WEIGHT_RLAST),
    .RID(m_axi_DATA_WEIGHT_RID),
    .RUSER(m_axi_DATA_WEIGHT_RUSER),
    .RRESP(m_axi_DATA_WEIGHT_RRESP),
    .BVALID(m_axi_DATA_WEIGHT_BVALID),
    .BREADY(m_axi_DATA_WEIGHT_BREADY),
    .BRESP(m_axi_DATA_WEIGHT_BRESP),
    .BID(m_axi_DATA_WEIGHT_BID),
    .BUSER(m_axi_DATA_WEIGHT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_WEIGHT_ARVALID),
    .I_ARREADY(DATA_WEIGHT_ARREADY),
    .I_ARADDR(DATA_WEIGHT_ARADDR),
    .I_ARID(DATA_WEIGHT_ARID),
    .I_ARLEN(DATA_WEIGHT_ARLEN),
    .I_ARSIZE(DATA_WEIGHT_ARSIZE),
    .I_ARLOCK(DATA_WEIGHT_ARLOCK),
    .I_ARCACHE(DATA_WEIGHT_ARCACHE),
    .I_ARQOS(DATA_WEIGHT_ARQOS),
    .I_ARPROT(DATA_WEIGHT_ARPROT),
    .I_ARUSER(DATA_WEIGHT_ARUSER),
    .I_ARBURST(DATA_WEIGHT_ARBURST),
    .I_ARREGION(DATA_WEIGHT_ARREGION),
    .I_RVALID(DATA_WEIGHT_RVALID),
    .I_RREADY(DATA_WEIGHT_RREADY),
    .I_RDATA(DATA_WEIGHT_RDATA),
    .I_RID(DATA_WEIGHT_RID),
    .I_RUSER(DATA_WEIGHT_RUSER),
    .I_RRESP(DATA_WEIGHT_RRESP),
    .I_RLAST(DATA_WEIGHT_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_WEIGHT_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_WEIGHT_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_WEIGHT_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_WEIGHT_BRESP),
    .I_BID(DATA_WEIGHT_BID),
    .I_BUSER(DATA_WEIGHT_BUSER)
);

conv1_DATA_BIAS_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_BIAS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_BIAS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_BIAS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_BIAS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_BIAS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_BIAS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_BIAS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BIAS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_BIAS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_BIAS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_BIAS_CACHE_VALUE ))
conv1_DATA_BIAS_m_axi_U(
    .AWVALID(m_axi_DATA_BIAS_AWVALID),
    .AWREADY(m_axi_DATA_BIAS_AWREADY),
    .AWADDR(m_axi_DATA_BIAS_AWADDR),
    .AWID(m_axi_DATA_BIAS_AWID),
    .AWLEN(m_axi_DATA_BIAS_AWLEN),
    .AWSIZE(m_axi_DATA_BIAS_AWSIZE),
    .AWBURST(m_axi_DATA_BIAS_AWBURST),
    .AWLOCK(m_axi_DATA_BIAS_AWLOCK),
    .AWCACHE(m_axi_DATA_BIAS_AWCACHE),
    .AWPROT(m_axi_DATA_BIAS_AWPROT),
    .AWQOS(m_axi_DATA_BIAS_AWQOS),
    .AWREGION(m_axi_DATA_BIAS_AWREGION),
    .AWUSER(m_axi_DATA_BIAS_AWUSER),
    .WVALID(m_axi_DATA_BIAS_WVALID),
    .WREADY(m_axi_DATA_BIAS_WREADY),
    .WDATA(m_axi_DATA_BIAS_WDATA),
    .WSTRB(m_axi_DATA_BIAS_WSTRB),
    .WLAST(m_axi_DATA_BIAS_WLAST),
    .WID(m_axi_DATA_BIAS_WID),
    .WUSER(m_axi_DATA_BIAS_WUSER),
    .ARVALID(m_axi_DATA_BIAS_ARVALID),
    .ARREADY(m_axi_DATA_BIAS_ARREADY),
    .ARADDR(m_axi_DATA_BIAS_ARADDR),
    .ARID(m_axi_DATA_BIAS_ARID),
    .ARLEN(m_axi_DATA_BIAS_ARLEN),
    .ARSIZE(m_axi_DATA_BIAS_ARSIZE),
    .ARBURST(m_axi_DATA_BIAS_ARBURST),
    .ARLOCK(m_axi_DATA_BIAS_ARLOCK),
    .ARCACHE(m_axi_DATA_BIAS_ARCACHE),
    .ARPROT(m_axi_DATA_BIAS_ARPROT),
    .ARQOS(m_axi_DATA_BIAS_ARQOS),
    .ARREGION(m_axi_DATA_BIAS_ARREGION),
    .ARUSER(m_axi_DATA_BIAS_ARUSER),
    .RVALID(m_axi_DATA_BIAS_RVALID),
    .RREADY(m_axi_DATA_BIAS_RREADY),
    .RDATA(m_axi_DATA_BIAS_RDATA),
    .RLAST(m_axi_DATA_BIAS_RLAST),
    .RID(m_axi_DATA_BIAS_RID),
    .RUSER(m_axi_DATA_BIAS_RUSER),
    .RRESP(m_axi_DATA_BIAS_RRESP),
    .BVALID(m_axi_DATA_BIAS_BVALID),
    .BREADY(m_axi_DATA_BIAS_BREADY),
    .BRESP(m_axi_DATA_BIAS_BRESP),
    .BID(m_axi_DATA_BIAS_BID),
    .BUSER(m_axi_DATA_BIAS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_BIAS_ARVALID),
    .I_ARREADY(DATA_BIAS_ARREADY),
    .I_ARADDR(DATA_BIAS_ARADDR),
    .I_ARID(DATA_BIAS_ARID),
    .I_ARLEN(DATA_BIAS_ARLEN),
    .I_ARSIZE(DATA_BIAS_ARSIZE),
    .I_ARLOCK(DATA_BIAS_ARLOCK),
    .I_ARCACHE(DATA_BIAS_ARCACHE),
    .I_ARQOS(DATA_BIAS_ARQOS),
    .I_ARPROT(DATA_BIAS_ARPROT),
    .I_ARUSER(DATA_BIAS_ARUSER),
    .I_ARBURST(DATA_BIAS_ARBURST),
    .I_ARREGION(DATA_BIAS_ARREGION),
    .I_RVALID(DATA_BIAS_RVALID),
    .I_RREADY(DATA_BIAS_RREADY),
    .I_RDATA(DATA_BIAS_RDATA),
    .I_RID(DATA_BIAS_RID),
    .I_RUSER(DATA_BIAS_RUSER),
    .I_RRESP(DATA_BIAS_RRESP),
    .I_RLAST(DATA_BIAS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_BIAS_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_BIAS_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_BIAS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_BIAS_BRESP),
    .I_BID(DATA_BIAS_BID),
    .I_BUSER(DATA_BIAS_BUSER)
);

conv1_DATA_OUTPUT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_OUTPUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_OUTPUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_OUTPUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_OUTPUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_OUTPUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_OUTPUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_OUTPUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_OUTPUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_OUTPUT_CACHE_VALUE ))
conv1_DATA_OUTPUT_m_axi_U(
    .AWVALID(m_axi_DATA_OUTPUT_AWVALID),
    .AWREADY(m_axi_DATA_OUTPUT_AWREADY),
    .AWADDR(m_axi_DATA_OUTPUT_AWADDR),
    .AWID(m_axi_DATA_OUTPUT_AWID),
    .AWLEN(m_axi_DATA_OUTPUT_AWLEN),
    .AWSIZE(m_axi_DATA_OUTPUT_AWSIZE),
    .AWBURST(m_axi_DATA_OUTPUT_AWBURST),
    .AWLOCK(m_axi_DATA_OUTPUT_AWLOCK),
    .AWCACHE(m_axi_DATA_OUTPUT_AWCACHE),
    .AWPROT(m_axi_DATA_OUTPUT_AWPROT),
    .AWQOS(m_axi_DATA_OUTPUT_AWQOS),
    .AWREGION(m_axi_DATA_OUTPUT_AWREGION),
    .AWUSER(m_axi_DATA_OUTPUT_AWUSER),
    .WVALID(m_axi_DATA_OUTPUT_WVALID),
    .WREADY(m_axi_DATA_OUTPUT_WREADY),
    .WDATA(m_axi_DATA_OUTPUT_WDATA),
    .WSTRB(m_axi_DATA_OUTPUT_WSTRB),
    .WLAST(m_axi_DATA_OUTPUT_WLAST),
    .WID(m_axi_DATA_OUTPUT_WID),
    .WUSER(m_axi_DATA_OUTPUT_WUSER),
    .ARVALID(m_axi_DATA_OUTPUT_ARVALID),
    .ARREADY(m_axi_DATA_OUTPUT_ARREADY),
    .ARADDR(m_axi_DATA_OUTPUT_ARADDR),
    .ARID(m_axi_DATA_OUTPUT_ARID),
    .ARLEN(m_axi_DATA_OUTPUT_ARLEN),
    .ARSIZE(m_axi_DATA_OUTPUT_ARSIZE),
    .ARBURST(m_axi_DATA_OUTPUT_ARBURST),
    .ARLOCK(m_axi_DATA_OUTPUT_ARLOCK),
    .ARCACHE(m_axi_DATA_OUTPUT_ARCACHE),
    .ARPROT(m_axi_DATA_OUTPUT_ARPROT),
    .ARQOS(m_axi_DATA_OUTPUT_ARQOS),
    .ARREGION(m_axi_DATA_OUTPUT_ARREGION),
    .ARUSER(m_axi_DATA_OUTPUT_ARUSER),
    .RVALID(m_axi_DATA_OUTPUT_RVALID),
    .RREADY(m_axi_DATA_OUTPUT_RREADY),
    .RDATA(m_axi_DATA_OUTPUT_RDATA),
    .RLAST(m_axi_DATA_OUTPUT_RLAST),
    .RID(m_axi_DATA_OUTPUT_RID),
    .RUSER(m_axi_DATA_OUTPUT_RUSER),
    .RRESP(m_axi_DATA_OUTPUT_RRESP),
    .BVALID(m_axi_DATA_OUTPUT_BVALID),
    .BREADY(m_axi_DATA_OUTPUT_BREADY),
    .BRESP(m_axi_DATA_OUTPUT_BRESP),
    .BID(m_axi_DATA_OUTPUT_BID),
    .BUSER(m_axi_DATA_OUTPUT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_OUTPUT_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_OUTPUT_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_OUTPUT_RDATA),
    .I_RID(DATA_OUTPUT_RID),
    .I_RUSER(DATA_OUTPUT_RUSER),
    .I_RRESP(DATA_OUTPUT_RRESP),
    .I_RLAST(DATA_OUTPUT_RLAST),
    .I_AWVALID(DATA_OUTPUT_AWVALID),
    .I_AWREADY(DATA_OUTPUT_AWREADY),
    .I_AWADDR(grp_store_output_fu_472_m_axi_output_r_AWADDR),
    .I_AWID(grp_store_output_fu_472_m_axi_output_r_AWID),
    .I_AWLEN(grp_store_output_fu_472_m_axi_output_r_AWLEN),
    .I_AWSIZE(grp_store_output_fu_472_m_axi_output_r_AWSIZE),
    .I_AWLOCK(grp_store_output_fu_472_m_axi_output_r_AWLOCK),
    .I_AWCACHE(grp_store_output_fu_472_m_axi_output_r_AWCACHE),
    .I_AWQOS(grp_store_output_fu_472_m_axi_output_r_AWQOS),
    .I_AWPROT(grp_store_output_fu_472_m_axi_output_r_AWPROT),
    .I_AWUSER(grp_store_output_fu_472_m_axi_output_r_AWUSER),
    .I_AWBURST(grp_store_output_fu_472_m_axi_output_r_AWBURST),
    .I_AWREGION(grp_store_output_fu_472_m_axi_output_r_AWREGION),
    .I_WVALID(DATA_OUTPUT_WVALID),
    .I_WREADY(DATA_OUTPUT_WREADY),
    .I_WDATA(grp_store_output_fu_472_m_axi_output_r_WDATA),
    .I_WID(grp_store_output_fu_472_m_axi_output_r_WID),
    .I_WUSER(grp_store_output_fu_472_m_axi_output_r_WUSER),
    .I_WLAST(grp_store_output_fu_472_m_axi_output_r_WLAST),
    .I_WSTRB(grp_store_output_fu_472_m_axi_output_r_WSTRB),
    .I_BVALID(DATA_OUTPUT_BVALID),
    .I_BREADY(DATA_OUTPUT_BREADY),
    .I_BRESP(DATA_OUTPUT_BRESP),
    .I_BID(DATA_OUTPUT_BID),
    .I_BUSER(DATA_OUTPUT_BUSER)
);

conv1_input_oc_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
input_oc_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_oc_0_address0),
    .ce0(input_oc_0_ce0),
    .we0(input_oc_0_we0),
    .d0(grp_store_input_fu_447_input_oc_0_d0),
    .q0(input_oc_0_q0),
    .address1(grp_convulution1_fu_362_input_0_address1),
    .ce1(input_oc_0_ce1),
    .q1(input_oc_0_q1)
);

conv1_weights_oc_0 #(
    .DataWidth( 32 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
weights_oc_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_oc_0_address0),
    .ce0(weights_oc_0_ce0),
    .we0(weights_oc_0_we0),
    .d0(grp_store_weights_fu_438_weights_oc_0_d0),
    .q0(weights_oc_0_q0),
    .address1(grp_convulution1_fu_362_weights_0_address1),
    .ce1(weights_oc_0_ce1),
    .q1(weights_oc_0_q1)
);

conv1_weights_3_oc #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
weights_3_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_3_oc_address0),
    .ce0(weights_3_oc_ce0),
    .we0(weights_3_oc_we0),
    .d0(grp_store_weights_3_fu_410_weights_oc_d0),
    .q0(weights_3_oc_q0),
    .address1(grp_convolution_3_fu_354_weights_address1),
    .ce1(weights_3_oc_ce1),
    .q1(weights_3_oc_q1)
);

conv1_weights_5_oc #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
weights_5_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_5_oc_address0),
    .ce0(weights_5_oc_ce0),
    .we0(weights_5_oc_we0),
    .d0(grp_store_weights_5_fu_402_weights_oc_d0),
    .q0(weights_5_oc_q0)
);

conv1_bias_oc #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
bias_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias_oc_address0),
    .ce0(bias_oc_ce0),
    .we0(bias_oc_we0),
    .d0(grp_store_bias_fu_480_bias_oc_d0),
    .q0(bias_oc_q0)
);

conv1_bias_3_oc #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bias_3_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias_3_oc_address0),
    .ce0(bias_3_oc_ce0),
    .we0(bias_3_oc_we0),
    .d0(grp_store_bias_3_fu_464_bias_oc_d0),
    .q0(bias_3_oc_q0)
);

conv1_bias_5_oc #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
bias_5_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias_5_oc_address0),
    .ce0(bias_5_oc_ce0),
    .we0(bias_5_oc_we0),
    .d0(grp_store_bias_5_fu_456_bias_oc_d0),
    .q0(bias_5_oc_q0)
);

conv1_output1_oc #(
    .DataWidth( 32 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
output1_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output1_oc_address0),
    .ce0(output1_oc_ce0),
    .we0(output1_oc_we0),
    .d0(output1_oc_d0),
    .q0(output1_oc_q0)
);

conv1_output2_oc #(
    .DataWidth( 32 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
output2_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output2_oc_address0),
    .ce0(output2_oc_ce0),
    .we0(output2_oc_we0),
    .d0(output2_oc_d0),
    .q0(output2_oc_q0),
    .address1(grp_convolution_3_fu_354_input_r_address1),
    .ce1(output2_oc_ce1),
    .q1(output2_oc_q1)
);

conv1_output3_oc #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
output3_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output3_oc_address0),
    .ce0(output3_oc_ce0),
    .we0(output3_oc_we0),
    .d0(output3_oc_d0),
    .q0(output3_oc_q0)
);

conv1_output4_oc #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
output4_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output4_oc_address0),
    .ce0(output4_oc_ce0),
    .we0(output4_oc_we0),
    .d0(output4_oc_d0),
    .q0(output4_oc_q0)
);

conv1_bias_5_oc #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
output5_oc_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output5_oc_0_0_address0),
    .ce0(output5_oc_0_0_ce0),
    .we0(output5_oc_0_0_we0),
    .d0(output5_oc_0_0_d0),
    .q0(output5_oc_0_0_q0)
);

conv1_output6_oc #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
output6_oc_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output6_oc_address0),
    .ce0(output6_oc_ce0),
    .we0(output6_oc_we0),
    .d0(output6_oc_d0),
    .q0(output6_oc_q0)
);

convolution_3 grp_convolution_3_fu_354(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution_3_fu_354_ap_start),
    .ap_done(grp_convolution_3_fu_354_ap_done),
    .ap_idle(grp_convolution_3_fu_354_ap_idle),
    .ap_ready(grp_convolution_3_fu_354_ap_ready),
    .input_r_address0(grp_convolution_3_fu_354_input_r_address0),
    .input_r_ce0(grp_convolution_3_fu_354_input_r_ce0),
    .input_r_q0(output2_oc_q0),
    .input_r_address1(grp_convolution_3_fu_354_input_r_address1),
    .input_r_ce1(grp_convolution_3_fu_354_input_r_ce1),
    .input_r_q1(output2_oc_q1),
    .weights_address0(grp_convolution_3_fu_354_weights_address0),
    .weights_ce0(grp_convolution_3_fu_354_weights_ce0),
    .weights_q0(weights_3_oc_q0),
    .weights_address1(grp_convolution_3_fu_354_weights_address1),
    .weights_ce1(grp_convolution_3_fu_354_weights_ce1),
    .weights_q1(weights_3_oc_q1),
    .bias_address0(grp_convolution_3_fu_354_bias_address0),
    .bias_ce0(grp_convolution_3_fu_354_bias_ce0),
    .bias_q0(bias_3_oc_q0),
    .output_r_address0(grp_convolution_3_fu_354_output_r_address0),
    .output_r_ce0(grp_convolution_3_fu_354_output_r_ce0),
    .output_r_we0(grp_convolution_3_fu_354_output_r_we0),
    .output_r_d0(grp_convolution_3_fu_354_output_r_d0)
);

convulution1 grp_convulution1_fu_362(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convulution1_fu_362_ap_start),
    .ap_done(grp_convulution1_fu_362_ap_done),
    .ap_idle(grp_convulution1_fu_362_ap_idle),
    .ap_ready(grp_convulution1_fu_362_ap_ready),
    .input_0_address0(grp_convulution1_fu_362_input_0_address0),
    .input_0_ce0(grp_convulution1_fu_362_input_0_ce0),
    .input_0_q0(input_oc_0_q0),
    .input_0_address1(grp_convulution1_fu_362_input_0_address1),
    .input_0_ce1(grp_convulution1_fu_362_input_0_ce1),
    .input_0_q1(input_oc_0_q1),
    .weights_0_address0(grp_convulution1_fu_362_weights_0_address0),
    .weights_0_ce0(grp_convulution1_fu_362_weights_0_ce0),
    .weights_0_q0(weights_oc_0_q0),
    .weights_0_address1(grp_convulution1_fu_362_weights_0_address1),
    .weights_0_ce1(grp_convulution1_fu_362_weights_0_ce1),
    .weights_0_q1(weights_oc_0_q1),
    .bias_address0(grp_convulution1_fu_362_bias_address0),
    .bias_ce0(grp_convulution1_fu_362_bias_ce0),
    .bias_q0(bias_oc_q0),
    .output_r_address0(grp_convulution1_fu_362_output_r_address0),
    .output_r_ce0(grp_convulution1_fu_362_output_r_ce0),
    .output_r_we0(grp_convulution1_fu_362_output_r_we0),
    .output_r_d0(grp_convulution1_fu_362_output_r_d0)
);

fc_6 grp_fc_6_fu_370(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fc_6_fu_370_ap_start),
    .ap_done(grp_fc_6_fu_370_ap_done),
    .ap_idle(grp_fc_6_fu_370_ap_idle),
    .ap_ready(grp_fc_6_fu_370_ap_ready),
    .input_0_0_address0(grp_fc_6_fu_370_input_0_0_address0),
    .input_0_0_ce0(grp_fc_6_fu_370_input_0_0_ce0),
    .input_0_0_q0(output5_oc_0_0_q0),
    .m_axi_weights_AWVALID(grp_fc_6_fu_370_m_axi_weights_AWVALID),
    .m_axi_weights_AWREADY(1'b0),
    .m_axi_weights_AWADDR(grp_fc_6_fu_370_m_axi_weights_AWADDR),
    .m_axi_weights_AWID(grp_fc_6_fu_370_m_axi_weights_AWID),
    .m_axi_weights_AWLEN(grp_fc_6_fu_370_m_axi_weights_AWLEN),
    .m_axi_weights_AWSIZE(grp_fc_6_fu_370_m_axi_weights_AWSIZE),
    .m_axi_weights_AWBURST(grp_fc_6_fu_370_m_axi_weights_AWBURST),
    .m_axi_weights_AWLOCK(grp_fc_6_fu_370_m_axi_weights_AWLOCK),
    .m_axi_weights_AWCACHE(grp_fc_6_fu_370_m_axi_weights_AWCACHE),
    .m_axi_weights_AWPROT(grp_fc_6_fu_370_m_axi_weights_AWPROT),
    .m_axi_weights_AWQOS(grp_fc_6_fu_370_m_axi_weights_AWQOS),
    .m_axi_weights_AWREGION(grp_fc_6_fu_370_m_axi_weights_AWREGION),
    .m_axi_weights_AWUSER(grp_fc_6_fu_370_m_axi_weights_AWUSER),
    .m_axi_weights_WVALID(grp_fc_6_fu_370_m_axi_weights_WVALID),
    .m_axi_weights_WREADY(1'b0),
    .m_axi_weights_WDATA(grp_fc_6_fu_370_m_axi_weights_WDATA),
    .m_axi_weights_WSTRB(grp_fc_6_fu_370_m_axi_weights_WSTRB),
    .m_axi_weights_WLAST(grp_fc_6_fu_370_m_axi_weights_WLAST),
    .m_axi_weights_WID(grp_fc_6_fu_370_m_axi_weights_WID),
    .m_axi_weights_WUSER(grp_fc_6_fu_370_m_axi_weights_WUSER),
    .m_axi_weights_ARVALID(grp_fc_6_fu_370_m_axi_weights_ARVALID),
    .m_axi_weights_ARREADY(DATA_WEIGHT_ARREADY),
    .m_axi_weights_ARADDR(grp_fc_6_fu_370_m_axi_weights_ARADDR),
    .m_axi_weights_ARID(grp_fc_6_fu_370_m_axi_weights_ARID),
    .m_axi_weights_ARLEN(grp_fc_6_fu_370_m_axi_weights_ARLEN),
    .m_axi_weights_ARSIZE(grp_fc_6_fu_370_m_axi_weights_ARSIZE),
    .m_axi_weights_ARBURST(grp_fc_6_fu_370_m_axi_weights_ARBURST),
    .m_axi_weights_ARLOCK(grp_fc_6_fu_370_m_axi_weights_ARLOCK),
    .m_axi_weights_ARCACHE(grp_fc_6_fu_370_m_axi_weights_ARCACHE),
    .m_axi_weights_ARPROT(grp_fc_6_fu_370_m_axi_weights_ARPROT),
    .m_axi_weights_ARQOS(grp_fc_6_fu_370_m_axi_weights_ARQOS),
    .m_axi_weights_ARREGION(grp_fc_6_fu_370_m_axi_weights_ARREGION),
    .m_axi_weights_ARUSER(grp_fc_6_fu_370_m_axi_weights_ARUSER),
    .m_axi_weights_RVALID(DATA_WEIGHT_RVALID),
    .m_axi_weights_RREADY(grp_fc_6_fu_370_m_axi_weights_RREADY),
    .m_axi_weights_RDATA(DATA_WEIGHT_RDATA),
    .m_axi_weights_RLAST(DATA_WEIGHT_RLAST),
    .m_axi_weights_RID(DATA_WEIGHT_RID),
    .m_axi_weights_RUSER(DATA_WEIGHT_RUSER),
    .m_axi_weights_RRESP(DATA_WEIGHT_RRESP),
    .m_axi_weights_BVALID(1'b0),
    .m_axi_weights_BREADY(grp_fc_6_fu_370_m_axi_weights_BREADY),
    .m_axi_weights_BRESP(2'd0),
    .m_axi_weights_BID(1'd0),
    .m_axi_weights_BUSER(1'd0),
    .weights_offset(weights_s_reg_738),
    .m_axi_bias_AWVALID(grp_fc_6_fu_370_m_axi_bias_AWVALID),
    .m_axi_bias_AWREADY(1'b0),
    .m_axi_bias_AWADDR(grp_fc_6_fu_370_m_axi_bias_AWADDR),
    .m_axi_bias_AWID(grp_fc_6_fu_370_m_axi_bias_AWID),
    .m_axi_bias_AWLEN(grp_fc_6_fu_370_m_axi_bias_AWLEN),
    .m_axi_bias_AWSIZE(grp_fc_6_fu_370_m_axi_bias_AWSIZE),
    .m_axi_bias_AWBURST(grp_fc_6_fu_370_m_axi_bias_AWBURST),
    .m_axi_bias_AWLOCK(grp_fc_6_fu_370_m_axi_bias_AWLOCK),
    .m_axi_bias_AWCACHE(grp_fc_6_fu_370_m_axi_bias_AWCACHE),
    .m_axi_bias_AWPROT(grp_fc_6_fu_370_m_axi_bias_AWPROT),
    .m_axi_bias_AWQOS(grp_fc_6_fu_370_m_axi_bias_AWQOS),
    .m_axi_bias_AWREGION(grp_fc_6_fu_370_m_axi_bias_AWREGION),
    .m_axi_bias_AWUSER(grp_fc_6_fu_370_m_axi_bias_AWUSER),
    .m_axi_bias_WVALID(grp_fc_6_fu_370_m_axi_bias_WVALID),
    .m_axi_bias_WREADY(1'b0),
    .m_axi_bias_WDATA(grp_fc_6_fu_370_m_axi_bias_WDATA),
    .m_axi_bias_WSTRB(grp_fc_6_fu_370_m_axi_bias_WSTRB),
    .m_axi_bias_WLAST(grp_fc_6_fu_370_m_axi_bias_WLAST),
    .m_axi_bias_WID(grp_fc_6_fu_370_m_axi_bias_WID),
    .m_axi_bias_WUSER(grp_fc_6_fu_370_m_axi_bias_WUSER),
    .m_axi_bias_ARVALID(grp_fc_6_fu_370_m_axi_bias_ARVALID),
    .m_axi_bias_ARREADY(DATA_BIAS_ARREADY),
    .m_axi_bias_ARADDR(grp_fc_6_fu_370_m_axi_bias_ARADDR),
    .m_axi_bias_ARID(grp_fc_6_fu_370_m_axi_bias_ARID),
    .m_axi_bias_ARLEN(grp_fc_6_fu_370_m_axi_bias_ARLEN),
    .m_axi_bias_ARSIZE(grp_fc_6_fu_370_m_axi_bias_ARSIZE),
    .m_axi_bias_ARBURST(grp_fc_6_fu_370_m_axi_bias_ARBURST),
    .m_axi_bias_ARLOCK(grp_fc_6_fu_370_m_axi_bias_ARLOCK),
    .m_axi_bias_ARCACHE(grp_fc_6_fu_370_m_axi_bias_ARCACHE),
    .m_axi_bias_ARPROT(grp_fc_6_fu_370_m_axi_bias_ARPROT),
    .m_axi_bias_ARQOS(grp_fc_6_fu_370_m_axi_bias_ARQOS),
    .m_axi_bias_ARREGION(grp_fc_6_fu_370_m_axi_bias_ARREGION),
    .m_axi_bias_ARUSER(grp_fc_6_fu_370_m_axi_bias_ARUSER),
    .m_axi_bias_RVALID(DATA_BIAS_RVALID),
    .m_axi_bias_RREADY(grp_fc_6_fu_370_m_axi_bias_RREADY),
    .m_axi_bias_RDATA(DATA_BIAS_RDATA),
    .m_axi_bias_RLAST(DATA_BIAS_RLAST),
    .m_axi_bias_RID(DATA_BIAS_RID),
    .m_axi_bias_RUSER(DATA_BIAS_RUSER),
    .m_axi_bias_RRESP(DATA_BIAS_RRESP),
    .m_axi_bias_BVALID(1'b0),
    .m_axi_bias_BREADY(grp_fc_6_fu_370_m_axi_bias_BREADY),
    .m_axi_bias_BRESP(2'd0),
    .m_axi_bias_BID(1'd0),
    .m_axi_bias_BUSER(1'd0),
    .bias_offset(bias_s_reg_718),
    .output_r_address0(grp_fc_6_fu_370_output_r_address0),
    .output_r_ce0(grp_fc_6_fu_370_output_r_ce0),
    .output_r_we0(grp_fc_6_fu_370_output_r_we0),
    .output_r_d0(grp_fc_6_fu_370_output_r_d0)
);

convolution_5 grp_convolution_5_fu_382(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution_5_fu_382_ap_start),
    .ap_done(grp_convolution_5_fu_382_ap_done),
    .ap_idle(grp_convolution_5_fu_382_ap_idle),
    .ap_ready(grp_convolution_5_fu_382_ap_ready),
    .input_r_address0(grp_convolution_5_fu_382_input_r_address0),
    .input_r_ce0(grp_convolution_5_fu_382_input_r_ce0),
    .input_r_q0(output4_oc_q0),
    .weights_address0(grp_convolution_5_fu_382_weights_address0),
    .weights_ce0(grp_convolution_5_fu_382_weights_ce0),
    .weights_q0(weights_5_oc_q0),
    .bias_address0(grp_convolution_5_fu_382_bias_address0),
    .bias_ce0(grp_convolution_5_fu_382_bias_ce0),
    .bias_q0(bias_5_oc_q0),
    .output_0_0_address0(grp_convolution_5_fu_382_output_0_0_address0),
    .output_0_0_ce0(grp_convolution_5_fu_382_output_0_0_ce0),
    .output_0_0_we0(grp_convolution_5_fu_382_output_0_0_we0),
    .output_0_0_d0(grp_convolution_5_fu_382_output_0_0_d0)
);

maxpool_2 grp_maxpool_2_fu_390(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_maxpool_2_fu_390_ap_start),
    .ap_done(grp_maxpool_2_fu_390_ap_done),
    .ap_idle(grp_maxpool_2_fu_390_ap_idle),
    .ap_ready(grp_maxpool_2_fu_390_ap_ready),
    .input_r_address0(grp_maxpool_2_fu_390_input_r_address0),
    .input_r_ce0(grp_maxpool_2_fu_390_input_r_ce0),
    .input_r_q0(output1_oc_q0),
    .output_r_address0(grp_maxpool_2_fu_390_output_r_address0),
    .output_r_ce0(grp_maxpool_2_fu_390_output_r_ce0),
    .output_r_we0(grp_maxpool_2_fu_390_output_r_we0),
    .output_r_d0(grp_maxpool_2_fu_390_output_r_d0)
);

maxpool_4 grp_maxpool_4_fu_396(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_maxpool_4_fu_396_ap_start),
    .ap_done(grp_maxpool_4_fu_396_ap_done),
    .ap_idle(grp_maxpool_4_fu_396_ap_idle),
    .ap_ready(grp_maxpool_4_fu_396_ap_ready),
    .input_r_address0(grp_maxpool_4_fu_396_input_r_address0),
    .input_r_ce0(grp_maxpool_4_fu_396_input_r_ce0),
    .input_r_q0(output3_oc_q0),
    .output_r_address0(grp_maxpool_4_fu_396_output_r_address0),
    .output_r_ce0(grp_maxpool_4_fu_396_output_r_ce0),
    .output_r_we0(grp_maxpool_4_fu_396_output_r_we0),
    .output_r_d0(grp_maxpool_4_fu_396_output_r_d0)
);

store_weights_5 grp_store_weights_5_fu_402(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_store_weights_5_fu_402_ap_start),
    .ap_done(grp_store_weights_5_fu_402_ap_done),
    .ap_idle(grp_store_weights_5_fu_402_ap_idle),
    .ap_ready(grp_store_weights_5_fu_402_ap_ready),
    .m_axi_weights_AWVALID(grp_store_weights_5_fu_402_m_axi_weights_AWVALID),
    .m_axi_weights_AWREADY(1'b0),
    .m_axi_weights_AWADDR(grp_store_weights_5_fu_402_m_axi_weights_AWADDR),
    .m_axi_weights_AWID(grp_store_weights_5_fu_402_m_axi_weights_AWID),
    .m_axi_weights_AWLEN(grp_store_weights_5_fu_402_m_axi_weights_AWLEN),
    .m_axi_weights_AWSIZE(grp_store_weights_5_fu_402_m_axi_weights_AWSIZE),
    .m_axi_weights_AWBURST(grp_store_weights_5_fu_402_m_axi_weights_AWBURST),
    .m_axi_weights_AWLOCK(grp_store_weights_5_fu_402_m_axi_weights_AWLOCK),
    .m_axi_weights_AWCACHE(grp_store_weights_5_fu_402_m_axi_weights_AWCACHE),
    .m_axi_weights_AWPROT(grp_store_weights_5_fu_402_m_axi_weights_AWPROT),
    .m_axi_weights_AWQOS(grp_store_weights_5_fu_402_m_axi_weights_AWQOS),
    .m_axi_weights_AWREGION(grp_store_weights_5_fu_402_m_axi_weights_AWREGION),
    .m_axi_weights_AWUSER(grp_store_weights_5_fu_402_m_axi_weights_AWUSER),
    .m_axi_weights_WVALID(grp_store_weights_5_fu_402_m_axi_weights_WVALID),
    .m_axi_weights_WREADY(1'b0),
    .m_axi_weights_WDATA(grp_store_weights_5_fu_402_m_axi_weights_WDATA),
    .m_axi_weights_WSTRB(grp_store_weights_5_fu_402_m_axi_weights_WSTRB),
    .m_axi_weights_WLAST(grp_store_weights_5_fu_402_m_axi_weights_WLAST),
    .m_axi_weights_WID(grp_store_weights_5_fu_402_m_axi_weights_WID),
    .m_axi_weights_WUSER(grp_store_weights_5_fu_402_m_axi_weights_WUSER),
    .m_axi_weights_ARVALID(grp_store_weights_5_fu_402_m_axi_weights_ARVALID),
    .m_axi_weights_ARREADY(DATA_WEIGHT_ARREADY),
    .m_axi_weights_ARADDR(grp_store_weights_5_fu_402_m_axi_weights_ARADDR),
    .m_axi_weights_ARID(grp_store_weights_5_fu_402_m_axi_weights_ARID),
    .m_axi_weights_ARLEN(grp_store_weights_5_fu_402_m_axi_weights_ARLEN),
    .m_axi_weights_ARSIZE(grp_store_weights_5_fu_402_m_axi_weights_ARSIZE),
    .m_axi_weights_ARBURST(grp_store_weights_5_fu_402_m_axi_weights_ARBURST),
    .m_axi_weights_ARLOCK(grp_store_weights_5_fu_402_m_axi_weights_ARLOCK),
    .m_axi_weights_ARCACHE(grp_store_weights_5_fu_402_m_axi_weights_ARCACHE),
    .m_axi_weights_ARPROT(grp_store_weights_5_fu_402_m_axi_weights_ARPROT),
    .m_axi_weights_ARQOS(grp_store_weights_5_fu_402_m_axi_weights_ARQOS),
    .m_axi_weights_ARREGION(grp_store_weights_5_fu_402_m_axi_weights_ARREGION),
    .m_axi_weights_ARUSER(grp_store_weights_5_fu_402_m_axi_weights_ARUSER),
    .m_axi_weights_RVALID(DATA_WEIGHT_RVALID),
    .m_axi_weights_RREADY(grp_store_weights_5_fu_402_m_axi_weights_RREADY),
    .m_axi_weights_RDATA(DATA_WEIGHT_RDATA),
    .m_axi_weights_RLAST(DATA_WEIGHT_RLAST),
    .m_axi_weights_RID(DATA_WEIGHT_RID),
    .m_axi_weights_RUSER(DATA_WEIGHT_RUSER),
    .m_axi_weights_RRESP(DATA_WEIGHT_RRESP),
    .m_axi_weights_BVALID(1'b0),
    .m_axi_weights_BREADY(grp_store_weights_5_fu_402_m_axi_weights_BREADY),
    .m_axi_weights_BRESP(2'd0),
    .m_axi_weights_BID(1'd0),
    .m_axi_weights_BUSER(1'd0),
    .weights_offset(weights_1_reg_743),
    .weights_oc_address0(grp_store_weights_5_fu_402_weights_oc_address0),
    .weights_oc_ce0(grp_store_weights_5_fu_402_weights_oc_ce0),
    .weights_oc_we0(grp_store_weights_5_fu_402_weights_oc_we0),
    .weights_oc_d0(grp_store_weights_5_fu_402_weights_oc_d0)
);

store_weights_3 grp_store_weights_3_fu_410(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_store_weights_3_fu_410_ap_start),
    .ap_done(grp_store_weights_3_fu_410_ap_done),
    .ap_idle(grp_store_weights_3_fu_410_ap_idle),
    .ap_ready(grp_store_weights_3_fu_410_ap_ready),
    .m_axi_weights_AWVALID(grp_store_weights_3_fu_410_m_axi_weights_AWVALID),
    .m_axi_weights_AWREADY(1'b0),
    .m_axi_weights_AWADDR(grp_store_weights_3_fu_410_m_axi_weights_AWADDR),
    .m_axi_weights_AWID(grp_store_weights_3_fu_410_m_axi_weights_AWID),
    .m_axi_weights_AWLEN(grp_store_weights_3_fu_410_m_axi_weights_AWLEN),
    .m_axi_weights_AWSIZE(grp_store_weights_3_fu_410_m_axi_weights_AWSIZE),
    .m_axi_weights_AWBURST(grp_store_weights_3_fu_410_m_axi_weights_AWBURST),
    .m_axi_weights_AWLOCK(grp_store_weights_3_fu_410_m_axi_weights_AWLOCK),
    .m_axi_weights_AWCACHE(grp_store_weights_3_fu_410_m_axi_weights_AWCACHE),
    .m_axi_weights_AWPROT(grp_store_weights_3_fu_410_m_axi_weights_AWPROT),
    .m_axi_weights_AWQOS(grp_store_weights_3_fu_410_m_axi_weights_AWQOS),
    .m_axi_weights_AWREGION(grp_store_weights_3_fu_410_m_axi_weights_AWREGION),
    .m_axi_weights_AWUSER(grp_store_weights_3_fu_410_m_axi_weights_AWUSER),
    .m_axi_weights_WVALID(grp_store_weights_3_fu_410_m_axi_weights_WVALID),
    .m_axi_weights_WREADY(1'b0),
    .m_axi_weights_WDATA(grp_store_weights_3_fu_410_m_axi_weights_WDATA),
    .m_axi_weights_WSTRB(grp_store_weights_3_fu_410_m_axi_weights_WSTRB),
    .m_axi_weights_WLAST(grp_store_weights_3_fu_410_m_axi_weights_WLAST),
    .m_axi_weights_WID(grp_store_weights_3_fu_410_m_axi_weights_WID),
    .m_axi_weights_WUSER(grp_store_weights_3_fu_410_m_axi_weights_WUSER),
    .m_axi_weights_ARVALID(grp_store_weights_3_fu_410_m_axi_weights_ARVALID),
    .m_axi_weights_ARREADY(DATA_WEIGHT_ARREADY),
    .m_axi_weights_ARADDR(grp_store_weights_3_fu_410_m_axi_weights_ARADDR),
    .m_axi_weights_ARID(grp_store_weights_3_fu_410_m_axi_weights_ARID),
    .m_axi_weights_ARLEN(grp_store_weights_3_fu_410_m_axi_weights_ARLEN),
    .m_axi_weights_ARSIZE(grp_store_weights_3_fu_410_m_axi_weights_ARSIZE),
    .m_axi_weights_ARBURST(grp_store_weights_3_fu_410_m_axi_weights_ARBURST),
    .m_axi_weights_ARLOCK(grp_store_weights_3_fu_410_m_axi_weights_ARLOCK),
    .m_axi_weights_ARCACHE(grp_store_weights_3_fu_410_m_axi_weights_ARCACHE),
    .m_axi_weights_ARPROT(grp_store_weights_3_fu_410_m_axi_weights_ARPROT),
    .m_axi_weights_ARQOS(grp_store_weights_3_fu_410_m_axi_weights_ARQOS),
    .m_axi_weights_ARREGION(grp_store_weights_3_fu_410_m_axi_weights_ARREGION),
    .m_axi_weights_ARUSER(grp_store_weights_3_fu_410_m_axi_weights_ARUSER),
    .m_axi_weights_RVALID(DATA_WEIGHT_RVALID),
    .m_axi_weights_RREADY(grp_store_weights_3_fu_410_m_axi_weights_RREADY),
    .m_axi_weights_RDATA(DATA_WEIGHT_RDATA),
    .m_axi_weights_RLAST(DATA_WEIGHT_RLAST),
    .m_axi_weights_RID(DATA_WEIGHT_RID),
    .m_axi_weights_RUSER(DATA_WEIGHT_RUSER),
    .m_axi_weights_RRESP(DATA_WEIGHT_RRESP),
    .m_axi_weights_BVALID(1'b0),
    .m_axi_weights_BREADY(grp_store_weights_3_fu_410_m_axi_weights_BREADY),
    .m_axi_weights_BRESP(2'd0),
    .m_axi_weights_BID(1'd0),
    .m_axi_weights_BUSER(1'd0),
    .weights_offset(weights_2_reg_748),
    .weights_oc_address0(grp_store_weights_3_fu_410_weights_oc_address0),
    .weights_oc_ce0(grp_store_weights_3_fu_410_weights_oc_ce0),
    .weights_oc_we0(grp_store_weights_3_fu_410_weights_oc_we0),
    .weights_oc_d0(grp_store_weights_3_fu_410_weights_oc_d0)
);

relu_1 grp_relu_1_fu_418(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_relu_1_fu_418_ap_start),
    .ap_done(grp_relu_1_fu_418_ap_done),
    .ap_idle(grp_relu_1_fu_418_ap_idle),
    .ap_ready(grp_relu_1_fu_418_ap_ready),
    .output_r_address0(grp_relu_1_fu_418_output_r_address0),
    .output_r_ce0(grp_relu_1_fu_418_output_r_ce0),
    .output_r_we0(grp_relu_1_fu_418_output_r_we0),
    .output_r_d0(grp_relu_1_fu_418_output_r_d0),
    .output_r_q0(output1_oc_q0)
);

relu_3 grp_relu_3_fu_423(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_relu_3_fu_423_ap_start),
    .ap_done(grp_relu_3_fu_423_ap_done),
    .ap_idle(grp_relu_3_fu_423_ap_idle),
    .ap_ready(grp_relu_3_fu_423_ap_ready),
    .output_r_address0(grp_relu_3_fu_423_output_r_address0),
    .output_r_ce0(grp_relu_3_fu_423_output_r_ce0),
    .output_r_we0(grp_relu_3_fu_423_output_r_we0),
    .output_r_d0(grp_relu_3_fu_423_output_r_d0),
    .output_r_q0(output3_oc_q0)
);

relu_4 grp_relu_4_fu_428(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_relu_4_fu_428_ap_start),
    .ap_done(grp_relu_4_fu_428_ap_done),
    .ap_idle(grp_relu_4_fu_428_ap_idle),
    .ap_ready(grp_relu_4_fu_428_ap_ready),
    .output_r_address0(grp_relu_4_fu_428_output_r_address0),
    .output_r_ce0(grp_relu_4_fu_428_output_r_ce0),
    .output_r_we0(grp_relu_4_fu_428_output_r_we0),
    .output_r_d0(grp_relu_4_fu_428_output_r_d0),
    .output_r_q0(output4_oc_q0)
);

relu_2 grp_relu_2_fu_433(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_relu_2_fu_433_ap_start),
    .ap_done(grp_relu_2_fu_433_ap_done),
    .ap_idle(grp_relu_2_fu_433_ap_idle),
    .ap_ready(grp_relu_2_fu_433_ap_ready),
    .output_r_address0(grp_relu_2_fu_433_output_r_address0),
    .output_r_ce0(grp_relu_2_fu_433_output_r_ce0),
    .output_r_we0(grp_relu_2_fu_433_output_r_we0),
    .output_r_d0(grp_relu_2_fu_433_output_r_d0),
    .output_r_q0(output2_oc_q0)
);

store_weights grp_store_weights_fu_438(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_store_weights_fu_438_ap_start),
    .ap_done(grp_store_weights_fu_438_ap_done),
    .ap_idle(grp_store_weights_fu_438_ap_idle),
    .ap_ready(grp_store_weights_fu_438_ap_ready),
    .m_axi_weights_AWVALID(grp_store_weights_fu_438_m_axi_weights_AWVALID),
    .m_axi_weights_AWREADY(1'b0),
    .m_axi_weights_AWADDR(grp_store_weights_fu_438_m_axi_weights_AWADDR),
    .m_axi_weights_AWID(grp_store_weights_fu_438_m_axi_weights_AWID),
    .m_axi_weights_AWLEN(grp_store_weights_fu_438_m_axi_weights_AWLEN),
    .m_axi_weights_AWSIZE(grp_store_weights_fu_438_m_axi_weights_AWSIZE),
    .m_axi_weights_AWBURST(grp_store_weights_fu_438_m_axi_weights_AWBURST),
    .m_axi_weights_AWLOCK(grp_store_weights_fu_438_m_axi_weights_AWLOCK),
    .m_axi_weights_AWCACHE(grp_store_weights_fu_438_m_axi_weights_AWCACHE),
    .m_axi_weights_AWPROT(grp_store_weights_fu_438_m_axi_weights_AWPROT),
    .m_axi_weights_AWQOS(grp_store_weights_fu_438_m_axi_weights_AWQOS),
    .m_axi_weights_AWREGION(grp_store_weights_fu_438_m_axi_weights_AWREGION),
    .m_axi_weights_AWUSER(grp_store_weights_fu_438_m_axi_weights_AWUSER),
    .m_axi_weights_WVALID(grp_store_weights_fu_438_m_axi_weights_WVALID),
    .m_axi_weights_WREADY(1'b0),
    .m_axi_weights_WDATA(grp_store_weights_fu_438_m_axi_weights_WDATA),
    .m_axi_weights_WSTRB(grp_store_weights_fu_438_m_axi_weights_WSTRB),
    .m_axi_weights_WLAST(grp_store_weights_fu_438_m_axi_weights_WLAST),
    .m_axi_weights_WID(grp_store_weights_fu_438_m_axi_weights_WID),
    .m_axi_weights_WUSER(grp_store_weights_fu_438_m_axi_weights_WUSER),
    .m_axi_weights_ARVALID(grp_store_weights_fu_438_m_axi_weights_ARVALID),
    .m_axi_weights_ARREADY(DATA_WEIGHT_ARREADY),
    .m_axi_weights_ARADDR(grp_store_weights_fu_438_m_axi_weights_ARADDR),
    .m_axi_weights_ARID(grp_store_weights_fu_438_m_axi_weights_ARID),
    .m_axi_weights_ARLEN(grp_store_weights_fu_438_m_axi_weights_ARLEN),
    .m_axi_weights_ARSIZE(grp_store_weights_fu_438_m_axi_weights_ARSIZE),
    .m_axi_weights_ARBURST(grp_store_weights_fu_438_m_axi_weights_ARBURST),
    .m_axi_weights_ARLOCK(grp_store_weights_fu_438_m_axi_weights_ARLOCK),
    .m_axi_weights_ARCACHE(grp_store_weights_fu_438_m_axi_weights_ARCACHE),
    .m_axi_weights_ARPROT(grp_store_weights_fu_438_m_axi_weights_ARPROT),
    .m_axi_weights_ARQOS(grp_store_weights_fu_438_m_axi_weights_ARQOS),
    .m_axi_weights_ARREGION(grp_store_weights_fu_438_m_axi_weights_ARREGION),
    .m_axi_weights_ARUSER(grp_store_weights_fu_438_m_axi_weights_ARUSER),
    .m_axi_weights_RVALID(DATA_WEIGHT_RVALID),
    .m_axi_weights_RREADY(grp_store_weights_fu_438_m_axi_weights_RREADY),
    .m_axi_weights_RDATA(DATA_WEIGHT_RDATA),
    .m_axi_weights_RLAST(DATA_WEIGHT_RLAST),
    .m_axi_weights_RID(DATA_WEIGHT_RID),
    .m_axi_weights_RUSER(DATA_WEIGHT_RUSER),
    .m_axi_weights_RRESP(DATA_WEIGHT_RRESP),
    .m_axi_weights_BVALID(1'b0),
    .m_axi_weights_BREADY(grp_store_weights_fu_438_m_axi_weights_BREADY),
    .m_axi_weights_BRESP(2'd0),
    .m_axi_weights_BID(1'd0),
    .m_axi_weights_BUSER(1'd0),
    .weights_offset(weights3_reg_753),
    .weights_oc_0_address0(grp_store_weights_fu_438_weights_oc_0_address0),
    .weights_oc_0_ce0(grp_store_weights_fu_438_weights_oc_0_ce0),
    .weights_oc_0_we0(grp_store_weights_fu_438_weights_oc_0_we0),
    .weights_oc_0_d0(grp_store_weights_fu_438_weights_oc_0_d0)
);

store_input grp_store_input_fu_447(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_store_input_fu_447_ap_start),
    .ap_done(grp_store_input_fu_447_ap_done),
    .ap_idle(grp_store_input_fu_447_ap_idle),
    .ap_ready(grp_store_input_fu_447_ap_ready),
    .m_axi_input_r_AWVALID(grp_store_input_fu_447_m_axi_input_r_AWVALID),
    .m_axi_input_r_AWREADY(1'b0),
    .m_axi_input_r_AWADDR(grp_store_input_fu_447_m_axi_input_r_AWADDR),
    .m_axi_input_r_AWID(grp_store_input_fu_447_m_axi_input_r_AWID),
    .m_axi_input_r_AWLEN(grp_store_input_fu_447_m_axi_input_r_AWLEN),
    .m_axi_input_r_AWSIZE(grp_store_input_fu_447_m_axi_input_r_AWSIZE),
    .m_axi_input_r_AWBURST(grp_store_input_fu_447_m_axi_input_r_AWBURST),
    .m_axi_input_r_AWLOCK(grp_store_input_fu_447_m_axi_input_r_AWLOCK),
    .m_axi_input_r_AWCACHE(grp_store_input_fu_447_m_axi_input_r_AWCACHE),
    .m_axi_input_r_AWPROT(grp_store_input_fu_447_m_axi_input_r_AWPROT),
    .m_axi_input_r_AWQOS(grp_store_input_fu_447_m_axi_input_r_AWQOS),
    .m_axi_input_r_AWREGION(grp_store_input_fu_447_m_axi_input_r_AWREGION),
    .m_axi_input_r_AWUSER(grp_store_input_fu_447_m_axi_input_r_AWUSER),
    .m_axi_input_r_WVALID(grp_store_input_fu_447_m_axi_input_r_WVALID),
    .m_axi_input_r_WREADY(1'b0),
    .m_axi_input_r_WDATA(grp_store_input_fu_447_m_axi_input_r_WDATA),
    .m_axi_input_r_WSTRB(grp_store_input_fu_447_m_axi_input_r_WSTRB),
    .m_axi_input_r_WLAST(grp_store_input_fu_447_m_axi_input_r_WLAST),
    .m_axi_input_r_WID(grp_store_input_fu_447_m_axi_input_r_WID),
    .m_axi_input_r_WUSER(grp_store_input_fu_447_m_axi_input_r_WUSER),
    .m_axi_input_r_ARVALID(grp_store_input_fu_447_m_axi_input_r_ARVALID),
    .m_axi_input_r_ARREADY(DATA_INPUT_ARREADY),
    .m_axi_input_r_ARADDR(grp_store_input_fu_447_m_axi_input_r_ARADDR),
    .m_axi_input_r_ARID(grp_store_input_fu_447_m_axi_input_r_ARID),
    .m_axi_input_r_ARLEN(grp_store_input_fu_447_m_axi_input_r_ARLEN),
    .m_axi_input_r_ARSIZE(grp_store_input_fu_447_m_axi_input_r_ARSIZE),
    .m_axi_input_r_ARBURST(grp_store_input_fu_447_m_axi_input_r_ARBURST),
    .m_axi_input_r_ARLOCK(grp_store_input_fu_447_m_axi_input_r_ARLOCK),
    .m_axi_input_r_ARCACHE(grp_store_input_fu_447_m_axi_input_r_ARCACHE),
    .m_axi_input_r_ARPROT(grp_store_input_fu_447_m_axi_input_r_ARPROT),
    .m_axi_input_r_ARQOS(grp_store_input_fu_447_m_axi_input_r_ARQOS),
    .m_axi_input_r_ARREGION(grp_store_input_fu_447_m_axi_input_r_ARREGION),
    .m_axi_input_r_ARUSER(grp_store_input_fu_447_m_axi_input_r_ARUSER),
    .m_axi_input_r_RVALID(DATA_INPUT_RVALID),
    .m_axi_input_r_RREADY(grp_store_input_fu_447_m_axi_input_r_RREADY),
    .m_axi_input_r_RDATA(DATA_INPUT_RDATA),
    .m_axi_input_r_RLAST(DATA_INPUT_RLAST),
    .m_axi_input_r_RID(DATA_INPUT_RID),
    .m_axi_input_r_RUSER(DATA_INPUT_RUSER),
    .m_axi_input_r_RRESP(DATA_INPUT_RRESP),
    .m_axi_input_r_BVALID(1'b0),
    .m_axi_input_r_BREADY(grp_store_input_fu_447_m_axi_input_r_BREADY),
    .m_axi_input_r_BRESP(2'd0),
    .m_axi_input_r_BID(1'd0),
    .m_axi_input_r_BUSER(1'd0),
    .input_offset(input1_reg_758),
    .input_oc_0_address0(grp_store_input_fu_447_input_oc_0_address0),
    .input_oc_0_ce0(grp_store_input_fu_447_input_oc_0_ce0),
    .input_oc_0_we0(grp_store_input_fu_447_input_oc_0_we0),
    .input_oc_0_d0(grp_store_input_fu_447_input_oc_0_d0)
);

store_bias_5 grp_store_bias_5_fu_456(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_store_bias_5_fu_456_ap_start),
    .ap_done(grp_store_bias_5_fu_456_ap_done),
    .ap_idle(grp_store_bias_5_fu_456_ap_idle),
    .ap_ready(grp_store_bias_5_fu_456_ap_ready),
    .m_axi_bias_AWVALID(grp_store_bias_5_fu_456_m_axi_bias_AWVALID),
    .m_axi_bias_AWREADY(1'b0),
    .m_axi_bias_AWADDR(grp_store_bias_5_fu_456_m_axi_bias_AWADDR),
    .m_axi_bias_AWID(grp_store_bias_5_fu_456_m_axi_bias_AWID),
    .m_axi_bias_AWLEN(grp_store_bias_5_fu_456_m_axi_bias_AWLEN),
    .m_axi_bias_AWSIZE(grp_store_bias_5_fu_456_m_axi_bias_AWSIZE),
    .m_axi_bias_AWBURST(grp_store_bias_5_fu_456_m_axi_bias_AWBURST),
    .m_axi_bias_AWLOCK(grp_store_bias_5_fu_456_m_axi_bias_AWLOCK),
    .m_axi_bias_AWCACHE(grp_store_bias_5_fu_456_m_axi_bias_AWCACHE),
    .m_axi_bias_AWPROT(grp_store_bias_5_fu_456_m_axi_bias_AWPROT),
    .m_axi_bias_AWQOS(grp_store_bias_5_fu_456_m_axi_bias_AWQOS),
    .m_axi_bias_AWREGION(grp_store_bias_5_fu_456_m_axi_bias_AWREGION),
    .m_axi_bias_AWUSER(grp_store_bias_5_fu_456_m_axi_bias_AWUSER),
    .m_axi_bias_WVALID(grp_store_bias_5_fu_456_m_axi_bias_WVALID),
    .m_axi_bias_WREADY(1'b0),
    .m_axi_bias_WDATA(grp_store_bias_5_fu_456_m_axi_bias_WDATA),
    .m_axi_bias_WSTRB(grp_store_bias_5_fu_456_m_axi_bias_WSTRB),
    .m_axi_bias_WLAST(grp_store_bias_5_fu_456_m_axi_bias_WLAST),
    .m_axi_bias_WID(grp_store_bias_5_fu_456_m_axi_bias_WID),
    .m_axi_bias_WUSER(grp_store_bias_5_fu_456_m_axi_bias_WUSER),
    .m_axi_bias_ARVALID(grp_store_bias_5_fu_456_m_axi_bias_ARVALID),
    .m_axi_bias_ARREADY(DATA_BIAS_ARREADY),
    .m_axi_bias_ARADDR(grp_store_bias_5_fu_456_m_axi_bias_ARADDR),
    .m_axi_bias_ARID(grp_store_bias_5_fu_456_m_axi_bias_ARID),
    .m_axi_bias_ARLEN(grp_store_bias_5_fu_456_m_axi_bias_ARLEN),
    .m_axi_bias_ARSIZE(grp_store_bias_5_fu_456_m_axi_bias_ARSIZE),
    .m_axi_bias_ARBURST(grp_store_bias_5_fu_456_m_axi_bias_ARBURST),
    .m_axi_bias_ARLOCK(grp_store_bias_5_fu_456_m_axi_bias_ARLOCK),
    .m_axi_bias_ARCACHE(grp_store_bias_5_fu_456_m_axi_bias_ARCACHE),
    .m_axi_bias_ARPROT(grp_store_bias_5_fu_456_m_axi_bias_ARPROT),
    .m_axi_bias_ARQOS(grp_store_bias_5_fu_456_m_axi_bias_ARQOS),
    .m_axi_bias_ARREGION(grp_store_bias_5_fu_456_m_axi_bias_ARREGION),
    .m_axi_bias_ARUSER(grp_store_bias_5_fu_456_m_axi_bias_ARUSER),
    .m_axi_bias_RVALID(DATA_BIAS_RVALID),
    .m_axi_bias_RREADY(grp_store_bias_5_fu_456_m_axi_bias_RREADY),
    .m_axi_bias_RDATA(DATA_BIAS_RDATA),
    .m_axi_bias_RLAST(DATA_BIAS_RLAST),
    .m_axi_bias_RID(DATA_BIAS_RID),
    .m_axi_bias_RUSER(DATA_BIAS_RUSER),
    .m_axi_bias_RRESP(DATA_BIAS_RRESP),
    .m_axi_bias_BVALID(1'b0),
    .m_axi_bias_BREADY(grp_store_bias_5_fu_456_m_axi_bias_BREADY),
    .m_axi_bias_BRESP(2'd0),
    .m_axi_bias_BID(1'd0),
    .m_axi_bias_BUSER(1'd0),
    .bias_offset(bias_1_reg_723),
    .bias_oc_address0(grp_store_bias_5_fu_456_bias_oc_address0),
    .bias_oc_ce0(grp_store_bias_5_fu_456_bias_oc_ce0),
    .bias_oc_we0(grp_store_bias_5_fu_456_bias_oc_we0),
    .bias_oc_d0(grp_store_bias_5_fu_456_bias_oc_d0)
);

store_bias_3 grp_store_bias_3_fu_464(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_store_bias_3_fu_464_ap_start),
    .ap_done(grp_store_bias_3_fu_464_ap_done),
    .ap_idle(grp_store_bias_3_fu_464_ap_idle),
    .ap_ready(grp_store_bias_3_fu_464_ap_ready),
    .m_axi_bias_AWVALID(grp_store_bias_3_fu_464_m_axi_bias_AWVALID),
    .m_axi_bias_AWREADY(1'b0),
    .m_axi_bias_AWADDR(grp_store_bias_3_fu_464_m_axi_bias_AWADDR),
    .m_axi_bias_AWID(grp_store_bias_3_fu_464_m_axi_bias_AWID),
    .m_axi_bias_AWLEN(grp_store_bias_3_fu_464_m_axi_bias_AWLEN),
    .m_axi_bias_AWSIZE(grp_store_bias_3_fu_464_m_axi_bias_AWSIZE),
    .m_axi_bias_AWBURST(grp_store_bias_3_fu_464_m_axi_bias_AWBURST),
    .m_axi_bias_AWLOCK(grp_store_bias_3_fu_464_m_axi_bias_AWLOCK),
    .m_axi_bias_AWCACHE(grp_store_bias_3_fu_464_m_axi_bias_AWCACHE),
    .m_axi_bias_AWPROT(grp_store_bias_3_fu_464_m_axi_bias_AWPROT),
    .m_axi_bias_AWQOS(grp_store_bias_3_fu_464_m_axi_bias_AWQOS),
    .m_axi_bias_AWREGION(grp_store_bias_3_fu_464_m_axi_bias_AWREGION),
    .m_axi_bias_AWUSER(grp_store_bias_3_fu_464_m_axi_bias_AWUSER),
    .m_axi_bias_WVALID(grp_store_bias_3_fu_464_m_axi_bias_WVALID),
    .m_axi_bias_WREADY(1'b0),
    .m_axi_bias_WDATA(grp_store_bias_3_fu_464_m_axi_bias_WDATA),
    .m_axi_bias_WSTRB(grp_store_bias_3_fu_464_m_axi_bias_WSTRB),
    .m_axi_bias_WLAST(grp_store_bias_3_fu_464_m_axi_bias_WLAST),
    .m_axi_bias_WID(grp_store_bias_3_fu_464_m_axi_bias_WID),
    .m_axi_bias_WUSER(grp_store_bias_3_fu_464_m_axi_bias_WUSER),
    .m_axi_bias_ARVALID(grp_store_bias_3_fu_464_m_axi_bias_ARVALID),
    .m_axi_bias_ARREADY(DATA_BIAS_ARREADY),
    .m_axi_bias_ARADDR(grp_store_bias_3_fu_464_m_axi_bias_ARADDR),
    .m_axi_bias_ARID(grp_store_bias_3_fu_464_m_axi_bias_ARID),
    .m_axi_bias_ARLEN(grp_store_bias_3_fu_464_m_axi_bias_ARLEN),
    .m_axi_bias_ARSIZE(grp_store_bias_3_fu_464_m_axi_bias_ARSIZE),
    .m_axi_bias_ARBURST(grp_store_bias_3_fu_464_m_axi_bias_ARBURST),
    .m_axi_bias_ARLOCK(grp_store_bias_3_fu_464_m_axi_bias_ARLOCK),
    .m_axi_bias_ARCACHE(grp_store_bias_3_fu_464_m_axi_bias_ARCACHE),
    .m_axi_bias_ARPROT(grp_store_bias_3_fu_464_m_axi_bias_ARPROT),
    .m_axi_bias_ARQOS(grp_store_bias_3_fu_464_m_axi_bias_ARQOS),
    .m_axi_bias_ARREGION(grp_store_bias_3_fu_464_m_axi_bias_ARREGION),
    .m_axi_bias_ARUSER(grp_store_bias_3_fu_464_m_axi_bias_ARUSER),
    .m_axi_bias_RVALID(DATA_BIAS_RVALID),
    .m_axi_bias_RREADY(grp_store_bias_3_fu_464_m_axi_bias_RREADY),
    .m_axi_bias_RDATA(DATA_BIAS_RDATA),
    .m_axi_bias_RLAST(DATA_BIAS_RLAST),
    .m_axi_bias_RID(DATA_BIAS_RID),
    .m_axi_bias_RUSER(DATA_BIAS_RUSER),
    .m_axi_bias_RRESP(DATA_BIAS_RRESP),
    .m_axi_bias_BVALID(1'b0),
    .m_axi_bias_BREADY(grp_store_bias_3_fu_464_m_axi_bias_BREADY),
    .m_axi_bias_BRESP(2'd0),
    .m_axi_bias_BID(1'd0),
    .m_axi_bias_BUSER(1'd0),
    .bias_offset(bias_2_reg_728),
    .bias_oc_address0(grp_store_bias_3_fu_464_bias_oc_address0),
    .bias_oc_ce0(grp_store_bias_3_fu_464_bias_oc_ce0),
    .bias_oc_we0(grp_store_bias_3_fu_464_bias_oc_we0),
    .bias_oc_d0(grp_store_bias_3_fu_464_bias_oc_d0)
);

store_output grp_store_output_fu_472(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_store_output_fu_472_ap_start),
    .ap_done(grp_store_output_fu_472_ap_done),
    .ap_idle(grp_store_output_fu_472_ap_idle),
    .ap_ready(grp_store_output_fu_472_ap_ready),
    .m_axi_output_r_AWVALID(grp_store_output_fu_472_m_axi_output_r_AWVALID),
    .m_axi_output_r_AWREADY(DATA_OUTPUT_AWREADY),
    .m_axi_output_r_AWADDR(grp_store_output_fu_472_m_axi_output_r_AWADDR),
    .m_axi_output_r_AWID(grp_store_output_fu_472_m_axi_output_r_AWID),
    .m_axi_output_r_AWLEN(grp_store_output_fu_472_m_axi_output_r_AWLEN),
    .m_axi_output_r_AWSIZE(grp_store_output_fu_472_m_axi_output_r_AWSIZE),
    .m_axi_output_r_AWBURST(grp_store_output_fu_472_m_axi_output_r_AWBURST),
    .m_axi_output_r_AWLOCK(grp_store_output_fu_472_m_axi_output_r_AWLOCK),
    .m_axi_output_r_AWCACHE(grp_store_output_fu_472_m_axi_output_r_AWCACHE),
    .m_axi_output_r_AWPROT(grp_store_output_fu_472_m_axi_output_r_AWPROT),
    .m_axi_output_r_AWQOS(grp_store_output_fu_472_m_axi_output_r_AWQOS),
    .m_axi_output_r_AWREGION(grp_store_output_fu_472_m_axi_output_r_AWREGION),
    .m_axi_output_r_AWUSER(grp_store_output_fu_472_m_axi_output_r_AWUSER),
    .m_axi_output_r_WVALID(grp_store_output_fu_472_m_axi_output_r_WVALID),
    .m_axi_output_r_WREADY(DATA_OUTPUT_WREADY),
    .m_axi_output_r_WDATA(grp_store_output_fu_472_m_axi_output_r_WDATA),
    .m_axi_output_r_WSTRB(grp_store_output_fu_472_m_axi_output_r_WSTRB),
    .m_axi_output_r_WLAST(grp_store_output_fu_472_m_axi_output_r_WLAST),
    .m_axi_output_r_WID(grp_store_output_fu_472_m_axi_output_r_WID),
    .m_axi_output_r_WUSER(grp_store_output_fu_472_m_axi_output_r_WUSER),
    .m_axi_output_r_ARVALID(grp_store_output_fu_472_m_axi_output_r_ARVALID),
    .m_axi_output_r_ARREADY(1'b0),
    .m_axi_output_r_ARADDR(grp_store_output_fu_472_m_axi_output_r_ARADDR),
    .m_axi_output_r_ARID(grp_store_output_fu_472_m_axi_output_r_ARID),
    .m_axi_output_r_ARLEN(grp_store_output_fu_472_m_axi_output_r_ARLEN),
    .m_axi_output_r_ARSIZE(grp_store_output_fu_472_m_axi_output_r_ARSIZE),
    .m_axi_output_r_ARBURST(grp_store_output_fu_472_m_axi_output_r_ARBURST),
    .m_axi_output_r_ARLOCK(grp_store_output_fu_472_m_axi_output_r_ARLOCK),
    .m_axi_output_r_ARCACHE(grp_store_output_fu_472_m_axi_output_r_ARCACHE),
    .m_axi_output_r_ARPROT(grp_store_output_fu_472_m_axi_output_r_ARPROT),
    .m_axi_output_r_ARQOS(grp_store_output_fu_472_m_axi_output_r_ARQOS),
    .m_axi_output_r_ARREGION(grp_store_output_fu_472_m_axi_output_r_ARREGION),
    .m_axi_output_r_ARUSER(grp_store_output_fu_472_m_axi_output_r_ARUSER),
    .m_axi_output_r_RVALID(1'b0),
    .m_axi_output_r_RREADY(grp_store_output_fu_472_m_axi_output_r_RREADY),
    .m_axi_output_r_RDATA(32'd0),
    .m_axi_output_r_RLAST(1'b0),
    .m_axi_output_r_RID(1'd0),
    .m_axi_output_r_RUSER(1'd0),
    .m_axi_output_r_RRESP(2'd0),
    .m_axi_output_r_BVALID(DATA_OUTPUT_BVALID),
    .m_axi_output_r_BREADY(grp_store_output_fu_472_m_axi_output_r_BREADY),
    .m_axi_output_r_BRESP(DATA_OUTPUT_BRESP),
    .m_axi_output_r_BID(DATA_OUTPUT_BID),
    .m_axi_output_r_BUSER(DATA_OUTPUT_BUSER),
    .output_offset(output1_reg_713),
    .output_oc_address0(grp_store_output_fu_472_output_oc_address0),
    .output_oc_ce0(grp_store_output_fu_472_output_oc_ce0),
    .output_oc_q0(output6_oc_q0)
);

store_bias grp_store_bias_fu_480(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_store_bias_fu_480_ap_start),
    .ap_done(grp_store_bias_fu_480_ap_done),
    .ap_idle(grp_store_bias_fu_480_ap_idle),
    .ap_ready(grp_store_bias_fu_480_ap_ready),
    .m_axi_bias_AWVALID(grp_store_bias_fu_480_m_axi_bias_AWVALID),
    .m_axi_bias_AWREADY(1'b0),
    .m_axi_bias_AWADDR(grp_store_bias_fu_480_m_axi_bias_AWADDR),
    .m_axi_bias_AWID(grp_store_bias_fu_480_m_axi_bias_AWID),
    .m_axi_bias_AWLEN(grp_store_bias_fu_480_m_axi_bias_AWLEN),
    .m_axi_bias_AWSIZE(grp_store_bias_fu_480_m_axi_bias_AWSIZE),
    .m_axi_bias_AWBURST(grp_store_bias_fu_480_m_axi_bias_AWBURST),
    .m_axi_bias_AWLOCK(grp_store_bias_fu_480_m_axi_bias_AWLOCK),
    .m_axi_bias_AWCACHE(grp_store_bias_fu_480_m_axi_bias_AWCACHE),
    .m_axi_bias_AWPROT(grp_store_bias_fu_480_m_axi_bias_AWPROT),
    .m_axi_bias_AWQOS(grp_store_bias_fu_480_m_axi_bias_AWQOS),
    .m_axi_bias_AWREGION(grp_store_bias_fu_480_m_axi_bias_AWREGION),
    .m_axi_bias_AWUSER(grp_store_bias_fu_480_m_axi_bias_AWUSER),
    .m_axi_bias_WVALID(grp_store_bias_fu_480_m_axi_bias_WVALID),
    .m_axi_bias_WREADY(1'b0),
    .m_axi_bias_WDATA(grp_store_bias_fu_480_m_axi_bias_WDATA),
    .m_axi_bias_WSTRB(grp_store_bias_fu_480_m_axi_bias_WSTRB),
    .m_axi_bias_WLAST(grp_store_bias_fu_480_m_axi_bias_WLAST),
    .m_axi_bias_WID(grp_store_bias_fu_480_m_axi_bias_WID),
    .m_axi_bias_WUSER(grp_store_bias_fu_480_m_axi_bias_WUSER),
    .m_axi_bias_ARVALID(grp_store_bias_fu_480_m_axi_bias_ARVALID),
    .m_axi_bias_ARREADY(DATA_BIAS_ARREADY),
    .m_axi_bias_ARADDR(grp_store_bias_fu_480_m_axi_bias_ARADDR),
    .m_axi_bias_ARID(grp_store_bias_fu_480_m_axi_bias_ARID),
    .m_axi_bias_ARLEN(grp_store_bias_fu_480_m_axi_bias_ARLEN),
    .m_axi_bias_ARSIZE(grp_store_bias_fu_480_m_axi_bias_ARSIZE),
    .m_axi_bias_ARBURST(grp_store_bias_fu_480_m_axi_bias_ARBURST),
    .m_axi_bias_ARLOCK(grp_store_bias_fu_480_m_axi_bias_ARLOCK),
    .m_axi_bias_ARCACHE(grp_store_bias_fu_480_m_axi_bias_ARCACHE),
    .m_axi_bias_ARPROT(grp_store_bias_fu_480_m_axi_bias_ARPROT),
    .m_axi_bias_ARQOS(grp_store_bias_fu_480_m_axi_bias_ARQOS),
    .m_axi_bias_ARREGION(grp_store_bias_fu_480_m_axi_bias_ARREGION),
    .m_axi_bias_ARUSER(grp_store_bias_fu_480_m_axi_bias_ARUSER),
    .m_axi_bias_RVALID(DATA_BIAS_RVALID),
    .m_axi_bias_RREADY(grp_store_bias_fu_480_m_axi_bias_RREADY),
    .m_axi_bias_RDATA(DATA_BIAS_RDATA),
    .m_axi_bias_RLAST(DATA_BIAS_RLAST),
    .m_axi_bias_RID(DATA_BIAS_RID),
    .m_axi_bias_RUSER(DATA_BIAS_RUSER),
    .m_axi_bias_RRESP(DATA_BIAS_RRESP),
    .m_axi_bias_BVALID(1'b0),
    .m_axi_bias_BREADY(grp_store_bias_fu_480_m_axi_bias_BREADY),
    .m_axi_bias_BRESP(2'd0),
    .m_axi_bias_BID(1'd0),
    .m_axi_bias_BUSER(1'd0),
    .bias_offset(bias1_reg_733),
    .bias_oc_address0(grp_store_bias_fu_480_bias_oc_address0),
    .bias_oc_ce0(grp_store_bias_fu_480_bias_oc_ce0),
    .bias_oc_we0(grp_store_bias_fu_480_bias_oc_we0),
    .bias_oc_d0(grp_store_bias_fu_480_bias_oc_d0)
);

conv1_fcmp_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv1_fcmp_32ns_3dEe_U75(
    .din0(grp_fu_489_p0),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(grp_fu_489_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convolution_3_fu_354_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_convolution_3_fu_354_ap_start_reg <= 1'b1;
        end else if ((grp_convolution_3_fu_354_ap_ready == 1'b1)) begin
            grp_convolution_3_fu_354_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convolution_5_fu_382_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_convolution_5_fu_382_ap_start_reg <= 1'b1;
        end else if ((grp_convolution_5_fu_382_ap_ready == 1'b1)) begin
            grp_convolution_5_fu_382_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convulution1_fu_362_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_convulution1_fu_362_ap_start_reg <= 1'b1;
        end else if ((grp_convulution1_fu_362_ap_ready == 1'b1)) begin
            grp_convulution1_fu_362_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fc_6_fu_370_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
            grp_fc_6_fu_370_ap_start_reg <= 1'b1;
        end else if ((grp_fc_6_fu_370_ap_ready == 1'b1)) begin
            grp_fc_6_fu_370_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_maxpool_2_fu_390_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_maxpool_2_fu_390_ap_start_reg <= 1'b1;
        end else if ((grp_maxpool_2_fu_390_ap_ready == 1'b1)) begin
            grp_maxpool_2_fu_390_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_maxpool_4_fu_396_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_maxpool_4_fu_396_ap_start_reg <= 1'b1;
        end else if ((grp_maxpool_4_fu_396_ap_ready == 1'b1)) begin
            grp_maxpool_4_fu_396_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_relu_1_fu_418_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_relu_1_fu_418_ap_start_reg <= 1'b1;
        end else if ((grp_relu_1_fu_418_ap_ready == 1'b1)) begin
            grp_relu_1_fu_418_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_relu_2_fu_433_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_relu_2_fu_433_ap_start_reg <= 1'b1;
        end else if ((grp_relu_2_fu_433_ap_ready == 1'b1)) begin
            grp_relu_2_fu_433_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_relu_3_fu_423_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_relu_3_fu_423_ap_start_reg <= 1'b1;
        end else if ((grp_relu_3_fu_423_ap_ready == 1'b1)) begin
            grp_relu_3_fu_423_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_relu_4_fu_428_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_relu_4_fu_428_ap_start_reg <= 1'b1;
        end else if ((grp_relu_4_fu_428_ap_ready == 1'b1)) begin
            grp_relu_4_fu_428_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_store_bias_3_fu_464_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_store_bias_3_fu_464_ap_start_reg <= 1'b1;
        end else if ((grp_store_bias_3_fu_464_ap_ready == 1'b1)) begin
            grp_store_bias_3_fu_464_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_store_bias_5_fu_456_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_store_bias_5_fu_456_ap_start_reg <= 1'b1;
        end else if ((grp_store_bias_5_fu_456_ap_ready == 1'b1)) begin
            grp_store_bias_5_fu_456_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_store_bias_fu_480_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_store_bias_fu_480_ap_start_reg <= 1'b1;
        end else if ((grp_store_bias_fu_480_ap_ready == 1'b1)) begin
            grp_store_bias_fu_480_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_store_input_fu_447_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_store_input_fu_447_ap_start_reg <= 1'b1;
        end else if ((grp_store_input_fu_447_ap_ready == 1'b1)) begin
            grp_store_input_fu_447_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_store_output_fu_472_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond_i1_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
            grp_store_output_fu_472_ap_start_reg <= 1'b1;
        end else if ((grp_store_output_fu_472_ap_ready == 1'b1)) begin
            grp_store_output_fu_472_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_store_weights_3_fu_410_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_store_weights_3_fu_410_ap_start_reg <= 1'b1;
        end else if ((grp_store_weights_3_fu_410_ap_ready == 1'b1)) begin
            grp_store_weights_3_fu_410_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_store_weights_5_fu_402_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_store_weights_5_fu_402_ap_start_reg <= 1'b1;
        end else if ((grp_store_weights_5_fu_402_ap_ready == 1'b1)) begin
            grp_store_weights_5_fu_402_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_store_weights_fu_438_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_store_weights_fu_438_ap_start_reg <= 1'b1;
        end else if ((grp_store_weights_fu_438_ap_ready == 1'b1)) begin
            grp_store_weights_fu_438_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_i1_reg_343 <= i_18_reg_788;
    end else if (((grp_fc_6_fu_370_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        i_i1_reg_343 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_i_reg_332 <= i_reg_766;
    end else if (((grp_convolution_5_fu_382_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        i_i_reg_332 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias1_reg_733 <= {{bias[31:2]}};
        bias_1_reg_723 <= {{bias_5[31:2]}};
        bias_2_reg_728 <= {{bias_3[31:2]}};
        bias_s_reg_718 <= {{bias_6[31:2]}};
        input1_reg_758 <= {{input_r[31:2]}};
        output1_reg_713 <= {{output_r[31:2]}};
        weights3_reg_753 <= {{weights[31:2]}};
        weights_1_reg_743 <= {{weights_5[31:2]}};
        weights_2_reg_748 <= {{weights_3[31:2]}};
        weights_s_reg_738 <= {{weights_6[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_18_reg_788 <= i_18_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_reg_766 <= i_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_i_fu_597_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        output5_oc_0_0_add_reg_771 <= tmp_i_fu_609_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output5_oc_0_0_loa_reg_776 <= output5_oc_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i1_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        output6_oc_addr_reg_793 <= tmp_i1_fu_667_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        output6_oc_load_reg_798 <= output6_oc_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARADDR = grp_store_bias_fu_480_m_axi_bias_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARADDR = grp_store_bias_3_fu_464_m_axi_bias_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARADDR = grp_store_bias_5_fu_456_m_axi_bias_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARADDR = grp_fc_6_fu_370_m_axi_bias_ARADDR;
    end else begin
        DATA_BIAS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARBURST = grp_store_bias_fu_480_m_axi_bias_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARBURST = grp_store_bias_3_fu_464_m_axi_bias_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARBURST = grp_store_bias_5_fu_456_m_axi_bias_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARBURST = grp_fc_6_fu_370_m_axi_bias_ARBURST;
    end else begin
        DATA_BIAS_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARCACHE = grp_store_bias_fu_480_m_axi_bias_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARCACHE = grp_store_bias_3_fu_464_m_axi_bias_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARCACHE = grp_store_bias_5_fu_456_m_axi_bias_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARCACHE = grp_fc_6_fu_370_m_axi_bias_ARCACHE;
    end else begin
        DATA_BIAS_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARID = grp_store_bias_fu_480_m_axi_bias_ARID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARID = grp_store_bias_3_fu_464_m_axi_bias_ARID;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARID = grp_store_bias_5_fu_456_m_axi_bias_ARID;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARID = grp_fc_6_fu_370_m_axi_bias_ARID;
    end else begin
        DATA_BIAS_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARLEN = grp_store_bias_fu_480_m_axi_bias_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARLEN = grp_store_bias_3_fu_464_m_axi_bias_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARLEN = grp_store_bias_5_fu_456_m_axi_bias_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARLEN = grp_fc_6_fu_370_m_axi_bias_ARLEN;
    end else begin
        DATA_BIAS_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARLOCK = grp_store_bias_fu_480_m_axi_bias_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARLOCK = grp_store_bias_3_fu_464_m_axi_bias_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARLOCK = grp_store_bias_5_fu_456_m_axi_bias_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARLOCK = grp_fc_6_fu_370_m_axi_bias_ARLOCK;
    end else begin
        DATA_BIAS_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARPROT = grp_store_bias_fu_480_m_axi_bias_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARPROT = grp_store_bias_3_fu_464_m_axi_bias_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARPROT = grp_store_bias_5_fu_456_m_axi_bias_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARPROT = grp_fc_6_fu_370_m_axi_bias_ARPROT;
    end else begin
        DATA_BIAS_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARQOS = grp_store_bias_fu_480_m_axi_bias_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARQOS = grp_store_bias_3_fu_464_m_axi_bias_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARQOS = grp_store_bias_5_fu_456_m_axi_bias_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARQOS = grp_fc_6_fu_370_m_axi_bias_ARQOS;
    end else begin
        DATA_BIAS_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARREGION = grp_store_bias_fu_480_m_axi_bias_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARREGION = grp_store_bias_3_fu_464_m_axi_bias_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARREGION = grp_store_bias_5_fu_456_m_axi_bias_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARREGION = grp_fc_6_fu_370_m_axi_bias_ARREGION;
    end else begin
        DATA_BIAS_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARSIZE = grp_store_bias_fu_480_m_axi_bias_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARSIZE = grp_store_bias_3_fu_464_m_axi_bias_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARSIZE = grp_store_bias_5_fu_456_m_axi_bias_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARSIZE = grp_fc_6_fu_370_m_axi_bias_ARSIZE;
    end else begin
        DATA_BIAS_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARUSER = grp_store_bias_fu_480_m_axi_bias_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARUSER = grp_store_bias_3_fu_464_m_axi_bias_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARUSER = grp_store_bias_5_fu_456_m_axi_bias_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARUSER = grp_fc_6_fu_370_m_axi_bias_ARUSER;
    end else begin
        DATA_BIAS_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_ARVALID = grp_store_bias_fu_480_m_axi_bias_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_ARVALID = grp_store_bias_3_fu_464_m_axi_bias_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_ARVALID = grp_store_bias_5_fu_456_m_axi_bias_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_ARVALID = grp_fc_6_fu_370_m_axi_bias_ARVALID;
    end else begin
        DATA_BIAS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_BIAS_RREADY = grp_store_bias_fu_480_m_axi_bias_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_BIAS_RREADY = grp_store_bias_3_fu_464_m_axi_bias_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_BIAS_RREADY = grp_store_bias_5_fu_456_m_axi_bias_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_BIAS_RREADY = grp_fc_6_fu_370_m_axi_bias_RREADY;
    end else begin
        DATA_BIAS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_INPUT_ARVALID = grp_store_input_fu_447_m_axi_input_r_ARVALID;
    end else begin
        DATA_INPUT_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_INPUT_RREADY = grp_store_input_fu_447_m_axi_input_r_RREADY;
    end else begin
        DATA_INPUT_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((exitcond_i1_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25)))) begin
        DATA_OUTPUT_AWVALID = grp_store_output_fu_472_m_axi_output_r_AWVALID;
    end else begin
        DATA_OUTPUT_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((exitcond_i1_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25)))) begin
        DATA_OUTPUT_BREADY = grp_store_output_fu_472_m_axi_output_r_BREADY;
    end else begin
        DATA_OUTPUT_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((exitcond_i1_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25)))) begin
        DATA_OUTPUT_WVALID = grp_store_output_fu_472_m_axi_output_r_WVALID;
    end else begin
        DATA_OUTPUT_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARADDR = grp_store_weights_fu_438_m_axi_weights_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARADDR = grp_store_weights_3_fu_410_m_axi_weights_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARADDR = grp_store_weights_5_fu_402_m_axi_weights_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARADDR = grp_fc_6_fu_370_m_axi_weights_ARADDR;
    end else begin
        DATA_WEIGHT_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARBURST = grp_store_weights_fu_438_m_axi_weights_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARBURST = grp_store_weights_3_fu_410_m_axi_weights_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARBURST = grp_store_weights_5_fu_402_m_axi_weights_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARBURST = grp_fc_6_fu_370_m_axi_weights_ARBURST;
    end else begin
        DATA_WEIGHT_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARCACHE = grp_store_weights_fu_438_m_axi_weights_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARCACHE = grp_store_weights_3_fu_410_m_axi_weights_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARCACHE = grp_store_weights_5_fu_402_m_axi_weights_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARCACHE = grp_fc_6_fu_370_m_axi_weights_ARCACHE;
    end else begin
        DATA_WEIGHT_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARID = grp_store_weights_fu_438_m_axi_weights_ARID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARID = grp_store_weights_3_fu_410_m_axi_weights_ARID;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARID = grp_store_weights_5_fu_402_m_axi_weights_ARID;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARID = grp_fc_6_fu_370_m_axi_weights_ARID;
    end else begin
        DATA_WEIGHT_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARLEN = grp_store_weights_fu_438_m_axi_weights_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARLEN = grp_store_weights_3_fu_410_m_axi_weights_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARLEN = grp_store_weights_5_fu_402_m_axi_weights_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARLEN = grp_fc_6_fu_370_m_axi_weights_ARLEN;
    end else begin
        DATA_WEIGHT_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARLOCK = grp_store_weights_fu_438_m_axi_weights_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARLOCK = grp_store_weights_3_fu_410_m_axi_weights_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARLOCK = grp_store_weights_5_fu_402_m_axi_weights_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARLOCK = grp_fc_6_fu_370_m_axi_weights_ARLOCK;
    end else begin
        DATA_WEIGHT_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARPROT = grp_store_weights_fu_438_m_axi_weights_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARPROT = grp_store_weights_3_fu_410_m_axi_weights_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARPROT = grp_store_weights_5_fu_402_m_axi_weights_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARPROT = grp_fc_6_fu_370_m_axi_weights_ARPROT;
    end else begin
        DATA_WEIGHT_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARQOS = grp_store_weights_fu_438_m_axi_weights_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARQOS = grp_store_weights_3_fu_410_m_axi_weights_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARQOS = grp_store_weights_5_fu_402_m_axi_weights_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARQOS = grp_fc_6_fu_370_m_axi_weights_ARQOS;
    end else begin
        DATA_WEIGHT_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARREGION = grp_store_weights_fu_438_m_axi_weights_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARREGION = grp_store_weights_3_fu_410_m_axi_weights_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARREGION = grp_store_weights_5_fu_402_m_axi_weights_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARREGION = grp_fc_6_fu_370_m_axi_weights_ARREGION;
    end else begin
        DATA_WEIGHT_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARSIZE = grp_store_weights_fu_438_m_axi_weights_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARSIZE = grp_store_weights_3_fu_410_m_axi_weights_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARSIZE = grp_store_weights_5_fu_402_m_axi_weights_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARSIZE = grp_fc_6_fu_370_m_axi_weights_ARSIZE;
    end else begin
        DATA_WEIGHT_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARUSER = grp_store_weights_fu_438_m_axi_weights_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARUSER = grp_store_weights_3_fu_410_m_axi_weights_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARUSER = grp_store_weights_5_fu_402_m_axi_weights_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARUSER = grp_fc_6_fu_370_m_axi_weights_ARUSER;
    end else begin
        DATA_WEIGHT_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_ARVALID = grp_store_weights_fu_438_m_axi_weights_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_ARVALID = grp_store_weights_3_fu_410_m_axi_weights_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_ARVALID = grp_store_weights_5_fu_402_m_axi_weights_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_ARVALID = grp_fc_6_fu_370_m_axi_weights_ARVALID;
    end else begin
        DATA_WEIGHT_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_WEIGHT_RREADY = grp_store_weights_fu_438_m_axi_weights_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        DATA_WEIGHT_RREADY = grp_store_weights_3_fu_410_m_axi_weights_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        DATA_WEIGHT_RREADY = grp_store_weights_5_fu_402_m_axi_weights_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state24) | ((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)))) begin
        DATA_WEIGHT_RREADY = grp_fc_6_fu_370_m_axi_weights_RREADY;
    end else begin
        DATA_WEIGHT_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (grp_store_output_fu_472_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (grp_store_output_fu_472_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_3_oc_address0 = grp_store_bias_3_fu_464_bias_oc_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        bias_3_oc_address0 = grp_convolution_3_fu_354_bias_address0;
    end else begin
        bias_3_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_3_oc_ce0 = grp_store_bias_3_fu_464_bias_oc_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        bias_3_oc_ce0 = grp_convolution_3_fu_354_bias_ce0;
    end else begin
        bias_3_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_3_oc_we0 = grp_store_bias_3_fu_464_bias_oc_we0;
    end else begin
        bias_3_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bias_5_oc_address0 = grp_store_bias_5_fu_456_bias_oc_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        bias_5_oc_address0 = grp_convolution_5_fu_382_bias_address0;
    end else begin
        bias_5_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bias_5_oc_ce0 = grp_store_bias_5_fu_456_bias_oc_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        bias_5_oc_ce0 = grp_convolution_5_fu_382_bias_ce0;
    end else begin
        bias_5_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bias_5_oc_we0 = grp_store_bias_5_fu_456_bias_oc_we0;
    end else begin
        bias_5_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bias_oc_address0 = grp_store_bias_fu_480_bias_oc_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_oc_address0 = grp_convulution1_fu_362_bias_address0;
    end else begin
        bias_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bias_oc_ce0 = grp_store_bias_fu_480_bias_oc_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_oc_ce0 = grp_convulution1_fu_362_bias_ce0;
    end else begin
        bias_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bias_oc_we0 = grp_store_bias_fu_480_bias_oc_we0;
    end else begin
        bias_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_489_p0 = output6_oc_load_reg_798;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_489_p0 = output5_oc_0_0_loa_reg_776;
    end else begin
        grp_fu_489_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_oc_0_address0 = grp_store_input_fu_447_input_oc_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_oc_0_address0 = grp_convulution1_fu_362_input_0_address0;
    end else begin
        input_oc_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_oc_0_ce0 = grp_store_input_fu_447_input_oc_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_oc_0_ce0 = grp_convulution1_fu_362_input_0_ce0;
    end else begin
        input_oc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_oc_0_ce1 = grp_convulution1_fu_362_input_0_ce1;
    end else begin
        input_oc_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_oc_0_we0 = grp_store_input_fu_447_input_oc_0_we0;
    end else begin
        input_oc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output1_oc_address0 = grp_relu_1_fu_418_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output1_oc_address0 = grp_maxpool_2_fu_390_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output1_oc_address0 = grp_convulution1_fu_362_output_r_address0;
    end else begin
        output1_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output1_oc_ce0 = grp_relu_1_fu_418_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output1_oc_ce0 = grp_maxpool_2_fu_390_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output1_oc_ce0 = grp_convulution1_fu_362_output_r_ce0;
    end else begin
        output1_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output1_oc_d0 = grp_relu_1_fu_418_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output1_oc_d0 = grp_convulution1_fu_362_output_r_d0;
    end else begin
        output1_oc_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output1_oc_we0 = grp_relu_1_fu_418_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output1_oc_we0 = grp_convulution1_fu_362_output_r_we0;
    end else begin
        output1_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output2_oc_address0 = grp_relu_2_fu_433_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output2_oc_address0 = grp_maxpool_2_fu_390_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output2_oc_address0 = grp_convolution_3_fu_354_input_r_address0;
    end else begin
        output2_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output2_oc_ce0 = grp_relu_2_fu_433_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output2_oc_ce0 = grp_maxpool_2_fu_390_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output2_oc_ce0 = grp_convolution_3_fu_354_input_r_ce0;
    end else begin
        output2_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output2_oc_ce1 = grp_convolution_3_fu_354_input_r_ce1;
    end else begin
        output2_oc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output2_oc_d0 = grp_relu_2_fu_433_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output2_oc_d0 = grp_maxpool_2_fu_390_output_r_d0;
    end else begin
        output2_oc_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output2_oc_we0 = grp_relu_2_fu_433_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output2_oc_we0 = grp_maxpool_2_fu_390_output_r_we0;
    end else begin
        output2_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output3_oc_address0 = grp_relu_3_fu_423_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output3_oc_address0 = grp_maxpool_4_fu_396_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output3_oc_address0 = grp_convolution_3_fu_354_output_r_address0;
    end else begin
        output3_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output3_oc_ce0 = grp_relu_3_fu_423_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output3_oc_ce0 = grp_maxpool_4_fu_396_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output3_oc_ce0 = grp_convolution_3_fu_354_output_r_ce0;
    end else begin
        output3_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output3_oc_d0 = grp_relu_3_fu_423_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output3_oc_d0 = grp_convolution_3_fu_354_output_r_d0;
    end else begin
        output3_oc_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output3_oc_we0 = grp_relu_3_fu_423_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output3_oc_we0 = grp_convolution_3_fu_354_output_r_we0;
    end else begin
        output3_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output4_oc_address0 = grp_relu_4_fu_428_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output4_oc_address0 = grp_maxpool_4_fu_396_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output4_oc_address0 = grp_convolution_5_fu_382_input_r_address0;
    end else begin
        output4_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output4_oc_ce0 = grp_relu_4_fu_428_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output4_oc_ce0 = grp_maxpool_4_fu_396_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output4_oc_ce0 = grp_convolution_5_fu_382_input_r_ce0;
    end else begin
        output4_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output4_oc_d0 = grp_relu_4_fu_428_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output4_oc_d0 = grp_maxpool_4_fu_396_output_r_d0;
    end else begin
        output4_oc_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output4_oc_we0 = grp_relu_4_fu_428_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        output4_oc_we0 = grp_maxpool_4_fu_396_output_r_we0;
    end else begin
        output4_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output5_oc_0_0_address0 = output5_oc_0_0_add_reg_771;
    end else if (((exitcond2_i_fu_597_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        output5_oc_0_0_address0 = tmp_i_fu_609_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output5_oc_0_0_address0 = grp_convolution_5_fu_382_output_0_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output5_oc_0_0_address0 = grp_fc_6_fu_370_input_0_0_address0;
    end else begin
        output5_oc_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((exitcond2_i_fu_597_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        output5_oc_0_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output5_oc_0_0_ce0 = grp_convolution_5_fu_382_output_0_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output5_oc_0_0_ce0 = grp_fc_6_fu_370_input_0_0_ce0;
    end else begin
        output5_oc_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output5_oc_0_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output5_oc_0_0_d0 = grp_convolution_5_fu_382_output_0_0_d0;
    end else begin
        output5_oc_0_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (tmp_43_fu_649_p2 == 1'd1))) begin
        output5_oc_0_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        output5_oc_0_0_we0 = grp_convolution_5_fu_382_output_0_0_we0;
    end else begin
        output5_oc_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output6_oc_address0 = output6_oc_addr_reg_793;
    end else if (((exitcond_i1_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        output6_oc_address0 = tmp_i1_fu_667_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        output6_oc_address0 = grp_store_output_fu_472_output_oc_address0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output6_oc_address0 = grp_fc_6_fu_370_output_r_address0;
    end else begin
        output6_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((exitcond_i1_fu_655_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25)))) begin
        output6_oc_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        output6_oc_ce0 = grp_store_output_fu_472_output_oc_ce0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output6_oc_ce0 = grp_fc_6_fu_370_output_r_ce0;
    end else begin
        output6_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output6_oc_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output6_oc_d0 = grp_fc_6_fu_370_output_r_d0;
    end else begin
        output6_oc_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (tmp_47_fu_707_p2 == 1'd1))) begin
        output6_oc_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output6_oc_we0 = grp_fc_6_fu_370_output_r_we0;
    end else begin
        output6_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_3_oc_address0 = grp_store_weights_3_fu_410_weights_oc_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weights_3_oc_address0 = grp_convolution_3_fu_354_weights_address0;
    end else begin
        weights_3_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_3_oc_ce0 = grp_store_weights_3_fu_410_weights_oc_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        weights_3_oc_ce0 = grp_convolution_3_fu_354_weights_ce0;
    end else begin
        weights_3_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        weights_3_oc_ce1 = grp_convolution_3_fu_354_weights_ce1;
    end else begin
        weights_3_oc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_3_oc_we0 = grp_store_weights_3_fu_410_weights_oc_we0;
    end else begin
        weights_3_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_5_oc_address0 = grp_store_weights_5_fu_402_weights_oc_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        weights_5_oc_address0 = grp_convolution_5_fu_382_weights_address0;
    end else begin
        weights_5_oc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_5_oc_ce0 = grp_store_weights_5_fu_402_weights_oc_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        weights_5_oc_ce0 = grp_convolution_5_fu_382_weights_ce0;
    end else begin
        weights_5_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_5_oc_we0 = grp_store_weights_5_fu_402_weights_oc_we0;
    end else begin
        weights_5_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_oc_0_address0 = grp_store_weights_fu_438_weights_oc_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_oc_0_address0 = grp_convulution1_fu_362_weights_0_address0;
    end else begin
        weights_oc_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_oc_0_ce0 = grp_store_weights_fu_438_weights_oc_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_oc_0_ce0 = grp_convulution1_fu_362_weights_0_ce0;
    end else begin
        weights_oc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_oc_0_ce1 = grp_convulution1_fu_362_weights_0_ce1;
    end else begin
        weights_oc_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_oc_0_we0 = grp_store_weights_fu_438_weights_oc_0_we0;
    end else begin
        weights_oc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_maxpool_2_fu_390_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_relu_2_fu_433_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_convolution_3_fu_354_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_relu_3_fu_423_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_maxpool_4_fu_396_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_relu_4_fu_428_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((grp_convolution_5_fu_382_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((exitcond2_i_fu_597_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_fc_6_fu_370_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((exitcond_i1_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (grp_store_output_fu_472_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_store_bias_fu_480_ap_done == 1'b0) | (grp_store_input_fu_447_ap_done == 1'b0) | (grp_store_weights_fu_438_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_convulution1_fu_362_ap_done == 1'b0) | (grp_store_bias_3_fu_464_ap_done == 1'b0) | (grp_store_weights_3_fu_410_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_store_weights_5_fu_402_ap_done == 1'b0) | (grp_store_bias_5_fu_456_ap_done == 1'b0) | (grp_relu_1_fu_418_ap_done == 1'b0));
end

assign ap_return = 32'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond2_i_fu_597_p2 = ((i_i_reg_332 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_i1_fu_655_p2 = ((i_i1_reg_343 == 4'd10) ? 1'b1 : 1'b0);

assign grp_convolution_3_fu_354_ap_start = grp_convolution_3_fu_354_ap_start_reg;

assign grp_convolution_5_fu_382_ap_start = grp_convolution_5_fu_382_ap_start_reg;

assign grp_convulution1_fu_362_ap_start = grp_convulution1_fu_362_ap_start_reg;

assign grp_fc_6_fu_370_ap_start = grp_fc_6_fu_370_ap_start_reg;

assign grp_maxpool_2_fu_390_ap_start = grp_maxpool_2_fu_390_ap_start_reg;

assign grp_maxpool_4_fu_396_ap_start = grp_maxpool_4_fu_396_ap_start_reg;

assign grp_relu_1_fu_418_ap_start = grp_relu_1_fu_418_ap_start_reg;

assign grp_relu_2_fu_433_ap_start = grp_relu_2_fu_433_ap_start_reg;

assign grp_relu_3_fu_423_ap_start = grp_relu_3_fu_423_ap_start_reg;

assign grp_relu_4_fu_428_ap_start = grp_relu_4_fu_428_ap_start_reg;

assign grp_store_bias_3_fu_464_ap_start = grp_store_bias_3_fu_464_ap_start_reg;

assign grp_store_bias_5_fu_456_ap_start = grp_store_bias_5_fu_456_ap_start_reg;

assign grp_store_bias_fu_480_ap_start = grp_store_bias_fu_480_ap_start_reg;

assign grp_store_input_fu_447_ap_start = grp_store_input_fu_447_ap_start_reg;

assign grp_store_output_fu_472_ap_start = grp_store_output_fu_472_ap_start_reg;

assign grp_store_weights_3_fu_410_ap_start = grp_store_weights_3_fu_410_ap_start_reg;

assign grp_store_weights_5_fu_402_ap_start = grp_store_weights_5_fu_402_ap_start_reg;

assign grp_store_weights_fu_438_ap_start = grp_store_weights_fu_438_ap_start_reg;

assign i_18_fu_661_p2 = (i_i1_reg_343 + 4'd1);

assign i_fu_603_p2 = (i_i_reg_332 + 7'd1);

assign notlhs4_fu_689_p2 = ((tmp_fu_675_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_631_p2 = ((tmp_s_fu_617_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs5_fu_695_p2 = ((tmp_361_fu_685_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_637_p2 = ((tmp_360_fu_627_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_0_0_assign_s_fu_614_p1 = output5_oc_0_0_loa_reg_776;

assign output_assign_load_t_fu_672_p1 = output6_oc_load_reg_798;

assign tmp_360_fu_627_p1 = output_0_0_assign_s_fu_614_p1[22:0];

assign tmp_361_fu_685_p1 = output_assign_load_t_fu_672_p1[22:0];

assign tmp_41_fu_643_p2 = (notrhs_fu_637_p2 | notlhs_fu_631_p2);

assign tmp_43_fu_649_p2 = (tmp_41_fu_643_p2 & grp_fu_489_p2);

assign tmp_45_fu_701_p2 = (notrhs5_fu_695_p2 | notlhs4_fu_689_p2);

assign tmp_47_fu_707_p2 = (tmp_45_fu_701_p2 & grp_fu_489_p2);

assign tmp_fu_675_p4 = {{output_assign_load_t_fu_672_p1[30:23]}};

assign tmp_i1_fu_667_p1 = i_i1_reg_343;

assign tmp_i_fu_609_p1 = i_i_reg_332;

assign tmp_s_fu_617_p4 = {{output_0_0_assign_s_fu_614_p1[30:23]}};

endmodule //conv1
