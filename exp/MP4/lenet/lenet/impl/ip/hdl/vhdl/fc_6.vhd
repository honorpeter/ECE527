-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_0_0_ce0 : OUT STD_LOGIC;
    input_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWVALID : OUT STD_LOGIC;
    m_axi_weights_AWREADY : IN STD_LOGIC;
    m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WVALID : OUT STD_LOGIC;
    m_axi_weights_WREADY : IN STD_LOGIC;
    m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_WLAST : OUT STD_LOGIC;
    m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARVALID : OUT STD_LOGIC;
    m_axi_weights_ARREADY : IN STD_LOGIC;
    m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RVALID : IN STD_LOGIC;
    m_axi_weights_RREADY : OUT STD_LOGIC;
    m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_RLAST : IN STD_LOGIC;
    m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BVALID : IN STD_LOGIC;
    m_axi_weights_BREADY : OUT STD_LOGIC;
    m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weights_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_bias_AWVALID : OUT STD_LOGIC;
    m_axi_bias_AWREADY : IN STD_LOGIC;
    m_axi_bias_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_WVALID : OUT STD_LOGIC;
    m_axi_bias_WREADY : IN STD_LOGIC;
    m_axi_bias_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_WLAST : OUT STD_LOGIC;
    m_axi_bias_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_ARVALID : OUT STD_LOGIC;
    m_axi_bias_ARREADY : IN STD_LOGIC;
    m_axi_bias_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_RVALID : IN STD_LOGIC;
    m_axi_bias_RREADY : OUT STD_LOGIC;
    m_axi_bias_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_RLAST : IN STD_LOGIC;
    m_axi_bias_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_BVALID : IN STD_LOGIC;
    m_axi_bias_BREADY : OUT STD_LOGIC;
    m_axi_bias_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bias_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fc_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal weights_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal bias_blk_n_AR : STD_LOGIC;
    signal bias_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_bias_ARREADY : STD_LOGIC;
    signal weights_offset_cast_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_offset_cast_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal n_1_fu_194_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_1_reg_285 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_44_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_m_axi_weights_ARREADY : STD_LOGIC;
    signal output_addr_reg_301 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal c_3_fu_260_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_3_reg_309 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state16 : BOOLEAN;
    signal bias_addr_read_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_addr_read_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_0_load_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_1_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal n_reg_129 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_s_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_153 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext2_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_bias_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_weights_ARREADY : STD_LOGIC := '0';
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_59_fu_200_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_60_fu_212_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_208_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_220_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_61_fu_224_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);

    component conv1_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv1_fadd_32ns_3bkb_U59 : component conv1_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_141,
        din1 => grp_fu_164_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_164_p2);

    conv1_fmul_32ns_3cud_U60 : component conv1_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_addr_read_reg_324,
        din1 => input_0_0_load_reg_329,
        ce => ap_const_logic_1,
        dout => grp_fu_169_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_bias_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_bias_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_bias_ARREADY = ap_const_logic_0)))) then 
                        ap_reg_ioackin_m_axi_bias_ARREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (m_axi_bias_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_bias_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_weights_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    if ((ap_sig_ioackin_m_axi_weights_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_weights_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    c_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                c_reg_153 <= c_3_reg_309;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                c_reg_153 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    n_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                n_reg_129 <= n_1_reg_285;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                n_reg_129 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tmp_s_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                tmp_s_reg_141 <= grp_fu_164_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                tmp_s_reg_141 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_bias_RVALID = ap_const_logic_0) and (exitcond_fu_254_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_254_p2 = ap_const_lv1_1))) then
                bias_addr_read_reg_319 <= m_axi_bias_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_bias_RVALID = ap_const_logic_0) and (exitcond_fu_254_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                c_3_reg_309 <= c_3_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                input_0_0_load_reg_329 <= input_0_0_q0;
                weights_addr_read_reg_324 <= m_axi_weights_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                n_1_reg_285 <= n_1_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                output_addr_reg_301 <= tmp_fu_249_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_1_reg_344 <= grp_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_3_reg_334 <= grp_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_188_p2 = ap_const_lv1_0))) then
                tmp_44_reg_290 <= tmp_44_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    weights_offset_cast_reg_277(29 downto 0) <= weights_offset_cast_fu_184_p1(29 downto 0);
            end if;
        end if;
    end process;
    weights_offset_cast_reg_277(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_weights_RVALID, m_axi_bias_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state16, exitcond_fu_254_p2, ap_sig_ioackin_m_axi_bias_ARREADY, ap_CS_fsm_state8, exitcond1_fu_188_p2, ap_sig_ioackin_m_axi_weights_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_bias_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_188_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_sig_ioackin_m_axi_weights_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if ((not(((m_axi_bias_RVALID = ap_const_logic_0) and (exitcond_fu_254_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_254_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif ((not(((m_axi_bias_RVALID = ap_const_logic_0) and (exitcond_fu_254_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_254_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((m_axi_weights_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state16_assign_proc : process(m_axi_bias_RVALID, exitcond_fu_254_p2)
    begin
                ap_block_state16 <= ((m_axi_bias_RVALID = ap_const_logic_0) and (exitcond_fu_254_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, exitcond1_fu_188_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_188_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, exitcond1_fu_188_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_188_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_bias_ARREADY_assign_proc : process(m_axi_bias_ARREADY, ap_reg_ioackin_m_axi_bias_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_bias_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_bias_ARREADY <= m_axi_bias_ARREADY;
        else 
            ap_sig_ioackin_m_axi_bias_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_weights_ARREADY_assign_proc : process(m_axi_weights_ARREADY, ap_reg_ioackin_m_axi_weights_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_weights_ARREADY <= m_axi_weights_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weights_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    bias_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_bias_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bias_blk_n_AR <= m_axi_bias_ARREADY;
        else 
            bias_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    bias_blk_n_R_assign_proc : process(m_axi_bias_RVALID, ap_CS_fsm_state16, exitcond_fu_254_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_254_p2 = ap_const_lv1_1))) then 
            bias_blk_n_R <= m_axi_bias_RVALID;
        else 
            bias_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    c_3_fu_260_p2 <= std_logic_vector(unsigned(c_reg_153) + unsigned(ap_const_lv7_1));
    exitcond1_fu_188_p2 <= "1" when (n_reg_129 = ap_const_lv4_A) else "0";
    exitcond_fu_254_p2 <= "1" when (c_reg_153 = ap_const_lv7_78) else "0";

    grp_fu_164_p1_assign_proc : process(bias_addr_read_reg_319, tmp_3_reg_334, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_164_p1 <= bias_addr_read_reg_319;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_164_p1 <= tmp_3_reg_334;
        else 
            grp_fu_164_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    input_0_0_address0 <= tmp_2_fu_266_p1(7 - 1 downto 0);

    input_0_0_ce0_assign_proc : process(m_axi_bias_RVALID, ap_CS_fsm_state16, exitcond_fu_254_p2)
    begin
        if ((not(((m_axi_bias_RVALID = ap_const_logic_0) and (exitcond_fu_254_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            input_0_0_ce0 <= ap_const_logic_1;
        else 
            input_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bias_ARADDR <= sext2_fu_173_p1(32 - 1 downto 0);
    m_axi_bias_ARBURST <= ap_const_lv2_0;
    m_axi_bias_ARCACHE <= ap_const_lv4_0;
    m_axi_bias_ARID <= ap_const_lv1_0;
    m_axi_bias_ARLEN <= ap_const_lv32_A;
    m_axi_bias_ARLOCK <= ap_const_lv2_0;
    m_axi_bias_ARPROT <= ap_const_lv3_0;
    m_axi_bias_ARQOS <= ap_const_lv4_0;
    m_axi_bias_ARREGION <= ap_const_lv4_0;
    m_axi_bias_ARSIZE <= ap_const_lv3_0;
    m_axi_bias_ARUSER <= ap_const_lv1_0;

    m_axi_bias_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_m_axi_bias_ARREADY)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_reg_ioackin_m_axi_bias_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_bias_ARVALID <= ap_const_logic_1;
        else 
            m_axi_bias_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bias_AWADDR <= ap_const_lv32_0;
    m_axi_bias_AWBURST <= ap_const_lv2_0;
    m_axi_bias_AWCACHE <= ap_const_lv4_0;
    m_axi_bias_AWID <= ap_const_lv1_0;
    m_axi_bias_AWLEN <= ap_const_lv32_0;
    m_axi_bias_AWLOCK <= ap_const_lv2_0;
    m_axi_bias_AWPROT <= ap_const_lv3_0;
    m_axi_bias_AWQOS <= ap_const_lv4_0;
    m_axi_bias_AWREGION <= ap_const_lv4_0;
    m_axi_bias_AWSIZE <= ap_const_lv3_0;
    m_axi_bias_AWUSER <= ap_const_lv1_0;
    m_axi_bias_AWVALID <= ap_const_logic_0;
    m_axi_bias_BREADY <= ap_const_logic_0;

    m_axi_bias_RREADY_assign_proc : process(m_axi_bias_RVALID, ap_CS_fsm_state16, exitcond_fu_254_p2)
    begin
        if ((not(((m_axi_bias_RVALID = ap_const_logic_0) and (exitcond_fu_254_p2 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_fu_254_p2 = ap_const_lv1_1))) then 
            m_axi_bias_RREADY <= ap_const_logic_1;
        else 
            m_axi_bias_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bias_WDATA <= ap_const_lv32_0;
    m_axi_bias_WID <= ap_const_lv1_0;
    m_axi_bias_WLAST <= ap_const_logic_0;
    m_axi_bias_WSTRB <= ap_const_lv4_0;
    m_axi_bias_WUSER <= ap_const_lv1_0;
    m_axi_bias_WVALID <= ap_const_logic_0;
    m_axi_weights_ARADDR <= tmp_45_fu_239_p1(32 - 1 downto 0);
    m_axi_weights_ARBURST <= ap_const_lv2_0;
    m_axi_weights_ARCACHE <= ap_const_lv4_0;
    m_axi_weights_ARID <= ap_const_lv1_0;
    m_axi_weights_ARLEN <= ap_const_lv32_78;
    m_axi_weights_ARLOCK <= ap_const_lv2_0;
    m_axi_weights_ARPROT <= ap_const_lv3_0;
    m_axi_weights_ARQOS <= ap_const_lv4_0;
    m_axi_weights_ARREGION <= ap_const_lv4_0;
    m_axi_weights_ARSIZE <= ap_const_lv3_0;
    m_axi_weights_ARUSER <= ap_const_lv1_0;

    m_axi_weights_ARVALID_assign_proc : process(ap_CS_fsm_state9, ap_reg_ioackin_m_axi_weights_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_weights_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weights_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_AWADDR <= ap_const_lv32_0;
    m_axi_weights_AWBURST <= ap_const_lv2_0;
    m_axi_weights_AWCACHE <= ap_const_lv4_0;
    m_axi_weights_AWID <= ap_const_lv1_0;
    m_axi_weights_AWLEN <= ap_const_lv32_0;
    m_axi_weights_AWLOCK <= ap_const_lv2_0;
    m_axi_weights_AWPROT <= ap_const_lv3_0;
    m_axi_weights_AWQOS <= ap_const_lv4_0;
    m_axi_weights_AWREGION <= ap_const_lv4_0;
    m_axi_weights_AWSIZE <= ap_const_lv3_0;
    m_axi_weights_AWUSER <= ap_const_lv1_0;
    m_axi_weights_AWVALID <= ap_const_logic_0;
    m_axi_weights_BREADY <= ap_const_logic_0;

    m_axi_weights_RREADY_assign_proc : process(m_axi_weights_RVALID, ap_CS_fsm_state17)
    begin
        if (((m_axi_weights_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            m_axi_weights_RREADY <= ap_const_logic_1;
        else 
            m_axi_weights_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_WDATA <= ap_const_lv32_0;
    m_axi_weights_WID <= ap_const_lv1_0;
    m_axi_weights_WLAST <= ap_const_logic_0;
    m_axi_weights_WSTRB <= ap_const_lv4_0;
    m_axi_weights_WUSER <= ap_const_lv1_0;
    m_axi_weights_WVALID <= ap_const_logic_0;
    n_1_fu_194_p2 <= std_logic_vector(unsigned(n_reg_129) + unsigned(ap_const_lv4_1));
    output_r_address0 <= output_addr_reg_301;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_1_reg_344;

    output_r_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl6_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_212_p3),12));
    p_shl_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_200_p3),12));
    sext2_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias_offset),64));
    tmp_2_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_153),64));
        tmp_43_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_61_fu_224_p2),32));

    tmp_44_fu_234_p2 <= std_logic_vector(unsigned(weights_offset_cast_reg_277) + unsigned(tmp_43_fu_230_p1));
        tmp_45_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_reg_290),64));

    tmp_59_fu_200_p3 <= (n_reg_129 & ap_const_lv7_0);
    tmp_60_fu_212_p3 <= (n_reg_129 & ap_const_lv3_0);
    tmp_61_fu_224_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_208_p1) - unsigned(p_shl6_cast_fu_220_p1));
    tmp_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_129),64));

    weights_blk_n_AR_assign_proc : process(m_axi_weights_ARREADY, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights_blk_n_AR <= m_axi_weights_ARREADY;
        else 
            weights_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weights_blk_n_R_assign_proc : process(m_axi_weights_RVALID, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            weights_blk_n_R <= m_axi_weights_RVALID;
        else 
            weights_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    weights_offset_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_offset),32));
end behav;
