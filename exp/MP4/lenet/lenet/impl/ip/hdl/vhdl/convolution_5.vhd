-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_0_0_ce0 : OUT STD_LOGIC;
    output_0_0_we0 : OUT STD_LOGIC;
    output_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_2_fu_200_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_2_reg_397 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_402 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_cast_fu_218_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_165_cast_reg_408 : STD_LOGIC_VECTOR (11 downto 0);
    signal m_fu_228_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_8_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_421 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_238_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_fu_248_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_439 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_9_cast1_fu_254_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_cast1_reg_444 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond1_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_cast_fu_258_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_cast_reg_449 : STD_LOGIC_VECTOR (9 downto 0);
    signal ci_1_fu_268_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_1_reg_457 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_142_fu_323_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_142_reg_462 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_fu_360_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_146_reg_467 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_147_fu_364_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_147_reg_472 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weights_load_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_load_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bias_load_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_s_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal co_reg_104 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_reg_115 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_reg_161 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_173 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_171_cast_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_178_cast_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_184_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_137_fu_210_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_138_fu_282_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_cast_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_139_fu_294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_309_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_168_cast_fu_305_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_141_fu_317_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_cast1_fu_274_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_143_fu_328_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_136_fu_337_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_172_cast_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_144_fu_349_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_145_fu_355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_cast_fu_372_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_148_fu_379_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_149_fu_384_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component conv1_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv1_fadd_32ns_3bkb_U53 : component conv1_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_184_p0,
        din1 => grp_fu_184_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);

    conv1_fmul_32ns_3cud_U54 : component conv1_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_load_reg_487,
        din1 => input_load_reg_492,
        ce => ap_const_logic_1,
        dout => grp_fu_190_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ci_reg_173 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                ci_reg_173 <= ci_1_reg_457;
            end if; 
        end if;
    end process;

    co_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                co_reg_104 <= co_2_reg_397;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                co_reg_104 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_115 <= m_reg_416;
            elsif (((exitcond3_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_115 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_150 <= n_reg_439;
            elsif (((exitcond2_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_150 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_1_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                sum_1_reg_138 <= sum_2_reg_161;
            elsif (((exitcond2_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_1_reg_138 <= sum_reg_126;
            end if; 
        end if;
    end process;

    sum_2_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_2_reg_161 <= sum_1_reg_138;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_2_reg_161 <= grp_fu_184_p2;
            end if; 
        end if;
    end process;

    sum_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                sum_reg_126 <= sum_1_reg_138;
            elsif (((exitcond3_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_reg_126 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bias_load_reg_507 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_1_reg_457 <= ci_1_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_2_reg_397 <= co_2_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_reg_492 <= input_r_q0;
                weights_load_reg_487 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                m_reg_416 <= m_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                n_reg_439 <= n_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_11_reg_497 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_142_reg_462 <= tmp_142_fu_323_p2;
                tmp_146_reg_467 <= tmp_146_fu_360_p1;
                tmp_147_reg_472 <= tmp_147_fu_364_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_165_cast_reg_408(10 downto 4) <= tmp_165_cast_fu_218_p1(10 downto 4);
                    tmp_reg_402(6 downto 0) <= tmp_fu_206_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_8_cast_reg_426(2 downto 0) <= tmp_8_cast_fu_238_p1(2 downto 0);
                    tmp_8_reg_421(2 downto 0) <= tmp_8_fu_234_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_9_cast1_reg_444(2 downto 0) <= tmp_9_cast1_fu_254_p1(2 downto 0);
                    tmp_9_cast_reg_449(2 downto 0) <= tmp_9_cast_fu_258_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_s_reg_512 <= grp_fu_184_p2;
            end if;
        end if;
    end process;
    tmp_reg_402(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_165_cast_reg_408(3 downto 0) <= "0000";
    tmp_165_cast_reg_408(11) <= '0';
    tmp_8_reg_421(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_8_cast_reg_426(7 downto 3) <= "00000";
    tmp_9_cast1_reg_444(16 downto 3) <= "00000000000000";
    tmp_9_cast_reg_449(9 downto 3) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_194_p2, ap_CS_fsm_state3, exitcond2_fu_222_p2, ap_CS_fsm_state4, exitcond1_fu_242_p2, ap_CS_fsm_state5, exitcond_fu_262_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond1_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_194_p2)
    begin
        if ((((exitcond3_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_194_p2)
    begin
        if (((exitcond3_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= tmp_reg_402(7 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_1_fu_268_p2 <= std_logic_vector(unsigned(ci_reg_173) + unsigned(ap_const_lv5_1));
    co_2_fu_200_p2 <= std_logic_vector(unsigned(co_reg_104) + unsigned(ap_const_lv7_1));
    exitcond1_fu_242_p2 <= "1" when (j_reg_150 = ap_const_lv3_5) else "0";
    exitcond2_fu_222_p2 <= "1" when (i_reg_115 = ap_const_lv3_5) else "0";
    exitcond3_fu_194_p2 <= "1" when (co_reg_104 = ap_const_lv7_78) else "0";
    exitcond_fu_262_p2 <= "1" when (ci_reg_173 = ap_const_lv5_10) else "0";

    grp_fu_184_p0_assign_proc : process(sum_reg_126, sum_2_reg_161, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_184_p0 <= sum_reg_126;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_184_p0 <= sum_2_reg_161;
        else 
            grp_fu_184_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_184_p1_assign_proc : process(tmp_11_reg_497, bias_load_reg_507, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_184_p1 <= bias_load_reg_507;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_184_p1 <= tmp_11_reg_497;
        else 
            grp_fu_184_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    input_r_address0 <= tmp_171_cast_fu_368_p1(9 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_fu_228_p2 <= std_logic_vector(unsigned(i_reg_115) + unsigned(ap_const_lv3_1));
    n_fu_248_p2 <= std_logic_vector(unsigned(j_reg_150) + unsigned(ap_const_lv3_1));
    output_0_0_address0 <= tmp_reg_402(7 - 1 downto 0);

    output_0_0_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_0_0_ce0 <= ap_const_logic_1;
        else 
            output_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_0_d0 <= tmp_s_reg_512;

    output_0_0_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_0_0_we0 <= ap_const_logic_1;
        else 
            output_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_136_fu_337_p3),64));
    p_shl2_cast_fu_309_p3 <= (tmp_140_fu_300_p2 & ap_const_lv2_0);
    p_shl3_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_fu_282_p3),8));
    p_shl_cast_fu_372_p3 <= (tmp_147_reg_472 & ap_const_lv2_0);
    tmp_10_cast1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_173),12));
    tmp_10_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_173),8));
    tmp_136_fu_337_p3 <= (tmp_143_fu_328_p2 & ap_const_lv2_0);
    tmp_137_fu_210_p3 <= (co_reg_104 & ap_const_lv4_0);
    tmp_138_fu_282_p3 <= (ci_reg_173 & ap_const_lv2_0);
    tmp_139_fu_294_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_290_p1) + unsigned(tmp_10_cast_fu_278_p1));
    tmp_140_fu_300_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_426) + unsigned(tmp_139_fu_294_p2));
    tmp_141_fu_317_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_309_p3) + unsigned(tmp_168_cast_fu_305_p1));
    tmp_142_fu_323_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_449) + unsigned(tmp_141_fu_317_p2));
    tmp_143_fu_328_p2 <= std_logic_vector(unsigned(tmp_10_cast1_fu_274_p1) + unsigned(tmp_165_cast_reg_408));
    tmp_144_fu_349_p2 <= std_logic_vector(unsigned(p_shl1_fu_345_p1) + unsigned(tmp_172_cast_fu_333_p1));
    tmp_145_fu_355_p2 <= std_logic_vector(unsigned(tmp_8_reg_421) + unsigned(tmp_144_fu_349_p2));
    tmp_146_fu_360_p1 <= tmp_145_fu_355_p2(17 - 1 downto 0);
    tmp_147_fu_364_p1 <= tmp_145_fu_355_p2(15 - 1 downto 0);
    tmp_148_fu_379_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_372_p3) + unsigned(tmp_146_reg_467));
    tmp_149_fu_384_p2 <= std_logic_vector(unsigned(tmp_9_cast1_reg_444) + unsigned(tmp_148_fu_379_p2));
    tmp_165_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_137_fu_210_p3),12));
    tmp_168_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_fu_300_p2),10));
    tmp_171_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_reg_462),64));
    tmp_172_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_328_p2),64));
    tmp_178_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_149_fu_384_p2),64));
    tmp_8_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_115),8));
    tmp_8_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_115),64));
    tmp_9_cast1_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_150),17));
    tmp_9_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_150),10));
    tmp_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_104),64));
    weights_address0 <= tmp_178_cast_fu_389_p1(16 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
