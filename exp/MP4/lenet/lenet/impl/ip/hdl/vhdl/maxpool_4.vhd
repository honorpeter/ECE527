-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxpool_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of maxpool_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D368D4A5 : STD_LOGIC_VECTOR (31 downto 0) := "11010011011010001101010010100101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_1_fu_178_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_1_reg_501 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_41_fu_212_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_reg_506 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_230_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_1_fu_242_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_1_reg_519 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_248_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_524 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_reg_529 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_1_fu_289_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_537 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_5_fu_295_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_reg_542 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_313_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_13_reg_550 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_48_fu_353_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_48_reg_555 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_fu_383_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_9_reg_563 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal max_value_2_fu_491_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal c_reg_86 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_97 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal max_value_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_133 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_1_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_156 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_69_cast_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_cast_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_188_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_200_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_208_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_fu_218_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_184_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_226_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_cast_fu_256_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_260_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_269_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_66_cast_fu_265_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast2_fu_303_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_cast_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_fu_328_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_341_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_333_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl5_cast_fu_349_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_cast_fu_359_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_fu_363_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast1_fu_373_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_389_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_cast_fu_394_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_49_fu_398_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_value_1_to_int_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_to_int_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_412_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_422_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_429_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_439_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component conv1_fcmp_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv1_fcmp_32ns_3dEe_U53 : component conv1_fcmp_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => max_value_1_reg_144,
        din1 => input_load_reg_573,
        opcode => ap_const_lv5_2,
        dout => tmp_28_fu_167_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_reg_86 <= c_1_reg_501;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_86 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                h_reg_97 <= h_1_reg_519;
            elsif (((exitcond4_fu_172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_reg_97 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_377_p2 = ap_const_lv1_1))) then 
                i_reg_133 <= i_13_reg_550;
            elsif (((exitcond2_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_133 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_156 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_156 <= j_9_reg_563;
            end if; 
        end if;
    end process;

    max_value_1_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_value_1_reg_144 <= max_value_reg_120;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                max_value_1_reg_144 <= max_value_2_fu_491_p3;
            end if; 
        end if;
    end process;

    max_value_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_377_p2 = ap_const_lv1_1))) then 
                max_value_reg_120 <= max_value_1_reg_144;
            elsif (((exitcond2_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_value_reg_120 <= ap_const_lv32_D368D4A5;
            end if; 
        end if;
    end process;

    w_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                w_reg_108 <= ap_const_lv3_0;
            elsif (((exitcond1_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_reg_108 <= w_1_reg_537;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_1_reg_501 <= c_1_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_1_reg_519 <= h_1_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_13_reg_550 <= i_13_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_reg_573 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_9_reg_563 <= j_9_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_41_reg_506(8 downto 1) <= tmp_41_fu_212_p2(8 downto 1);
                tmp_43_reg_511 <= tmp_43_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_45_reg_529 <= tmp_45_fu_277_p2;
                    tmp_s_reg_524(3 downto 1) <= tmp_s_fu_248_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_48_reg_555(11 downto 1) <= tmp_48_fu_353_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_5_reg_542(3 downto 1) <= tmp_5_fu_295_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_1_reg_537 <= w_1_fu_289_p2;
            end if;
        end if;
    end process;
    tmp_41_reg_506(0) <= '0';
    tmp_s_reg_524(0) <= '0';
    tmp_5_reg_542(0) <= '0';
    tmp_48_reg_555(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_172_p2, ap_CS_fsm_state3, exitcond3_fu_236_p2, ap_CS_fsm_state4, exitcond2_fu_283_p2, ap_CS_fsm_state5, exitcond1_fu_307_p2, ap_CS_fsm_state6, exitcond_fu_377_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_236_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_377_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_172_p2)
    begin
        if ((((exitcond4_fu_172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_172_p2)
    begin
        if (((exitcond4_fu_172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_178_p2 <= std_logic_vector(unsigned(c_reg_86) + unsigned(ap_const_lv5_1));
    exitcond1_fu_307_p2 <= "1" when (i_reg_133 = ap_const_lv2_2) else "0";
    exitcond2_fu_283_p2 <= "1" when (w_reg_108 = ap_const_lv3_5) else "0";
    exitcond3_fu_236_p2 <= "1" when (h_reg_97 = ap_const_lv3_5) else "0";
    exitcond4_fu_172_p2 <= "1" when (c_reg_86 = ap_const_lv5_10) else "0";
    exitcond_fu_377_p2 <= "1" when (j_reg_156 = ap_const_lv2_2) else "0";
    h_1_fu_242_p2 <= std_logic_vector(unsigned(h_reg_97) + unsigned(ap_const_lv3_1));
    i_13_fu_313_p2 <= std_logic_vector(unsigned(i_reg_133) + unsigned(ap_const_lv2_1));
    i_cast2_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_133),4));
    input_load_to_int_fu_426_p1 <= input_load_reg_573;
    input_r_address0 <= tmp_74_cast_fu_403_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_9_fu_383_p2 <= std_logic_vector(unsigned(j_reg_156) + unsigned(ap_const_lv2_1));
    j_cast1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_156),4));
    max_value_1_to_int_fu_408_p1 <= max_value_1_reg_144;
    max_value_2_fu_491_p3 <= 
        max_value_1_reg_144 when (tmp_29_fu_485_p2(0) = '1') else 
        input_load_reg_573;
    notlhs6_fu_461_p2 <= "0" when (tmp_23_fu_429_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_443_p2 <= "0" when (tmp_21_fu_412_p4 = ap_const_lv8_FF) else "1";
    notrhs7_fu_467_p2 <= "1" when (tmp_30_fu_439_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_449_p2 <= "1" when (tmp_24_fu_422_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= tmp_69_cast_fu_368_p1(9 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= max_value_reg_120;

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_307_p2)
    begin
        if (((exitcond1_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_188_p3),9));
    p_shl2_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_200_p3),9));
    p_shl3_cast_fu_269_p3 <= (tmp_44_fu_260_p2 & ap_const_lv2_0);
    p_shl4_cast_fu_333_p3 <= (tmp_47_fu_328_p2 & ap_const_lv3_0);
    p_shl5_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_341_p3),12));
    p_shl_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_218_p3),8));
    tmp_1_cast_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_389_p2),12));
    tmp_21_fu_412_p4 <= max_value_1_to_int_fu_408_p1(30 downto 23);
    tmp_23_fu_429_p4 <= input_load_to_int_fu_426_p1(30 downto 23);
    tmp_24_fu_422_p1 <= max_value_1_to_int_fu_408_p1(23 - 1 downto 0);
    tmp_25_fu_455_p2 <= (notrhs_fu_449_p2 or notlhs_fu_443_p2);
    tmp_26_fu_473_p2 <= (notrhs7_fu_467_p2 or notlhs6_fu_461_p2);
    tmp_27_fu_479_p2 <= (tmp_26_fu_473_p2 and tmp_25_fu_455_p2);
    tmp_29_fu_485_p2 <= (tmp_28_fu_167_p2 and tmp_27_fu_479_p2);
    tmp_30_fu_439_p1 <= input_load_to_int_fu_426_p1(23 - 1 downto 0);
    tmp_39_fu_188_p3 <= (c_reg_86 & ap_const_lv3_0);
    tmp_40_fu_200_p3 <= (c_reg_86 & ap_const_lv1_0);
    tmp_41_fu_212_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_208_p1) + unsigned(p_shl1_cast_fu_196_p1));
    tmp_42_fu_218_p3 <= (c_reg_86 & ap_const_lv2_0);
    tmp_43_fu_230_p2 <= std_logic_vector(unsigned(tmp_cast_fu_184_p1) + unsigned(p_shl_cast_fu_226_p1));
    tmp_44_fu_260_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_256_p1) + unsigned(tmp_43_reg_511));
    tmp_45_fu_277_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_269_p3) + unsigned(tmp_66_cast_fu_265_p1));
    tmp_46_fu_363_p2 <= std_logic_vector(unsigned(tmp_45_reg_529) + unsigned(tmp_6_cast_fu_359_p1));
    tmp_47_fu_328_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_324_p1) + unsigned(tmp_41_reg_506));
    tmp_48_fu_353_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_333_p3) + unsigned(p_shl5_cast_fu_349_p1));
    tmp_49_fu_398_p2 <= std_logic_vector(unsigned(tmp_48_reg_555) + unsigned(tmp_1_cast_fu_394_p1));
    tmp_4_cast_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_97),8));
    tmp_5_fu_295_p3 <= (w_reg_108 & ap_const_lv1_0);
    tmp_66_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_260_p2),10));
    tmp_69_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_363_p2),64));
    tmp_6_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_108),10));
    tmp_74_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_398_p2),64));
    tmp_7_fu_319_p2 <= std_logic_vector(unsigned(tmp_s_reg_524) + unsigned(i_cast2_fu_303_p1));
    tmp_8_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_319_p2),9));
    tmp_9_fu_389_p2 <= std_logic_vector(unsigned(j_cast1_fu_373_p1) + unsigned(tmp_5_reg_542));
    tmp_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_86),8));
    tmp_fu_341_p3 <= (tmp_47_fu_328_p2 & ap_const_lv1_0);
    tmp_s_fu_248_p3 <= (h_reg_97 & ap_const_lv1_0);
    w_1_fu_289_p2 <= std_logic_vector(unsigned(w_reg_108) + unsigned(ap_const_lv3_1));
end behav;
