// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module store_weights_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        weights_offset,
        weights_oc_address0,
        weights_oc_ce0,
        weights_oc_we0,
        weights_oc_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state14 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [31:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [31:0] m_axi_weights_WDATA;
output  [3:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [31:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [31:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [29:0] weights_offset;
output  [15:0] weights_oc_address0;
output   weights_oc_ce0;
output   weights_oc_we0;
output  [31:0] weights_oc_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weights_ARVALID;
reg m_axi_weights_RREADY;
reg weights_oc_ce0;
reg weights_oc_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_blk_n_AR;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten2_reg_470;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter2_reg;
reg    weights_blk_n_R;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter9_reg;
reg   [15:0] indvar_flatten1_reg_119;
reg   [6:0] i_reg_130;
reg   [9:0] indvar_flatten2_reg_141;
reg   [4:0] l_reg_152;
reg   [5:0] indvar_flatten_reg_163;
reg   [2:0] j_reg_174;
reg   [2:0] k_reg_185;
wire   [63:0] sext_fu_196_p1;
reg   [63:0] sext_reg_465;
wire   [0:0] exitcond_flatten2_fu_200_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_sig_ioackin_m_axi_weights_ARREADY;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
reg    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter1_reg;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter3_reg;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter4_reg;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter5_reg;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter6_reg;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter7_reg;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter8_reg;
reg   [0:0] exitcond_flatten2_reg_470_pp0_iter10_reg;
wire   [15:0] indvar_flatten_next2_fu_206_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] tmp_mid2_v_fu_232_p3;
reg   [6:0] tmp_mid2_v_reg_479;
wire   [4:0] tmp_2_mid2_fu_290_p3;
reg   [4:0] tmp_2_mid2_reg_485;
wire   [2:0] k_mid2_fu_334_p3;
reg   [2:0] k_mid2_reg_491;
reg   [2:0] k_mid2_reg_491_pp0_iter1_reg;
wire   [2:0] tmp_4_mid2_fu_342_p3;
reg   [2:0] tmp_4_mid2_reg_496;
wire   [2:0] k_1_fu_350_p2;
wire   [5:0] indvar_flatten_next_fu_362_p3;
wire   [9:0] indvar_flatten_next1_fu_376_p3;
wire   [63:0] tmp_4_fu_429_p2;
reg   [63:0] tmp_4_reg_517;
wire   [63:0] tmp_11_fu_448_p2;
reg   [63:0] tmp_11_reg_523;
reg   [63:0] tmp_11_reg_523_pp0_iter3_reg;
reg   [63:0] tmp_11_reg_523_pp0_iter4_reg;
reg   [63:0] tmp_11_reg_523_pp0_iter5_reg;
reg   [63:0] tmp_11_reg_523_pp0_iter6_reg;
reg   [63:0] tmp_11_reg_523_pp0_iter7_reg;
reg   [63:0] tmp_11_reg_523_pp0_iter8_reg;
reg   [63:0] tmp_11_reg_523_pp0_iter9_reg;
reg   [63:0] tmp_11_reg_523_pp0_iter10_reg;
reg   [31:0] weights_addr_reg_528;
reg   [31:0] weights_addr_read_reg_534;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter11;
reg   [6:0] ap_phi_mux_i_phi_fu_134_p4;
reg   [4:0] ap_phi_mux_l_phi_fu_156_p4;
reg   [2:0] ap_phi_mux_j_phi_fu_178_p4;
wire   [63:0] sum_fu_454_p2;
reg    ap_reg_ioackin_m_axi_weights_ARREADY;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] exitcond_flatten_fu_218_p2;
wire   [6:0] i_1_fu_212_p2;
wire   [0:0] exitcond_fu_246_p2;
wire   [0:0] not_exitcond_flatten_fu_240_p2;
wire   [0:0] exitcond_flatten1_fu_258_p2;
wire   [4:0] l_mid_fu_224_p3;
wire   [0:0] exitcond_flatten_mid_fu_264_p2;
wire   [0:0] tmp_5_fu_276_p2;
wire   [4:0] l_1_fu_270_p2;
wire   [0:0] exitcond_flatten_not_fu_298_p2;
wire   [0:0] exitcond_mid_fu_252_p2;
wire   [0:0] not_exitcond_flatten_1_fu_304_p2;
wire   [2:0] j_mid_fu_282_p3;
wire   [0:0] exitcond_mid1_fu_310_p2;
wire   [0:0] tmp_s_fu_322_p2;
wire   [0:0] tmp_3_fu_328_p2;
wire   [2:0] j_1_fu_316_p2;
wire   [5:0] indvar_flatten_op_fu_356_p2;
wire   [9:0] indvar_flatten13_op_fu_370_p2;
wire   [10:0] tmp_fu_384_p3;
wire   [11:0] tmp_3_cast_fu_391_p1;
wire   [11:0] tmp_2_mid2_cast_fu_395_p1;
wire   [11:0] tmp_7_fu_398_p2;
wire   [13:0] tmp_2_fu_408_p3;
wire   [63:0] tmp_7_cast_fu_404_p1;
wire   [63:0] p_shl1_fu_416_p1;
wire   [63:0] tmp_9_fu_420_p2;
wire   [63:0] tmp_4_mid2_cast_fu_426_p1;
wire   [63:0] tmp_8_fu_435_p2;
wire   [63:0] tmp_10_fu_440_p2;
wire   [63:0] tmp_6_fu_445_p1;
wire    ap_CS_fsm_state14;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_reg_ioackin_m_axi_weights_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
    end else begin
        if (((exitcond_flatten2_reg_470_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_weights_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_470 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_130 <= tmp_mid2_v_reg_479;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_130 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten1_reg_119 <= indvar_flatten_next2_fu_206_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten1_reg_119 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten2_reg_141 <= indvar_flatten_next1_fu_376_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten2_reg_141 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_163 <= indvar_flatten_next_fu_362_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_163 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_470 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_174 <= tmp_4_mid2_reg_496;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_174 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_185 <= k_1_fu_350_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_185 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_470 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        l_reg_152 <= tmp_2_mid2_reg_485;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        l_reg_152 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten2_reg_470 <= exitcond_flatten2_fu_200_p2;
        exitcond_flatten2_reg_470_pp0_iter1_reg <= exitcond_flatten2_reg_470;
        k_mid2_reg_491_pp0_iter1_reg <= k_mid2_reg_491;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten2_reg_470_pp0_iter10_reg <= exitcond_flatten2_reg_470_pp0_iter9_reg;
        exitcond_flatten2_reg_470_pp0_iter2_reg <= exitcond_flatten2_reg_470_pp0_iter1_reg;
        exitcond_flatten2_reg_470_pp0_iter3_reg <= exitcond_flatten2_reg_470_pp0_iter2_reg;
        exitcond_flatten2_reg_470_pp0_iter4_reg <= exitcond_flatten2_reg_470_pp0_iter3_reg;
        exitcond_flatten2_reg_470_pp0_iter5_reg <= exitcond_flatten2_reg_470_pp0_iter4_reg;
        exitcond_flatten2_reg_470_pp0_iter6_reg <= exitcond_flatten2_reg_470_pp0_iter5_reg;
        exitcond_flatten2_reg_470_pp0_iter7_reg <= exitcond_flatten2_reg_470_pp0_iter6_reg;
        exitcond_flatten2_reg_470_pp0_iter8_reg <= exitcond_flatten2_reg_470_pp0_iter7_reg;
        exitcond_flatten2_reg_470_pp0_iter9_reg <= exitcond_flatten2_reg_470_pp0_iter8_reg;
        tmp_11_reg_523_pp0_iter10_reg <= tmp_11_reg_523_pp0_iter9_reg;
        tmp_11_reg_523_pp0_iter3_reg <= tmp_11_reg_523;
        tmp_11_reg_523_pp0_iter4_reg <= tmp_11_reg_523_pp0_iter3_reg;
        tmp_11_reg_523_pp0_iter5_reg <= tmp_11_reg_523_pp0_iter4_reg;
        tmp_11_reg_523_pp0_iter6_reg <= tmp_11_reg_523_pp0_iter5_reg;
        tmp_11_reg_523_pp0_iter7_reg <= tmp_11_reg_523_pp0_iter6_reg;
        tmp_11_reg_523_pp0_iter8_reg <= tmp_11_reg_523_pp0_iter7_reg;
        tmp_11_reg_523_pp0_iter9_reg <= tmp_11_reg_523_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_mid2_reg_491 <= k_mid2_fu_334_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_reg_465[29 : 0] <= sext_fu_196_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_470_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_11_reg_523 <= tmp_11_fu_448_p2;
        weights_addr_reg_528 <= sum_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_fu_200_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_mid2_reg_485 <= tmp_2_mid2_fu_290_p3;
        tmp_4_mid2_reg_496 <= tmp_4_mid2_fu_342_p3;
        tmp_mid2_v_reg_479 <= tmp_mid2_v_fu_232_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_470 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_4_reg_517 <= tmp_4_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_470_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_addr_read_reg_534 <= m_axi_weights_RDATA;
    end
end

always @ (*) begin
    if ((exitcond_flatten2_fu_200_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten2_reg_470 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_134_p4 = tmp_mid2_v_reg_479;
    end else begin
        ap_phi_mux_i_phi_fu_134_p4 = i_reg_130;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten2_reg_470 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_178_p4 = tmp_4_mid2_reg_496;
    end else begin
        ap_phi_mux_j_phi_fu_178_p4 = j_reg_174;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten2_reg_470 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_l_phi_fu_156_p4 = tmp_2_mid2_reg_485;
    end else begin
        ap_phi_mux_l_phi_fu_156_p4 = l_reg_152;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_weights_ARREADY = m_axi_weights_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weights_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten2_reg_470_pp0_iter2_reg == 1'd0) & (ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        m_axi_weights_ARVALID = 1'b1;
    end else begin
        m_axi_weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten2_reg_470_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_weights_RREADY = 1'b1;
    end else begin
        m_axi_weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten2_reg_470_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weights_blk_n_AR = m_axi_weights_ARREADY;
    end else begin
        weights_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond_flatten2_reg_470_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        weights_blk_n_R = m_axi_weights_RVALID;
    end else begin
        weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_oc_ce0 = 1'b1;
    end else begin
        weights_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten2_reg_470_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weights_oc_we0 = 1'b1;
    end else begin
        weights_oc_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten2_fu_200_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten2_fu_200_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_flatten2_reg_470_pp0_iter9_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((exitcond_flatten2_reg_470_pp0_iter9_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((exitcond_flatten2_reg_470_pp0_iter9_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter10 = ((exitcond_flatten2_reg_470_pp0_iter9_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0));
end

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((exitcond_flatten2_reg_470_pp0_iter2_reg == 1'd0) & (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten1_fu_258_p2 = ((indvar_flatten_reg_163 == 6'd25) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_200_p2 = ((indvar_flatten1_reg_119 == 16'd48000) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_218_p2 = ((indvar_flatten2_reg_141 == 10'd400) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_fu_264_p2 = (not_exitcond_flatten_fu_240_p2 & exitcond_flatten1_fu_258_p2);

assign exitcond_flatten_not_fu_298_p2 = (exitcond_flatten1_fu_258_p2 ^ 1'd1);

assign exitcond_fu_246_p2 = ((k_reg_185 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_mid1_fu_310_p2 = (not_exitcond_flatten_1_fu_304_p2 & exitcond_mid_fu_252_p2);

assign exitcond_mid_fu_252_p2 = (not_exitcond_flatten_fu_240_p2 & exitcond_fu_246_p2);

assign i_1_fu_212_p2 = (7'd1 + ap_phi_mux_i_phi_fu_134_p4);

assign indvar_flatten13_op_fu_370_p2 = (10'd1 + indvar_flatten2_reg_141);

assign indvar_flatten_next1_fu_376_p3 = ((exitcond_flatten_fu_218_p2[0:0] === 1'b1) ? 10'd1 : indvar_flatten13_op_fu_370_p2);

assign indvar_flatten_next2_fu_206_p2 = (indvar_flatten1_reg_119 + 16'd1);

assign indvar_flatten_next_fu_362_p3 = ((tmp_5_fu_276_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten_op_fu_356_p2);

assign indvar_flatten_op_fu_356_p2 = (6'd1 + indvar_flatten_reg_163);

assign j_1_fu_316_p2 = (3'd1 + j_mid_fu_282_p3);

assign j_mid_fu_282_p3 = ((tmp_5_fu_276_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_j_phi_fu_178_p4);

assign k_1_fu_350_p2 = (3'd1 + k_mid2_fu_334_p3);

assign k_mid2_fu_334_p3 = ((tmp_3_fu_328_p2[0:0] === 1'b1) ? 3'd0 : k_reg_185);

assign l_1_fu_270_p2 = (5'd1 + l_mid_fu_224_p3);

assign l_mid_fu_224_p3 = ((exitcond_flatten_fu_218_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_l_phi_fu_156_p4);

assign m_axi_weights_ARADDR = weights_addr_reg_528;

assign m_axi_weights_ARBURST = 2'd0;

assign m_axi_weights_ARCACHE = 4'd0;

assign m_axi_weights_ARID = 1'd0;

assign m_axi_weights_ARLEN = 32'd1;

assign m_axi_weights_ARLOCK = 2'd0;

assign m_axi_weights_ARPROT = 3'd0;

assign m_axi_weights_ARQOS = 4'd0;

assign m_axi_weights_ARREGION = 4'd0;

assign m_axi_weights_ARSIZE = 3'd0;

assign m_axi_weights_ARUSER = 1'd0;

assign m_axi_weights_AWADDR = 32'd0;

assign m_axi_weights_AWBURST = 2'd0;

assign m_axi_weights_AWCACHE = 4'd0;

assign m_axi_weights_AWID = 1'd0;

assign m_axi_weights_AWLEN = 32'd0;

assign m_axi_weights_AWLOCK = 2'd0;

assign m_axi_weights_AWPROT = 3'd0;

assign m_axi_weights_AWQOS = 4'd0;

assign m_axi_weights_AWREGION = 4'd0;

assign m_axi_weights_AWSIZE = 3'd0;

assign m_axi_weights_AWUSER = 1'd0;

assign m_axi_weights_AWVALID = 1'b0;

assign m_axi_weights_BREADY = 1'b0;

assign m_axi_weights_WDATA = 32'd0;

assign m_axi_weights_WID = 1'd0;

assign m_axi_weights_WLAST = 1'b0;

assign m_axi_weights_WSTRB = 4'd0;

assign m_axi_weights_WUSER = 1'd0;

assign m_axi_weights_WVALID = 1'b0;

assign not_exitcond_flatten_1_fu_304_p2 = (exitcond_flatten_not_fu_298_p2 | exitcond_flatten_fu_218_p2);

assign not_exitcond_flatten_fu_240_p2 = (exitcond_flatten_fu_218_p2 ^ 1'd1);

assign p_shl1_fu_416_p1 = tmp_2_fu_408_p3;

assign sext_fu_196_p1 = weights_offset;

assign sum_fu_454_p2 = (sext_reg_465 + tmp_11_fu_448_p2);

assign tmp_10_fu_440_p2 = (tmp_4_reg_517 + tmp_8_fu_435_p2);

assign tmp_11_fu_448_p2 = (tmp_10_fu_440_p2 + tmp_6_fu_445_p1);

assign tmp_2_fu_408_p3 = {{tmp_7_fu_398_p2}, {2'd0}};

assign tmp_2_mid2_cast_fu_395_p1 = tmp_2_mid2_reg_485;

assign tmp_2_mid2_fu_290_p3 = ((exitcond_flatten_mid_fu_264_p2[0:0] === 1'b1) ? l_1_fu_270_p2 : l_mid_fu_224_p3);

assign tmp_3_cast_fu_391_p1 = tmp_fu_384_p3;

assign tmp_3_fu_328_p2 = (tmp_s_fu_322_p2 | exitcond_flatten_fu_218_p2);

assign tmp_4_fu_429_p2 = (tmp_9_fu_420_p2 + tmp_4_mid2_cast_fu_426_p1);

assign tmp_4_mid2_cast_fu_426_p1 = tmp_4_mid2_reg_496;

assign tmp_4_mid2_fu_342_p3 = ((exitcond_mid1_fu_310_p2[0:0] === 1'b1) ? j_1_fu_316_p2 : j_mid_fu_282_p3);

assign tmp_5_fu_276_p2 = (exitcond_flatten_mid_fu_264_p2 | exitcond_flatten_fu_218_p2);

assign tmp_6_fu_445_p1 = k_mid2_reg_491_pp0_iter1_reg;

assign tmp_7_cast_fu_404_p1 = tmp_7_fu_398_p2;

assign tmp_7_fu_398_p2 = (tmp_3_cast_fu_391_p1 + tmp_2_mid2_cast_fu_395_p1);

assign tmp_8_fu_435_p2 = tmp_4_reg_517 << 64'd2;

assign tmp_9_fu_420_p2 = (tmp_7_cast_fu_404_p1 + p_shl1_fu_416_p1);

assign tmp_fu_384_p3 = {{tmp_mid2_v_reg_479}, {4'd0}};

assign tmp_mid2_v_fu_232_p3 = ((exitcond_flatten_fu_218_p2[0:0] === 1'b1) ? i_1_fu_212_p2 : ap_phi_mux_i_phi_fu_134_p4);

assign tmp_s_fu_322_p2 = (exitcond_mid1_fu_310_p2 | exitcond_flatten_mid_fu_264_p2);

assign weights_oc_address0 = tmp_11_reg_523_pp0_iter10_reg;

assign weights_oc_d0 = weights_addr_read_reg_534;

always @ (posedge ap_clk) begin
    sext_reg_465[63:30] <= 34'b0000000000000000000000000000000000;
end

endmodule //store_weights_5
