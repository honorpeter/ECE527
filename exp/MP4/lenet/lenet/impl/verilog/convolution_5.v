// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        weights_0_address0,
        weights_0_ce0,
        weights_0_q0,
        weights_1_address0,
        weights_1_ce0,
        weights_1_q0,
        weights_2_address0,
        weights_2_ce0,
        weights_2_q0,
        weights_3_address0,
        weights_3_ce0,
        weights_3_q0,
        weights_4_address0,
        weights_4_ce0,
        weights_4_q0,
        weights_5_address0,
        weights_5_ce0,
        weights_5_q0,
        weights_6_address0,
        weights_6_ce0,
        weights_6_q0,
        weights_7_address0,
        weights_7_ce0,
        weights_7_q0,
        weights_8_address0,
        weights_8_ce0,
        weights_8_q0,
        weights_9_address0,
        weights_9_ce0,
        weights_9_q0,
        weights_10_address0,
        weights_10_ce0,
        weights_10_q0,
        weights_11_address0,
        weights_11_ce0,
        weights_11_q0,
        weights_12_address0,
        weights_12_ce0,
        weights_12_q0,
        weights_13_address0,
        weights_13_ce0,
        weights_13_q0,
        weights_14_address0,
        weights_14_ce0,
        weights_14_q0,
        weights_15_address0,
        weights_15_ce0,
        weights_15_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_0_0_address0,
        output_0_0_ce0,
        output_0_0_we0,
        output_0_0_d0
);

parameter    ap_ST_fsm_state1 = 101'd1;
parameter    ap_ST_fsm_state2 = 101'd2;
parameter    ap_ST_fsm_state3 = 101'd4;
parameter    ap_ST_fsm_state4 = 101'd8;
parameter    ap_ST_fsm_state5 = 101'd16;
parameter    ap_ST_fsm_state6 = 101'd32;
parameter    ap_ST_fsm_state7 = 101'd64;
parameter    ap_ST_fsm_state8 = 101'd128;
parameter    ap_ST_fsm_state9 = 101'd256;
parameter    ap_ST_fsm_state10 = 101'd512;
parameter    ap_ST_fsm_state11 = 101'd1024;
parameter    ap_ST_fsm_state12 = 101'd2048;
parameter    ap_ST_fsm_state13 = 101'd4096;
parameter    ap_ST_fsm_state14 = 101'd8192;
parameter    ap_ST_fsm_state15 = 101'd16384;
parameter    ap_ST_fsm_state16 = 101'd32768;
parameter    ap_ST_fsm_state17 = 101'd65536;
parameter    ap_ST_fsm_state18 = 101'd131072;
parameter    ap_ST_fsm_state19 = 101'd262144;
parameter    ap_ST_fsm_state20 = 101'd524288;
parameter    ap_ST_fsm_state21 = 101'd1048576;
parameter    ap_ST_fsm_state22 = 101'd2097152;
parameter    ap_ST_fsm_state23 = 101'd4194304;
parameter    ap_ST_fsm_state24 = 101'd8388608;
parameter    ap_ST_fsm_state25 = 101'd16777216;
parameter    ap_ST_fsm_state26 = 101'd33554432;
parameter    ap_ST_fsm_state27 = 101'd67108864;
parameter    ap_ST_fsm_state28 = 101'd134217728;
parameter    ap_ST_fsm_state29 = 101'd268435456;
parameter    ap_ST_fsm_state30 = 101'd536870912;
parameter    ap_ST_fsm_state31 = 101'd1073741824;
parameter    ap_ST_fsm_state32 = 101'd2147483648;
parameter    ap_ST_fsm_state33 = 101'd4294967296;
parameter    ap_ST_fsm_state34 = 101'd8589934592;
parameter    ap_ST_fsm_state35 = 101'd17179869184;
parameter    ap_ST_fsm_state36 = 101'd34359738368;
parameter    ap_ST_fsm_state37 = 101'd68719476736;
parameter    ap_ST_fsm_state38 = 101'd137438953472;
parameter    ap_ST_fsm_state39 = 101'd274877906944;
parameter    ap_ST_fsm_state40 = 101'd549755813888;
parameter    ap_ST_fsm_state41 = 101'd1099511627776;
parameter    ap_ST_fsm_state42 = 101'd2199023255552;
parameter    ap_ST_fsm_state43 = 101'd4398046511104;
parameter    ap_ST_fsm_state44 = 101'd8796093022208;
parameter    ap_ST_fsm_state45 = 101'd17592186044416;
parameter    ap_ST_fsm_state46 = 101'd35184372088832;
parameter    ap_ST_fsm_state47 = 101'd70368744177664;
parameter    ap_ST_fsm_state48 = 101'd140737488355328;
parameter    ap_ST_fsm_state49 = 101'd281474976710656;
parameter    ap_ST_fsm_state50 = 101'd562949953421312;
parameter    ap_ST_fsm_state51 = 101'd1125899906842624;
parameter    ap_ST_fsm_state52 = 101'd2251799813685248;
parameter    ap_ST_fsm_state53 = 101'd4503599627370496;
parameter    ap_ST_fsm_state54 = 101'd9007199254740992;
parameter    ap_ST_fsm_state55 = 101'd18014398509481984;
parameter    ap_ST_fsm_state56 = 101'd36028797018963968;
parameter    ap_ST_fsm_state57 = 101'd72057594037927936;
parameter    ap_ST_fsm_state58 = 101'd144115188075855872;
parameter    ap_ST_fsm_state59 = 101'd288230376151711744;
parameter    ap_ST_fsm_state60 = 101'd576460752303423488;
parameter    ap_ST_fsm_state61 = 101'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 101'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 101'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 101'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 101'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 101'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 101'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 101'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 101'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 101'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 101'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 101'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 101'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 101'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 101'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 101'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 101'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 101'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 101'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 101'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 101'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 101'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 101'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 101'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 101'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 101'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 101'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 101'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 101'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 101'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 101'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 101'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 101'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 101'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 101'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 101'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 101'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 101'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 101'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 101'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 101'd1267650600228229401496703205376;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [8:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [11:0] weights_0_address0;
output   weights_0_ce0;
input  [31:0] weights_0_q0;
output  [11:0] weights_1_address0;
output   weights_1_ce0;
input  [31:0] weights_1_q0;
output  [11:0] weights_2_address0;
output   weights_2_ce0;
input  [31:0] weights_2_q0;
output  [11:0] weights_3_address0;
output   weights_3_ce0;
input  [31:0] weights_3_q0;
output  [11:0] weights_4_address0;
output   weights_4_ce0;
input  [31:0] weights_4_q0;
output  [11:0] weights_5_address0;
output   weights_5_ce0;
input  [31:0] weights_5_q0;
output  [11:0] weights_6_address0;
output   weights_6_ce0;
input  [31:0] weights_6_q0;
output  [11:0] weights_7_address0;
output   weights_7_ce0;
input  [31:0] weights_7_q0;
output  [11:0] weights_8_address0;
output   weights_8_ce0;
input  [31:0] weights_8_q0;
output  [11:0] weights_9_address0;
output   weights_9_ce0;
input  [31:0] weights_9_q0;
output  [11:0] weights_10_address0;
output   weights_10_ce0;
input  [31:0] weights_10_q0;
output  [11:0] weights_11_address0;
output   weights_11_ce0;
input  [31:0] weights_11_q0;
output  [11:0] weights_12_address0;
output   weights_12_ce0;
input  [31:0] weights_12_q0;
output  [11:0] weights_13_address0;
output   weights_13_ce0;
input  [31:0] weights_13_q0;
output  [11:0] weights_14_address0;
output   weights_14_ce0;
input  [31:0] weights_14_q0;
output  [11:0] weights_15_address0;
output   weights_15_ce0;
input  [31:0] weights_15_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [6:0] output_0_0_address0;
output   output_0_0_ce0;
output   output_0_0_we0;
output  [31:0] output_0_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] input_r_address0;
reg input_r_ce0;
reg[8:0] input_r_address1;
reg input_r_ce1;
reg weights_0_ce0;
reg weights_1_ce0;
reg weights_2_ce0;
reg weights_3_ce0;
reg weights_4_ce0;
reg weights_5_ce0;
reg weights_6_ce0;
reg weights_7_ce0;
reg weights_8_ce0;
reg weights_9_ce0;
reg weights_10_ce0;
reg weights_11_ce0;
reg weights_12_ce0;
reg weights_13_ce0;
reg weights_14_ce0;
reg weights_15_ce0;
reg bias_ce0;
reg output_0_0_ce0;
reg output_0_0_we0;

(* fsm_encoding = "none" *) reg   [100:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_909;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
reg   [31:0] reg_914;
reg   [31:0] reg_919;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
reg   [31:0] reg_924;
reg   [31:0] reg_929;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
reg   [31:0] reg_934;
reg   [31:0] reg_939;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
reg   [31:0] reg_944;
wire   [31:0] grp_fu_901_p2;
reg   [31:0] reg_949;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_905_p2;
reg   [31:0] reg_954;
reg   [31:0] reg_959;
wire    ap_CS_fsm_state15;
reg   [31:0] reg_964;
reg   [31:0] reg_969;
wire    ap_CS_fsm_state16;
reg   [31:0] reg_974;
wire   [31:0] grp_fu_893_p2;
reg   [31:0] reg_979;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state100;
wire   [6:0] co_2_fu_991_p2;
reg   [6:0] co_2_reg_1561;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_128_fu_1019_p2;
reg   [9:0] tmp_128_reg_1566;
wire   [0:0] exitcond2_fu_985_p2;
reg   [6:0] bias_addr_reg_1571;
reg   [6:0] output_0_0_addr_reg_1576;
wire   [2:0] m_fu_1031_p2;
reg   [2:0] m_reg_1584;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_130_fu_1057_p2;
reg   [5:0] tmp_130_reg_1589;
wire   [0:0] exitcond1_fu_1025_p2;
wire   [6:0] tmp_168_cast_fu_1081_p1;
reg   [6:0] tmp_168_cast_reg_1594;
wire   [6:0] tmp_132_fu_1085_p2;
reg   [6:0] tmp_132_reg_1599;
wire   [6:0] tmp_133_fu_1091_p2;
reg   [6:0] tmp_133_reg_1604;
wire   [7:0] tmp_134_fu_1097_p2;
reg   [7:0] tmp_134_reg_1609;
wire   [7:0] tmp_135_fu_1103_p2;
reg   [7:0] tmp_135_reg_1614;
wire   [7:0] tmp_136_fu_1109_p2;
reg   [7:0] tmp_136_reg_1619;
wire   [7:0] tmp_137_fu_1115_p2;
reg   [7:0] tmp_137_reg_1624;
wire   [9:0] tmp_138_fu_1139_p2;
reg   [9:0] tmp_138_reg_1629;
wire   [8:0] tmp_139_fu_1145_p2;
reg   [8:0] tmp_139_reg_1634;
wire   [8:0] tmp_140_fu_1151_p2;
reg   [8:0] tmp_140_reg_1639;
wire   [8:0] tmp_141_fu_1157_p2;
reg   [8:0] tmp_141_reg_1644;
wire   [8:0] tmp_142_fu_1163_p2;
reg   [8:0] tmp_142_reg_1649;
wire   [8:0] tmp_143_fu_1169_p2;
reg   [8:0] tmp_143_reg_1654;
wire   [8:0] tmp_144_fu_1175_p2;
reg   [8:0] tmp_144_reg_1659;
wire   [8:0] tmp_145_fu_1181_p2;
reg   [8:0] tmp_145_reg_1664;
wire   [12:0] tmp_147_fu_1208_p2;
reg   [12:0] tmp_147_reg_1669;
wire   [0:0] tmp_20_fu_1214_p2;
reg   [0:0] tmp_20_reg_1674;
wire   [2:0] j_10_fu_1226_p2;
reg   [2:0] j_10_reg_1682;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_38_fu_1238_p2;
reg   [0:0] tmp_38_reg_1687;
wire   [0:0] exitcond_fu_1220_p2;
wire   [6:0] tmp_150_fu_1288_p2;
reg   [6:0] tmp_150_reg_1717;
wire   [6:0] tmp_151_fu_1293_p2;
reg   [6:0] tmp_151_reg_1722;
wire   [7:0] tmp_152_fu_1298_p2;
reg   [7:0] tmp_152_reg_1727;
wire   [7:0] tmp_153_fu_1303_p2;
reg   [7:0] tmp_153_reg_1732;
wire   [7:0] tmp_154_fu_1308_p2;
reg   [7:0] tmp_154_reg_1737;
wire   [7:0] tmp_155_fu_1313_p2;
reg   [7:0] tmp_155_reg_1742;
wire   [9:0] tmp_156_fu_1318_p2;
reg   [9:0] tmp_156_reg_1747;
wire   [8:0] tmp_157_fu_1323_p2;
reg   [8:0] tmp_157_reg_1752;
wire   [8:0] tmp_158_fu_1328_p2;
reg   [8:0] tmp_158_reg_1757;
wire   [8:0] tmp_159_fu_1333_p2;
reg   [8:0] tmp_159_reg_1762;
wire   [8:0] tmp_160_fu_1338_p2;
reg   [8:0] tmp_160_reg_1767;
wire   [8:0] tmp_161_fu_1343_p2;
reg   [8:0] tmp_161_reg_1772;
wire   [8:0] tmp_162_fu_1348_p2;
reg   [8:0] tmp_162_reg_1777;
wire   [8:0] tmp_163_fu_1353_p2;
reg   [8:0] tmp_163_reg_1782;
wire   [63:0] tmp_203_cast_fu_1363_p1;
reg   [63:0] tmp_203_cast_reg_1787;
wire   [0:0] or_cond3_fu_1375_p2;
reg   [0:0] or_cond3_reg_1815;
reg   [31:0] weights_0_load_reg_1839;
reg   [31:0] weights_1_load_reg_1844;
reg   [31:0] weights_2_load_reg_1869;
reg   [31:0] weights_3_load_reg_1874;
reg   [31:0] weights_4_load_reg_1899;
reg   [31:0] weights_5_load_reg_1904;
reg   [31:0] weights_6_load_reg_1929;
reg   [31:0] weights_7_load_reg_1934;
reg   [31:0] weights_8_load_reg_1959;
reg   [31:0] weights_9_load_reg_1964;
wire   [31:0] p_14_fu_1420_p3;
wire   [31:0] p_15_fu_1428_p3;
reg   [31:0] weights_10_load_reg_1999;
reg   [31:0] weights_11_load_reg_2004;
wire   [31:0] p_12_fu_1444_p3;
wire   [31:0] p_13_fu_1452_p3;
reg   [31:0] weights_12_load_reg_2039;
reg   [31:0] weights_13_load_reg_2044;
wire   [31:0] p_10_fu_1468_p3;
wire   [31:0] p_11_fu_1476_p3;
reg   [31:0] tmp_52_reg_2059;
reg   [31:0] tmp_54_reg_2064;
reg   [31:0] weights_14_load_reg_2069;
reg   [31:0] weights_15_load_reg_2074;
wire   [31:0] p_8_fu_1484_p3;
wire    ap_CS_fsm_state13;
wire   [31:0] p_9_fu_1492_p3;
reg   [31:0] tmp_56_reg_2089;
reg   [31:0] tmp_58_reg_2094;
wire   [31:0] p_s_fu_1500_p3;
reg   [31:0] p_s_reg_2099;
wire   [31:0] p_1_fu_1507_p3;
reg   [31:0] p_1_reg_2104;
wire   [31:0] p_2_fu_1514_p3;
reg   [31:0] p_2_reg_2109;
wire   [31:0] p_3_fu_1521_p3;
reg   [31:0] p_3_reg_2114;
wire   [31:0] p_4_fu_1528_p3;
reg   [31:0] p_4_reg_2119;
wire   [31:0] p_5_fu_1535_p3;
reg   [31:0] p_5_reg_2124;
wire   [31:0] p_6_fu_1542_p3;
wire   [31:0] p_7_fu_1550_p3;
reg   [31:0] tmp_41_reg_2139;
wire   [31:0] grp_fu_897_p2;
reg   [31:0] tmp_43_reg_2145;
reg   [31:0] tmp_45_reg_2151;
reg   [31:0] tmp_47_reg_2157;
reg   [31:0] tmp_49_reg_2163;
reg   [31:0] tmp_51_reg_2169;
reg   [31:0] tmp_53_reg_2175;
wire    ap_CS_fsm_state17;
reg   [31:0] tmp_55_reg_2181;
reg   [31:0] tmp_57_reg_2187;
wire    ap_CS_fsm_state18;
reg   [31:0] tmp_59_reg_2193;
reg   [31:0] tmp_61_reg_2199;
wire    ap_CS_fsm_state19;
reg   [31:0] tmp_63_reg_2205;
reg   [31:0] tmp_65_reg_2211;
wire    ap_CS_fsm_state20;
reg   [31:0] tmp_67_reg_2217;
reg   [31:0] tmp_69_reg_2223;
wire    ap_CS_fsm_state21;
reg   [31:0] tmp_71_reg_2229;
reg   [31:0] bias_load_reg_2235;
reg   [6:0] co_reg_475;
reg   [31:0] tmp_s_reg_486;
reg   [31:0] tmp_4_reg_498;
reg   [31:0] tmp_5_reg_510;
reg   [31:0] tmp_6_reg_522;
reg   [31:0] tmp_7_reg_534;
reg   [31:0] tmp_8_reg_546;
reg   [31:0] tmp_9_reg_558;
reg   [31:0] tmp_10_reg_570;
reg   [31:0] tmp_11_reg_582;
reg   [31:0] tmp_12_reg_594;
reg   [31:0] tmp_13_reg_606;
reg   [31:0] tmp_14_reg_618;
reg   [31:0] tmp_15_reg_630;
reg   [31:0] tmp_16_reg_642;
reg   [31:0] tmp_17_reg_654;
reg   [31:0] tmp_18_reg_666;
reg   [2:0] i_reg_678;
reg   [31:0] tmp_21_reg_690;
wire    ap_CS_fsm_state101;
reg   [31:0] tmp_22_reg_702;
reg   [31:0] tmp_23_reg_714;
reg   [31:0] tmp_24_reg_726;
reg   [31:0] tmp_25_reg_738;
reg   [31:0] tmp_26_reg_750;
reg   [31:0] tmp_27_reg_762;
reg   [31:0] tmp_28_reg_774;
reg   [31:0] tmp_29_reg_786;
reg   [31:0] tmp_30_reg_798;
reg   [31:0] tmp_31_reg_810;
reg   [31:0] tmp_32_reg_822;
reg   [31:0] tmp_33_reg_834;
reg   [31:0] tmp_34_reg_846;
reg   [31:0] tmp_35_reg_858;
reg   [31:0] tmp_36_reg_870;
reg   [2:0] j_reg_882;
wire   [63:0] tmp_fu_997_p1;
wire   [63:0] tmp_187_cast_fu_1273_p1;
wire   [63:0] tmp_188_cast_fu_1283_p1;
wire   [63:0] tmp_189_cast_fu_1380_p1;
wire   [63:0] tmp_190_cast_fu_1384_p1;
wire   [63:0] tmp_191_cast_fu_1388_p1;
wire   [63:0] tmp_192_cast_fu_1392_p1;
wire   [63:0] tmp_193_cast_fu_1396_p1;
wire   [63:0] tmp_194_cast_fu_1400_p1;
wire   [63:0] tmp_195_cast_fu_1404_p1;
wire   [63:0] tmp_196_cast_fu_1408_p1;
wire   [63:0] tmp_197_cast_fu_1412_p1;
wire   [63:0] tmp_198_cast_fu_1416_p1;
wire   [63:0] tmp_199_cast_fu_1436_p1;
wire   [63:0] tmp_200_cast_fu_1440_p1;
wire   [63:0] tmp_201_cast_fu_1460_p1;
wire   [63:0] tmp_202_cast_fu_1464_p1;
wire    ap_CS_fsm_state94;
reg   [31:0] grp_fu_893_p0;
reg   [31:0] grp_fu_893_p1;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state96;
reg   [31:0] grp_fu_897_p0;
reg   [31:0] grp_fu_897_p1;
reg   [31:0] grp_fu_901_p0;
reg   [31:0] grp_fu_901_p1;
reg   [31:0] grp_fu_905_p0;
reg   [31:0] grp_fu_905_p1;
wire   [8:0] tmp_127_fu_1007_p3;
wire   [9:0] tmp_cast_fu_1003_p1;
wire   [9:0] p_shl_cast_fu_1015_p1;
wire   [4:0] tmp_129_fu_1045_p3;
wire   [5:0] p_shl3_cast_fu_1053_p1;
wire   [5:0] tmp_19_cast_fu_1041_p1;
wire   [5:0] tmp_131_fu_1075_p2;
wire   [6:0] tmp_167_cast_fu_1071_p1;
wire   [7:0] tmp_167_cast2_fu_1067_p1;
wire   [9:0] p_shl2_cast_fu_1129_p4;
wire   [9:0] tmp_175_cast_fu_1121_p3;
wire   [8:0] tmp_167_cast1_fu_1063_p1;
wire   [9:0] tmp_19_cast1_fu_1037_p1;
wire   [9:0] tmp_146_fu_1187_p2;
wire   [11:0] tmp_89_fu_1196_p3;
wire   [12:0] p_shl1_cast_fu_1204_p1;
wire   [12:0] tmp_184_cast_fu_1192_p1;
wire   [2:0] tmp_37_fu_1232_p2;
wire   [5:0] tmp_39_cast_fu_1264_p1;
wire   [5:0] tmp_148_fu_1268_p2;
wire   [6:0] tmp_39_cast5_fu_1260_p1;
wire   [6:0] tmp_149_fu_1278_p2;
wire   [7:0] tmp_39_cast4_fu_1256_p1;
wire   [9:0] tmp_39_cast3_fu_1252_p1;
wire   [8:0] tmp_39_cast2_fu_1248_p1;
wire   [12:0] tmp_39_cast1_fu_1244_p1;
wire   [12:0] tmp_164_fu_1358_p2;
wire   [0:0] tmp_72_fu_1369_p2;
reg   [100:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 101'd1;
end

conv1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fadd_32ns_3bkb_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_893_p0),
    .din1(grp_fu_893_p1),
    .ce(1'b1),
    .dout(grp_fu_893_p2)
);

conv1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fadd_32ns_3bkb_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_897_p0),
    .din1(grp_fu_897_p1),
    .ce(1'b1),
    .dout(grp_fu_897_p2)
);

conv1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fmul_32ns_3cud_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_901_p0),
    .din1(grp_fu_901_p1),
    .ce(1'b1),
    .dout(grp_fu_901_p2)
);

conv1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fmul_32ns_3cud_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_905_p0),
    .din1(grp_fu_905_p1),
    .ce(1'b1),
    .dout(grp_fu_905_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        co_reg_475 <= co_2_reg_1561;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_475 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_678 <= m_reg_1584;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_678 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_882 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        j_reg_882 <= j_10_reg_1682;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_10_reg_570 <= tmp_28_reg_774;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_10_reg_570 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_11_reg_582 <= tmp_29_reg_786;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_11_reg_582 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_12_reg_594 <= tmp_30_reg_798;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_12_reg_594 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_13_reg_606 <= tmp_31_reg_810;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_13_reg_606 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_14_reg_618 <= tmp_32_reg_822;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_14_reg_618 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_15_reg_630 <= tmp_33_reg_834;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_15_reg_630 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_16_reg_642 <= tmp_34_reg_846;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_16_reg_642 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_17_reg_654 <= tmp_35_reg_858;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_17_reg_654 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_18_reg_666 <= tmp_36_reg_870;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_18_reg_666 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_21_reg_690 <= tmp_s_reg_486;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_21_reg_690 <= tmp_71_reg_2229;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_22_reg_702 <= tmp_4_reg_498;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_22_reg_702 <= tmp_69_reg_2223;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_23_reg_714 <= tmp_5_reg_510;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_23_reg_714 <= tmp_67_reg_2217;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_24_reg_726 <= tmp_6_reg_522;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_24_reg_726 <= tmp_65_reg_2211;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_25_reg_738 <= tmp_7_reg_534;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_25_reg_738 <= tmp_63_reg_2205;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_26_reg_750 <= tmp_8_reg_546;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_26_reg_750 <= tmp_61_reg_2199;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_27_reg_762 <= tmp_9_reg_558;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_27_reg_762 <= tmp_59_reg_2193;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_28_reg_774 <= tmp_10_reg_570;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_28_reg_774 <= tmp_57_reg_2187;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_29_reg_786 <= tmp_11_reg_582;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_29_reg_786 <= tmp_55_reg_2181;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_30_reg_798 <= tmp_12_reg_594;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_30_reg_798 <= tmp_53_reg_2175;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_31_reg_810 <= tmp_13_reg_606;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_31_reg_810 <= tmp_51_reg_2169;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_32_reg_822 <= tmp_14_reg_618;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_32_reg_822 <= tmp_49_reg_2163;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_33_reg_834 <= tmp_15_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_33_reg_834 <= tmp_47_reg_2157;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_34_reg_846 <= tmp_16_reg_642;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_34_reg_846 <= tmp_45_reg_2151;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_35_reg_858 <= tmp_17_reg_654;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_35_reg_858 <= tmp_43_reg_2145;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_36_reg_870 <= tmp_18_reg_666;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        tmp_36_reg_870 <= tmp_41_reg_2139;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_4_reg_498 <= tmp_22_reg_702;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_4_reg_498 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_5_reg_510 <= tmp_23_reg_714;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_5_reg_510 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_6_reg_522 <= tmp_24_reg_726;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_6_reg_522 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_7_reg_534 <= tmp_25_reg_738;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_7_reg_534 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_8_reg_546 <= tmp_26_reg_750;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_8_reg_546 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_9_reg_558 <= tmp_27_reg_762;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_9_reg_558 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_s_reg_486 <= tmp_21_reg_690;
    end else if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_486 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_985_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bias_addr_reg_1571 <= tmp_fu_997_p1;
        output_0_0_addr_reg_1576 <= tmp_fu_997_p1;
        tmp_128_reg_1566 <= tmp_128_fu_1019_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        bias_load_reg_2235 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_2_reg_1561 <= co_2_fu_991_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_10_reg_1682 <= j_10_fu_1226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_reg_1584 <= m_fu_1031_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        or_cond3_reg_1815 <= or_cond3_fu_1375_p2;
        tmp_150_reg_1717 <= tmp_150_fu_1288_p2;
        tmp_151_reg_1722 <= tmp_151_fu_1293_p2;
        tmp_152_reg_1727 <= tmp_152_fu_1298_p2;
        tmp_153_reg_1732 <= tmp_153_fu_1303_p2;
        tmp_154_reg_1737 <= tmp_154_fu_1308_p2;
        tmp_155_reg_1742 <= tmp_155_fu_1313_p2;
        tmp_156_reg_1747 <= tmp_156_fu_1318_p2;
        tmp_157_reg_1752 <= tmp_157_fu_1323_p2;
        tmp_158_reg_1757 <= tmp_158_fu_1328_p2;
        tmp_159_reg_1762 <= tmp_159_fu_1333_p2;
        tmp_160_reg_1767 <= tmp_160_fu_1338_p2;
        tmp_161_reg_1772 <= tmp_161_fu_1343_p2;
        tmp_162_reg_1777 <= tmp_162_fu_1348_p2;
        tmp_163_reg_1782 <= tmp_163_fu_1353_p2;
        tmp_203_cast_reg_1787[12 : 0] <= tmp_203_cast_fu_1363_p1[12 : 0];
        tmp_38_reg_1687 <= tmp_38_fu_1238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_1_reg_2104 <= p_1_fu_1507_p3;
        p_2_reg_2109 <= p_2_fu_1514_p3;
        p_3_reg_2114 <= p_3_fu_1521_p3;
        p_4_reg_2119 <= p_4_fu_1528_p3;
        p_5_reg_2124 <= p_5_fu_1535_p3;
        p_s_reg_2099 <= p_s_fu_1500_p3;
        tmp_41_reg_2139 <= grp_fu_893_p2;
        tmp_43_reg_2145 <= grp_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_909 <= input_r_q0;
        reg_914 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_919 <= input_r_q0;
        reg_924 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_929 <= input_r_q0;
        reg_934 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_939 <= input_r_q0;
        reg_944 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_949 <= grp_fu_901_p2;
        reg_954 <= grp_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_959 <= grp_fu_901_p2;
        reg_964 <= grp_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_969 <= grp_fu_901_p2;
        reg_974 <= grp_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25))) begin
        reg_979 <= grp_fu_893_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_1025_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_130_reg_1589 <= tmp_130_fu_1057_p2;
        tmp_132_reg_1599 <= tmp_132_fu_1085_p2;
        tmp_133_reg_1604 <= tmp_133_fu_1091_p2;
        tmp_134_reg_1609 <= tmp_134_fu_1097_p2;
        tmp_135_reg_1614 <= tmp_135_fu_1103_p2;
        tmp_136_reg_1619 <= tmp_136_fu_1109_p2;
        tmp_137_reg_1624 <= tmp_137_fu_1115_p2;
        tmp_138_reg_1629 <= tmp_138_fu_1139_p2;
        tmp_139_reg_1634 <= tmp_139_fu_1145_p2;
        tmp_140_reg_1639 <= tmp_140_fu_1151_p2;
        tmp_141_reg_1644 <= tmp_141_fu_1157_p2;
        tmp_142_reg_1649 <= tmp_142_fu_1163_p2;
        tmp_143_reg_1654 <= tmp_143_fu_1169_p2;
        tmp_144_reg_1659 <= tmp_144_fu_1175_p2;
        tmp_145_reg_1664 <= tmp_145_fu_1181_p2;
        tmp_147_reg_1669 <= tmp_147_fu_1208_p2;
        tmp_168_cast_reg_1594[5 : 0] <= tmp_168_cast_fu_1081_p1[5 : 0];
        tmp_20_reg_1674 <= tmp_20_fu_1214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_45_reg_2151 <= grp_fu_893_p2;
        tmp_47_reg_2157 <= grp_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_49_reg_2163 <= grp_fu_893_p2;
        tmp_51_reg_2169 <= grp_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_52_reg_2059 <= grp_fu_901_p2;
        tmp_54_reg_2064 <= grp_fu_905_p2;
        weights_14_load_reg_2069 <= weights_14_q0;
        weights_15_load_reg_2074 <= weights_15_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_53_reg_2175 <= grp_fu_893_p2;
        tmp_55_reg_2181 <= grp_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_56_reg_2089 <= grp_fu_901_p2;
        tmp_58_reg_2094 <= grp_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_57_reg_2187 <= grp_fu_893_p2;
        tmp_59_reg_2193 <= grp_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_61_reg_2199 <= grp_fu_893_p2;
        tmp_63_reg_2205 <= grp_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_65_reg_2211 <= grp_fu_893_p2;
        tmp_67_reg_2217 <= grp_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_69_reg_2223 <= grp_fu_893_p2;
        tmp_71_reg_2229 <= grp_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_0_load_reg_1839 <= weights_0_q0;
        weights_1_load_reg_1844 <= weights_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_10_load_reg_1999 <= weights_10_q0;
        weights_11_load_reg_2004 <= weights_11_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weights_12_load_reg_2039 <= weights_12_q0;
        weights_13_load_reg_2044 <= weights_13_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_2_load_reg_1869 <= weights_2_q0;
        weights_3_load_reg_1874 <= weights_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_4_load_reg_1899 <= weights_4_q0;
        weights_5_load_reg_1904 <= weights_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_6_load_reg_1929 <= weights_6_q0;
        weights_7_load_reg_1934 <= weights_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_8_load_reg_1959 <= weights_8_q0;
        weights_9_load_reg_1964 <= weights_9_q0;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_985_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_985_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_893_p0 = reg_979;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_893_p0 = tmp_41_reg_2139;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_893_p0 = p_1_reg_2104;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_893_p0 = p_3_reg_2114;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_893_p0 = p_5_reg_2124;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_893_p0 = p_7_fu_1550_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_893_p0 = p_9_fu_1492_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_893_p0 = p_11_fu_1476_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_893_p0 = p_13_fu_1452_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_893_p0 = p_15_fu_1428_p3;
    end else begin
        grp_fu_893_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_893_p1 = bias_load_reg_2235;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_fu_893_p1 = tmp_71_reg_2229;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_893_p1 = tmp_69_reg_2223;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_893_p1 = tmp_67_reg_2217;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_893_p1 = tmp_65_reg_2211;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        grp_fu_893_p1 = tmp_63_reg_2205;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_893_p1 = tmp_61_reg_2199;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        grp_fu_893_p1 = tmp_59_reg_2193;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        grp_fu_893_p1 = tmp_57_reg_2187;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_893_p1 = tmp_55_reg_2181;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_893_p1 = tmp_53_reg_2175;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_893_p1 = tmp_51_reg_2169;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_893_p1 = tmp_49_reg_2163;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_893_p1 = tmp_47_reg_2157;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_893_p1 = tmp_45_reg_2151;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_893_p1 = tmp_43_reg_2145;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_893_p1 = tmp_56_reg_2089;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_893_p1 = tmp_52_reg_2059;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_893_p1 = reg_969;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_893_p1 = reg_959;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_893_p1 = reg_949;
    end else begin
        grp_fu_893_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_897_p0 = p_s_reg_2099;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_897_p0 = p_2_reg_2109;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_897_p0 = p_4_reg_2119;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_897_p0 = p_6_fu_1542_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_897_p0 = p_8_fu_1484_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_897_p0 = p_10_fu_1468_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_897_p0 = p_12_fu_1444_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_897_p0 = p_14_fu_1420_p3;
    end else begin
        grp_fu_897_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_897_p1 = tmp_58_reg_2094;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_897_p1 = tmp_54_reg_2064;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_897_p1 = reg_974;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_897_p1 = reg_964;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_897_p1 = reg_954;
    end else begin
        grp_fu_897_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_901_p0 = weights_14_load_reg_2069;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_901_p0 = weights_12_load_reg_2039;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_901_p0 = weights_10_load_reg_1999;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_901_p0 = weights_8_load_reg_1959;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_901_p0 = weights_6_load_reg_1929;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_901_p0 = weights_4_load_reg_1899;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_901_p0 = weights_2_load_reg_1869;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_901_p0 = weights_0_load_reg_1839;
    end else begin
        grp_fu_901_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_901_p1 = reg_939;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_901_p1 = reg_929;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_901_p1 = reg_919;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_901_p1 = reg_909;
    end else begin
        grp_fu_901_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_905_p0 = weights_15_load_reg_2074;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_905_p0 = weights_13_load_reg_2044;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_905_p0 = weights_11_load_reg_2004;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_905_p0 = weights_9_load_reg_1964;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_905_p0 = weights_7_load_reg_1934;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_905_p0 = weights_5_load_reg_1904;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_905_p0 = weights_3_load_reg_1874;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_905_p0 = weights_1_load_reg_1844;
    end else begin
        grp_fu_905_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_905_p1 = reg_944;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_905_p1 = reg_934;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_905_p1 = reg_924;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_905_p1 = reg_914;
    end else begin
        grp_fu_905_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = tmp_201_cast_fu_1460_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = tmp_199_cast_fu_1436_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = tmp_197_cast_fu_1412_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = tmp_195_cast_fu_1404_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = tmp_193_cast_fu_1396_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = tmp_191_cast_fu_1388_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address0 = tmp_189_cast_fu_1380_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address0 = tmp_187_cast_fu_1273_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address1 = tmp_202_cast_fu_1464_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address1 = tmp_200_cast_fu_1440_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address1 = tmp_198_cast_fu_1416_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address1 = tmp_196_cast_fu_1408_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address1 = tmp_194_cast_fu_1400_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address1 = tmp_192_cast_fu_1392_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address1 = tmp_190_cast_fu_1384_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address1 = tmp_188_cast_fu_1283_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        output_0_0_ce0 = 1'b1;
    end else begin
        output_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond3_reg_1815 == 1'd1) & (1'b1 == ap_CS_fsm_state101))) begin
        output_0_0_we0 = 1'b1;
    end else begin
        output_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_0_ce0 = 1'b1;
    end else begin
        weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_10_ce0 = 1'b1;
    end else begin
        weights_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_11_ce0 = 1'b1;
    end else begin
        weights_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_12_ce0 = 1'b1;
    end else begin
        weights_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weights_13_ce0 = 1'b1;
    end else begin
        weights_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weights_14_ce0 = 1'b1;
    end else begin
        weights_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weights_15_ce0 = 1'b1;
    end else begin
        weights_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_1_ce0 = 1'b1;
    end else begin
        weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_2_ce0 = 1'b1;
    end else begin
        weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_3_ce0 = 1'b1;
    end else begin
        weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_4_ce0 = 1'b1;
    end else begin
        weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_5_ce0 = 1'b1;
    end else begin
        weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_6_ce0 = 1'b1;
    end else begin
        weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_7_ce0 = 1'b1;
    end else begin
        weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_8_ce0 = 1'b1;
    end else begin
        weights_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weights_9_ce0 = 1'b1;
    end else begin
        weights_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_985_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_1025_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_1220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((or_cond3_reg_1815 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign bias_address0 = bias_addr_reg_1571;

assign co_2_fu_991_p2 = (co_reg_475 + 7'd1);

assign exitcond1_fu_1025_p2 = ((i_reg_678 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_985_p2 = ((co_reg_475 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_1220_p2 = ((j_reg_882 == 3'd5) ? 1'b1 : 1'b0);

assign j_10_fu_1226_p2 = (j_reg_882 + 3'd1);

assign m_fu_1031_p2 = (i_reg_678 + 3'd1);

assign or_cond3_fu_1375_p2 = (tmp_72_fu_1369_p2 & tmp_20_reg_1674);

assign output_0_0_address0 = output_0_0_addr_reg_1576;

assign output_0_0_d0 = reg_979;

assign p_10_fu_1468_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_31_reg_810);

assign p_11_fu_1476_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_32_reg_822);

assign p_12_fu_1444_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_33_reg_834);

assign p_13_fu_1452_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_34_reg_846);

assign p_14_fu_1420_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_35_reg_858);

assign p_15_fu_1428_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_36_reg_870);

assign p_1_fu_1507_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_22_reg_702);

assign p_2_fu_1514_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_23_reg_714);

assign p_3_fu_1521_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_24_reg_726);

assign p_4_fu_1528_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_25_reg_738);

assign p_5_fu_1535_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_26_reg_750);

assign p_6_fu_1542_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_27_reg_762);

assign p_7_fu_1550_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_28_reg_774);

assign p_8_fu_1484_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_29_reg_786);

assign p_9_fu_1492_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_30_reg_798);

assign p_s_fu_1500_p3 = ((tmp_38_reg_1687[0:0] === 1'b1) ? 32'd0 : tmp_21_reg_690);

assign p_shl1_cast_fu_1204_p1 = tmp_89_fu_1196_p3;

assign p_shl2_cast_fu_1129_p4 = {{{{5'd5}, {i_reg_678}}}, {2'd0}};

assign p_shl3_cast_fu_1053_p1 = tmp_129_fu_1045_p3;

assign p_shl_cast_fu_1015_p1 = tmp_127_fu_1007_p3;

assign tmp_127_fu_1007_p3 = {{co_reg_475}, {2'd0}};

assign tmp_128_fu_1019_p2 = (tmp_cast_fu_1003_p1 + p_shl_cast_fu_1015_p1);

assign tmp_129_fu_1045_p3 = {{i_reg_678}, {2'd0}};

assign tmp_130_fu_1057_p2 = (p_shl3_cast_fu_1053_p1 + tmp_19_cast_fu_1041_p1);

assign tmp_131_fu_1075_p2 = (tmp_130_fu_1057_p2 + 6'd25);

assign tmp_132_fu_1085_p2 = (tmp_167_cast_fu_1071_p1 + 7'd50);

assign tmp_133_fu_1091_p2 = ($signed(tmp_167_cast_fu_1071_p1) + $signed(7'd75));

assign tmp_134_fu_1097_p2 = (tmp_167_cast2_fu_1067_p1 + 8'd100);

assign tmp_135_fu_1103_p2 = (tmp_167_cast2_fu_1067_p1 + 8'd125);

assign tmp_136_fu_1109_p2 = ($signed(tmp_167_cast2_fu_1067_p1) + $signed(8'd150));

assign tmp_137_fu_1115_p2 = ($signed(tmp_167_cast2_fu_1067_p1) + $signed(8'd175));

assign tmp_138_fu_1139_p2 = (p_shl2_cast_fu_1129_p4 + tmp_175_cast_fu_1121_p3);

assign tmp_139_fu_1145_p2 = (tmp_167_cast1_fu_1063_p1 + 9'd225);

assign tmp_140_fu_1151_p2 = (tmp_167_cast1_fu_1063_p1 + 9'd250);

assign tmp_141_fu_1157_p2 = ($signed(tmp_167_cast1_fu_1063_p1) + $signed(9'd275));

assign tmp_142_fu_1163_p2 = ($signed(tmp_167_cast1_fu_1063_p1) + $signed(9'd300));

assign tmp_143_fu_1169_p2 = ($signed(tmp_167_cast1_fu_1063_p1) + $signed(9'd325));

assign tmp_144_fu_1175_p2 = ($signed(tmp_167_cast1_fu_1063_p1) + $signed(9'd350));

assign tmp_145_fu_1181_p2 = ($signed(tmp_167_cast1_fu_1063_p1) + $signed(9'd375));

assign tmp_146_fu_1187_p2 = (tmp_19_cast1_fu_1037_p1 + tmp_128_reg_1566);

assign tmp_147_fu_1208_p2 = (p_shl1_cast_fu_1204_p1 + tmp_184_cast_fu_1192_p1);

assign tmp_148_fu_1268_p2 = (tmp_130_reg_1589 + tmp_39_cast_fu_1264_p1);

assign tmp_149_fu_1278_p2 = (tmp_168_cast_reg_1594 + tmp_39_cast5_fu_1260_p1);

assign tmp_150_fu_1288_p2 = (tmp_132_reg_1599 + tmp_39_cast5_fu_1260_p1);

assign tmp_151_fu_1293_p2 = (tmp_133_reg_1604 + tmp_39_cast5_fu_1260_p1);

assign tmp_152_fu_1298_p2 = (tmp_134_reg_1609 + tmp_39_cast4_fu_1256_p1);

assign tmp_153_fu_1303_p2 = (tmp_135_reg_1614 + tmp_39_cast4_fu_1256_p1);

assign tmp_154_fu_1308_p2 = (tmp_136_reg_1619 + tmp_39_cast4_fu_1256_p1);

assign tmp_155_fu_1313_p2 = (tmp_137_reg_1624 + tmp_39_cast4_fu_1256_p1);

assign tmp_156_fu_1318_p2 = (tmp_138_reg_1629 + tmp_39_cast3_fu_1252_p1);

assign tmp_157_fu_1323_p2 = (tmp_139_reg_1634 + tmp_39_cast2_fu_1248_p1);

assign tmp_158_fu_1328_p2 = (tmp_140_reg_1639 + tmp_39_cast2_fu_1248_p1);

assign tmp_159_fu_1333_p2 = (tmp_141_reg_1644 + tmp_39_cast2_fu_1248_p1);

assign tmp_160_fu_1338_p2 = (tmp_142_reg_1649 + tmp_39_cast2_fu_1248_p1);

assign tmp_161_fu_1343_p2 = (tmp_143_reg_1654 + tmp_39_cast2_fu_1248_p1);

assign tmp_162_fu_1348_p2 = (tmp_144_reg_1659 + tmp_39_cast2_fu_1248_p1);

assign tmp_163_fu_1353_p2 = (tmp_145_reg_1664 + tmp_39_cast2_fu_1248_p1);

assign tmp_164_fu_1358_p2 = (tmp_147_reg_1669 + tmp_39_cast1_fu_1244_p1);

assign tmp_167_cast1_fu_1063_p1 = tmp_130_fu_1057_p2;

assign tmp_167_cast2_fu_1067_p1 = tmp_130_fu_1057_p2;

assign tmp_167_cast_fu_1071_p1 = tmp_130_fu_1057_p2;

assign tmp_168_cast_fu_1081_p1 = tmp_131_fu_1075_p2;

assign tmp_175_cast_fu_1121_p3 = {{7'd5}, {i_reg_678}};

assign tmp_184_cast_fu_1192_p1 = tmp_146_fu_1187_p2;

assign tmp_187_cast_fu_1273_p1 = tmp_148_fu_1268_p2;

assign tmp_188_cast_fu_1283_p1 = tmp_149_fu_1278_p2;

assign tmp_189_cast_fu_1380_p1 = tmp_150_reg_1717;

assign tmp_190_cast_fu_1384_p1 = tmp_151_reg_1722;

assign tmp_191_cast_fu_1388_p1 = tmp_152_reg_1727;

assign tmp_192_cast_fu_1392_p1 = tmp_153_reg_1732;

assign tmp_193_cast_fu_1396_p1 = tmp_154_reg_1737;

assign tmp_194_cast_fu_1400_p1 = tmp_155_reg_1742;

assign tmp_195_cast_fu_1404_p1 = tmp_156_reg_1747;

assign tmp_196_cast_fu_1408_p1 = tmp_157_reg_1752;

assign tmp_197_cast_fu_1412_p1 = tmp_158_reg_1757;

assign tmp_198_cast_fu_1416_p1 = tmp_159_reg_1762;

assign tmp_199_cast_fu_1436_p1 = tmp_160_reg_1767;

assign tmp_19_cast1_fu_1037_p1 = i_reg_678;

assign tmp_19_cast_fu_1041_p1 = i_reg_678;

assign tmp_200_cast_fu_1440_p1 = tmp_161_reg_1772;

assign tmp_201_cast_fu_1460_p1 = tmp_162_reg_1777;

assign tmp_202_cast_fu_1464_p1 = tmp_163_reg_1782;

assign tmp_203_cast_fu_1363_p1 = tmp_164_fu_1358_p2;

assign tmp_20_fu_1214_p2 = ((i_reg_678 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_37_fu_1232_p2 = (j_reg_882 | i_reg_678);

assign tmp_38_fu_1238_p2 = ((tmp_37_fu_1232_p2 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_39_cast1_fu_1244_p1 = j_reg_882;

assign tmp_39_cast2_fu_1248_p1 = j_reg_882;

assign tmp_39_cast3_fu_1252_p1 = j_reg_882;

assign tmp_39_cast4_fu_1256_p1 = j_reg_882;

assign tmp_39_cast5_fu_1260_p1 = j_reg_882;

assign tmp_39_cast_fu_1264_p1 = j_reg_882;

assign tmp_72_fu_1369_p2 = ((j_reg_882 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_89_fu_1196_p3 = {{tmp_146_fu_1187_p2}, {2'd0}};

assign tmp_cast_fu_1003_p1 = co_reg_475;

assign tmp_fu_997_p1 = co_reg_475;

assign weights_0_address0 = tmp_203_cast_fu_1363_p1;

assign weights_10_address0 = tmp_203_cast_reg_1787;

assign weights_11_address0 = tmp_203_cast_reg_1787;

assign weights_12_address0 = tmp_203_cast_reg_1787;

assign weights_13_address0 = tmp_203_cast_reg_1787;

assign weights_14_address0 = tmp_203_cast_reg_1787;

assign weights_15_address0 = tmp_203_cast_reg_1787;

assign weights_1_address0 = tmp_203_cast_fu_1363_p1;

assign weights_2_address0 = tmp_203_cast_reg_1787;

assign weights_3_address0 = tmp_203_cast_reg_1787;

assign weights_4_address0 = tmp_203_cast_reg_1787;

assign weights_5_address0 = tmp_203_cast_reg_1787;

assign weights_6_address0 = tmp_203_cast_reg_1787;

assign weights_7_address0 = tmp_203_cast_reg_1787;

assign weights_8_address0 = tmp_203_cast_reg_1787;

assign weights_9_address0 = tmp_203_cast_reg_1787;

always @ (posedge ap_clk) begin
    tmp_168_cast_reg_1594[6] <= 1'b0;
    tmp_203_cast_reg_1787[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //convolution_5
