// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_0_address0,
        input_0_0_ce0,
        input_0_0_q0,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        weights_offset,
        m_axi_bias_AWVALID,
        m_axi_bias_AWREADY,
        m_axi_bias_AWADDR,
        m_axi_bias_AWID,
        m_axi_bias_AWLEN,
        m_axi_bias_AWSIZE,
        m_axi_bias_AWBURST,
        m_axi_bias_AWLOCK,
        m_axi_bias_AWCACHE,
        m_axi_bias_AWPROT,
        m_axi_bias_AWQOS,
        m_axi_bias_AWREGION,
        m_axi_bias_AWUSER,
        m_axi_bias_WVALID,
        m_axi_bias_WREADY,
        m_axi_bias_WDATA,
        m_axi_bias_WSTRB,
        m_axi_bias_WLAST,
        m_axi_bias_WID,
        m_axi_bias_WUSER,
        m_axi_bias_ARVALID,
        m_axi_bias_ARREADY,
        m_axi_bias_ARADDR,
        m_axi_bias_ARID,
        m_axi_bias_ARLEN,
        m_axi_bias_ARSIZE,
        m_axi_bias_ARBURST,
        m_axi_bias_ARLOCK,
        m_axi_bias_ARCACHE,
        m_axi_bias_ARPROT,
        m_axi_bias_ARQOS,
        m_axi_bias_ARREGION,
        m_axi_bias_ARUSER,
        m_axi_bias_RVALID,
        m_axi_bias_RREADY,
        m_axi_bias_RDATA,
        m_axi_bias_RLAST,
        m_axi_bias_RID,
        m_axi_bias_RUSER,
        m_axi_bias_RRESP,
        m_axi_bias_BVALID,
        m_axi_bias_BREADY,
        m_axi_bias_BRESP,
        m_axi_bias_BID,
        m_axi_bias_BUSER,
        bias_offset,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 257'd1;
parameter    ap_ST_fsm_state2 = 257'd2;
parameter    ap_ST_fsm_state3 = 257'd4;
parameter    ap_ST_fsm_state4 = 257'd8;
parameter    ap_ST_fsm_state5 = 257'd16;
parameter    ap_ST_fsm_state6 = 257'd32;
parameter    ap_ST_fsm_state7 = 257'd64;
parameter    ap_ST_fsm_state8 = 257'd128;
parameter    ap_ST_fsm_state9 = 257'd256;
parameter    ap_ST_fsm_state10 = 257'd512;
parameter    ap_ST_fsm_state11 = 257'd1024;
parameter    ap_ST_fsm_state12 = 257'd2048;
parameter    ap_ST_fsm_state13 = 257'd4096;
parameter    ap_ST_fsm_state14 = 257'd8192;
parameter    ap_ST_fsm_state15 = 257'd16384;
parameter    ap_ST_fsm_state16 = 257'd32768;
parameter    ap_ST_fsm_state17 = 257'd65536;
parameter    ap_ST_fsm_state18 = 257'd131072;
parameter    ap_ST_fsm_state19 = 257'd262144;
parameter    ap_ST_fsm_state20 = 257'd524288;
parameter    ap_ST_fsm_state21 = 257'd1048576;
parameter    ap_ST_fsm_state22 = 257'd2097152;
parameter    ap_ST_fsm_state23 = 257'd4194304;
parameter    ap_ST_fsm_state24 = 257'd8388608;
parameter    ap_ST_fsm_state25 = 257'd16777216;
parameter    ap_ST_fsm_state26 = 257'd33554432;
parameter    ap_ST_fsm_state27 = 257'd67108864;
parameter    ap_ST_fsm_state28 = 257'd134217728;
parameter    ap_ST_fsm_state29 = 257'd268435456;
parameter    ap_ST_fsm_state30 = 257'd536870912;
parameter    ap_ST_fsm_state31 = 257'd1073741824;
parameter    ap_ST_fsm_state32 = 257'd2147483648;
parameter    ap_ST_fsm_state33 = 257'd4294967296;
parameter    ap_ST_fsm_state34 = 257'd8589934592;
parameter    ap_ST_fsm_state35 = 257'd17179869184;
parameter    ap_ST_fsm_state36 = 257'd34359738368;
parameter    ap_ST_fsm_state37 = 257'd68719476736;
parameter    ap_ST_fsm_state38 = 257'd137438953472;
parameter    ap_ST_fsm_state39 = 257'd274877906944;
parameter    ap_ST_fsm_state40 = 257'd549755813888;
parameter    ap_ST_fsm_state41 = 257'd1099511627776;
parameter    ap_ST_fsm_state42 = 257'd2199023255552;
parameter    ap_ST_fsm_state43 = 257'd4398046511104;
parameter    ap_ST_fsm_state44 = 257'd8796093022208;
parameter    ap_ST_fsm_state45 = 257'd17592186044416;
parameter    ap_ST_fsm_state46 = 257'd35184372088832;
parameter    ap_ST_fsm_state47 = 257'd70368744177664;
parameter    ap_ST_fsm_state48 = 257'd140737488355328;
parameter    ap_ST_fsm_state49 = 257'd281474976710656;
parameter    ap_ST_fsm_state50 = 257'd562949953421312;
parameter    ap_ST_fsm_state51 = 257'd1125899906842624;
parameter    ap_ST_fsm_state52 = 257'd2251799813685248;
parameter    ap_ST_fsm_state53 = 257'd4503599627370496;
parameter    ap_ST_fsm_state54 = 257'd9007199254740992;
parameter    ap_ST_fsm_state55 = 257'd18014398509481984;
parameter    ap_ST_fsm_state56 = 257'd36028797018963968;
parameter    ap_ST_fsm_state57 = 257'd72057594037927936;
parameter    ap_ST_fsm_state58 = 257'd144115188075855872;
parameter    ap_ST_fsm_state59 = 257'd288230376151711744;
parameter    ap_ST_fsm_state60 = 257'd576460752303423488;
parameter    ap_ST_fsm_state61 = 257'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 257'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 257'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 257'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 257'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 257'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 257'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 257'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 257'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 257'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 257'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 257'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 257'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 257'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 257'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 257'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 257'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 257'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 257'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 257'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 257'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 257'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 257'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 257'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 257'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 257'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 257'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 257'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 257'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 257'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 257'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 257'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 257'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 257'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 257'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 257'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 257'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 257'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 257'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 257'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 257'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 257'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 257'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 257'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 257'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 257'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 257'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 257'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 257'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 257'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 257'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 257'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 257'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 257'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 257'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 257'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 257'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 257'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 257'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 257'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 257'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 257'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 257'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 257'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 257'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 257'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 257'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 257'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 257'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 257'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 257'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 257'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 257'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 257'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 257'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 257'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 257'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 257'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 257'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 257'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 257'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 257'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 257'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 257'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 257'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 257'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 257'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 257'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 257'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 257'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 257'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 257'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 257'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 257'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 257'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 257'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 257'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 257'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 257'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 257'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 257'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 257'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 257'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 257'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 257'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 257'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 257'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 257'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 257'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 257'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 257'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 257'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 257'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 257'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 257'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 257'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 257'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 257'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 257'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 257'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 257'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 257'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 257'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 257'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 257'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 257'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 257'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 257'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 257'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 257'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 257'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 257'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 257'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 257'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 257'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 257'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 257'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 257'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 257'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 257'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 257'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 257'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 257'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 257'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 257'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 257'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 257'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 257'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 257'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 257'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 257'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 257'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 257'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 257'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 257'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 257'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 257'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 257'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 257'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 257'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 257'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 257'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 257'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 257'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 257'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 257'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 257'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 257'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 257'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 257'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state231 = 257'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state232 = 257'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state233 = 257'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state234 = 257'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state235 = 257'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state236 = 257'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state237 = 257'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state238 = 257'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state239 = 257'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state240 = 257'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state241 = 257'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state242 = 257'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state243 = 257'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state244 = 257'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state245 = 257'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state246 = 257'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state247 = 257'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state248 = 257'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state249 = 257'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state250 = 257'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state251 = 257'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state252 = 257'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state253 = 257'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state254 = 257'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state255 = 257'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state256 = 257'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state257 = 257'd115792089237316195423570985008687907853269984665640564039457584007913129639936;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_0_0_address0;
output   input_0_0_ce0;
input  [31:0] input_0_0_q0;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [31:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [31:0] m_axi_weights_WDATA;
output  [3:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [31:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [31:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [29:0] weights_offset;
output   m_axi_bias_AWVALID;
input   m_axi_bias_AWREADY;
output  [31:0] m_axi_bias_AWADDR;
output  [0:0] m_axi_bias_AWID;
output  [31:0] m_axi_bias_AWLEN;
output  [2:0] m_axi_bias_AWSIZE;
output  [1:0] m_axi_bias_AWBURST;
output  [1:0] m_axi_bias_AWLOCK;
output  [3:0] m_axi_bias_AWCACHE;
output  [2:0] m_axi_bias_AWPROT;
output  [3:0] m_axi_bias_AWQOS;
output  [3:0] m_axi_bias_AWREGION;
output  [0:0] m_axi_bias_AWUSER;
output   m_axi_bias_WVALID;
input   m_axi_bias_WREADY;
output  [31:0] m_axi_bias_WDATA;
output  [3:0] m_axi_bias_WSTRB;
output   m_axi_bias_WLAST;
output  [0:0] m_axi_bias_WID;
output  [0:0] m_axi_bias_WUSER;
output   m_axi_bias_ARVALID;
input   m_axi_bias_ARREADY;
output  [31:0] m_axi_bias_ARADDR;
output  [0:0] m_axi_bias_ARID;
output  [31:0] m_axi_bias_ARLEN;
output  [2:0] m_axi_bias_ARSIZE;
output  [1:0] m_axi_bias_ARBURST;
output  [1:0] m_axi_bias_ARLOCK;
output  [3:0] m_axi_bias_ARCACHE;
output  [2:0] m_axi_bias_ARPROT;
output  [3:0] m_axi_bias_ARQOS;
output  [3:0] m_axi_bias_ARREGION;
output  [0:0] m_axi_bias_ARUSER;
input   m_axi_bias_RVALID;
output   m_axi_bias_RREADY;
input  [31:0] m_axi_bias_RDATA;
input   m_axi_bias_RLAST;
input  [0:0] m_axi_bias_RID;
input  [0:0] m_axi_bias_RUSER;
input  [1:0] m_axi_bias_RRESP;
input   m_axi_bias_BVALID;
output   m_axi_bias_BREADY;
input  [1:0] m_axi_bias_BRESP;
input  [0:0] m_axi_bias_BID;
input  [0:0] m_axi_bias_BUSER;
input  [29:0] bias_offset;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] input_0_0_address0;
reg input_0_0_ce0;
reg m_axi_weights_ARVALID;
reg[31:0] m_axi_weights_ARADDR;
reg m_axi_weights_RREADY;
reg m_axi_bias_ARVALID;
reg[31:0] m_axi_bias_ARADDR;
reg m_axi_bias_RREADY;
reg[3:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [256:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_blk_n_AR;
reg    weights_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state144;
wire    ap_CS_fsm_state159;
wire    ap_CS_fsm_state169;
wire    ap_CS_fsm_state184;
wire    ap_CS_fsm_state194;
wire    ap_CS_fsm_state209;
wire    ap_CS_fsm_state219;
wire    ap_CS_fsm_state234;
reg    bias_blk_n_AR;
reg    bias_blk_n_R;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state151;
wire    ap_CS_fsm_state176;
wire    ap_CS_fsm_state201;
wire    ap_CS_fsm_state226;
wire    ap_CS_fsm_state244;
wire    ap_CS_fsm_state251;
reg   [31:0] reg_784;
wire   [31:0] grp_fu_780_p2;
reg   [31:0] reg_789;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state138;
wire    ap_CS_fsm_state163;
wire    ap_CS_fsm_state188;
wire    ap_CS_fsm_state213;
wire    ap_CS_fsm_state238;
wire   [31:0] grp_fu_766_p2;
reg   [31:0] reg_794;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state156;
wire    ap_CS_fsm_state181;
wire    ap_CS_fsm_state206;
wire    ap_CS_fsm_state231;
wire    ap_CS_fsm_state256;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state143;
wire    ap_CS_fsm_state168;
wire    ap_CS_fsm_state193;
wire    ap_CS_fsm_state218;
wire    ap_CS_fsm_state243;
reg    ap_sig_ioackin_m_axi_weights_ARREADY;
wire    ap_CS_fsm_state7;
wire   [30:0] sext_cast_fu_824_p1;
reg   [30:0] sext_cast_reg_1302;
wire   [6:0] c_3_fu_833_p2;
reg   [6:0] c_3_reg_1318;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_fu_827_p2;
wire   [30:0] tmp_44_fu_844_p2;
reg   [30:0] tmp_44_reg_1328;
reg   [31:0] weights_addr_read_reg_1333;
reg    ap_sig_ioackin_m_axi_bias_ARREADY;
reg    ap_block_state19_io;
reg   [31:0] bias_addr_read_reg_1350;
wire   [30:0] sext2_cast_fu_869_p1;
reg   [30:0] sext2_cast_reg_1355;
wire    ap_CS_fsm_state32;
wire   [6:0] c_3_1_fu_878_p2;
reg   [6:0] c_3_1_reg_1376;
wire    ap_CS_fsm_state33;
wire   [0:0] exitcond_1_fu_872_p2;
wire   [30:0] sum1_fu_889_p2;
reg   [30:0] sum1_reg_1386;
wire   [30:0] tmp_46_fu_894_p2;
reg   [30:0] tmp_46_reg_1391;
reg   [31:0] weights_addr_1_read_reg_1396;
reg    ap_block_state44_io;
reg   [31:0] bias_addr_1_read_reg_1413;
wire    ap_CS_fsm_state57;
wire   [6:0] c_3_2_fu_925_p2;
reg   [6:0] c_3_2_reg_1426;
wire    ap_CS_fsm_state58;
wire   [0:0] exitcond_2_fu_919_p2;
wire   [30:0] sum3_fu_936_p2;
reg   [30:0] sum3_reg_1436;
wire   [30:0] tmp_48_fu_941_p2;
reg   [30:0] tmp_48_reg_1441;
reg   [31:0] weights_addr_2_read_reg_1446;
reg    ap_block_state69_io;
reg   [31:0] bias_addr_2_read_reg_1463;
wire    ap_CS_fsm_state82;
wire   [6:0] c_3_3_fu_972_p2;
reg   [6:0] c_3_3_reg_1476;
wire    ap_CS_fsm_state83;
wire   [0:0] exitcond_3_fu_966_p2;
wire   [30:0] sum5_fu_983_p2;
reg   [30:0] sum5_reg_1486;
wire   [30:0] tmp_50_fu_988_p2;
reg   [30:0] tmp_50_reg_1491;
reg   [31:0] weights_addr_3_read_reg_1496;
reg    ap_block_state94_io;
reg   [31:0] bias_addr_3_read_reg_1513;
wire    ap_CS_fsm_state107;
wire   [6:0] c_3_4_fu_1019_p2;
reg   [6:0] c_3_4_reg_1526;
wire    ap_CS_fsm_state108;
wire   [0:0] exitcond_4_fu_1013_p2;
wire   [30:0] sum7_fu_1030_p2;
reg   [30:0] sum7_reg_1536;
wire   [30:0] tmp_52_fu_1035_p2;
reg   [30:0] tmp_52_reg_1541;
reg   [31:0] weights_addr_4_read_reg_1546;
reg    ap_block_state119_io;
reg   [31:0] bias_addr_4_read_reg_1563;
wire    ap_CS_fsm_state132;
wire   [6:0] c_3_5_fu_1066_p2;
reg   [6:0] c_3_5_reg_1576;
wire    ap_CS_fsm_state133;
wire   [0:0] exitcond_5_fu_1060_p2;
wire   [30:0] sum9_fu_1077_p2;
reg   [30:0] sum9_reg_1586;
wire   [30:0] tmp_54_fu_1082_p2;
reg   [30:0] tmp_54_reg_1591;
reg   [31:0] weights_addr_5_read_reg_1596;
reg    ap_block_state144_io;
reg   [31:0] bias_addr_5_read_reg_1613;
wire    ap_CS_fsm_state157;
wire   [6:0] c_3_6_fu_1113_p2;
reg   [6:0] c_3_6_reg_1626;
wire    ap_CS_fsm_state158;
wire   [0:0] exitcond_6_fu_1107_p2;
wire   [30:0] sum_fu_1124_p2;
reg   [30:0] sum_reg_1636;
wire   [30:0] tmp_56_fu_1129_p2;
reg   [30:0] tmp_56_reg_1641;
reg   [31:0] weights_addr_6_read_reg_1646;
reg    ap_block_state169_io;
reg   [31:0] bias_addr_6_read_reg_1663;
wire    ap_CS_fsm_state182;
wire   [6:0] c_3_7_fu_1160_p2;
reg   [6:0] c_3_7_reg_1676;
wire    ap_CS_fsm_state183;
wire   [0:0] exitcond_7_fu_1154_p2;
wire   [30:0] sum2_fu_1171_p2;
reg   [30:0] sum2_reg_1686;
wire   [30:0] tmp_58_fu_1176_p2;
reg   [30:0] tmp_58_reg_1691;
reg   [31:0] weights_addr_7_read_reg_1696;
reg    ap_block_state194_io;
reg   [31:0] bias_addr_7_read_reg_1713;
wire    ap_CS_fsm_state207;
wire   [6:0] c_3_8_fu_1207_p2;
reg   [6:0] c_3_8_reg_1726;
wire    ap_CS_fsm_state208;
wire   [0:0] exitcond_8_fu_1201_p2;
wire   [30:0] sum4_fu_1218_p2;
reg   [30:0] sum4_reg_1736;
wire   [30:0] tmp_60_fu_1223_p2;
reg   [30:0] tmp_60_reg_1741;
reg   [31:0] weights_addr_8_read_reg_1746;
reg    ap_block_state219_io;
reg   [31:0] bias_addr_8_read_reg_1763;
wire    ap_CS_fsm_state232;
wire   [6:0] c_3_9_fu_1254_p2;
reg   [6:0] c_3_9_reg_1776;
wire    ap_CS_fsm_state233;
wire   [0:0] exitcond_9_fu_1248_p2;
wire   [30:0] sum6_fu_1265_p2;
reg   [30:0] sum6_reg_1786;
reg   [31:0] weights_addr_9_read_reg_1791;
reg   [31:0] bias_addr_9_read_reg_1802;
reg   [31:0] tmp_s_reg_536;
reg   [6:0] c_reg_548;
reg   [31:0] tmp_1_32_reg_559;
reg   [6:0] c_1_reg_571;
reg   [31:0] tmp_2_35_reg_582;
reg   [6:0] c_2_reg_594;
reg   [31:0] tmp_3_38_reg_605;
reg   [6:0] c_s_reg_617;
reg   [31:0] tmp_4_41_reg_628;
reg   [6:0] c_4_reg_640;
reg   [31:0] tmp_5_44_reg_651;
reg   [6:0] c_5_reg_663;
reg   [31:0] tmp_6_47_reg_674;
reg   [6:0] c_6_reg_686;
reg   [31:0] tmp_7_50_reg_697;
reg   [6:0] c_7_reg_709;
reg   [31:0] tmp_8_53_reg_720;
reg   [6:0] c_8_reg_732;
reg   [31:0] tmp_9_56_reg_743;
reg   [6:0] c_9_reg_755;
wire   [63:0] tmp_11_fu_839_p1;
wire   [63:0] tmp_30_1_fu_884_p1;
wire   [63:0] tmp_30_2_fu_931_p1;
wire   [63:0] tmp_30_3_fu_978_p1;
wire   [63:0] tmp_30_4_fu_1025_p1;
wire   [63:0] tmp_30_5_fu_1072_p1;
wire   [63:0] tmp_30_6_fu_1119_p1;
wire   [63:0] tmp_30_7_fu_1166_p1;
wire   [63:0] tmp_30_8_fu_1213_p1;
wire   [63:0] tmp_30_9_fu_1260_p1;
wire   [63:0] tmp_43_fu_813_p1;
wire   [63:0] sext2_fu_849_p1;
wire   [63:0] tmp_45_fu_859_p1;
wire   [63:0] sum1_cast_fu_899_p1;
wire   [63:0] tmp_47_fu_909_p1;
wire   [63:0] sum3_cast_fu_946_p1;
wire   [63:0] tmp_49_fu_956_p1;
wire   [63:0] sum5_cast_fu_993_p1;
wire   [63:0] tmp_51_fu_1003_p1;
wire   [63:0] sum7_cast_fu_1040_p1;
wire   [63:0] tmp_53_fu_1050_p1;
wire   [63:0] sum9_cast_fu_1087_p1;
wire   [63:0] tmp_55_fu_1097_p1;
wire   [63:0] sum11_cast_fu_1134_p1;
wire   [63:0] tmp_57_fu_1144_p1;
wire   [63:0] sum13_cast_fu_1181_p1;
wire   [63:0] tmp_59_fu_1191_p1;
wire   [63:0] sum15_cast_fu_1228_p1;
wire   [63:0] tmp_61_fu_1238_p1;
wire   [63:0] sum17_cast_fu_1270_p1;
reg    ap_reg_ioackin_m_axi_weights_ARREADY;
reg    ap_reg_ioackin_m_axi_bias_ARREADY;
wire    ap_CS_fsm_state257;
reg   [31:0] grp_fu_766_p0;
reg   [31:0] grp_fu_766_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state152;
wire    ap_CS_fsm_state164;
wire    ap_CS_fsm_state177;
wire    ap_CS_fsm_state189;
wire    ap_CS_fsm_state202;
wire    ap_CS_fsm_state214;
wire    ap_CS_fsm_state227;
wire    ap_CS_fsm_state239;
wire    ap_CS_fsm_state252;
reg   [31:0] grp_fu_780_p0;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state160;
wire    ap_CS_fsm_state185;
wire    ap_CS_fsm_state210;
wire    ap_CS_fsm_state235;
reg   [256:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 257'd1;
#0 ap_reg_ioackin_m_axi_weights_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_bias_ARREADY = 1'b0;
end

conv1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fadd_32ns_3bkb_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_766_p0),
    .din1(grp_fu_766_p1),
    .ce(1'b1),
    .dout(grp_fu_766_p2)
);

conv1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fmul_32ns_3cud_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_780_p0),
    .din1(reg_784),
    .ce(1'b1),
    .dout(grp_fu_780_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_bias_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state244)) | ((1'b1 == ap_CS_fsm_state219) & (1'b0 == ap_block_state219_io)) | ((1'b1 == ap_CS_fsm_state194) & (1'b0 == ap_block_state194_io)) | ((1'b1 == ap_CS_fsm_state169) & (1'b0 == ap_block_state169_io)) | ((1'b1 == ap_CS_fsm_state144) & (1'b0 == ap_block_state144_io)) | ((1'b0 == ap_block_state119_io) & (1'b1 == ap_CS_fsm_state119)) | ((1'b0 == ap_block_state94_io) & (1'b1 == ap_CS_fsm_state94)) | ((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69)) | ((1'b0 == ap_block_state44_io) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19)))) begin
            ap_reg_ioackin_m_axi_bias_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state244) & (m_axi_bias_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state219) & (m_axi_bias_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state194) & (m_axi_bias_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state169) & (m_axi_bias_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state144) & (m_axi_bias_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state119) & (m_axi_bias_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state94) & (m_axi_bias_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state69) & (m_axi_bias_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state44) & (m_axi_bias_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state19) & (m_axi_bias_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_bias_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state219) & (1'b0 == ap_block_state219_io)) | ((1'b1 == ap_CS_fsm_state194) & (1'b0 == ap_block_state194_io)) | ((1'b1 == ap_CS_fsm_state169) & (1'b0 == ap_block_state169_io)) | ((1'b1 == ap_CS_fsm_state144) & (1'b0 == ap_block_state144_io)) | ((1'b0 == ap_block_state119_io) & (1'b1 == ap_CS_fsm_state119)) | ((1'b0 == ap_block_state94_io) & (1'b1 == ap_CS_fsm_state94)) | ((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69)) | ((1'b0 == ap_block_state44_io) & (1'b1 == ap_CS_fsm_state44)) | ((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19)) | (~((ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state219) & (m_axi_weights_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state194) & (m_axi_weights_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state169) & (m_axi_weights_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state144) & (m_axi_weights_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state119) & (m_axi_weights_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state94) & (m_axi_weights_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state69) & (m_axi_weights_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state44) & (m_axi_weights_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state19) & (m_axi_weights_ARREADY == 1'b1)) | ((ap_start == 1'b1) & (m_axi_weights_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        c_1_reg_571 <= c_3_1_reg_1376;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        c_1_reg_571 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        c_2_reg_594 <= c_3_2_reg_1426;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        c_2_reg_594 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        c_4_reg_640 <= c_3_4_reg_1526;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        c_4_reg_640 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        c_5_reg_663 <= c_3_5_reg_1576;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        c_5_reg_663 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        c_6_reg_686 <= c_3_6_reg_1626;
    end else if ((1'b1 == ap_CS_fsm_state157)) begin
        c_6_reg_686 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state193)) begin
        c_7_reg_709 <= c_3_7_reg_1676;
    end else if ((1'b1 == ap_CS_fsm_state182)) begin
        c_7_reg_709 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state218)) begin
        c_8_reg_732 <= c_3_8_reg_1726;
    end else if ((1'b1 == ap_CS_fsm_state207)) begin
        c_8_reg_732 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        c_9_reg_755 <= c_3_9_reg_1776;
    end else if ((1'b1 == ap_CS_fsm_state232)) begin
        c_9_reg_755 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        c_reg_548 <= c_3_reg_1318;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        c_reg_548 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        c_s_reg_617 <= c_3_3_reg_1476;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        c_s_reg_617 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        tmp_1_32_reg_559 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_1_32_reg_559 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        tmp_2_35_reg_582 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        tmp_2_35_reg_582 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        tmp_3_38_reg_605 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        tmp_3_38_reg_605 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        tmp_4_41_reg_628 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        tmp_4_41_reg_628 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        tmp_5_44_reg_651 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        tmp_5_44_reg_651 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        tmp_6_47_reg_674 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state157)) begin
        tmp_6_47_reg_674 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state193)) begin
        tmp_7_50_reg_697 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state182)) begin
        tmp_7_50_reg_697 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state218)) begin
        tmp_8_53_reg_720 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state207)) begin
        tmp_8_53_reg_720 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        tmp_9_56_reg_743 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state232)) begin
        tmp_9_56_reg_743 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_s_reg_536 <= grp_fu_766_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_s_reg_536 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
        bias_addr_1_read_reg_1413 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        bias_addr_2_read_reg_1463 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101))) begin
        bias_addr_3_read_reg_1513 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state126))) begin
        bias_addr_4_read_reg_1563 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state151))) begin
        bias_addr_5_read_reg_1613 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state176))) begin
        bias_addr_6_read_reg_1663 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state201))) begin
        bias_addr_7_read_reg_1713 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state226))) begin
        bias_addr_8_read_reg_1763 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state251))) begin
        bias_addr_9_read_reg_1802 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        bias_addr_read_reg_1350 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        c_3_1_reg_1376 <= c_3_1_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        c_3_2_reg_1426 <= c_3_2_fu_925_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        c_3_3_reg_1476 <= c_3_3_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        c_3_4_reg_1526 <= c_3_4_fu_1019_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        c_3_5_reg_1576 <= c_3_5_fu_1066_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        c_3_6_reg_1626 <= c_3_6_fu_1113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state183)) begin
        c_3_7_reg_1676 <= c_3_7_fu_1160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state208)) begin
        c_3_8_reg_1726 <= c_3_8_fu_1207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state233)) begin
        c_3_9_reg_1776 <= c_3_9_fu_1254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c_3_reg_1318 <= c_3_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state234)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state209)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state184)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state159)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state134)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state109)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state84)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        reg_784 <= input_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state238) | (1'b1 == ap_CS_fsm_state213) | (1'b1 == ap_CS_fsm_state188) | (1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state138) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_789 <= grp_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state256) | (1'b1 == ap_CS_fsm_state231) | (1'b1 == ap_CS_fsm_state206) | (1'b1 == ap_CS_fsm_state181) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_794 <= grp_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        sext2_cast_reg_1355[29 : 0] <= sext2_cast_fu_869_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sext_cast_reg_1302[29 : 0] <= sext_cast_fu_824_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_1_fu_872_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        sum1_reg_1386 <= sum1_fu_889_p2;
        tmp_46_reg_1391 <= tmp_46_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_7_fu_1154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state183))) begin
        sum2_reg_1686 <= sum2_fu_1171_p2;
        tmp_58_reg_1691 <= tmp_58_fu_1176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_2_fu_919_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        sum3_reg_1436 <= sum3_fu_936_p2;
        tmp_48_reg_1441 <= tmp_48_fu_941_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_8_fu_1201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state208))) begin
        sum4_reg_1736 <= sum4_fu_1218_p2;
        tmp_60_reg_1741 <= tmp_60_fu_1223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_3_fu_966_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
        sum5_reg_1486 <= sum5_fu_983_p2;
        tmp_50_reg_1491 <= tmp_50_fu_988_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_9_fu_1248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state233))) begin
        sum6_reg_1786 <= sum6_fu_1265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_4_fu_1013_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state108))) begin
        sum7_reg_1536 <= sum7_fu_1030_p2;
        tmp_52_reg_1541 <= tmp_52_fu_1035_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_5_fu_1060_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
        sum9_reg_1586 <= sum9_fu_1077_p2;
        tmp_54_reg_1591 <= tmp_54_fu_1082_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_6_fu_1107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state158))) begin
        sum_reg_1636 <= sum_fu_1124_p2;
        tmp_56_reg_1641 <= tmp_56_fu_1129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_827_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_44_reg_1328 <= tmp_44_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        weights_addr_1_read_reg_1396 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
        weights_addr_2_read_reg_1446 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
        weights_addr_3_read_reg_1496 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state109))) begin
        weights_addr_4_read_reg_1546 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
        weights_addr_5_read_reg_1596 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state159))) begin
        weights_addr_6_read_reg_1646 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state184))) begin
        weights_addr_7_read_reg_1696 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state209))) begin
        weights_addr_8_read_reg_1746 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state234))) begin
        weights_addr_9_read_reg_1791 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        weights_addr_read_reg_1333 <= m_axi_weights_RDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state257) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state257)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_bias_ARREADY = m_axi_bias_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_bias_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_weights_ARREADY = m_axi_weights_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weights_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state244) | (1'b1 == ap_CS_fsm_state219) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state19))) begin
        bias_blk_n_AR = m_axi_bias_ARREADY;
    end else begin
        bias_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state251) | (1'b1 == ap_CS_fsm_state226) | (1'b1 == ap_CS_fsm_state201) | (1'b1 == ap_CS_fsm_state176) | (1'b1 == ap_CS_fsm_state151) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state26))) begin
        bias_blk_n_R = m_axi_bias_RVALID;
    end else begin
        bias_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state252) | (1'b1 == ap_CS_fsm_state239))) begin
        grp_fu_766_p0 = tmp_9_56_reg_743;
    end else if (((1'b1 == ap_CS_fsm_state227) | (1'b1 == ap_CS_fsm_state214))) begin
        grp_fu_766_p0 = tmp_8_53_reg_720;
    end else if (((1'b1 == ap_CS_fsm_state202) | (1'b1 == ap_CS_fsm_state189))) begin
        grp_fu_766_p0 = tmp_7_50_reg_697;
    end else if (((1'b1 == ap_CS_fsm_state177) | (1'b1 == ap_CS_fsm_state164))) begin
        grp_fu_766_p0 = tmp_6_47_reg_674;
    end else if (((1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state139))) begin
        grp_fu_766_p0 = tmp_5_44_reg_651;
    end else if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state114))) begin
        grp_fu_766_p0 = tmp_4_41_reg_628;
    end else if (((1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state89))) begin
        grp_fu_766_p0 = tmp_3_38_reg_605;
    end else if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state64))) begin
        grp_fu_766_p0 = tmp_2_35_reg_582;
    end else if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state39))) begin
        grp_fu_766_p0 = tmp_1_32_reg_559;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_766_p0 = tmp_s_reg_536;
    end else begin
        grp_fu_766_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state252)) begin
        grp_fu_766_p1 = bias_addr_9_read_reg_1802;
    end else if ((1'b1 == ap_CS_fsm_state227)) begin
        grp_fu_766_p1 = bias_addr_8_read_reg_1763;
    end else if ((1'b1 == ap_CS_fsm_state202)) begin
        grp_fu_766_p1 = bias_addr_7_read_reg_1713;
    end else if ((1'b1 == ap_CS_fsm_state177)) begin
        grp_fu_766_p1 = bias_addr_6_read_reg_1663;
    end else if ((1'b1 == ap_CS_fsm_state152)) begin
        grp_fu_766_p1 = bias_addr_5_read_reg_1613;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        grp_fu_766_p1 = bias_addr_4_read_reg_1563;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        grp_fu_766_p1 = bias_addr_3_read_reg_1513;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_fu_766_p1 = bias_addr_2_read_reg_1463;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_766_p1 = bias_addr_1_read_reg_1413;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_766_p1 = bias_addr_read_reg_1350;
    end else if (((1'b1 == ap_CS_fsm_state239) | (1'b1 == ap_CS_fsm_state214) | (1'b1 == ap_CS_fsm_state189) | (1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_766_p1 = reg_789;
    end else begin
        grp_fu_766_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state235)) begin
        grp_fu_780_p0 = weights_addr_9_read_reg_1791;
    end else if ((1'b1 == ap_CS_fsm_state210)) begin
        grp_fu_780_p0 = weights_addr_8_read_reg_1746;
    end else if ((1'b1 == ap_CS_fsm_state185)) begin
        grp_fu_780_p0 = weights_addr_7_read_reg_1696;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        grp_fu_780_p0 = weights_addr_6_read_reg_1646;
    end else if ((1'b1 == ap_CS_fsm_state135)) begin
        grp_fu_780_p0 = weights_addr_5_read_reg_1596;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_fu_780_p0 = weights_addr_4_read_reg_1546;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        grp_fu_780_p0 = weights_addr_3_read_reg_1496;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_780_p0 = weights_addr_2_read_reg_1446;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_780_p0 = weights_addr_1_read_reg_1396;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_780_p0 = weights_addr_read_reg_1333;
    end else begin
        grp_fu_780_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state233)) begin
        input_0_0_address0 = tmp_30_9_fu_1260_p1;
    end else if ((1'b1 == ap_CS_fsm_state208)) begin
        input_0_0_address0 = tmp_30_8_fu_1213_p1;
    end else if ((1'b1 == ap_CS_fsm_state183)) begin
        input_0_0_address0 = tmp_30_7_fu_1166_p1;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        input_0_0_address0 = tmp_30_6_fu_1119_p1;
    end else if ((1'b1 == ap_CS_fsm_state133)) begin
        input_0_0_address0 = tmp_30_5_fu_1072_p1;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        input_0_0_address0 = tmp_30_4_fu_1025_p1;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        input_0_0_address0 = tmp_30_3_fu_978_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        input_0_0_address0 = tmp_30_2_fu_931_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        input_0_0_address0 = tmp_30_1_fu_884_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_0_0_address0 = tmp_11_fu_839_p1;
    end else begin
        input_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state233) | (1'b1 == ap_CS_fsm_state208) | (1'b1 == ap_CS_fsm_state183) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state133))) begin
        input_0_0_ce0 = 1'b1;
    end else begin
        input_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state244)) begin
            m_axi_bias_ARADDR = sum17_cast_fu_1270_p1;
        end else if ((1'b1 == ap_CS_fsm_state219)) begin
            m_axi_bias_ARADDR = sum15_cast_fu_1228_p1;
        end else if ((1'b1 == ap_CS_fsm_state194)) begin
            m_axi_bias_ARADDR = sum13_cast_fu_1181_p1;
        end else if ((1'b1 == ap_CS_fsm_state169)) begin
            m_axi_bias_ARADDR = sum11_cast_fu_1134_p1;
        end else if ((1'b1 == ap_CS_fsm_state144)) begin
            m_axi_bias_ARADDR = sum9_cast_fu_1087_p1;
        end else if ((1'b1 == ap_CS_fsm_state119)) begin
            m_axi_bias_ARADDR = sum7_cast_fu_1040_p1;
        end else if ((1'b1 == ap_CS_fsm_state94)) begin
            m_axi_bias_ARADDR = sum5_cast_fu_993_p1;
        end else if ((1'b1 == ap_CS_fsm_state69)) begin
            m_axi_bias_ARADDR = sum3_cast_fu_946_p1;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            m_axi_bias_ARADDR = sum1_cast_fu_899_p1;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            m_axi_bias_ARADDR = sext2_fu_849_p1;
        end else begin
            m_axi_bias_ARADDR = 'bx;
        end
    end else begin
        m_axi_bias_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state244)) | ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state219)) | ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state194)) | ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state169)) | ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state144)) | ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state119)) | ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state94)) | ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state69)) | ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19)))) begin
        m_axi_bias_ARVALID = 1'b1;
    end else begin
        m_axi_bias_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state251)) | ((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state226)) | ((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state201)) | ((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state176)) | ((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state151)) | ((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state126)) | ((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101)) | ((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76)) | ((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26)))) begin
        m_axi_bias_RREADY = 1'b1;
    end else begin
        m_axi_bias_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state219)) begin
            m_axi_weights_ARADDR = tmp_61_fu_1238_p1;
        end else if ((1'b1 == ap_CS_fsm_state194)) begin
            m_axi_weights_ARADDR = tmp_59_fu_1191_p1;
        end else if ((1'b1 == ap_CS_fsm_state169)) begin
            m_axi_weights_ARADDR = tmp_57_fu_1144_p1;
        end else if ((1'b1 == ap_CS_fsm_state144)) begin
            m_axi_weights_ARADDR = tmp_55_fu_1097_p1;
        end else if ((1'b1 == ap_CS_fsm_state119)) begin
            m_axi_weights_ARADDR = tmp_53_fu_1050_p1;
        end else if ((1'b1 == ap_CS_fsm_state94)) begin
            m_axi_weights_ARADDR = tmp_51_fu_1003_p1;
        end else if ((1'b1 == ap_CS_fsm_state69)) begin
            m_axi_weights_ARADDR = tmp_49_fu_956_p1;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            m_axi_weights_ARADDR = tmp_47_fu_909_p1;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            m_axi_weights_ARADDR = tmp_45_fu_859_p1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            m_axi_weights_ARADDR = tmp_43_fu_813_p1;
        end else begin
            m_axi_weights_ARADDR = 'bx;
        end
    end else begin
        m_axi_weights_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state219)) | ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state194)) | ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state169)) | ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state144)) | ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state119)) | ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state94)) | ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state69)) | ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state44)) | ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state19)) | ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        m_axi_weights_ARVALID = 1'b1;
    end else begin
        m_axi_weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state234)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state209)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state184)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state159)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state134)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state109)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state84)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        m_axi_weights_RREADY = 1'b1;
    end else begin
        m_axi_weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state257)) begin
        output_r_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state232)) begin
        output_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state207)) begin
        output_r_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state182)) begin
        output_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state157)) begin
        output_r_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        output_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        output_r_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        output_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        output_r_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        output_r_address0 = 64'd0;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state257) | (1'b1 == ap_CS_fsm_state232) | (1'b1 == ap_CS_fsm_state207) | (1'b1 == ap_CS_fsm_state182) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state132))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state257) | (1'b1 == ap_CS_fsm_state232) | (1'b1 == ap_CS_fsm_state207) | (1'b1 == ap_CS_fsm_state182) | (1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state132))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state219) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        weights_blk_n_AR = m_axi_weights_ARREADY;
    end else begin
        weights_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state234) | (1'b1 == ap_CS_fsm_state209) | (1'b1 == ap_CS_fsm_state184) | (1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state134) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state9))) begin
        weights_blk_n_R = m_axi_weights_RVALID;
    end else begin
        weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond_fu_827_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b0 == ap_block_state19_io) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((exitcond_1_fu_872_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b0 == ap_block_state44_io) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((exitcond_2_fu_919_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state69 : begin
            if (((1'b0 == ap_block_state69_io) & (1'b1 == ap_CS_fsm_state69))) begin
                ap_NS_fsm = ap_ST_fsm_state70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((exitcond_3_fu_966_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state94 : begin
            if (((1'b0 == ap_block_state94_io) & (1'b1 == ap_CS_fsm_state94))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state101))) begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            if (((exitcond_4_fu_1013_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state108))) begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end
        end
        ap_ST_fsm_state109 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state109))) begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state119 : begin
            if (((1'b0 == ap_block_state119_io) & (1'b1 == ap_CS_fsm_state119))) begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state126))) begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            if (((exitcond_5_fu_1060_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end
        end
        ap_ST_fsm_state134 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state134))) begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state144 : begin
            if (((1'b1 == ap_CS_fsm_state144) & (1'b0 == ap_block_state144_io))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state151))) begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            if (((exitcond_6_fu_1107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state158))) begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end
        end
        ap_ST_fsm_state159 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state159))) begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state169 : begin
            if (((1'b1 == ap_CS_fsm_state169) & (1'b0 == ap_block_state169_io))) begin
                ap_NS_fsm = ap_ST_fsm_state170;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state176))) begin
                ap_NS_fsm = ap_ST_fsm_state177;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state176;
            end
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            if (((exitcond_7_fu_1154_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state183))) begin
                ap_NS_fsm = ap_ST_fsm_state194;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state184;
            end
        end
        ap_ST_fsm_state184 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state184))) begin
                ap_NS_fsm = ap_ST_fsm_state185;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state184;
            end
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state194 : begin
            if (((1'b1 == ap_CS_fsm_state194) & (1'b0 == ap_block_state194_io))) begin
                ap_NS_fsm = ap_ST_fsm_state195;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state194;
            end
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state201))) begin
                ap_NS_fsm = ap_ST_fsm_state202;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state201;
            end
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            if (((exitcond_8_fu_1201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state208))) begin
                ap_NS_fsm = ap_ST_fsm_state219;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state209;
            end
        end
        ap_ST_fsm_state209 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state209))) begin
                ap_NS_fsm = ap_ST_fsm_state210;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state209;
            end
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state219 : begin
            if (((1'b1 == ap_CS_fsm_state219) & (1'b0 == ap_block_state219_io))) begin
                ap_NS_fsm = ap_ST_fsm_state220;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state219;
            end
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state226))) begin
                ap_NS_fsm = ap_ST_fsm_state227;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state226;
            end
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            if (((exitcond_9_fu_1248_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state233))) begin
                ap_NS_fsm = ap_ST_fsm_state244;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state234;
            end
        end
        ap_ST_fsm_state234 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state234))) begin
                ap_NS_fsm = ap_ST_fsm_state235;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state234;
            end
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state244 : begin
            if (((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state244))) begin
                ap_NS_fsm = ap_ST_fsm_state245;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state244;
            end
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            if (((m_axi_bias_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state251))) begin
                ap_NS_fsm = ap_ST_fsm_state252;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state251;
            end
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state177 = ap_CS_fsm[32'd176];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state181 = ap_CS_fsm[32'd180];

assign ap_CS_fsm_state182 = ap_CS_fsm[32'd181];

assign ap_CS_fsm_state183 = ap_CS_fsm[32'd182];

assign ap_CS_fsm_state184 = ap_CS_fsm[32'd183];

assign ap_CS_fsm_state185 = ap_CS_fsm[32'd184];

assign ap_CS_fsm_state188 = ap_CS_fsm[32'd187];

assign ap_CS_fsm_state189 = ap_CS_fsm[32'd188];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state193 = ap_CS_fsm[32'd192];

assign ap_CS_fsm_state194 = ap_CS_fsm[32'd193];

assign ap_CS_fsm_state201 = ap_CS_fsm[32'd200];

assign ap_CS_fsm_state202 = ap_CS_fsm[32'd201];

assign ap_CS_fsm_state206 = ap_CS_fsm[32'd205];

assign ap_CS_fsm_state207 = ap_CS_fsm[32'd206];

assign ap_CS_fsm_state208 = ap_CS_fsm[32'd207];

assign ap_CS_fsm_state209 = ap_CS_fsm[32'd208];

assign ap_CS_fsm_state210 = ap_CS_fsm[32'd209];

assign ap_CS_fsm_state213 = ap_CS_fsm[32'd212];

assign ap_CS_fsm_state214 = ap_CS_fsm[32'd213];

assign ap_CS_fsm_state218 = ap_CS_fsm[32'd217];

assign ap_CS_fsm_state219 = ap_CS_fsm[32'd218];

assign ap_CS_fsm_state226 = ap_CS_fsm[32'd225];

assign ap_CS_fsm_state227 = ap_CS_fsm[32'd226];

assign ap_CS_fsm_state231 = ap_CS_fsm[32'd230];

assign ap_CS_fsm_state232 = ap_CS_fsm[32'd231];

assign ap_CS_fsm_state233 = ap_CS_fsm[32'd232];

assign ap_CS_fsm_state234 = ap_CS_fsm[32'd233];

assign ap_CS_fsm_state235 = ap_CS_fsm[32'd234];

assign ap_CS_fsm_state238 = ap_CS_fsm[32'd237];

assign ap_CS_fsm_state239 = ap_CS_fsm[32'd238];

assign ap_CS_fsm_state243 = ap_CS_fsm[32'd242];

assign ap_CS_fsm_state244 = ap_CS_fsm[32'd243];

assign ap_CS_fsm_state251 = ap_CS_fsm[32'd250];

assign ap_CS_fsm_state252 = ap_CS_fsm[32'd251];

assign ap_CS_fsm_state256 = ap_CS_fsm[32'd255];

assign ap_CS_fsm_state257 = ap_CS_fsm[32'd256];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

always @ (*) begin
    ap_block_state119_io = ((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state144_io = ((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state169_io = ((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state194_io = ((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state19_io = ((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state219_io = ((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state44_io = ((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state69_io = ((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state94_io = ((ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0) | (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

assign c_3_1_fu_878_p2 = (c_1_reg_571 + 7'd1);

assign c_3_2_fu_925_p2 = (c_2_reg_594 + 7'd1);

assign c_3_3_fu_972_p2 = (c_s_reg_617 + 7'd1);

assign c_3_4_fu_1019_p2 = (c_4_reg_640 + 7'd1);

assign c_3_5_fu_1066_p2 = (c_5_reg_663 + 7'd1);

assign c_3_6_fu_1113_p2 = (c_6_reg_686 + 7'd1);

assign c_3_7_fu_1160_p2 = (c_7_reg_709 + 7'd1);

assign c_3_8_fu_1207_p2 = (c_8_reg_732 + 7'd1);

assign c_3_9_fu_1254_p2 = (c_9_reg_755 + 7'd1);

assign c_3_fu_833_p2 = (c_reg_548 + 7'd1);

assign exitcond_1_fu_872_p2 = ((c_1_reg_571 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_2_fu_919_p2 = ((c_2_reg_594 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_3_fu_966_p2 = ((c_s_reg_617 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_4_fu_1013_p2 = ((c_4_reg_640 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_5_fu_1060_p2 = ((c_5_reg_663 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_6_fu_1107_p2 = ((c_6_reg_686 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_7_fu_1154_p2 = ((c_7_reg_709 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_8_fu_1201_p2 = ((c_8_reg_732 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_9_fu_1248_p2 = ((c_9_reg_755 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_827_p2 = ((c_reg_548 == 7'd120) ? 1'b1 : 1'b0);

assign m_axi_bias_ARBURST = 2'd0;

assign m_axi_bias_ARCACHE = 4'd0;

assign m_axi_bias_ARID = 1'd0;

assign m_axi_bias_ARLEN = 32'd1;

assign m_axi_bias_ARLOCK = 2'd0;

assign m_axi_bias_ARPROT = 3'd0;

assign m_axi_bias_ARQOS = 4'd0;

assign m_axi_bias_ARREGION = 4'd0;

assign m_axi_bias_ARSIZE = 3'd0;

assign m_axi_bias_ARUSER = 1'd0;

assign m_axi_bias_AWADDR = 32'd0;

assign m_axi_bias_AWBURST = 2'd0;

assign m_axi_bias_AWCACHE = 4'd0;

assign m_axi_bias_AWID = 1'd0;

assign m_axi_bias_AWLEN = 32'd0;

assign m_axi_bias_AWLOCK = 2'd0;

assign m_axi_bias_AWPROT = 3'd0;

assign m_axi_bias_AWQOS = 4'd0;

assign m_axi_bias_AWREGION = 4'd0;

assign m_axi_bias_AWSIZE = 3'd0;

assign m_axi_bias_AWUSER = 1'd0;

assign m_axi_bias_AWVALID = 1'b0;

assign m_axi_bias_BREADY = 1'b0;

assign m_axi_bias_WDATA = 32'd0;

assign m_axi_bias_WID = 1'd0;

assign m_axi_bias_WLAST = 1'b0;

assign m_axi_bias_WSTRB = 4'd0;

assign m_axi_bias_WUSER = 1'd0;

assign m_axi_bias_WVALID = 1'b0;

assign m_axi_weights_ARBURST = 2'd0;

assign m_axi_weights_ARCACHE = 4'd0;

assign m_axi_weights_ARID = 1'd0;

assign m_axi_weights_ARLEN = 32'd120;

assign m_axi_weights_ARLOCK = 2'd0;

assign m_axi_weights_ARPROT = 3'd0;

assign m_axi_weights_ARQOS = 4'd0;

assign m_axi_weights_ARREGION = 4'd0;

assign m_axi_weights_ARSIZE = 3'd0;

assign m_axi_weights_ARUSER = 1'd0;

assign m_axi_weights_AWADDR = 32'd0;

assign m_axi_weights_AWBURST = 2'd0;

assign m_axi_weights_AWCACHE = 4'd0;

assign m_axi_weights_AWID = 1'd0;

assign m_axi_weights_AWLEN = 32'd0;

assign m_axi_weights_AWLOCK = 2'd0;

assign m_axi_weights_AWPROT = 3'd0;

assign m_axi_weights_AWQOS = 4'd0;

assign m_axi_weights_AWREGION = 4'd0;

assign m_axi_weights_AWSIZE = 3'd0;

assign m_axi_weights_AWUSER = 1'd0;

assign m_axi_weights_AWVALID = 1'b0;

assign m_axi_weights_BREADY = 1'b0;

assign m_axi_weights_WDATA = 32'd0;

assign m_axi_weights_WID = 1'd0;

assign m_axi_weights_WLAST = 1'b0;

assign m_axi_weights_WSTRB = 4'd0;

assign m_axi_weights_WUSER = 1'd0;

assign m_axi_weights_WVALID = 1'b0;

assign output_r_d0 = reg_794;

assign sext2_cast_fu_869_p1 = bias_offset;

assign sext2_fu_849_p1 = bias_offset;

assign sext_cast_fu_824_p1 = weights_offset;

assign sum11_cast_fu_1134_p1 = sum_reg_1636;

assign sum13_cast_fu_1181_p1 = sum2_reg_1686;

assign sum15_cast_fu_1228_p1 = sum4_reg_1736;

assign sum17_cast_fu_1270_p1 = sum6_reg_1786;

assign sum1_cast_fu_899_p1 = sum1_reg_1386;

assign sum1_fu_889_p2 = (sext2_cast_reg_1355 + 31'd1);

assign sum2_fu_1171_p2 = (sext2_cast_reg_1355 + 31'd7);

assign sum3_cast_fu_946_p1 = sum3_reg_1436;

assign sum3_fu_936_p2 = (sext2_cast_reg_1355 + 31'd2);

assign sum4_fu_1218_p2 = (sext2_cast_reg_1355 + 31'd8);

assign sum5_cast_fu_993_p1 = sum5_reg_1486;

assign sum5_fu_983_p2 = (sext2_cast_reg_1355 + 31'd3);

assign sum6_fu_1265_p2 = (sext2_cast_reg_1355 + 31'd9);

assign sum7_cast_fu_1040_p1 = sum7_reg_1536;

assign sum7_fu_1030_p2 = (sext2_cast_reg_1355 + 31'd4);

assign sum9_cast_fu_1087_p1 = sum9_reg_1586;

assign sum9_fu_1077_p2 = (sext2_cast_reg_1355 + 31'd5);

assign sum_fu_1124_p2 = (sext2_cast_reg_1355 + 31'd6);

assign tmp_11_fu_839_p1 = c_reg_548;

assign tmp_30_1_fu_884_p1 = c_1_reg_571;

assign tmp_30_2_fu_931_p1 = c_2_reg_594;

assign tmp_30_3_fu_978_p1 = c_s_reg_617;

assign tmp_30_4_fu_1025_p1 = c_4_reg_640;

assign tmp_30_5_fu_1072_p1 = c_5_reg_663;

assign tmp_30_6_fu_1119_p1 = c_6_reg_686;

assign tmp_30_7_fu_1166_p1 = c_7_reg_709;

assign tmp_30_8_fu_1213_p1 = c_8_reg_732;

assign tmp_30_9_fu_1260_p1 = c_9_reg_755;

assign tmp_43_fu_813_p1 = weights_offset;

assign tmp_44_fu_844_p2 = (sext_cast_reg_1302 + 31'd120);

assign tmp_45_fu_859_p1 = tmp_44_reg_1328;

assign tmp_46_fu_894_p2 = (sext_cast_reg_1302 + 31'd240);

assign tmp_47_fu_909_p1 = tmp_46_reg_1391;

assign tmp_48_fu_941_p2 = (sext_cast_reg_1302 + 31'd360);

assign tmp_49_fu_956_p1 = tmp_48_reg_1441;

assign tmp_50_fu_988_p2 = (sext_cast_reg_1302 + 31'd480);

assign tmp_51_fu_1003_p1 = tmp_50_reg_1491;

assign tmp_52_fu_1035_p2 = (sext_cast_reg_1302 + 31'd600);

assign tmp_53_fu_1050_p1 = tmp_52_reg_1541;

assign tmp_54_fu_1082_p2 = (sext_cast_reg_1302 + 31'd720);

assign tmp_55_fu_1097_p1 = tmp_54_reg_1591;

assign tmp_56_fu_1129_p2 = (sext_cast_reg_1302 + 31'd840);

assign tmp_57_fu_1144_p1 = tmp_56_reg_1641;

assign tmp_58_fu_1176_p2 = (sext_cast_reg_1302 + 31'd960);

assign tmp_59_fu_1191_p1 = tmp_58_reg_1691;

assign tmp_60_fu_1223_p2 = (sext_cast_reg_1302 + 31'd1080);

assign tmp_61_fu_1238_p1 = tmp_60_reg_1741;

always @ (posedge ap_clk) begin
    sext_cast_reg_1302[30] <= 1'b0;
    sext2_cast_reg_1355[30] <= 1'b0;
end

endmodule //fc_6
