-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity store_weights_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_weights_AWVALID : OUT STD_LOGIC;
    m_axi_weights_AWREADY : IN STD_LOGIC;
    m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WVALID : OUT STD_LOGIC;
    m_axi_weights_WREADY : IN STD_LOGIC;
    m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_WLAST : OUT STD_LOGIC;
    m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARVALID : OUT STD_LOGIC;
    m_axi_weights_ARREADY : IN STD_LOGIC;
    m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RVALID : IN STD_LOGIC;
    m_axi_weights_RREADY : OUT STD_LOGIC;
    m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_RLAST : IN STD_LOGIC;
    m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BVALID : IN STD_LOGIC;
    m_axi_weights_BREADY : OUT STD_LOGIC;
    m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weights_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    weights_oc_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weights_oc_ce0 : OUT STD_LOGIC;
    weights_oc_we0 : OUT STD_LOGIC;
    weights_oc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_channel : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of store_weights_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal weights_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_140_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_reg_337 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_reg_342 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_154_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_350 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_19_fu_219_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_355 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_reg_360 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_fu_249_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_368 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_24_fu_280_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_reg_373 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_addr_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_306_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_reg_385 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal k_2_fu_318_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_2_reg_393 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal tmp_26_fu_328_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_reg_398 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_addr_read_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_107 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_118 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_129 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_35_cast_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_285_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_weights_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_weights_ARREADY : STD_LOGIC;
    signal tmp_s_fu_164_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_176_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_172_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_184_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_188_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_cast_fu_194_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_198_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_207_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_cast_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl1_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_225_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_fu_160_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_268_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_fu_259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_274_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl4_cast_fu_299_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_cast_fu_296_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_8_fu_324_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_weights_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_sig_ioackin_m_axi_weights_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_weights_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_243_p2 = ap_const_lv1_1))) then 
                i_reg_107 <= i_2_reg_350;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_107 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_312_p2 = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_312_p2 = ap_const_lv1_1))) then 
                j_reg_118 <= j_2_reg_368;
            elsif (((exitcond2_fu_148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_118 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_reg_129 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_reg_129 <= k_2_reg_393;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_350 <= i_2_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_368 <= j_2_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_312_p2 = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                k_2_reg_393 <= k_2_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    sext_reg_342(29 downto 0) <= sext_fu_144_p1(29 downto 0);
                    tmp_cast_reg_337(3 downto 0) <= tmp_cast_fu_140_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_148_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_19_reg_355 <= tmp_19_fu_219_p2;
                tmp_21_reg_360 <= tmp_21_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_24_reg_373 <= tmp_24_fu_280_p2;
                weights_addr_reg_379 <= tmp_14_fu_285_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_25_reg_385 <= tmp_25_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_312_p2 = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0))) and (exitcond_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_26_reg_398 <= tmp_26_fu_328_p2;
                weights_addr_read_reg_403 <= m_axi_weights_RDATA;
            end if;
        end if;
    end process;
    tmp_cast_reg_337(9 downto 4) <= "000000";
    sext_reg_342(63 downto 30) <= "0000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_weights_RVALID, ap_CS_fsm_state4, ap_CS_fsm_state11, exitcond_fu_312_p2, ap_CS_fsm_state2, exitcond2_fu_148_p2, ap_CS_fsm_state3, exitcond1_fu_243_p2, ap_sig_ioackin_m_axi_weights_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_148_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_243_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_m_axi_weights_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if ((not(((exitcond_fu_312_p2 = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_312_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((exitcond_fu_312_p2 = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0))) and (exitcond_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state11_assign_proc : process(m_axi_weights_RVALID, exitcond_fu_312_p2)
    begin
                ap_block_state11 <= ((exitcond_fu_312_p2 = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_148_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_148_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_148_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_148_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_weights_ARREADY_assign_proc : process(m_axi_weights_ARREADY, ap_reg_ioackin_m_axi_weights_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_weights_ARREADY <= m_axi_weights_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weights_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_243_p2 <= "1" when (j_reg_118 = ap_const_lv3_5) else "0";
    exitcond2_fu_148_p2 <= "1" when (i_reg_107 = ap_const_lv5_10) else "0";
    exitcond_fu_312_p2 <= "1" when (k_reg_129 = ap_const_lv3_5) else "0";
    i_2_fu_154_p2 <= std_logic_vector(unsigned(i_reg_107) + unsigned(ap_const_lv5_1));
    j_2_fu_249_p2 <= std_logic_vector(unsigned(j_reg_118) + unsigned(ap_const_lv3_1));
    k_2_fu_318_p2 <= std_logic_vector(unsigned(k_reg_129) + unsigned(ap_const_lv3_1));
    m_axi_weights_ARADDR <= weights_addr_reg_379;
    m_axi_weights_ARBURST <= ap_const_lv2_0;
    m_axi_weights_ARCACHE <= ap_const_lv4_0;
    m_axi_weights_ARID <= ap_const_lv1_0;
    m_axi_weights_ARLEN <= ap_const_lv32_5;
    m_axi_weights_ARLOCK <= ap_const_lv2_0;
    m_axi_weights_ARPROT <= ap_const_lv3_0;
    m_axi_weights_ARQOS <= ap_const_lv4_0;
    m_axi_weights_ARREGION <= ap_const_lv4_0;
    m_axi_weights_ARSIZE <= ap_const_lv3_0;
    m_axi_weights_ARUSER <= ap_const_lv1_0;

    m_axi_weights_ARVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_m_axi_weights_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_weights_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weights_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_AWADDR <= ap_const_lv32_0;
    m_axi_weights_AWBURST <= ap_const_lv2_0;
    m_axi_weights_AWCACHE <= ap_const_lv4_0;
    m_axi_weights_AWID <= ap_const_lv1_0;
    m_axi_weights_AWLEN <= ap_const_lv32_0;
    m_axi_weights_AWLOCK <= ap_const_lv2_0;
    m_axi_weights_AWPROT <= ap_const_lv3_0;
    m_axi_weights_AWQOS <= ap_const_lv4_0;
    m_axi_weights_AWREGION <= ap_const_lv4_0;
    m_axi_weights_AWSIZE <= ap_const_lv3_0;
    m_axi_weights_AWUSER <= ap_const_lv1_0;
    m_axi_weights_AWVALID <= ap_const_logic_0;
    m_axi_weights_BREADY <= ap_const_logic_0;

    m_axi_weights_RREADY_assign_proc : process(m_axi_weights_RVALID, ap_CS_fsm_state11, exitcond_fu_312_p2)
    begin
        if ((not(((exitcond_fu_312_p2 = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0))) and (exitcond_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_weights_RREADY <= ap_const_logic_1;
        else 
            m_axi_weights_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_WDATA <= ap_const_lv32_0;
    m_axi_weights_WID <= ap_const_lv1_0;
    m_axi_weights_WLAST <= ap_const_logic_0;
    m_axi_weights_WSTRB <= ap_const_lv4_0;
    m_axi_weights_WUSER <= ap_const_lv1_0;
    m_axi_weights_WVALID <= ap_const_logic_0;
        p_shl1_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_207_p3),64));

    p_shl2_cast_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_164_p3),9));
    p_shl3_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_176_p3),9));
    p_shl4_cast_fu_299_p3 <= (tmp_24_reg_373 & ap_const_lv2_0);
    p_shl_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_225_p3),8));
    sext_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_offset),64));
    tmp_13_fu_268_p2 <= std_logic_vector(shift_left(unsigned(tmp_22_fu_263_p2),to_integer(unsigned('0' & ap_const_lv64_2(31-1 downto 0)))));
    tmp_14_fu_285_p2 <= std_logic_vector(unsigned(tmp_23_fu_274_p2) + unsigned(sext_reg_342));
    tmp_16_fu_176_p3 <= (i_reg_107 & ap_const_lv1_0);
    tmp_17_fu_188_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_172_p1) - unsigned(p_shl3_cast_fu_184_p1));
    tmp_18_fu_198_p2 <= std_logic_vector(signed(tmp_22_cast_fu_194_p1) + signed(tmp_cast_reg_337));
    tmp_19_fu_219_p2 <= std_logic_vector(signed(tmp_23_cast_fu_203_p1) + signed(p_shl1_fu_215_p1));
    tmp_20_fu_225_p3 <= (i_reg_107 & ap_const_lv2_0);
    tmp_21_fu_237_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_160_p1) + unsigned(p_shl_cast_fu_233_p1));
        tmp_22_cast_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_188_p2),10));

    tmp_22_fu_263_p2 <= std_logic_vector(unsigned(tmp_9_fu_255_p1) + unsigned(tmp_19_reg_355));
        tmp_23_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_198_p2),64));

    tmp_23_fu_274_p2 <= std_logic_vector(unsigned(tmp_13_fu_268_p2) + unsigned(tmp_22_fu_263_p2));
    tmp_24_fu_280_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_259_p1) + unsigned(tmp_21_reg_360));
    tmp_25_fu_306_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_299_p3) + unsigned(tmp_31_cast_fu_296_p1));
    tmp_26_fu_328_p2 <= std_logic_vector(unsigned(tmp_25_reg_385) + unsigned(tmp_cast_8_fu_324_p1));
    tmp_31_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_373),10));
    tmp_35_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_398),64));
    tmp_7_cast_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_107),8));
    tmp_9_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_118),8));
    tmp_9_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_118),64));
    tmp_cast_8_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_129),10));
    tmp_cast_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_channel),10));
    tmp_fu_207_p3 <= (tmp_18_fu_198_p2 & ap_const_lv2_0);
    tmp_s_fu_164_p3 <= (i_reg_107 & ap_const_lv3_0);

    weights_blk_n_AR_assign_proc : process(m_axi_weights_ARREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_blk_n_AR <= m_axi_weights_ARREADY;
        else 
            weights_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weights_blk_n_R_assign_proc : process(m_axi_weights_RVALID, ap_CS_fsm_state11, exitcond_fu_312_p2)
    begin
        if (((exitcond_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            weights_blk_n_R <= m_axi_weights_RVALID;
        else 
            weights_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    weights_oc_address0 <= tmp_35_cast_fu_333_p1(9 - 1 downto 0);

    weights_oc_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weights_oc_ce0 <= ap_const_logic_1;
        else 
            weights_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_oc_d0 <= weights_addr_read_reg_403;

    weights_oc_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weights_oc_we0 <= ap_const_logic_1;
        else 
            weights_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
