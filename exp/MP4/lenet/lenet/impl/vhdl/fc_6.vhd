-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_0_0_ce0 : OUT STD_LOGIC;
    input_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWVALID : OUT STD_LOGIC;
    m_axi_weights_AWREADY : IN STD_LOGIC;
    m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WVALID : OUT STD_LOGIC;
    m_axi_weights_WREADY : IN STD_LOGIC;
    m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_WLAST : OUT STD_LOGIC;
    m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARVALID : OUT STD_LOGIC;
    m_axi_weights_ARREADY : IN STD_LOGIC;
    m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RVALID : IN STD_LOGIC;
    m_axi_weights_RREADY : OUT STD_LOGIC;
    m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_RLAST : IN STD_LOGIC;
    m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BVALID : IN STD_LOGIC;
    m_axi_weights_BREADY : OUT STD_LOGIC;
    m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weights_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    m_axi_bias_AWVALID : OUT STD_LOGIC;
    m_axi_bias_AWREADY : IN STD_LOGIC;
    m_axi_bias_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_WVALID : OUT STD_LOGIC;
    m_axi_bias_WREADY : IN STD_LOGIC;
    m_axi_bias_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_WLAST : OUT STD_LOGIC;
    m_axi_bias_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_ARVALID : OUT STD_LOGIC;
    m_axi_bias_ARREADY : IN STD_LOGIC;
    m_axi_bias_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_bias_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_bias_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_RVALID : IN STD_LOGIC;
    m_axi_bias_RREADY : OUT STD_LOGIC;
    m_axi_bias_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_bias_RLAST : IN STD_LOGIC;
    m_axi_bias_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_BVALID : IN STD_LOGIC;
    m_axi_bias_BREADY : OUT STD_LOGIC;
    m_axi_bias_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_bias_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_bias_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bias_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fc_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_4B0 : STD_LOGIC_VECTOR (10 downto 0) := "10010110000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond_flatten_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal exitcond_flatten_reg_352_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_blk_n_AR : STD_LOGIC;
    signal bias_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ifzero_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_395_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_144 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_reg_155 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_178 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_ioackin_m_axi_bias_ARREADY : STD_LOGIC;
    signal weights_offset_cast_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_offset_cast_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_flatten_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_352_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_352_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_218_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next_reg_356 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_361_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_361_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_mid2_fu_236_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_mid2_reg_366 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_mid2_reg_366_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_mid2_v_fu_244_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_v_reg_372 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_v_reg_372_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_v_reg_372_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_v_reg_372_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_v_reg_372_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9_pp0_stage1_iter0 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_weights_ARREADY : STD_LOGIC;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state29_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal c_3_fu_315_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_3_reg_389 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state12_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state22_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state27_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state32_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ifzero_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_395_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_395_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state10_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state25_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state30_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal weights_addr_read_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state11_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state26_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state31_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal input_0_0_load_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid2_fu_329_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_addr_read_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_148_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_n_phi_fu_159_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_tmp_s_phi_fu_170_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_c_phi_fu_182_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_mid2_26_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal sext2_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_bias_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_weights_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_189_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_fu_224_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_252_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_fu_264_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_260_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_272_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_62_fu_276_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_87_cast_fu_282_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_cast_fu_286_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_63_fu_290_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_88_cast_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_ce : STD_LOGIC;
    signal grp_fu_193_ce : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_641 : BOOLEAN;

    component conv1_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv1_fadd_32ns_3bkb_U82 : component conv1_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_189_p0,
        din1 => grp_fu_189_p1,
        ce => grp_fu_189_ce,
        dout => grp_fu_189_p2);

    conv1_fmul_32ns_3cud_U83 : component conv1_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_addr_read_reg_404,
        din1 => input_0_0_load_reg_409,
        ce => grp_fu_193_ce,
        dout => grp_fu_193_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_bias_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_bias_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_sig_ioackin_m_axi_bias_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0)))) then 
                        ap_reg_ioackin_m_axi_bias_ARREADY <= ap_const_logic_0;
                    elsif (((m_axi_bias_ARREADY = ap_const_logic_1) and (ap_start = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_bias_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_weights_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_641)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_11001)) then 
                        ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (m_axi_weights_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    c_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_reg_178 <= c_3_reg_389;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                c_reg_178 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_144 <= indvar_flatten_next_reg_356;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_144 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    n_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                n_reg_155 <= tmp_mid2_v_reg_372;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                n_reg_155 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tmp_s_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_352_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                tmp_s_reg_166 <= tmp_9_reg_424;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                tmp_s_reg_166 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ifzero_reg_395_pp0_iter3_reg = ap_const_lv1_1))) then
                bias_addr_read_reg_430 <= m_axi_bias_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                c_3_reg_389 <= c_3_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_212_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                c_mid2_reg_366 <= c_mid2_fu_236_p3;
                exitcond_reg_361 <= exitcond_fu_230_p2;
                sum_reg_378 <= sum_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                c_mid2_reg_366_pp0_iter1_reg <= c_mid2_reg_366;
                exitcond_flatten_reg_352 <= exitcond_flatten_fu_212_p2;
                exitcond_flatten_reg_352_pp0_iter1_reg <= exitcond_flatten_reg_352;
                exitcond_flatten_reg_352_pp0_iter2_reg <= exitcond_flatten_reg_352_pp0_iter1_reg;
                exitcond_flatten_reg_352_pp0_iter3_reg <= exitcond_flatten_reg_352_pp0_iter2_reg;
                exitcond_reg_361_pp0_iter1_reg <= exitcond_reg_361;
                exitcond_reg_361_pp0_iter2_reg <= exitcond_reg_361_pp0_iter1_reg;
                ifzero_reg_395_pp0_iter2_reg <= ifzero_reg_395;
                ifzero_reg_395_pp0_iter3_reg <= ifzero_reg_395_pp0_iter2_reg;
                ifzero_reg_395_pp0_iter4_reg <= ifzero_reg_395_pp0_iter3_reg;
                tmp_mid2_v_reg_372_pp0_iter1_reg <= tmp_mid2_v_reg_372;
                tmp_mid2_v_reg_372_pp0_iter2_reg <= tmp_mid2_v_reg_372_pp0_iter1_reg;
                tmp_mid2_v_reg_372_pp0_iter3_reg <= tmp_mid2_v_reg_372_pp0_iter2_reg;
                tmp_mid2_v_reg_372_pp0_iter4_reg <= tmp_mid2_v_reg_372_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ifzero_reg_395 <= ifzero_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                indvar_flatten_next_reg_356 <= indvar_flatten_next_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_352_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                input_0_0_load_reg_409 <= input_0_0_q0;
                weights_addr_read_reg_404 <= m_axi_weights_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ifzero_reg_395_pp0_iter4_reg = ap_const_lv1_1))) then
                tmp_6_reg_435 <= grp_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_352_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_8_reg_414 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_352_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                tmp_9_reg_424 <= grp_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_212_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_mid2_v_reg_372 <= tmp_mid2_v_fu_244_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    weights_offset_cast_reg_347(29 downto 0) <= weights_offset_cast_fu_208_p1(29 downto 0);
            end if;
        end if;
    end process;
    weights_offset_cast_reg_347(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_sig_ioackin_m_axi_bias_ARREADY, exitcond_flatten_fu_212_p2, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_sig_ioackin_m_axi_bias_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_212_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_212_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state33 <= ap_CS_fsm(12);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state9_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state9_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_const_boolean_1 = ap_block_state9_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(m_axi_weights_RVALID, m_axi_bias_RVALID, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_352_pp0_iter1_reg, ap_enable_reg_pp0_iter3, ifzero_reg_395_pp0_iter3_reg)
    begin
                ap_block_pp0_stage3_11001 <= (((m_axi_bias_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ifzero_reg_395_pp0_iter3_reg = ap_const_lv1_1)) or ((exitcond_flatten_reg_352_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(m_axi_weights_RVALID, m_axi_bias_RVALID, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_352_pp0_iter1_reg, ap_enable_reg_pp0_iter3, ifzero_reg_395_pp0_iter3_reg)
    begin
                ap_block_pp0_stage3_subdone <= (((m_axi_bias_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ifzero_reg_395_pp0_iter3_reg = ap_const_lv1_1)) or ((exitcond_flatten_reg_352_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage3_iter1_assign_proc : process(m_axi_weights_RVALID, exitcond_flatten_reg_352_pp0_iter1_reg)
    begin
                ap_block_state16_pp0_stage3_iter1 <= ((exitcond_flatten_reg_352_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_weights_RVALID = ap_const_logic_0));
    end process;

        ap_block_state17_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_pp0_stage3_iter3_assign_proc : process(m_axi_bias_RVALID, ifzero_reg_395_pp0_iter3_reg)
    begin
                ap_block_state26_pp0_stage3_iter3 <= ((m_axi_bias_RVALID = ap_const_logic_0) and (ifzero_reg_395_pp0_iter3_reg = ap_const_lv1_1));
    end process;

        ap_block_state27_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(exitcond_flatten_reg_352, ap_sig_ioackin_m_axi_weights_ARREADY)
    begin
                ap_block_state9_io <= ((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_sig_ioackin_m_axi_weights_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_641_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_352)
    begin
                ap_condition_641 <= ((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(exitcond_flatten_fu_212_p2)
    begin
        if ((exitcond_flatten_fu_212_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_phi_fu_182_p4_assign_proc : process(exitcond_flatten_reg_352, ap_enable_reg_pp0_iter1, c_reg_178, ap_CS_fsm_pp0_stage0, c_3_reg_389, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_c_phi_fu_182_p4 <= c_3_reg_389;
        else 
            ap_phi_mux_c_phi_fu_182_p4 <= c_reg_178;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_148_p4_assign_proc : process(exitcond_flatten_reg_352, ap_enable_reg_pp0_iter1, indvar_flatten_reg_144, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_356, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_148_p4 <= indvar_flatten_next_reg_356;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_148_p4 <= indvar_flatten_reg_144;
        end if; 
    end process;


    ap_phi_mux_n_phi_fu_159_p4_assign_proc : process(exitcond_flatten_reg_352, ap_enable_reg_pp0_iter1, n_reg_155, ap_CS_fsm_pp0_stage0, tmp_mid2_v_reg_372, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_n_phi_fu_159_p4 <= tmp_mid2_v_reg_372;
        else 
            ap_phi_mux_n_phi_fu_159_p4 <= n_reg_155;
        end if; 
    end process;


    ap_phi_mux_tmp_s_phi_fu_170_p4_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter3, tmp_s_reg_166, exitcond_flatten_reg_352_pp0_iter3_reg, tmp_9_reg_424)
    begin
        if (((exitcond_flatten_reg_352_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            ap_phi_mux_tmp_s_phi_fu_170_p4 <= tmp_9_reg_424;
        else 
            ap_phi_mux_tmp_s_phi_fu_170_p4 <= tmp_s_reg_166;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_bias_ARREADY_assign_proc : process(m_axi_bias_ARREADY, ap_reg_ioackin_m_axi_bias_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_bias_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_bias_ARREADY <= m_axi_bias_ARREADY;
        else 
            ap_sig_ioackin_m_axi_bias_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_weights_ARREADY_assign_proc : process(m_axi_weights_ARREADY, ap_reg_ioackin_m_axi_weights_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_weights_ARREADY <= m_axi_weights_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weights_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    bias_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_bias_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            bias_blk_n_AR <= m_axi_bias_ARREADY;
        else 
            bias_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    bias_blk_n_R_assign_proc : process(m_axi_bias_RVALID, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter3, ifzero_reg_395_pp0_iter3_reg)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ifzero_reg_395_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            bias_blk_n_R <= m_axi_bias_RVALID;
        else 
            bias_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    c_3_fu_315_p2 <= std_logic_vector(unsigned(c_mid2_reg_366) + unsigned(ap_const_lv7_1));
    c_mid2_fu_236_p3 <= 
        ap_const_lv7_0 when (exitcond_fu_230_p2(0) = '1') else 
        ap_phi_mux_c_phi_fu_182_p4;
    exitcond_flatten_fu_212_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_148_p4 = ap_const_lv11_4B0) else "0";
    exitcond_fu_230_p2 <= "1" when (ap_phi_mux_c_phi_fu_182_p4 = ap_const_lv7_78) else "0";

    grp_fu_189_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_189_ce <= ap_const_logic_1;
        else 
            grp_fu_189_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_189_p0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage4, tmp_mid2_fu_329_p3, tmp_9_reg_424, ap_enable_reg_pp0_iter2, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_189_p0 <= tmp_9_reg_424;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_189_p0 <= tmp_mid2_fu_329_p3;
        else 
            grp_fu_189_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_189_p1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage4, tmp_8_reg_414, bias_addr_read_reg_430, ap_enable_reg_pp0_iter2, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_189_p1 <= bias_addr_read_reg_430;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_189_p1 <= tmp_8_reg_414;
        else 
            grp_fu_189_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_193_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_193_ce <= ap_const_logic_1;
        else 
            grp_fu_193_ce <= ap_const_logic_0;
        end if; 
    end process;

    ifzero_fu_320_p2 <= "1" when (c_3_reg_389 = ap_const_lv7_78) else "0";
    indvar_flatten_next_fu_218_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_148_p4) + unsigned(ap_const_lv11_1));
    input_0_0_address0 <= tmp_7_fu_325_p1(7 - 1 downto 0);

    input_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_0_0_ce0 <= ap_const_logic_1;
        else 
            input_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bias_ARADDR <= sext2_fu_197_p1(32 - 1 downto 0);
    m_axi_bias_ARBURST <= ap_const_lv2_0;
    m_axi_bias_ARCACHE <= ap_const_lv4_0;
    m_axi_bias_ARID <= ap_const_lv1_0;
    m_axi_bias_ARLEN <= ap_const_lv32_A;
    m_axi_bias_ARLOCK <= ap_const_lv2_0;
    m_axi_bias_ARPROT <= ap_const_lv3_0;
    m_axi_bias_ARQOS <= ap_const_lv4_0;
    m_axi_bias_ARREGION <= ap_const_lv4_0;
    m_axi_bias_ARSIZE <= ap_const_lv3_0;
    m_axi_bias_ARUSER <= ap_const_lv1_0;

    m_axi_bias_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_m_axi_bias_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_bias_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            m_axi_bias_ARVALID <= ap_const_logic_1;
        else 
            m_axi_bias_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bias_AWADDR <= ap_const_lv32_0;
    m_axi_bias_AWBURST <= ap_const_lv2_0;
    m_axi_bias_AWCACHE <= ap_const_lv4_0;
    m_axi_bias_AWID <= ap_const_lv1_0;
    m_axi_bias_AWLEN <= ap_const_lv32_0;
    m_axi_bias_AWLOCK <= ap_const_lv2_0;
    m_axi_bias_AWPROT <= ap_const_lv3_0;
    m_axi_bias_AWQOS <= ap_const_lv4_0;
    m_axi_bias_AWREGION <= ap_const_lv4_0;
    m_axi_bias_AWSIZE <= ap_const_lv3_0;
    m_axi_bias_AWUSER <= ap_const_lv1_0;
    m_axi_bias_AWVALID <= ap_const_logic_0;
    m_axi_bias_BREADY <= ap_const_logic_0;

    m_axi_bias_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ifzero_reg_395_pp0_iter3_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ifzero_reg_395_pp0_iter3_reg = ap_const_lv1_1))) then 
            m_axi_bias_RREADY <= ap_const_logic_1;
        else 
            m_axi_bias_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_bias_WDATA <= ap_const_lv32_0;
    m_axi_bias_WID <= ap_const_lv1_0;
    m_axi_bias_WLAST <= ap_const_logic_0;
    m_axi_bias_WSTRB <= ap_const_lv4_0;
    m_axi_bias_WUSER <= ap_const_lv1_0;
    m_axi_bias_WVALID <= ap_const_logic_0;
    m_axi_weights_ARADDR <= sum_cast_fu_305_p1(32 - 1 downto 0);
    m_axi_weights_ARBURST <= ap_const_lv2_0;
    m_axi_weights_ARCACHE <= ap_const_lv4_0;
    m_axi_weights_ARID <= ap_const_lv1_0;
    m_axi_weights_ARLEN <= ap_const_lv32_1;
    m_axi_weights_ARLOCK <= ap_const_lv2_0;
    m_axi_weights_ARPROT <= ap_const_lv3_0;
    m_axi_weights_ARQOS <= ap_const_lv4_0;
    m_axi_weights_ARREGION <= ap_const_lv4_0;
    m_axi_weights_ARSIZE <= ap_const_lv3_0;
    m_axi_weights_ARUSER <= ap_const_lv1_0;

    m_axi_weights_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_352, ap_reg_ioackin_m_axi_weights_ARREADY, ap_block_pp0_stage1_01001)
    begin
        if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_weights_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weights_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_AWADDR <= ap_const_lv32_0;
    m_axi_weights_AWBURST <= ap_const_lv2_0;
    m_axi_weights_AWCACHE <= ap_const_lv4_0;
    m_axi_weights_AWID <= ap_const_lv1_0;
    m_axi_weights_AWLEN <= ap_const_lv32_0;
    m_axi_weights_AWLOCK <= ap_const_lv2_0;
    m_axi_weights_AWPROT <= ap_const_lv3_0;
    m_axi_weights_AWQOS <= ap_const_lv4_0;
    m_axi_weights_AWREGION <= ap_const_lv4_0;
    m_axi_weights_AWSIZE <= ap_const_lv3_0;
    m_axi_weights_AWUSER <= ap_const_lv1_0;
    m_axi_weights_AWVALID <= ap_const_logic_0;
    m_axi_weights_BREADY <= ap_const_logic_0;

    m_axi_weights_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_352_pp0_iter1_reg, ap_block_pp0_stage3_11001)
    begin
        if (((exitcond_flatten_reg_352_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            m_axi_weights_RREADY <= ap_const_logic_1;
        else 
            m_axi_weights_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_WDATA <= ap_const_lv32_0;
    m_axi_weights_WID <= ap_const_lv1_0;
    m_axi_weights_WLAST <= ap_const_logic_0;
    m_axi_weights_WSTRB <= ap_const_lv4_0;
    m_axi_weights_WUSER <= ap_const_lv1_0;
    m_axi_weights_WVALID <= ap_const_logic_0;
    n_1_fu_224_p2 <= std_logic_vector(unsigned(ap_phi_mux_n_phi_fu_159_p4) + unsigned(ap_const_lv4_1));
    output_r_address0 <= tmp_mid2_26_fu_337_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_6_reg_435;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ifzero_reg_395_pp0_iter4_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ifzero_reg_395_pp0_iter4_reg = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl6_cast_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_264_p3),12));
    p_shl_cast_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_252_p3),12));
    sext2_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias_offset),64));
        sum_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_reg_378),64));

    sum_fu_300_p2 <= std_logic_vector(unsigned(weights_offset_cast_reg_347) + unsigned(tmp_88_cast_fu_296_p1));
    tmp_61_fu_264_p3 <= (tmp_mid2_v_fu_244_p3 & ap_const_lv3_0);
    tmp_62_fu_276_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_260_p1) - unsigned(p_shl6_cast_fu_272_p1));
    tmp_63_fu_290_p2 <= std_logic_vector(signed(tmp_87_cast_fu_282_p1) + signed(tmp_7_cast_fu_286_p1));
    tmp_7_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_mid2_fu_236_p3),13));
    tmp_7_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_mid2_reg_366_pp0_iter1_reg),64));
        tmp_87_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_62_fu_276_p2),13));

        tmp_88_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_63_fu_290_p2),32));

    tmp_fu_252_p3 <= (tmp_mid2_v_fu_244_p3 & ap_const_lv7_0);
    tmp_mid2_26_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_v_reg_372_pp0_iter4_reg),64));
    tmp_mid2_fu_329_p3 <= 
        ap_const_lv32_0 when (exitcond_reg_361_pp0_iter2_reg(0) = '1') else 
        ap_phi_mux_tmp_s_phi_fu_170_p4;
    tmp_mid2_v_fu_244_p3 <= 
        n_1_fu_224_p2 when (exitcond_fu_230_p2(0) = '1') else 
        ap_phi_mux_n_phi_fu_159_p4;

    weights_blk_n_AR_assign_proc : process(m_axi_weights_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten_reg_352)
    begin
        if (((exitcond_flatten_reg_352 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            weights_blk_n_AR <= m_axi_weights_ARREADY;
        else 
            weights_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weights_blk_n_R_assign_proc : process(m_axi_weights_RVALID, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, exitcond_flatten_reg_352_pp0_iter1_reg)
    begin
        if (((exitcond_flatten_reg_352_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            weights_blk_n_R <= m_axi_weights_RVALID;
        else 
            weights_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    weights_offset_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_offset),32));
end behav;
