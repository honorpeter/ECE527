-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights_ce0 : OUT STD_LOGIC;
    weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten4_reg_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_215 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_226 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_reg_237 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next3_fu_286_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_next3_reg_778 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_flatten_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_mid_fu_298_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_mid_reg_791 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_v_fu_312_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_reg_797 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_mid2_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_mid2_reg_802 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_180_cast_fu_353_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_180_cast_reg_807 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_mid2_fu_390_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_mid2_reg_812 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_41_fu_398_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_41_reg_821 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_154_fu_435_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_154_reg_827 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_flatten4_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_832 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten4_reg_832_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_832_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next4_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next4_reg_836 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_14_mid2_v_fu_482_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_mid2_v_reg_841 : STD_LOGIC_VECTOR (2 downto 0);
    signal ci_mid2_fu_520_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ci_mid2_reg_848 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_mid2_fu_532_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_mid2_reg_855 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_157_fu_552_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_157_reg_861 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_166_fu_564_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_166_reg_866 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next_fu_575_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_next_reg_872 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_165_fu_672_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_165_reg_877 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_173_fu_726_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_173_reg_882 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal weights_load_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal input_load_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_2_fu_740_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ci_2_reg_907 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state8_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_155_fu_748_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_155_reg_927 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_4_fu_753_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_4_reg_932 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next2_fu_764_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next2_reg_937 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_load_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_12_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal indvar_flatten2_reg_146 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal co_reg_157 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten3_reg_169 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_reg_181 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_192 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten4_phi_fu_208_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_m_phi_fu_219_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_230_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_n_phi_fu_241_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_sum_2_phi_fu_252_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ci_phi_fu_264_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_198_cast_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_205_cast_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_189_cast_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_271_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal co_3_fu_306_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_323_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_335_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_331_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_343_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_150_fu_347_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_2_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_mid_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_152_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_3_fu_380_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_mid2_cast_fu_405_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_151_fu_357_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_153_fu_409_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_148_fu_423_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_415_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_cast_fu_441_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_462_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_mid_fu_474_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_mid_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_2_fu_508_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_cast_mid1_fu_528_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_445_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_mid1_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_149_fu_545_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_cast_fu_560_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_569_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_16_mid2_v_v_fu_586_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_mid2_v_fu_589_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_158_fu_604_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_159_fu_615_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl10_cast_fu_611_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl11_cast_fu_622_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_160_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_193_cast_fu_632_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_mid2_cast_fu_594_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_161_fu_636_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_162_fu_642_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_163_fu_654_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_cast_fu_646_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl9_cast_fu_662_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_164_fu_666_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_mid2_cast_fu_601_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_167_fu_681_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_199_cast_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl7_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_168_fu_692_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_mid2_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_169_fu_698_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_171_fu_708_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_170_fu_704_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_712_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_172_fu_720_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_mid2_cast_fu_598_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_cast_fu_745_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten28_op_fu_758_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv1_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv1_fadd_32ns_3bkb_U40 : component conv1_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_271_p0,
        din1 => grp_fu_271_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_271_p2);

    conv1_fmul_32ns_3cud_U41 : component conv1_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_load_reg_897,
        din1 => input_load_reg_902,
        ce => ap_const_logic_1,
        dout => grp_fu_276_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ci_reg_260 <= ci_2_reg_907;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ci_reg_260 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    co_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                co_reg_157 <= tmp_mid2_v_reg_797;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                co_reg_157 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                h_reg_181 <= tmp_mid2_41_reg_821;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_reg_181 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                indvar_flatten2_reg_146 <= indvar_flatten_next3_reg_778;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten2_reg_146 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                indvar_flatten3_reg_169 <= indvar_flatten_next2_reg_937;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten3_reg_169 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten4_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten4_reg_204 <= indvar_flatten_next4_reg_836;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten4_reg_204 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_226 <= indvar_flatten_next_reg_872;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_226 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    m_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                m_reg_215 <= tmp_14_mid2_v_reg_841;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_reg_215 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    n_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                n_reg_237 <= tmp_17_mid2_reg_855;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                n_reg_237 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_2_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                sum_2_reg_248 <= grp_fu_271_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_2_reg_248 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                w_reg_192 <= w_4_reg_932;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_reg_192 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bias_load_reg_942 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                ci_2_reg_907 <= ci_2_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_fu_450_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ci_mid2_reg_848 <= ci_mid2_fu_520_p3;
                tmp_157_reg_861 <= tmp_157_fu_552_p3;
                tmp_166_reg_866 <= tmp_166_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten4_reg_832 <= exitcond_flatten4_fu_450_p2;
                exitcond_flatten4_reg_832_pp0_iter1_reg <= exitcond_flatten4_reg_832;
                exitcond_flatten4_reg_832_pp0_iter2_reg <= exitcond_flatten4_reg_832_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                exitcond_flatten_reg_783 <= exitcond_flatten_fu_292_p2;
                h_mid_reg_791 <= h_mid_fu_298_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                indvar_flatten_next2_reg_937 <= indvar_flatten_next2_fu_764_p3;
                tmp_155_reg_927 <= tmp_155_fu_748_p2;
                w_4_reg_932 <= w_4_fu_753_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvar_flatten_next3_reg_778 <= indvar_flatten_next3_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next4_reg_836 <= indvar_flatten_next4_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_fu_450_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_872 <= indvar_flatten_next_fu_575_p3;
                tmp_14_mid2_v_reg_841 <= tmp_14_mid2_v_fu_482_p3;
                tmp_17_mid2_reg_855 <= tmp_17_mid2_fu_532_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                input_load_reg_902 <= input_r_q0;
                weights_load_reg_897 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_12_reg_947 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_154_reg_827(11 downto 1) <= tmp_154_fu_435_p2(11 downto 1);
                    tmp_180_cast_reg_807(9 downto 1) <= tmp_180_cast_fu_353_p1(9 downto 1);
                tmp_mid2_41_reg_821 <= tmp_mid2_41_fu_398_p3;
                    tmp_mid2_reg_802(4 downto 0) <= tmp_mid2_fu_319_p1(4 downto 0);
                tmp_mid2_v_reg_797 <= tmp_mid2_v_fu_312_p3;
                w_mid2_reg_812 <= w_mid2_fu_390_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_165_reg_877 <= tmp_165_fu_672_p2;
                tmp_173_reg_882 <= tmp_173_fu_726_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_832_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_21_reg_912 <= grp_fu_276_p2;
            end if;
        end if;
    end process;
    tmp_mid2_reg_802(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_180_cast_reg_807(0) <= '0';
    tmp_154_reg_827(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten3_fu_280_p2, exitcond_flatten4_fu_450_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_flatten3_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten4_fu_450_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten4_fu_450_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(8);
    ap_CS_fsm_state18 <= ap_CS_fsm(9);
    ap_CS_fsm_state19 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(14);
    ap_CS_fsm_state24 <= ap_CS_fsm(15);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_flatten4_fu_450_p2)
    begin
        if ((exitcond_flatten4_fu_450_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_flatten3_fu_280_p2)
    begin
        if ((((exitcond_flatten3_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ci_phi_fu_264_p4_assign_proc : process(ci_reg_260, exitcond_flatten4_reg_832, ap_CS_fsm_pp0_stage0, ci_2_reg_907, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ci_phi_fu_264_p4 <= ci_2_reg_907;
        else 
            ap_phi_mux_ci_phi_fu_264_p4 <= ci_reg_260;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten4_phi_fu_208_p4_assign_proc : process(indvar_flatten4_reg_204, exitcond_flatten4_reg_832, ap_CS_fsm_pp0_stage0, indvar_flatten_next4_reg_836, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten4_phi_fu_208_p4 <= indvar_flatten_next4_reg_836;
        else 
            ap_phi_mux_indvar_flatten4_phi_fu_208_p4 <= indvar_flatten4_reg_204;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_230_p4_assign_proc : process(indvar_flatten_reg_226, exitcond_flatten4_reg_832, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_872, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_230_p4 <= indvar_flatten_next_reg_872;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_230_p4 <= indvar_flatten_reg_226;
        end if; 
    end process;


    ap_phi_mux_m_phi_fu_219_p4_assign_proc : process(m_reg_215, exitcond_flatten4_reg_832, ap_CS_fsm_pp0_stage0, tmp_14_mid2_v_reg_841, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_m_phi_fu_219_p4 <= tmp_14_mid2_v_reg_841;
        else 
            ap_phi_mux_m_phi_fu_219_p4 <= m_reg_215;
        end if; 
    end process;


    ap_phi_mux_n_phi_fu_241_p4_assign_proc : process(n_reg_237, exitcond_flatten4_reg_832, ap_CS_fsm_pp0_stage0, tmp_17_mid2_reg_855, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten4_reg_832 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_n_phi_fu_241_p4 <= tmp_17_mid2_reg_855;
        else 
            ap_phi_mux_n_phi_fu_241_p4 <= n_reg_237;
        end if; 
    end process;

    ap_phi_mux_sum_2_phi_fu_252_p4 <= sum_2_reg_248;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten3_fu_280_p2)
    begin
        if (((exitcond_flatten3_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= tmp_mid2_reg_802(4 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_2_fu_740_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ci_mid2_reg_848));
    ci_mid2_fu_520_p3 <= 
        ap_const_lv3_0 when (tmp_156_fu_514_p2(0) = '1') else 
        ap_phi_mux_ci_phi_fu_264_p4;
    co_3_fu_306_p2 <= std_logic_vector(unsigned(co_reg_157) + unsigned(ap_const_lv5_1));
    exitcond1_fu_496_p2 <= "1" when (ap_phi_mux_ci_phi_fu_264_p4 = ap_const_lv3_6) else "0";
    exitcond3_mid_fu_374_p2 <= (not_exitcond_flatten_2_fu_363_p2 and exitcond_fu_368_p2);
    exitcond_flatten1_fu_468_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_230_p4 = ap_const_lv6_1E) else "0";
    exitcond_flatten3_fu_280_p2 <= "1" when (indvar_flatten2_reg_146 = ap_const_lv11_640) else "0";
    exitcond_flatten4_fu_450_p2 <= "1" when (ap_phi_mux_indvar_flatten4_phi_fu_208_p4 = ap_const_lv8_96) else "0";
    exitcond_flatten_fu_292_p2 <= "1" when (indvar_flatten3_reg_169 = ap_const_lv8_64) else "0";
    exitcond_fu_368_p2 <= "1" when (w_reg_192 = ap_const_lv4_A) else "0";
    exitcond_mid_fu_502_p2 <= (not_exitcond_flatten_fu_490_p2 and exitcond1_fu_496_p2);

    grp_fu_271_p0_assign_proc : process(sum_2_reg_248, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_phi_mux_sum_2_phi_fu_252_p4, ap_block_pp0_stage3, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_271_p0 <= sum_2_reg_248;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_271_p0 <= ap_phi_mux_sum_2_phi_fu_252_p4;
        else 
            grp_fu_271_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_271_p1_assign_proc : process(ap_CS_fsm_pp0_stage3, tmp_21_reg_912, bias_load_reg_942, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_271_p1 <= bias_load_reg_942;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_271_p1 <= tmp_21_reg_912;
        else 
            grp_fu_271_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_3_fu_380_p2 <= std_logic_vector(unsigned(h_mid_reg_791) + unsigned(ap_const_lv4_1));
    h_mid_fu_298_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_292_p2(0) = '1') else 
        h_reg_181;
    indvar_flatten28_op_fu_758_p2 <= std_logic_vector(unsigned(indvar_flatten3_reg_169) + unsigned(ap_const_lv8_1));
    indvar_flatten_next2_fu_764_p3 <= 
        ap_const_lv8_1 when (exitcond_flatten_reg_783(0) = '1') else 
        indvar_flatten28_op_fu_758_p2;
    indvar_flatten_next3_fu_286_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_146) + unsigned(ap_const_lv11_1));
    indvar_flatten_next4_fu_456_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten4_phi_fu_208_p4) + unsigned(ap_const_lv8_1));
    indvar_flatten_next_fu_575_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten1_fu_468_p2(0) = '1') else 
        indvar_flatten_op_fu_569_p2;
    indvar_flatten_op_fu_569_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_230_p4));
    input_r_address0 <= tmp_198_cast_fu_732_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_462_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_m_phi_fu_219_p4));
    n_2_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(n_mid_fu_474_p3));
    n_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_n_phi_fu_241_p4),4));
    n_cast_mid1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_2_fu_508_p2),4));
    n_mid_fu_474_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten1_fu_468_p2(0) = '1') else 
        ap_phi_mux_n_phi_fu_241_p4;
    not_exitcond_flatten_2_fu_363_p2 <= (exitcond_flatten_reg_783 xor ap_const_lv1_1);
    not_exitcond_flatten_fu_490_p2 <= (exitcond_flatten1_fu_468_p2 xor ap_const_lv1_1);
    output_r_address0 <= tmp_189_cast_fu_771_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_12_reg_947;

    output_r_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_158_fu_604_p3),8));
    p_shl11_cast_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_159_fu_615_p3),8));
    p_shl1_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_fu_423_p3),12));
    p_shl4_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_323_p3),9));
    p_shl5_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_335_p3),9));
    p_shl6_cast_fu_712_p3 <= (tmp_171_fu_708_p1 & ap_const_lv2_0);
        p_shl7_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_167_fu_681_p3),64));

    p_shl8_cast_fu_646_p3 <= (tmp_162_fu_642_p1 & ap_const_lv4_0);
        p_shl9_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_163_fu_654_p3),12));

    p_shl_cast_fu_415_p3 <= (tmp_153_fu_409_p2 & ap_const_lv3_0);
    tmp_13_cast_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_mid2_reg_812),12));
    tmp_148_fu_423_p3 <= (tmp_153_fu_409_p2 & ap_const_lv1_0);
    tmp_149_fu_545_p3 <= 
        w_mid2_reg_812 when (exitcond_flatten1_fu_468_p2(0) = '1') else 
        tmp_18_fu_445_p2;
    tmp_14_mid2_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_mid2_v_reg_841),64));
    tmp_14_mid2_v_fu_482_p3 <= 
        m_1_fu_462_p2 when (exitcond_flatten1_fu_468_p2(0) = '1') else 
        ap_phi_mux_m_phi_fu_219_p4;
    tmp_150_fu_347_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_331_p1) - unsigned(p_shl5_cast_fu_343_p1));
    tmp_151_fu_357_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_331_p1) + unsigned(p_shl5_cast_fu_343_p1));
    tmp_152_fu_385_p2 <= (exitcond_flatten_reg_783 or exitcond3_mid_fu_374_p2);
    tmp_153_fu_409_p2 <= std_logic_vector(unsigned(tmp_mid2_cast_fu_405_p1) + unsigned(tmp_151_fu_357_p2));
    tmp_154_fu_435_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_415_p3) + unsigned(p_shl1_cast_fu_431_p1));
    tmp_155_fu_748_p2 <= std_logic_vector(unsigned(tmp_154_reg_827) + unsigned(tmp_13_cast_fu_745_p1));
    tmp_156_fu_514_p2 <= (exitcond_mid_fu_502_p2 or exitcond_flatten1_fu_468_p2);
    tmp_157_fu_552_p3 <= 
        tmp_18_mid1_fu_540_p2 when (exitcond_mid_fu_502_p2(0) = '1') else 
        tmp_149_fu_545_p3;
    tmp_158_fu_604_p3 <= (ci_mid2_reg_848 & ap_const_lv4_0);
    tmp_159_fu_615_p3 <= (ci_mid2_reg_848 & ap_const_lv1_0);
    tmp_160_fu_626_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_611_p1) - unsigned(p_shl11_cast_fu_622_p1));
    tmp_161_fu_636_p2 <= std_logic_vector(signed(tmp_193_cast_fu_632_p1) + signed(tmp_16_mid2_cast_fu_594_p1));
    tmp_162_fu_642_p1 <= tmp_161_fu_636_p2(8 - 1 downto 0);
    tmp_163_fu_654_p3 <= (tmp_161_fu_636_p2 & ap_const_lv1_0);
    tmp_164_fu_666_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_646_p3) - unsigned(p_shl9_cast_fu_662_p1));
    tmp_165_fu_672_p2 <= std_logic_vector(unsigned(tmp_164_fu_666_p2) + unsigned(tmp_19_mid2_cast_fu_601_p1));
    tmp_166_fu_564_p2 <= std_logic_vector(signed(tmp_180_cast_reg_807) + signed(tmp_20_cast_fu_560_p1));
    tmp_167_fu_681_p3 <= (tmp_166_reg_866 & ap_const_lv2_0);
    tmp_168_fu_692_p2 <= std_logic_vector(signed(tmp_199_cast_fu_678_p1) + signed(p_shl7_fu_688_p1));
    tmp_169_fu_698_p2 <= std_logic_vector(unsigned(tmp_168_fu_692_p2) + unsigned(tmp_14_mid2_fu_583_p1));
    tmp_16_mid2_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_mid2_v_fu_589_p2),9));
    tmp_16_mid2_v_fu_589_p2 <= std_logic_vector(unsigned(tmp_16_mid2_v_v_fu_586_p1) + unsigned(tmp_mid2_41_reg_821));
    tmp_16_mid2_v_v_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_mid2_v_reg_841),4));
    tmp_170_fu_704_p1 <= tmp_169_fu_698_p2(13 - 1 downto 0);
    tmp_171_fu_708_p1 <= tmp_169_fu_698_p2(11 - 1 downto 0);
    tmp_172_fu_720_p2 <= std_logic_vector(unsigned(tmp_170_fu_704_p1) + unsigned(p_shl6_cast_fu_712_p3));
    tmp_173_fu_726_p2 <= std_logic_vector(unsigned(tmp_172_fu_720_p2) + unsigned(tmp_17_mid2_cast_fu_598_p1));
    tmp_17_mid2_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_mid2_reg_855),13));
    tmp_17_mid2_fu_532_p3 <= 
        n_2_fu_508_p2 when (exitcond_mid_fu_502_p2(0) = '1') else 
        n_mid_fu_474_p3;
        tmp_180_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_150_fu_347_p2),10));

    tmp_189_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_reg_927),64));
    tmp_18_fu_445_p2 <= std_logic_vector(unsigned(w_mid2_reg_812) + unsigned(n_cast_fu_441_p1));
    tmp_18_mid1_fu_540_p2 <= std_logic_vector(unsigned(n_cast_mid1_fu_528_p1) + unsigned(w_mid2_reg_812));
        tmp_193_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_160_fu_626_p2),9));

    tmp_198_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_165_reg_877),64));
        tmp_199_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_166_reg_866),64));

    tmp_19_mid2_cast_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_157_reg_861),12));
    tmp_205_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_173_reg_882),64));
    tmp_20_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_mid2_fu_520_p3),10));
    tmp_fu_323_p3 <= (tmp_mid2_v_fu_312_p3 & ap_const_lv3_0);
    tmp_mid2_41_fu_398_p3 <= 
        h_3_fu_380_p2 when (exitcond3_mid_fu_374_p2(0) = '1') else 
        h_mid_reg_791;
    tmp_mid2_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_41_fu_398_p3),9));
    tmp_mid2_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_v_fu_312_p3),64));
    tmp_mid2_v_fu_312_p3 <= 
        co_3_fu_306_p2 when (exitcond_flatten_reg_783(0) = '1') else 
        co_reg_157;
    tmp_s_fu_335_p3 <= (tmp_mid2_v_fu_312_p3 & ap_const_lv1_0);
    w_4_fu_753_p2 <= std_logic_vector(unsigned(w_mid2_reg_812) + unsigned(ap_const_lv4_1));
    w_mid2_fu_390_p3 <= 
        ap_const_lv4_0 when (tmp_152_fu_385_p2(0) = '1') else 
        w_reg_192;
    weights_address0 <= tmp_205_cast_fu_736_p1(12 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
