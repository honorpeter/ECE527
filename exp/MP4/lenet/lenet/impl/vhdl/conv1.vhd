-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1 is
generic (
    C_M_AXI_DATA_INPUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_INPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_INPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WEIGHT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WEIGHT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_BIAS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_BIAS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_OUTPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_OUTPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_INPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_INPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_INPUT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_WEIGHT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_WEIGHT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_WEIGHT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_BIAS_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_BIAS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_BIAS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_OUTPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_OUTPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_OUTPUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DATA_INPUT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_INPUT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_INPUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_INPUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_INPUT_WREADY : IN STD_LOGIC;
    m_axi_DATA_INPUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_INPUT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_INPUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_INPUT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_INPUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_INPUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RVALID : IN STD_LOGIC;
    m_axi_DATA_INPUT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_INPUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RLAST : IN STD_LOGIC;
    m_axi_DATA_INPUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_BVALID : IN STD_LOGIC;
    m_axi_DATA_INPUT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_INPUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_WEIGHT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_WREADY : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_WEIGHT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_WEIGHT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RVALID : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RLAST : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_BVALID : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_BIAS_AWREADY : IN STD_LOGIC;
    m_axi_DATA_BIAS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_BIAS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_WVALID : OUT STD_LOGIC;
    m_axi_DATA_BIAS_WREADY : IN STD_LOGIC;
    m_axi_DATA_BIAS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_DATA_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_BIAS_WLAST : OUT STD_LOGIC;
    m_axi_DATA_BIAS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_BIAS_ARREADY : IN STD_LOGIC;
    m_axi_DATA_BIAS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_BIAS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RVALID : IN STD_LOGIC;
    m_axi_DATA_BIAS_RREADY : OUT STD_LOGIC;
    m_axi_DATA_BIAS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_DATA_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RLAST : IN STD_LOGIC;
    m_axi_DATA_BIAS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_BVALID : IN STD_LOGIC;
    m_axi_DATA_BIAS_BREADY : OUT STD_LOGIC;
    m_axi_DATA_BIAS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_OUTPUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_WREADY : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_OUTPUT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_OUTPUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RVALID : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RLAST : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_BVALID : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_BUSER_WIDTH-1 downto 0);
    s_axi_CTL_AWVALID : IN STD_LOGIC;
    s_axi_CTL_AWREADY : OUT STD_LOGIC;
    s_axi_CTL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_WVALID : IN STD_LOGIC;
    s_axi_CTL_WREADY : OUT STD_LOGIC;
    s_axi_CTL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTL_ARVALID : IN STD_LOGIC;
    s_axi_CTL_ARREADY : OUT STD_LOGIC;
    s_axi_CTL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_RVALID : OUT STD_LOGIC;
    s_axi_CTL_RREADY : IN STD_LOGIC;
    s_axi_CTL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTL_BVALID : OUT STD_LOGIC;
    s_axi_CTL_BREADY : IN STD_LOGIC;
    s_axi_CTL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv1,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=64204,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=10,HLS_SYN_FF=7162,HLS_SYN_LUT=7305,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv13_1260 : STD_LOGIC_VECTOR (12 downto 0) := "1001001100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_12 : STD_LOGIC_VECTOR (7 downto 0) := "00010010";
    constant ap_const_lv8_13 : STD_LOGIC_VECTOR (7 downto 0) := "00010011";
    constant ap_const_lv8_14 : STD_LOGIC_VECTOR (7 downto 0) := "00010100";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv8_17 : STD_LOGIC_VECTOR (7 downto 0) := "00010111";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal weights : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_INPUT_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal DATA_INPUT_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond8_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal DATA_WEIGHT_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal exitcond5_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal exitcond_flatten1_reg_2166 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_2166_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond_flatten1_reg_2166_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal DATA_OUTPUT_blk_n_W : STD_LOGIC;
    signal DATA_OUTPUT_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal DATA_INPUT_AWREADY : STD_LOGIC;
    signal DATA_INPUT_WREADY : STD_LOGIC;
    signal DATA_INPUT_ARVALID : STD_LOGIC;
    signal DATA_INPUT_ARREADY : STD_LOGIC;
    signal DATA_INPUT_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_INPUT_RVALID : STD_LOGIC;
    signal DATA_INPUT_RREADY : STD_LOGIC;
    signal DATA_INPUT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_INPUT_RLAST : STD_LOGIC;
    signal DATA_INPUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_INPUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_INPUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_INPUT_BVALID : STD_LOGIC;
    signal DATA_INPUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_INPUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_INPUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_AWREADY : STD_LOGIC;
    signal DATA_WEIGHT_WREADY : STD_LOGIC;
    signal DATA_WEIGHT_ARVALID : STD_LOGIC;
    signal DATA_WEIGHT_ARREADY : STD_LOGIC;
    signal DATA_WEIGHT_RVALID : STD_LOGIC;
    signal DATA_WEIGHT_RREADY : STD_LOGIC;
    signal DATA_WEIGHT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_WEIGHT_RLAST : STD_LOGIC;
    signal DATA_WEIGHT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_BVALID : STD_LOGIC;
    signal DATA_WEIGHT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_AWREADY : STD_LOGIC;
    signal DATA_BIAS_WREADY : STD_LOGIC;
    signal DATA_BIAS_ARVALID : STD_LOGIC;
    signal DATA_BIAS_ARREADY : STD_LOGIC;
    signal DATA_BIAS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BIAS_RVALID : STD_LOGIC;
    signal DATA_BIAS_RREADY : STD_LOGIC;
    signal DATA_BIAS_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BIAS_RLAST : STD_LOGIC;
    signal DATA_BIAS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_BVALID : STD_LOGIC;
    signal DATA_BIAS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_AWVALID : STD_LOGIC;
    signal DATA_OUTPUT_AWREADY : STD_LOGIC;
    signal DATA_OUTPUT_WVALID : STD_LOGIC;
    signal DATA_OUTPUT_WREADY : STD_LOGIC;
    signal DATA_OUTPUT_ARREADY : STD_LOGIC;
    signal DATA_OUTPUT_RVALID : STD_LOGIC;
    signal DATA_OUTPUT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_OUTPUT_RLAST : STD_LOGIC;
    signal DATA_OUTPUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_OUTPUT_BVALID : STD_LOGIC;
    signal DATA_OUTPUT_BREADY : STD_LOGIC;
    signal DATA_OUTPUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_OUTPUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten1_reg_749 : STD_LOGIC_VECTOR (12 downto 0);
    signal co_reg_760 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_771 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_reg_782 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_794 : STD_LOGIC_VECTOR (4 downto 0);
    signal weights_oc_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state25_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state38_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state51_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state64_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state77_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state90_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state103_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state116_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state129_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state142_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state155_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal weights_oc_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state29_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state42_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state55_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state68_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_state81_pp0_stage6_iter4 : BOOLEAN;
    signal ap_block_state94_pp0_stage6_iter5 : BOOLEAN;
    signal ap_block_state107_pp0_stage6_iter6 : BOOLEAN;
    signal ap_block_state120_pp0_stage6_iter7 : BOOLEAN;
    signal ap_block_state133_pp0_stage6_iter8 : BOOLEAN;
    signal ap_block_state146_pp0_stage6_iter9 : BOOLEAN;
    signal ap_block_state159_pp0_stage6_iter10 : BOOLEAN;
    signal ap_sig_ioackin_DATA_OUTPUT_AWREADY : STD_LOGIC;
    signal ap_block_state159_io : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state33_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_state46_pp0_stage10_iter1 : BOOLEAN;
    signal ap_block_state59_pp0_stage10_iter2 : BOOLEAN;
    signal ap_block_state72_pp0_stage10_iter3 : BOOLEAN;
    signal ap_block_state85_pp0_stage10_iter4 : BOOLEAN;
    signal ap_block_state98_pp0_stage10_iter5 : BOOLEAN;
    signal ap_block_state111_pp0_stage10_iter6 : BOOLEAN;
    signal ap_block_state124_pp0_stage10_iter7 : BOOLEAN;
    signal ap_block_state137_pp0_stage10_iter8 : BOOLEAN;
    signal ap_block_state150_pp0_stage10_iter9 : BOOLEAN;
    signal ap_block_state163_pp0_stage10_iter10 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_oc_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_oc_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state26_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state39_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state52_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state65_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state78_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state91_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state104_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state117_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state130_pp0_stage3_iter8 : BOOLEAN;
    signal ap_block_state143_pp0_stage3_iter9 : BOOLEAN;
    signal ap_block_state156_pp0_stage3_iter10 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state30_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state43_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state56_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_state69_pp0_stage7_iter3 : BOOLEAN;
    signal ap_block_state82_pp0_stage7_iter4 : BOOLEAN;
    signal ap_block_state95_pp0_stage7_iter5 : BOOLEAN;
    signal ap_block_state108_pp0_stage7_iter6 : BOOLEAN;
    signal ap_block_state121_pp0_stage7_iter7 : BOOLEAN;
    signal ap_block_state134_pp0_stage7_iter8 : BOOLEAN;
    signal ap_block_state147_pp0_stage7_iter9 : BOOLEAN;
    signal ap_sig_ioackin_DATA_BIAS_ARREADY : STD_LOGIC;
    signal ap_block_state147_io : BOOLEAN;
    signal ap_block_state160_pp0_stage7_iter10 : BOOLEAN;
    signal ap_sig_ioackin_DATA_OUTPUT_WREADY : STD_LOGIC;
    signal ap_block_state160_io : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state34_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state47_pp0_stage11_iter1 : BOOLEAN;
    signal ap_block_state60_pp0_stage11_iter2 : BOOLEAN;
    signal ap_block_state73_pp0_stage11_iter3 : BOOLEAN;
    signal ap_block_state86_pp0_stage11_iter4 : BOOLEAN;
    signal ap_block_state99_pp0_stage11_iter5 : BOOLEAN;
    signal ap_block_state112_pp0_stage11_iter6 : BOOLEAN;
    signal ap_block_state125_pp0_stage11_iter7 : BOOLEAN;
    signal ap_block_state138_pp0_stage11_iter8 : BOOLEAN;
    signal ap_block_state151_pp0_stage11_iter9 : BOOLEAN;
    signal ap_block_state164_pp0_stage11_iter10 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state27_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state40_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state53_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state66_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state79_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state92_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state105_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state118_pp0_stage4_iter7 : BOOLEAN;
    signal ap_block_state131_pp0_stage4_iter8 : BOOLEAN;
    signal ap_block_state144_pp0_stage4_iter9 : BOOLEAN;
    signal ap_block_state157_pp0_stage4_iter10 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state31_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state44_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_state57_pp0_stage8_iter2 : BOOLEAN;
    signal ap_block_state70_pp0_stage8_iter3 : BOOLEAN;
    signal ap_block_state83_pp0_stage8_iter4 : BOOLEAN;
    signal ap_block_state96_pp0_stage8_iter5 : BOOLEAN;
    signal ap_block_state109_pp0_stage8_iter6 : BOOLEAN;
    signal ap_block_state122_pp0_stage8_iter7 : BOOLEAN;
    signal ap_block_state135_pp0_stage8_iter8 : BOOLEAN;
    signal ap_block_state148_pp0_stage8_iter9 : BOOLEAN;
    signal ap_block_state161_pp0_stage8_iter10 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_state35_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_state48_pp0_stage12_iter1 : BOOLEAN;
    signal ap_block_state61_pp0_stage12_iter2 : BOOLEAN;
    signal ap_block_state74_pp0_stage12_iter3 : BOOLEAN;
    signal ap_block_state87_pp0_stage12_iter4 : BOOLEAN;
    signal ap_block_state100_pp0_stage12_iter5 : BOOLEAN;
    signal ap_block_state113_pp0_stage12_iter6 : BOOLEAN;
    signal ap_block_state126_pp0_stage12_iter7 : BOOLEAN;
    signal ap_block_state139_pp0_stage12_iter8 : BOOLEAN;
    signal ap_block_state152_pp0_stage12_iter9 : BOOLEAN;
    signal ap_block_state165_pp0_stage12_iter10 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal reg_871 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state28_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state41_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state54_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state67_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_state80_pp0_stage5_iter4 : BOOLEAN;
    signal ap_block_state93_pp0_stage5_iter5 : BOOLEAN;
    signal ap_block_state106_pp0_stage5_iter6 : BOOLEAN;
    signal ap_block_state119_pp0_stage5_iter7 : BOOLEAN;
    signal ap_block_state132_pp0_stage5_iter8 : BOOLEAN;
    signal ap_block_state145_pp0_stage5_iter9 : BOOLEAN;
    signal ap_block_state158_pp0_stage5_iter10 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state32_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_state45_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_state58_pp0_stage9_iter2 : BOOLEAN;
    signal ap_block_state71_pp0_stage9_iter3 : BOOLEAN;
    signal ap_block_state84_pp0_stage9_iter4 : BOOLEAN;
    signal ap_block_state97_pp0_stage9_iter5 : BOOLEAN;
    signal ap_block_state110_pp0_stage9_iter6 : BOOLEAN;
    signal ap_block_state123_pp0_stage9_iter7 : BOOLEAN;
    signal ap_block_state136_pp0_stage9_iter8 : BOOLEAN;
    signal ap_block_state149_pp0_stage9_iter9 : BOOLEAN;
    signal ap_block_state162_pp0_stage9_iter10 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state23_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state75_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state88_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state101_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state114_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state127_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state140_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state153_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_896 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_805_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten1_reg_2166_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten1_reg_2166_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal exitcond_flatten1_reg_2166_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal exitcond_flatten1_reg_2166_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_931 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_state24_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state37_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state63_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state76_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state89_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state102_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state115_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state128_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state141_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state154_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond_flatten1_reg_2166_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal exitcond_flatten1_reg_2166_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten1_reg_2166_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal exitcond_flatten1_reg_2166_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_957 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_2048 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_991_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_cast_reg_2053 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_1005_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_2058 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_cast_fu_1019_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_cast_reg_2063 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_fu_1029_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_2071 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_7_fu_1035_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_2076 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond9_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1047_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_reg_2081 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_ioackin_DATA_INPUT_ARREADY : STD_LOGIC;
    signal tmp_14_cast_fu_1062_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_cast_reg_2092 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_1_fu_1071_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_2100 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal tmp_14_fu_1081_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_reg_2105 : STD_LOGIC_VECTOR (11 downto 0);
    signal DATA_INPUT_addr_read_reg_2110 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond7_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_2_fu_1096_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_2119 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_1118_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_2124 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_fu_1130_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_2132 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_73_fu_1161_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_reg_2137 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond6_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_addr_reg_2142 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_1184_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_2151 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state21 : BOOLEAN;
    signal tmp_74_fu_1194_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_reg_2156 : STD_LOGIC_VECTOR (63 downto 0);
    signal DATA_WEIGHT_addr_rea_reg_2161 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten1_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_1205_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next1_reg_2170 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_flatten_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2175 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_mid2_fu_1223_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_mid2_reg_2185_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal weights_oc_0_load_m_fu_1235_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_oc_0_load_m_reg_2193 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_1241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_2198 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_mid_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_mid_reg_2226 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_mid2_fu_1269_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_mid2_reg_2235_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_op_fu_1277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_reg_2249 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_mid_fu_1283_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_mid_reg_2254 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_fu_1310_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_mid2_reg_2272_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal w_1_fu_1329_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_1_reg_2286 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_0_2_fu_1367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_0_2_reg_2310 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_0_3_fu_1384_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_0_3_reg_2323 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_fu_1439_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_reg_2346 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_0_4_fu_1458_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_0_4_reg_2359 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_27_fu_1597_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_27_reg_2422 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_fu_1622_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_reg_2429 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_1647_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_reg_2438 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_2452 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_0_1_reg_2462 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_next_fu_1678_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next_reg_2467 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_0_2_reg_2487 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_0_3_reg_2497 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_0_3_reg_2497_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_0_4_reg_2522 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_0_4_reg_2522_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_reg_2527 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_reg_2527_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_1_reg_2552 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_1_reg_2552_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_1_reg_2552_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_2_reg_2557 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_2_reg_2557_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_2_reg_2557_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_3_reg_2582 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_3_reg_2582_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_3_reg_2582_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_4_reg_2587 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_4_reg_2587_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_4_reg_2587_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_1_4_reg_2587_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_reg_2612 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_reg_2612_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_reg_2612_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_reg_2612_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_1_reg_2617 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_1_reg_2617_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_1_reg_2617_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_1_reg_2617_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_2_reg_2642 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_2_reg_2642_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_2_reg_2642_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_2_reg_2642_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_2_reg_2642_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_3_reg_2647 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_3_reg_2647_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_3_reg_2647_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_3_reg_2647_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_3_reg_2647_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_4_reg_2662 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_4_reg_2662_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_4_reg_2662_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_4_reg_2662_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_2_4_reg_2662_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_reg_2667 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_reg_2667_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_reg_2667_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_reg_2667_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_reg_2667_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_reg_2667_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_oc_0_load_24_reg_2672 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_1_reg_2677 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_1_reg_2677_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_1_reg_2677_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_1_reg_2677_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_1_reg_2677_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_1_reg_2677_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_2_reg_2682 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_2_reg_2682_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_2_reg_2682_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_2_reg_2682_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_2_reg_2682_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_2_reg_2682_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_oc_0_load_24_reg_2687 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_3_reg_2692 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_3_reg_2692_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_3_reg_2692_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_3_reg_2692_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_3_reg_2692_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_3_reg_2692_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_3_reg_2692_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_4_reg_2697 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_4_reg_2697_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_4_reg_2697_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_4_reg_2697_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_4_reg_2697_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_4_reg_2697_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_3_4_reg_2697_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_reg_2702 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_reg_2702_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_reg_2702_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_reg_2702_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_reg_2702_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_reg_2702_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_reg_2702_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_1_reg_2707 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_1_reg_2707_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_1_reg_2707_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_1_reg_2707_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_1_reg_2707_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_1_reg_2707_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_1_reg_2707_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_1_reg_2707_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_2_reg_2712 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_2_reg_2712_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_2_reg_2712_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_2_reg_2712_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_2_reg_2712_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_2_reg_2712_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_2_reg_2712_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_2_reg_2712_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_3_reg_2717 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_3_reg_2717_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_3_reg_2717_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_3_reg_2717_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_3_reg_2717_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_3_reg_2717_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_3_reg_2717_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_3_reg_2717_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_3_reg_2717_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_4_reg_2722 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_4_reg_2722_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_4_reg_2722_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_4_reg_2722_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_4_reg_2722_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_4_reg_2722_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_4_reg_2722_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_4_reg_2722_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_4_4_reg_2722_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_2_reg_2727 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias6_sum_fu_1960_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal bias6_sum_reg_2732 : STD_LOGIC_VECTOR (30 downto 0);
    signal DATA_BIAS_addr_read_reg_2743 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_2006_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_2748 : STD_LOGIC_VECTOR (63 downto 0);
    signal DATA_OUTPUT_addr_reg_2754 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state23 : STD_LOGIC;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal input_oc_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_oc_0_ce0 : STD_LOGIC;
    signal input_oc_0_we0 : STD_LOGIC;
    signal input_oc_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_oc_0_ce1 : STD_LOGIC;
    signal weights_oc_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_ce0 : STD_LOGIC;
    signal weights_oc_0_we0 : STD_LOGIC;
    signal weights_oc_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_ce1 : STD_LOGIC;
    signal i_reg_694 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_705 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i1_reg_716 : STD_LOGIC_VECTOR (2 downto 0);
    signal j2_reg_727 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_738 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_phi_mux_indvar_flatten1_phi_fu_753_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_co_phi_fu_764_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_775_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_h_phi_fu_786_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_w_phi_fu_798_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_cast_fu_1086_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_m_2_fu_1290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_1_11_fu_1299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_1324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_1342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_2_3_fu_1352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal weights_oc_0_load_3_1_fu_1362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_1379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_1396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_4_1_fu_1406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal weights_oc_0_load_5_1_fu_1416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_1453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_1470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_6_1_fu_1480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal weights_oc_0_load_7_1_fu_1490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_1501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_1512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_8_1_fu_1522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal weights_oc_0_load_9_1_fu_1532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_1543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_1554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_1_12_fu_1564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_1_13_fu_1574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_1661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_1673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_1_14_fu_1689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_1_16_fu_1699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_1710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_1721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_1_17_fu_1731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal weights_oc_0_load_1_18_fu_1741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_1752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_1763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_1_19_fu_1773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal weights_oc_0_load_1_20_fu_1783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_1794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_1805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_1_21_fu_1815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal weights_oc_0_load_1_22_fu_1825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_1836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_1847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_2_5_fu_1857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal weights_oc_0_load_2_7_fu_1867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_1878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_1889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_2_9_fu_1899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_2_11_fu_1909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_1920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_1931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_oc_0_load_2_12_fu_1941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_fu_1952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_1052_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_fu_1167_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias6_sum_cast_fu_1965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output8_sum_fu_2037_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_DATA_INPUT_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_DATA_WEIGHT_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_DATA_WEIGHT_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_DATA_BIAS_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage7_01001 : BOOLEAN;
    signal ap_reg_ioackin_DATA_OUTPUT_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage6_01001 : BOOLEAN;
    signal ap_reg_ioackin_DATA_OUTPUT_WREADY : STD_LOGIC := '0';
    signal grp_fu_805_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_810_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_810_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_814_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_814_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output7_fu_967_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_981_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights3_fu_995_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_1009_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_fu_1043_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_cast_fu_1077_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_1106_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_cast_fu_1102_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_1114_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_cast_fu_1136_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_71_fu_1140_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_86_fu_1149_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_cast_fu_1145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl9_fu_1157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal co_1_fu_1211_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal weights_oc_0_load_m_fu_1235_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_oc_0_load_1_2_fu_1294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_1_dup_fu_1304_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_fu_1317_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_fu_1334_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_2_2_fu_1347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_3_2_fu_1357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_1372_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_76_fu_1389_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_4_2_fu_1401_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_5_2_fu_1411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_s_fu_1426_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_1_mid1_fu_1421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_fu_1432_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_1446_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_81_fu_1463_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_6_2_fu_1475_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_7_2_fu_1485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_1495_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_fu_1506_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_8_2_fu_1517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_9_2_fu_1527_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_77_fu_1537_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_82_fu_1548_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_1_4_fu_1559_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_1_6_fu_1569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_s_fu_1584_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_2_mid1_fu_1579_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_1590_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_1_fu_1609_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_3_mid1_fu_1604_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_fu_1615_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_2_fu_1634_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_4_mid1_fu_1629_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_30_fu_1640_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_37_fu_1654_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_47_fu_1666_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_1_8_fu_1684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_1_15_fu_1694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_1704_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_78_fu_1715_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_1_1_fu_1726_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_1_3_fu_1736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_1746_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_83_fu_1757_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_1_5_fu_1768_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_1_7_fu_1778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_1788_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_fu_1799_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_1_9_fu_1810_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_1_10_fu_1820_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_79_fu_1830_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_fu_1841_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_2_4_fu_1852_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_2_6_fu_1862_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_fu_1872_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_fu_1883_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_2_8_fu_1894_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_load_2_10_fu_1904_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_75_fu_1914_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_80_fu_1925_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_oc_0_load_2_1_fu_1936_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_fu_1946_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_mid2_cast_fu_1957_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_fu_1975_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_1986_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_fu_1982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl2_fu_1993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_mid2_cast_fu_2003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_1997_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_2012_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_2017_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_2028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_2022_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_2031_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_805_ce : STD_LOGIC;
    signal grp_fu_810_ce : STD_LOGIC;
    signal grp_fu_814_ce : STD_LOGIC;
    signal grp_fu_818_ce : STD_LOGIC;
    signal ap_CS_fsm_state166 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state166 : signal is "none";
    signal ap_CS_fsm_state167 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state167 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal weights_oc_0_load_m_fu_1235_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_condition_2971 : BOOLEAN;
    signal ap_condition_2976 : BOOLEAN;
    signal ap_condition_2980 : BOOLEAN;

    component conv1_fadd_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_input_oc_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_weights_oc_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_CTL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_DATA_INPUT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv1_DATA_WEIGHT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv1_DATA_BIAS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv1_DATA_OUTPUT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv1_CTL_s_axi_U : component conv1_CTL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTL_AWVALID,
        AWREADY => s_axi_CTL_AWREADY,
        AWADDR => s_axi_CTL_AWADDR,
        WVALID => s_axi_CTL_WVALID,
        WREADY => s_axi_CTL_WREADY,
        WDATA => s_axi_CTL_WDATA,
        WSTRB => s_axi_CTL_WSTRB,
        ARVALID => s_axi_CTL_ARVALID,
        ARREADY => s_axi_CTL_ARREADY,
        ARADDR => s_axi_CTL_ARADDR,
        RVALID => s_axi_CTL_RVALID,
        RREADY => s_axi_CTL_RREADY,
        RDATA => s_axi_CTL_RDATA,
        RRESP => s_axi_CTL_RRESP,
        BVALID => s_axi_CTL_BVALID,
        BREADY => s_axi_CTL_BREADY,
        BRESP => s_axi_CTL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        input_r => input_r,
        weights => weights,
        bias => bias,
        output_r => output_r);

    conv1_DATA_INPUT_m_axi_U : component conv1_DATA_INPUT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_INPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_INPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_INPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_INPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_INPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_INPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_INPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_INPUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_INPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_INPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_INPUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_INPUT_AWVALID,
        AWREADY => m_axi_DATA_INPUT_AWREADY,
        AWADDR => m_axi_DATA_INPUT_AWADDR,
        AWID => m_axi_DATA_INPUT_AWID,
        AWLEN => m_axi_DATA_INPUT_AWLEN,
        AWSIZE => m_axi_DATA_INPUT_AWSIZE,
        AWBURST => m_axi_DATA_INPUT_AWBURST,
        AWLOCK => m_axi_DATA_INPUT_AWLOCK,
        AWCACHE => m_axi_DATA_INPUT_AWCACHE,
        AWPROT => m_axi_DATA_INPUT_AWPROT,
        AWQOS => m_axi_DATA_INPUT_AWQOS,
        AWREGION => m_axi_DATA_INPUT_AWREGION,
        AWUSER => m_axi_DATA_INPUT_AWUSER,
        WVALID => m_axi_DATA_INPUT_WVALID,
        WREADY => m_axi_DATA_INPUT_WREADY,
        WDATA => m_axi_DATA_INPUT_WDATA,
        WSTRB => m_axi_DATA_INPUT_WSTRB,
        WLAST => m_axi_DATA_INPUT_WLAST,
        WID => m_axi_DATA_INPUT_WID,
        WUSER => m_axi_DATA_INPUT_WUSER,
        ARVALID => m_axi_DATA_INPUT_ARVALID,
        ARREADY => m_axi_DATA_INPUT_ARREADY,
        ARADDR => m_axi_DATA_INPUT_ARADDR,
        ARID => m_axi_DATA_INPUT_ARID,
        ARLEN => m_axi_DATA_INPUT_ARLEN,
        ARSIZE => m_axi_DATA_INPUT_ARSIZE,
        ARBURST => m_axi_DATA_INPUT_ARBURST,
        ARLOCK => m_axi_DATA_INPUT_ARLOCK,
        ARCACHE => m_axi_DATA_INPUT_ARCACHE,
        ARPROT => m_axi_DATA_INPUT_ARPROT,
        ARQOS => m_axi_DATA_INPUT_ARQOS,
        ARREGION => m_axi_DATA_INPUT_ARREGION,
        ARUSER => m_axi_DATA_INPUT_ARUSER,
        RVALID => m_axi_DATA_INPUT_RVALID,
        RREADY => m_axi_DATA_INPUT_RREADY,
        RDATA => m_axi_DATA_INPUT_RDATA,
        RLAST => m_axi_DATA_INPUT_RLAST,
        RID => m_axi_DATA_INPUT_RID,
        RUSER => m_axi_DATA_INPUT_RUSER,
        RRESP => m_axi_DATA_INPUT_RRESP,
        BVALID => m_axi_DATA_INPUT_BVALID,
        BREADY => m_axi_DATA_INPUT_BREADY,
        BRESP => m_axi_DATA_INPUT_BRESP,
        BID => m_axi_DATA_INPUT_BID,
        BUSER => m_axi_DATA_INPUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_INPUT_ARVALID,
        I_ARREADY => DATA_INPUT_ARREADY,
        I_ARADDR => DATA_INPUT_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_20,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_INPUT_RVALID,
        I_RREADY => DATA_INPUT_RREADY,
        I_RDATA => DATA_INPUT_RDATA,
        I_RID => DATA_INPUT_RID,
        I_RUSER => DATA_INPUT_RUSER,
        I_RRESP => DATA_INPUT_RRESP,
        I_RLAST => DATA_INPUT_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_INPUT_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_INPUT_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_INPUT_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_INPUT_BRESP,
        I_BID => DATA_INPUT_BID,
        I_BUSER => DATA_INPUT_BUSER);

    conv1_DATA_WEIGHT_m_axi_U : component conv1_DATA_WEIGHT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_WEIGHT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_WEIGHT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_WEIGHT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_WEIGHT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_WEIGHT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_WEIGHT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_WEIGHT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_WEIGHT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_WEIGHT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_WEIGHT_AWVALID,
        AWREADY => m_axi_DATA_WEIGHT_AWREADY,
        AWADDR => m_axi_DATA_WEIGHT_AWADDR,
        AWID => m_axi_DATA_WEIGHT_AWID,
        AWLEN => m_axi_DATA_WEIGHT_AWLEN,
        AWSIZE => m_axi_DATA_WEIGHT_AWSIZE,
        AWBURST => m_axi_DATA_WEIGHT_AWBURST,
        AWLOCK => m_axi_DATA_WEIGHT_AWLOCK,
        AWCACHE => m_axi_DATA_WEIGHT_AWCACHE,
        AWPROT => m_axi_DATA_WEIGHT_AWPROT,
        AWQOS => m_axi_DATA_WEIGHT_AWQOS,
        AWREGION => m_axi_DATA_WEIGHT_AWREGION,
        AWUSER => m_axi_DATA_WEIGHT_AWUSER,
        WVALID => m_axi_DATA_WEIGHT_WVALID,
        WREADY => m_axi_DATA_WEIGHT_WREADY,
        WDATA => m_axi_DATA_WEIGHT_WDATA,
        WSTRB => m_axi_DATA_WEIGHT_WSTRB,
        WLAST => m_axi_DATA_WEIGHT_WLAST,
        WID => m_axi_DATA_WEIGHT_WID,
        WUSER => m_axi_DATA_WEIGHT_WUSER,
        ARVALID => m_axi_DATA_WEIGHT_ARVALID,
        ARREADY => m_axi_DATA_WEIGHT_ARREADY,
        ARADDR => m_axi_DATA_WEIGHT_ARADDR,
        ARID => m_axi_DATA_WEIGHT_ARID,
        ARLEN => m_axi_DATA_WEIGHT_ARLEN,
        ARSIZE => m_axi_DATA_WEIGHT_ARSIZE,
        ARBURST => m_axi_DATA_WEIGHT_ARBURST,
        ARLOCK => m_axi_DATA_WEIGHT_ARLOCK,
        ARCACHE => m_axi_DATA_WEIGHT_ARCACHE,
        ARPROT => m_axi_DATA_WEIGHT_ARPROT,
        ARQOS => m_axi_DATA_WEIGHT_ARQOS,
        ARREGION => m_axi_DATA_WEIGHT_ARREGION,
        ARUSER => m_axi_DATA_WEIGHT_ARUSER,
        RVALID => m_axi_DATA_WEIGHT_RVALID,
        RREADY => m_axi_DATA_WEIGHT_RREADY,
        RDATA => m_axi_DATA_WEIGHT_RDATA,
        RLAST => m_axi_DATA_WEIGHT_RLAST,
        RID => m_axi_DATA_WEIGHT_RID,
        RUSER => m_axi_DATA_WEIGHT_RUSER,
        RRESP => m_axi_DATA_WEIGHT_RRESP,
        BVALID => m_axi_DATA_WEIGHT_BVALID,
        BREADY => m_axi_DATA_WEIGHT_BREADY,
        BRESP => m_axi_DATA_WEIGHT_BRESP,
        BID => m_axi_DATA_WEIGHT_BID,
        BUSER => m_axi_DATA_WEIGHT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_WEIGHT_ARVALID,
        I_ARREADY => DATA_WEIGHT_ARREADY,
        I_ARADDR => DATA_WEIGHT_addr_reg_2142,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_5,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_WEIGHT_RVALID,
        I_RREADY => DATA_WEIGHT_RREADY,
        I_RDATA => DATA_WEIGHT_RDATA,
        I_RID => DATA_WEIGHT_RID,
        I_RUSER => DATA_WEIGHT_RUSER,
        I_RRESP => DATA_WEIGHT_RRESP,
        I_RLAST => DATA_WEIGHT_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_WEIGHT_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_WEIGHT_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_WEIGHT_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_WEIGHT_BRESP,
        I_BID => DATA_WEIGHT_BID,
        I_BUSER => DATA_WEIGHT_BUSER);

    conv1_DATA_BIAS_m_axi_U : component conv1_DATA_BIAS_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_BIAS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_BIAS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_BIAS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_BIAS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_BIAS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_BIAS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_BIAS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BIAS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_BIAS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_BIAS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_BIAS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_BIAS_AWVALID,
        AWREADY => m_axi_DATA_BIAS_AWREADY,
        AWADDR => m_axi_DATA_BIAS_AWADDR,
        AWID => m_axi_DATA_BIAS_AWID,
        AWLEN => m_axi_DATA_BIAS_AWLEN,
        AWSIZE => m_axi_DATA_BIAS_AWSIZE,
        AWBURST => m_axi_DATA_BIAS_AWBURST,
        AWLOCK => m_axi_DATA_BIAS_AWLOCK,
        AWCACHE => m_axi_DATA_BIAS_AWCACHE,
        AWPROT => m_axi_DATA_BIAS_AWPROT,
        AWQOS => m_axi_DATA_BIAS_AWQOS,
        AWREGION => m_axi_DATA_BIAS_AWREGION,
        AWUSER => m_axi_DATA_BIAS_AWUSER,
        WVALID => m_axi_DATA_BIAS_WVALID,
        WREADY => m_axi_DATA_BIAS_WREADY,
        WDATA => m_axi_DATA_BIAS_WDATA,
        WSTRB => m_axi_DATA_BIAS_WSTRB,
        WLAST => m_axi_DATA_BIAS_WLAST,
        WID => m_axi_DATA_BIAS_WID,
        WUSER => m_axi_DATA_BIAS_WUSER,
        ARVALID => m_axi_DATA_BIAS_ARVALID,
        ARREADY => m_axi_DATA_BIAS_ARREADY,
        ARADDR => m_axi_DATA_BIAS_ARADDR,
        ARID => m_axi_DATA_BIAS_ARID,
        ARLEN => m_axi_DATA_BIAS_ARLEN,
        ARSIZE => m_axi_DATA_BIAS_ARSIZE,
        ARBURST => m_axi_DATA_BIAS_ARBURST,
        ARLOCK => m_axi_DATA_BIAS_ARLOCK,
        ARCACHE => m_axi_DATA_BIAS_ARCACHE,
        ARPROT => m_axi_DATA_BIAS_ARPROT,
        ARQOS => m_axi_DATA_BIAS_ARQOS,
        ARREGION => m_axi_DATA_BIAS_ARREGION,
        ARUSER => m_axi_DATA_BIAS_ARUSER,
        RVALID => m_axi_DATA_BIAS_RVALID,
        RREADY => m_axi_DATA_BIAS_RREADY,
        RDATA => m_axi_DATA_BIAS_RDATA,
        RLAST => m_axi_DATA_BIAS_RLAST,
        RID => m_axi_DATA_BIAS_RID,
        RUSER => m_axi_DATA_BIAS_RUSER,
        RRESP => m_axi_DATA_BIAS_RRESP,
        BVALID => m_axi_DATA_BIAS_BVALID,
        BREADY => m_axi_DATA_BIAS_BREADY,
        BRESP => m_axi_DATA_BIAS_BRESP,
        BID => m_axi_DATA_BIAS_BID,
        BUSER => m_axi_DATA_BIAS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_BIAS_ARVALID,
        I_ARREADY => DATA_BIAS_ARREADY,
        I_ARADDR => DATA_BIAS_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_BIAS_RVALID,
        I_RREADY => DATA_BIAS_RREADY,
        I_RDATA => DATA_BIAS_RDATA,
        I_RID => DATA_BIAS_RID,
        I_RUSER => DATA_BIAS_RUSER,
        I_RRESP => DATA_BIAS_RRESP,
        I_RLAST => DATA_BIAS_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_BIAS_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_BIAS_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_BIAS_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_BIAS_BRESP,
        I_BID => DATA_BIAS_BID,
        I_BUSER => DATA_BIAS_BUSER);

    conv1_DATA_OUTPUT_m_axi_U : component conv1_DATA_OUTPUT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_OUTPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_OUTPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_OUTPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_OUTPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_OUTPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_OUTPUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_OUTPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_OUTPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_OUTPUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_OUTPUT_AWVALID,
        AWREADY => m_axi_DATA_OUTPUT_AWREADY,
        AWADDR => m_axi_DATA_OUTPUT_AWADDR,
        AWID => m_axi_DATA_OUTPUT_AWID,
        AWLEN => m_axi_DATA_OUTPUT_AWLEN,
        AWSIZE => m_axi_DATA_OUTPUT_AWSIZE,
        AWBURST => m_axi_DATA_OUTPUT_AWBURST,
        AWLOCK => m_axi_DATA_OUTPUT_AWLOCK,
        AWCACHE => m_axi_DATA_OUTPUT_AWCACHE,
        AWPROT => m_axi_DATA_OUTPUT_AWPROT,
        AWQOS => m_axi_DATA_OUTPUT_AWQOS,
        AWREGION => m_axi_DATA_OUTPUT_AWREGION,
        AWUSER => m_axi_DATA_OUTPUT_AWUSER,
        WVALID => m_axi_DATA_OUTPUT_WVALID,
        WREADY => m_axi_DATA_OUTPUT_WREADY,
        WDATA => m_axi_DATA_OUTPUT_WDATA,
        WSTRB => m_axi_DATA_OUTPUT_WSTRB,
        WLAST => m_axi_DATA_OUTPUT_WLAST,
        WID => m_axi_DATA_OUTPUT_WID,
        WUSER => m_axi_DATA_OUTPUT_WUSER,
        ARVALID => m_axi_DATA_OUTPUT_ARVALID,
        ARREADY => m_axi_DATA_OUTPUT_ARREADY,
        ARADDR => m_axi_DATA_OUTPUT_ARADDR,
        ARID => m_axi_DATA_OUTPUT_ARID,
        ARLEN => m_axi_DATA_OUTPUT_ARLEN,
        ARSIZE => m_axi_DATA_OUTPUT_ARSIZE,
        ARBURST => m_axi_DATA_OUTPUT_ARBURST,
        ARLOCK => m_axi_DATA_OUTPUT_ARLOCK,
        ARCACHE => m_axi_DATA_OUTPUT_ARCACHE,
        ARPROT => m_axi_DATA_OUTPUT_ARPROT,
        ARQOS => m_axi_DATA_OUTPUT_ARQOS,
        ARREGION => m_axi_DATA_OUTPUT_ARREGION,
        ARUSER => m_axi_DATA_OUTPUT_ARUSER,
        RVALID => m_axi_DATA_OUTPUT_RVALID,
        RREADY => m_axi_DATA_OUTPUT_RREADY,
        RDATA => m_axi_DATA_OUTPUT_RDATA,
        RLAST => m_axi_DATA_OUTPUT_RLAST,
        RID => m_axi_DATA_OUTPUT_RID,
        RUSER => m_axi_DATA_OUTPUT_RUSER,
        RRESP => m_axi_DATA_OUTPUT_RRESP,
        BVALID => m_axi_DATA_OUTPUT_BVALID,
        BREADY => m_axi_DATA_OUTPUT_BREADY,
        BRESP => m_axi_DATA_OUTPUT_BRESP,
        BID => m_axi_DATA_OUTPUT_BID,
        BUSER => m_axi_DATA_OUTPUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DATA_OUTPUT_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_OUTPUT_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DATA_OUTPUT_RDATA,
        I_RID => DATA_OUTPUT_RID,
        I_RUSER => DATA_OUTPUT_RUSER,
        I_RRESP => DATA_OUTPUT_RRESP,
        I_RLAST => DATA_OUTPUT_RLAST,
        I_AWVALID => DATA_OUTPUT_AWVALID,
        I_AWREADY => DATA_OUTPUT_AWREADY,
        I_AWADDR => DATA_OUTPUT_addr_reg_2754,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => DATA_OUTPUT_WVALID,
        I_WREADY => DATA_OUTPUT_WREADY,
        I_WDATA => reg_941,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => DATA_OUTPUT_BVALID,
        I_BREADY => DATA_OUTPUT_BREADY,
        I_BRESP => DATA_OUTPUT_BRESP,
        I_BID => DATA_OUTPUT_BID,
        I_BUSER => DATA_OUTPUT_BUSER);

    input_oc_0_U : component conv1_input_oc_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_oc_0_address0,
        ce0 => input_oc_0_ce0,
        we0 => input_oc_0_we0,
        d0 => DATA_INPUT_addr_read_reg_2110,
        q0 => input_oc_0_q0,
        address1 => input_oc_0_address1,
        ce1 => input_oc_0_ce1,
        q1 => input_oc_0_q1);

    weights_oc_0_U : component conv1_weights_oc_0
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_oc_0_address0,
        ce0 => weights_oc_0_ce0,
        we0 => weights_oc_0_we0,
        d0 => DATA_WEIGHT_addr_rea_reg_2161,
        q0 => weights_oc_0_q0,
        address1 => weights_oc_0_address1,
        ce1 => weights_oc_0_ce1,
        q1 => weights_oc_0_q1);

    conv1_fadd_32ns_3bkb_U1 : component conv1_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_805_p0,
        din1 => grp_fu_805_p1,
        ce => grp_fu_805_ce,
        dout => grp_fu_805_p2);

    conv1_fadd_32ns_3bkb_U2 : component conv1_fadd_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_810_p0,
        din1 => grp_fu_810_p1,
        ce => grp_fu_810_ce,
        dout => grp_fu_810_p2);

    conv1_fmul_32ns_3cud_U3 : component conv1_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_814_p0,
        din1 => grp_fu_814_p1,
        ce => grp_fu_814_ce,
        dout => grp_fu_814_p2);

    conv1_fmul_32ns_3cud_U4 : component conv1_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_818_p0,
        din1 => grp_fu_818_p1,
        ce => grp_fu_818_ce,
        dout => grp_fu_818_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state23) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_1090_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state23)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_1090_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_BIAS_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_BIAS_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_2971)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage7_11001)) then 
                        ap_reg_ioackin_DATA_BIAS_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = DATA_BIAS_ARREADY) and (ap_const_boolean_0 = ap_block_pp0_stage7_01001))) then 
                        ap_reg_ioackin_DATA_BIAS_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_INPUT_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_INPUT_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_DATA_INPUT_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_DATA_INPUT_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = DATA_INPUT_ARREADY)) then 
                        ap_reg_ioackin_DATA_INPUT_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_OUTPUT_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_OUTPUT_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_2976)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage6_11001)) then 
                        ap_reg_ioackin_DATA_OUTPUT_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = DATA_OUTPUT_AWREADY) and (ap_const_boolean_0 = ap_block_pp0_stage6_01001))) then 
                        ap_reg_ioackin_DATA_OUTPUT_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_OUTPUT_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_OUTPUT_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_boolean_1 = ap_condition_2980)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage7_11001)) then 
                        ap_reg_ioackin_DATA_OUTPUT_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = DATA_OUTPUT_WREADY) and (ap_const_boolean_0 = ap_block_pp0_stage7_01001))) then 
                        ap_reg_ioackin_DATA_OUTPUT_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_DATA_WEIGHT_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_DATA_WEIGHT_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    if ((ap_sig_ioackin_DATA_WEIGHT_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_DATA_WEIGHT_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = DATA_WEIGHT_ARREADY)) then 
                        ap_reg_ioackin_DATA_WEIGHT_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    co_reg_760_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_1090_p2 = ap_const_lv1_1))) then 
                co_reg_760 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                co_reg_760 <= tmp_5_mid2_reg_2185;
            end if; 
        end if;
    end process;

    h_reg_782_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_1090_p2 = ap_const_lv1_1))) then 
                h_reg_782 <= ap_const_lv5_0;
            elsif (((exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                h_reg_782 <= tmp_9_mid2_reg_2272;
            end if; 
        end if;
    end process;

    i1_reg_716_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_1023_p2 = ap_const_lv1_1))) then 
                i1_reg_716 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond6_fu_1124_p2 = ap_const_lv1_1))) then 
                i1_reg_716 <= i_2_reg_2119;
            end if; 
        end if;
    end process;

    i_reg_694_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = DATA_INPUT_RVALID) and (exitcond8_fu_1065_p2 = ap_const_lv1_0))) and (exitcond8_fu_1065_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_reg_694 <= i_1_reg_2071;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_694 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_749_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_1090_p2 = ap_const_lv1_1))) then 
                indvar_flatten1_reg_749 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten1_reg_749 <= indvar_flatten_next1_reg_2170;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_771_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_1090_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_771 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_771 <= indvar_flatten_next_reg_2467;
            end if; 
        end if;
    end process;

    j2_reg_727_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = DATA_WEIGHT_RVALID) and (exitcond5_fu_1178_p2 = ap_const_lv1_0))) and (exitcond5_fu_1178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                j2_reg_727 <= j_2_reg_2132;
            elsif (((exitcond7_fu_1090_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j2_reg_727 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_705_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_reg_705 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_reg_705 <= j_1_reg_2100;
            end if; 
        end if;
    end process;

    k_reg_738_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                k_reg_738 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                k_reg_738 <= k_1_reg_2151;
            end if; 
        end if;
    end process;

    reg_822_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
                reg_822 <= weights_oc_0_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_822 <= weights_oc_0_q0;
            end if; 
        end if;
    end process;

    reg_828_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
                reg_828 <= weights_oc_0_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_828 <= weights_oc_0_q1;
            end if; 
        end if;
    end process;

    reg_834_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
                reg_834 <= input_oc_0_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_834 <= input_oc_0_q0;
            end if; 
        end if;
    end process;

    reg_840_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
                reg_840 <= input_oc_0_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_840 <= input_oc_0_q1;
            end if; 
        end if;
    end process;

    w_reg_794_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_1090_p2 = ap_const_lv1_1))) then 
                w_reg_794 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_reg_794 <= w_1_reg_2286;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                DATA_BIAS_addr_read_reg_2743 <= DATA_BIAS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = DATA_INPUT_RVALID) and (exitcond8_fu_1065_p2 = ap_const_lv1_0))) and (exitcond8_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                DATA_INPUT_addr_read_reg_2110 <= DATA_INPUT_RDATA;
                tmp_14_reg_2105 <= tmp_14_fu_1081_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                DATA_OUTPUT_addr_reg_2754 <= output8_sum_fu_2037_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = DATA_WEIGHT_RVALID) and (exitcond5_fu_1178_p2 = ap_const_lv1_0))) and (exitcond5_fu_1178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                DATA_WEIGHT_addr_rea_reg_2161 <= DATA_WEIGHT_RDATA;
                tmp_74_reg_2156 <= tmp_74_fu_1194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_1124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                DATA_WEIGHT_addr_reg_2142 <= tmp_87_fu_1167_p2(32 - 1 downto 0);
                tmp_73_reg_2137 <= tmp_73_fu_1161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (exitcond_flatten1_reg_2166_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                bias6_sum_reg_2732 <= bias6_sum_fu_1960_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_1199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond2_mid_reg_2226 <= exitcond2_mid_fu_1257_p2;
                exitcond_flatten_reg_2175 <= exitcond_flatten_fu_1217_p2;
                indvar_flatten_op_reg_2249 <= indvar_flatten_op_fu_1277_p2;
                tmp_18_reg_2198 <= tmp_18_fu_1241_p1;
                w_mid2_reg_2235 <= w_mid2_fu_1269_p3;
                weights_oc_0_load_m_reg_2193 <= weights_oc_0_load_m_fu_1235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten1_reg_2166 <= exitcond_flatten1_fu_1199_p2;
                exitcond_flatten1_reg_2166_pp0_iter10_reg <= exitcond_flatten1_reg_2166_pp0_iter9_reg;
                exitcond_flatten1_reg_2166_pp0_iter1_reg <= exitcond_flatten1_reg_2166;
                exitcond_flatten1_reg_2166_pp0_iter2_reg <= exitcond_flatten1_reg_2166_pp0_iter1_reg;
                exitcond_flatten1_reg_2166_pp0_iter3_reg <= exitcond_flatten1_reg_2166_pp0_iter2_reg;
                exitcond_flatten1_reg_2166_pp0_iter4_reg <= exitcond_flatten1_reg_2166_pp0_iter3_reg;
                exitcond_flatten1_reg_2166_pp0_iter5_reg <= exitcond_flatten1_reg_2166_pp0_iter4_reg;
                exitcond_flatten1_reg_2166_pp0_iter6_reg <= exitcond_flatten1_reg_2166_pp0_iter5_reg;
                exitcond_flatten1_reg_2166_pp0_iter7_reg <= exitcond_flatten1_reg_2166_pp0_iter6_reg;
                exitcond_flatten1_reg_2166_pp0_iter8_reg <= exitcond_flatten1_reg_2166_pp0_iter7_reg;
                exitcond_flatten1_reg_2166_pp0_iter9_reg <= exitcond_flatten1_reg_2166_pp0_iter8_reg;
                tmp_14_2_4_reg_2662_pp0_iter2_reg <= tmp_14_2_4_reg_2662;
                tmp_14_2_4_reg_2662_pp0_iter3_reg <= tmp_14_2_4_reg_2662_pp0_iter2_reg;
                tmp_14_2_4_reg_2662_pp0_iter4_reg <= tmp_14_2_4_reg_2662_pp0_iter3_reg;
                tmp_14_2_4_reg_2662_pp0_iter5_reg <= tmp_14_2_4_reg_2662_pp0_iter4_reg;
                tmp_14_3_reg_2667_pp0_iter2_reg <= tmp_14_3_reg_2667;
                tmp_14_3_reg_2667_pp0_iter3_reg <= tmp_14_3_reg_2667_pp0_iter2_reg;
                tmp_14_3_reg_2667_pp0_iter4_reg <= tmp_14_3_reg_2667_pp0_iter3_reg;
                tmp_14_3_reg_2667_pp0_iter5_reg <= tmp_14_3_reg_2667_pp0_iter4_reg;
                tmp_14_3_reg_2667_pp0_iter6_reg <= tmp_14_3_reg_2667_pp0_iter5_reg;
                tmp_5_mid2_reg_2185_pp0_iter10_reg <= tmp_5_mid2_reg_2185_pp0_iter9_reg;
                tmp_5_mid2_reg_2185_pp0_iter1_reg <= tmp_5_mid2_reg_2185;
                tmp_5_mid2_reg_2185_pp0_iter2_reg <= tmp_5_mid2_reg_2185_pp0_iter1_reg;
                tmp_5_mid2_reg_2185_pp0_iter3_reg <= tmp_5_mid2_reg_2185_pp0_iter2_reg;
                tmp_5_mid2_reg_2185_pp0_iter4_reg <= tmp_5_mid2_reg_2185_pp0_iter3_reg;
                tmp_5_mid2_reg_2185_pp0_iter5_reg <= tmp_5_mid2_reg_2185_pp0_iter4_reg;
                tmp_5_mid2_reg_2185_pp0_iter6_reg <= tmp_5_mid2_reg_2185_pp0_iter5_reg;
                tmp_5_mid2_reg_2185_pp0_iter7_reg <= tmp_5_mid2_reg_2185_pp0_iter6_reg;
                tmp_5_mid2_reg_2185_pp0_iter8_reg <= tmp_5_mid2_reg_2185_pp0_iter7_reg;
                tmp_5_mid2_reg_2185_pp0_iter9_reg <= tmp_5_mid2_reg_2185_pp0_iter8_reg;
                w_mid2_reg_2235_pp0_iter10_reg <= w_mid2_reg_2235_pp0_iter9_reg;
                w_mid2_reg_2235_pp0_iter1_reg <= w_mid2_reg_2235;
                w_mid2_reg_2235_pp0_iter2_reg <= w_mid2_reg_2235_pp0_iter1_reg;
                w_mid2_reg_2235_pp0_iter3_reg <= w_mid2_reg_2235_pp0_iter2_reg;
                w_mid2_reg_2235_pp0_iter4_reg <= w_mid2_reg_2235_pp0_iter3_reg;
                w_mid2_reg_2235_pp0_iter5_reg <= w_mid2_reg_2235_pp0_iter4_reg;
                w_mid2_reg_2235_pp0_iter6_reg <= w_mid2_reg_2235_pp0_iter5_reg;
                w_mid2_reg_2235_pp0_iter7_reg <= w_mid2_reg_2235_pp0_iter6_reg;
                w_mid2_reg_2235_pp0_iter8_reg <= w_mid2_reg_2235_pp0_iter7_reg;
                w_mid2_reg_2235_pp0_iter9_reg <= w_mid2_reg_2235_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                h_mid_reg_2254 <= h_mid_fu_1283_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_2071 <= i_1_fu_1029_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_2_reg_2119 <= i_2_fu_1096_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                indvar_flatten_next1_reg_2170 <= indvar_flatten_next1_fu_1205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                indvar_flatten_next_reg_2467 <= indvar_flatten_next_fu_1678_p3;
                tmp_14_0_1_reg_2462 <= grp_fu_818_p2;
                tmp_8_reg_2452 <= grp_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_oc_0_load_24_reg_2687 <= input_oc_0_q0;
                tmp_14_3_1_reg_2677 <= grp_fu_814_p2;
                tmp_14_3_2_reg_2682 <= grp_fu_818_p2;
                weights_oc_0_load_24_reg_2672 <= weights_oc_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = DATA_INPUT_RVALID) and (exitcond8_fu_1065_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                j_1_reg_2100 <= j_1_fu_1071_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_2_reg_2132 <= j_2_fu_1130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = DATA_WEIGHT_RVALID) and (exitcond5_fu_1178_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                k_1_reg_2151 <= k_1_fu_1184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then
                reg_846 <= weights_oc_0_q1;
                reg_851 <= weights_oc_0_q0;
                reg_856 <= input_oc_0_q1;
                reg_861 <= input_oc_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then
                reg_866 <= weights_oc_0_q1;
                reg_871 <= weights_oc_0_q0;
                reg_876 <= input_oc_0_q1;
                reg_881 <= input_oc_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_886 <= weights_oc_0_q1;
                reg_891 <= weights_oc_0_q0;
                reg_896 <= input_oc_0_q1;
                reg_901 <= input_oc_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_906 <= grp_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)))) then
                reg_911 <= grp_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond_flatten1_reg_2166_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (exitcond_flatten1_reg_2166_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                reg_916 <= grp_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten1_reg_2166_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (exitcond_flatten1_reg_2166_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                reg_921 <= grp_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond_flatten1_reg_2166_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (exitcond_flatten1_reg_2166_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                reg_926 <= grp_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (exitcond_flatten1_reg_2166_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond_flatten1_reg_2166_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_931 <= grp_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (exitcond_flatten1_reg_2166_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten1_reg_2166_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)))) then
                reg_936 <= grp_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_2166_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (exitcond_flatten1_reg_2166_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)))) then
                reg_941 <= grp_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond_flatten1_reg_2166_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (exitcond_flatten1_reg_2166_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then
                reg_947 <= grp_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten1_reg_2166_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (exitcond_flatten1_reg_2166_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then
                reg_952 <= grp_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (exitcond_flatten1_reg_2166_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond_flatten1_reg_2166_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)))) then
                reg_957 <= grp_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (exitcond_flatten1_reg_2166_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)))) then
                reg_962 <= grp_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (exitcond_flatten1_reg_2166_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                sum_2_2_2_reg_2727 <= grp_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_10_cast_reg_2053(29 downto 0) <= tmp_10_cast_fu_991_p1(29 downto 0);
                    tmp_12_cast_reg_2063(29 downto 0) <= tmp_12_cast_fu_1019_p1(29 downto 0);
                    tmp_3_reg_2058(29 downto 0) <= tmp_3_fu_1005_p1(29 downto 0);
                    tmp_reg_2048(29 downto 0) <= tmp_fu_977_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_1023_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_10_reg_2081 <= tmp_10_fu_1047_p2;
                    tmp_7_reg_2076(10 downto 5) <= tmp_7_fu_1035_p3(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_12_0_2_reg_2310 <= tmp_12_0_2_fu_1367_p2;
                tmp_12_0_3_reg_2323 <= tmp_12_0_3_fu_1384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_12_0_4_reg_2359 <= tmp_12_0_4_fu_1458_p2;
                tmp_25_reg_2346 <= tmp_25_fu_1439_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_1090_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_13_reg_2124 <= tmp_13_fu_1118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                tmp_14_0_2_reg_2487 <= grp_fu_814_p2;
                tmp_14_0_3_reg_2497 <= grp_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                tmp_14_0_3_reg_2497_pp0_iter1_reg <= tmp_14_0_3_reg_2497;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_14_0_4_reg_2522 <= grp_fu_814_p2;
                tmp_14_1_reg_2527 <= grp_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                tmp_14_0_4_reg_2522_pp0_iter1_reg <= tmp_14_0_4_reg_2522;
                tmp_14_1_reg_2527_pp0_iter1_reg <= tmp_14_1_reg_2527;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_14_1_1_reg_2552 <= grp_fu_814_p2;
                tmp_14_1_2_reg_2557 <= grp_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                tmp_14_1_1_reg_2552_pp0_iter1_reg <= tmp_14_1_1_reg_2552;
                tmp_14_1_1_reg_2552_pp0_iter2_reg <= tmp_14_1_1_reg_2552_pp0_iter1_reg;
                tmp_14_1_2_reg_2557_pp0_iter1_reg <= tmp_14_1_2_reg_2557;
                tmp_14_1_2_reg_2557_pp0_iter2_reg <= tmp_14_1_2_reg_2557_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_14_1_3_reg_2582 <= grp_fu_814_p2;
                tmp_14_1_4_reg_2587 <= grp_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                tmp_14_1_3_reg_2582_pp0_iter1_reg <= tmp_14_1_3_reg_2582;
                tmp_14_1_3_reg_2582_pp0_iter2_reg <= tmp_14_1_3_reg_2582_pp0_iter1_reg;
                tmp_14_1_4_reg_2587_pp0_iter1_reg <= tmp_14_1_4_reg_2587;
                tmp_14_1_4_reg_2587_pp0_iter2_reg <= tmp_14_1_4_reg_2587_pp0_iter1_reg;
                tmp_14_1_4_reg_2587_pp0_iter3_reg <= tmp_14_1_4_reg_2587_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_14_2_1_reg_2617 <= grp_fu_818_p2;
                tmp_14_2_reg_2612 <= grp_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                tmp_14_2_1_reg_2617_pp0_iter1_reg <= tmp_14_2_1_reg_2617;
                tmp_14_2_1_reg_2617_pp0_iter2_reg <= tmp_14_2_1_reg_2617_pp0_iter1_reg;
                tmp_14_2_1_reg_2617_pp0_iter3_reg <= tmp_14_2_1_reg_2617_pp0_iter2_reg;
                tmp_14_2_reg_2612_pp0_iter1_reg <= tmp_14_2_reg_2612;
                tmp_14_2_reg_2612_pp0_iter2_reg <= tmp_14_2_reg_2612_pp0_iter1_reg;
                tmp_14_2_reg_2612_pp0_iter3_reg <= tmp_14_2_reg_2612_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                tmp_14_2_2_reg_2642 <= grp_fu_814_p2;
                tmp_14_2_3_reg_2647 <= grp_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                tmp_14_2_2_reg_2642_pp0_iter1_reg <= tmp_14_2_2_reg_2642;
                tmp_14_2_2_reg_2642_pp0_iter2_reg <= tmp_14_2_2_reg_2642_pp0_iter1_reg;
                tmp_14_2_2_reg_2642_pp0_iter3_reg <= tmp_14_2_2_reg_2642_pp0_iter2_reg;
                tmp_14_2_2_reg_2642_pp0_iter4_reg <= tmp_14_2_2_reg_2642_pp0_iter3_reg;
                tmp_14_2_3_reg_2647_pp0_iter1_reg <= tmp_14_2_3_reg_2647;
                tmp_14_2_3_reg_2647_pp0_iter2_reg <= tmp_14_2_3_reg_2647_pp0_iter1_reg;
                tmp_14_2_3_reg_2647_pp0_iter3_reg <= tmp_14_2_3_reg_2647_pp0_iter2_reg;
                tmp_14_2_3_reg_2647_pp0_iter4_reg <= tmp_14_2_3_reg_2647_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_14_2_4_reg_2662 <= grp_fu_814_p2;
                tmp_14_3_reg_2667 <= grp_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_14_3_1_reg_2677_pp0_iter2_reg <= tmp_14_3_1_reg_2677;
                tmp_14_3_1_reg_2677_pp0_iter3_reg <= tmp_14_3_1_reg_2677_pp0_iter2_reg;
                tmp_14_3_1_reg_2677_pp0_iter4_reg <= tmp_14_3_1_reg_2677_pp0_iter3_reg;
                tmp_14_3_1_reg_2677_pp0_iter5_reg <= tmp_14_3_1_reg_2677_pp0_iter4_reg;
                tmp_14_3_1_reg_2677_pp0_iter6_reg <= tmp_14_3_1_reg_2677_pp0_iter5_reg;
                tmp_14_3_2_reg_2682_pp0_iter2_reg <= tmp_14_3_2_reg_2682;
                tmp_14_3_2_reg_2682_pp0_iter3_reg <= tmp_14_3_2_reg_2682_pp0_iter2_reg;
                tmp_14_3_2_reg_2682_pp0_iter4_reg <= tmp_14_3_2_reg_2682_pp0_iter3_reg;
                tmp_14_3_2_reg_2682_pp0_iter5_reg <= tmp_14_3_2_reg_2682_pp0_iter4_reg;
                tmp_14_3_2_reg_2682_pp0_iter6_reg <= tmp_14_3_2_reg_2682_pp0_iter5_reg;
                tmp_9_mid2_reg_2272_pp0_iter10_reg <= tmp_9_mid2_reg_2272_pp0_iter9_reg;
                tmp_9_mid2_reg_2272_pp0_iter1_reg <= tmp_9_mid2_reg_2272;
                tmp_9_mid2_reg_2272_pp0_iter2_reg <= tmp_9_mid2_reg_2272_pp0_iter1_reg;
                tmp_9_mid2_reg_2272_pp0_iter3_reg <= tmp_9_mid2_reg_2272_pp0_iter2_reg;
                tmp_9_mid2_reg_2272_pp0_iter4_reg <= tmp_9_mid2_reg_2272_pp0_iter3_reg;
                tmp_9_mid2_reg_2272_pp0_iter5_reg <= tmp_9_mid2_reg_2272_pp0_iter4_reg;
                tmp_9_mid2_reg_2272_pp0_iter6_reg <= tmp_9_mid2_reg_2272_pp0_iter5_reg;
                tmp_9_mid2_reg_2272_pp0_iter7_reg <= tmp_9_mid2_reg_2272_pp0_iter6_reg;
                tmp_9_mid2_reg_2272_pp0_iter8_reg <= tmp_9_mid2_reg_2272_pp0_iter7_reg;
                tmp_9_mid2_reg_2272_pp0_iter9_reg <= tmp_9_mid2_reg_2272_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_14_3_3_reg_2692 <= grp_fu_814_p2;
                tmp_14_3_4_reg_2697 <= grp_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_14_3_3_reg_2692_pp0_iter2_reg <= tmp_14_3_3_reg_2692;
                tmp_14_3_3_reg_2692_pp0_iter3_reg <= tmp_14_3_3_reg_2692_pp0_iter2_reg;
                tmp_14_3_3_reg_2692_pp0_iter4_reg <= tmp_14_3_3_reg_2692_pp0_iter3_reg;
                tmp_14_3_3_reg_2692_pp0_iter5_reg <= tmp_14_3_3_reg_2692_pp0_iter4_reg;
                tmp_14_3_3_reg_2692_pp0_iter6_reg <= tmp_14_3_3_reg_2692_pp0_iter5_reg;
                tmp_14_3_3_reg_2692_pp0_iter7_reg <= tmp_14_3_3_reg_2692_pp0_iter6_reg;
                tmp_14_3_4_reg_2697_pp0_iter2_reg <= tmp_14_3_4_reg_2697;
                tmp_14_3_4_reg_2697_pp0_iter3_reg <= tmp_14_3_4_reg_2697_pp0_iter2_reg;
                tmp_14_3_4_reg_2697_pp0_iter4_reg <= tmp_14_3_4_reg_2697_pp0_iter3_reg;
                tmp_14_3_4_reg_2697_pp0_iter5_reg <= tmp_14_3_4_reg_2697_pp0_iter4_reg;
                tmp_14_3_4_reg_2697_pp0_iter6_reg <= tmp_14_3_4_reg_2697_pp0_iter5_reg;
                tmp_14_3_4_reg_2697_pp0_iter7_reg <= tmp_14_3_4_reg_2697_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_14_4_1_reg_2707 <= grp_fu_818_p2;
                tmp_14_4_reg_2702 <= grp_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_14_4_1_reg_2707_pp0_iter2_reg <= tmp_14_4_1_reg_2707;
                tmp_14_4_1_reg_2707_pp0_iter3_reg <= tmp_14_4_1_reg_2707_pp0_iter2_reg;
                tmp_14_4_1_reg_2707_pp0_iter4_reg <= tmp_14_4_1_reg_2707_pp0_iter3_reg;
                tmp_14_4_1_reg_2707_pp0_iter5_reg <= tmp_14_4_1_reg_2707_pp0_iter4_reg;
                tmp_14_4_1_reg_2707_pp0_iter6_reg <= tmp_14_4_1_reg_2707_pp0_iter5_reg;
                tmp_14_4_1_reg_2707_pp0_iter7_reg <= tmp_14_4_1_reg_2707_pp0_iter6_reg;
                tmp_14_4_1_reg_2707_pp0_iter8_reg <= tmp_14_4_1_reg_2707_pp0_iter7_reg;
                tmp_14_4_reg_2702_pp0_iter2_reg <= tmp_14_4_reg_2702;
                tmp_14_4_reg_2702_pp0_iter3_reg <= tmp_14_4_reg_2702_pp0_iter2_reg;
                tmp_14_4_reg_2702_pp0_iter4_reg <= tmp_14_4_reg_2702_pp0_iter3_reg;
                tmp_14_4_reg_2702_pp0_iter5_reg <= tmp_14_4_reg_2702_pp0_iter4_reg;
                tmp_14_4_reg_2702_pp0_iter6_reg <= tmp_14_4_reg_2702_pp0_iter5_reg;
                tmp_14_4_reg_2702_pp0_iter7_reg <= tmp_14_4_reg_2702_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_14_4_2_reg_2712 <= grp_fu_814_p2;
                tmp_14_4_3_reg_2717 <= grp_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_14_4_2_reg_2712_pp0_iter2_reg <= tmp_14_4_2_reg_2712;
                tmp_14_4_2_reg_2712_pp0_iter3_reg <= tmp_14_4_2_reg_2712_pp0_iter2_reg;
                tmp_14_4_2_reg_2712_pp0_iter4_reg <= tmp_14_4_2_reg_2712_pp0_iter3_reg;
                tmp_14_4_2_reg_2712_pp0_iter5_reg <= tmp_14_4_2_reg_2712_pp0_iter4_reg;
                tmp_14_4_2_reg_2712_pp0_iter6_reg <= tmp_14_4_2_reg_2712_pp0_iter5_reg;
                tmp_14_4_2_reg_2712_pp0_iter7_reg <= tmp_14_4_2_reg_2712_pp0_iter6_reg;
                tmp_14_4_2_reg_2712_pp0_iter8_reg <= tmp_14_4_2_reg_2712_pp0_iter7_reg;
                tmp_14_4_3_reg_2717_pp0_iter2_reg <= tmp_14_4_3_reg_2717;
                tmp_14_4_3_reg_2717_pp0_iter3_reg <= tmp_14_4_3_reg_2717_pp0_iter2_reg;
                tmp_14_4_3_reg_2717_pp0_iter4_reg <= tmp_14_4_3_reg_2717_pp0_iter3_reg;
                tmp_14_4_3_reg_2717_pp0_iter5_reg <= tmp_14_4_3_reg_2717_pp0_iter4_reg;
                tmp_14_4_3_reg_2717_pp0_iter6_reg <= tmp_14_4_3_reg_2717_pp0_iter5_reg;
                tmp_14_4_3_reg_2717_pp0_iter7_reg <= tmp_14_4_3_reg_2717_pp0_iter6_reg;
                tmp_14_4_3_reg_2717_pp0_iter8_reg <= tmp_14_4_3_reg_2717_pp0_iter7_reg;
                tmp_14_4_3_reg_2717_pp0_iter9_reg <= tmp_14_4_3_reg_2717_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_14_4_4_reg_2722 <= grp_fu_814_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_14_4_4_reg_2722_pp0_iter2_reg <= tmp_14_4_4_reg_2722;
                tmp_14_4_4_reg_2722_pp0_iter3_reg <= tmp_14_4_4_reg_2722_pp0_iter2_reg;
                tmp_14_4_4_reg_2722_pp0_iter4_reg <= tmp_14_4_4_reg_2722_pp0_iter3_reg;
                tmp_14_4_4_reg_2722_pp0_iter5_reg <= tmp_14_4_4_reg_2722_pp0_iter4_reg;
                tmp_14_4_4_reg_2722_pp0_iter6_reg <= tmp_14_4_4_reg_2722_pp0_iter5_reg;
                tmp_14_4_4_reg_2722_pp0_iter7_reg <= tmp_14_4_4_reg_2722_pp0_iter6_reg;
                tmp_14_4_4_reg_2722_pp0_iter8_reg <= tmp_14_4_4_reg_2722_pp0_iter7_reg;
                tmp_14_4_4_reg_2722_pp0_iter9_reg <= tmp_14_4_4_reg_2722_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    tmp_14_cast_reg_2092(10 downto 5) <= tmp_14_cast_fu_1062_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_20_reg_2748 <= tmp_20_fu_2006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                tmp_27_reg_2422 <= tmp_27_fu_1597_p3;
                tmp_29_reg_2429 <= tmp_29_fu_1622_p3;
                tmp_31_reg_2438 <= tmp_31_fu_1647_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_1199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_5_mid2_reg_2185 <= tmp_5_mid2_fu_1223_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_9_mid2_reg_2272 <= tmp_9_mid2_fu_1310_p3;
                w_1_reg_2286 <= w_1_fu_1329_p2;
            end if;
        end if;
    end process;
    tmp_reg_2048(63 downto 30) <= "0000000000000000000000000000000000";
    tmp_10_cast_reg_2053(30) <= '0';
    tmp_3_reg_2058(63 downto 30) <= "0000000000000000000000000000000000";
    tmp_12_cast_reg_2063(30) <= '0';
    tmp_7_reg_2076(4 downto 0) <= "00000";
    tmp_14_cast_reg_2092(4 downto 0) <= "00000";
    tmp_14_cast_reg_2092(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, exitcond8_fu_1065_p2, ap_CS_fsm_state14, ap_CS_fsm_state21, exitcond5_fu_1178_p2, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage12, DATA_INPUT_RVALID, DATA_WEIGHT_RVALID, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, exitcond9_fu_1023_p2, ap_sig_ioackin_DATA_INPUT_ARREADY, exitcond7_fu_1090_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, exitcond6_fu_1124_p2, exitcond_flatten1_fu_1199_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage12_subdone, ap_sig_ioackin_DATA_WEIGHT_ARREADY, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_1023_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_DATA_INPUT_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((ap_const_logic_0 = DATA_INPUT_RVALID) and (exitcond8_fu_1065_p2 = ap_const_lv1_0))) and (exitcond8_fu_1065_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_const_logic_0 = DATA_INPUT_RVALID) and (exitcond8_fu_1065_p2 = ap_const_lv1_0))) and (exitcond8_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_1090_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond6_fu_1124_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_sig_ioackin_DATA_WEIGHT_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if ((not(((ap_const_logic_0 = DATA_WEIGHT_RVALID) and (exitcond5_fu_1178_p2 = ap_const_lv1_0))) and (exitcond5_fu_1178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif ((not(((ap_const_logic_0 = DATA_WEIGHT_RVALID) and (exitcond5_fu_1178_p2 = ap_const_lv1_0))) and (exitcond5_fu_1178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten1_fu_1199_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten1_fu_1199_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state166;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((not(((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state166;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when ap_ST_fsm_state167 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DATA_BIAS_ARADDR <= bias6_sum_cast_fu_1965_p1(32 - 1 downto 0);

    DATA_BIAS_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter9, exitcond_flatten1_reg_2166_pp0_iter9_reg, ap_reg_ioackin_DATA_BIAS_ARREADY, ap_block_pp0_stage7_01001)
    begin
        if (((ap_reg_ioackin_DATA_BIAS_ARREADY = ap_const_logic_0) and (exitcond_flatten1_reg_2166_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_01001))) then 
            DATA_BIAS_ARVALID <= ap_const_logic_1;
        else 
            DATA_BIAS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_BIAS_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, ap_block_pp0_stage1_11001)
    begin
        if (((exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            DATA_BIAS_RREADY <= ap_const_logic_1;
        else 
            DATA_BIAS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_BIAS_blk_n_AR_assign_proc : process(m_axi_DATA_BIAS_ARREADY, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter9, ap_block_pp0_stage7, exitcond_flatten1_reg_2166_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (exitcond_flatten1_reg_2166_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            DATA_BIAS_blk_n_AR <= m_axi_DATA_BIAS_ARREADY;
        else 
            DATA_BIAS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_BIAS_blk_n_R_assign_proc : process(m_axi_DATA_BIAS_RVALID, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter10, ap_block_pp0_stage1, exitcond_flatten1_reg_2166_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            DATA_BIAS_blk_n_R <= m_axi_DATA_BIAS_RVALID;
        else 
            DATA_BIAS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    DATA_INPUT_ARADDR <= tmp_11_fu_1052_p1(32 - 1 downto 0);

    DATA_INPUT_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_DATA_INPUT_ARREADY)
    begin
        if (((ap_reg_ioackin_DATA_INPUT_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_INPUT_ARVALID <= ap_const_logic_1;
        else 
            DATA_INPUT_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_INPUT_RREADY_assign_proc : process(ap_CS_fsm_state10, exitcond8_fu_1065_p2, DATA_INPUT_RVALID)
    begin
        if ((not(((ap_const_logic_0 = DATA_INPUT_RVALID) and (exitcond8_fu_1065_p2 = ap_const_lv1_0))) and (exitcond8_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DATA_INPUT_RREADY <= ap_const_logic_1;
        else 
            DATA_INPUT_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_INPUT_blk_n_AR_assign_proc : process(m_axi_DATA_INPUT_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            DATA_INPUT_blk_n_AR <= m_axi_DATA_INPUT_ARREADY;
        else 
            DATA_INPUT_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_INPUT_blk_n_R_assign_proc : process(m_axi_DATA_INPUT_RVALID, ap_CS_fsm_state10, exitcond8_fu_1065_p2)
    begin
        if (((exitcond8_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            DATA_INPUT_blk_n_R <= m_axi_DATA_INPUT_RVALID;
        else 
            DATA_INPUT_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    DATA_OUTPUT_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, ap_CS_fsm_pp0_stage6, ap_reg_ioackin_DATA_OUTPUT_AWREADY, ap_block_pp0_stage6_01001)
    begin
        if (((ap_reg_ioackin_DATA_OUTPUT_AWREADY = ap_const_logic_0) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_01001))) then 
            DATA_OUTPUT_AWVALID <= ap_const_logic_1;
        else 
            DATA_OUTPUT_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_OUTPUT_BREADY_assign_proc : process(ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            DATA_OUTPUT_BREADY <= ap_const_logic_1;
        else 
            DATA_OUTPUT_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_OUTPUT_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, ap_block_pp0_stage7_01001, ap_reg_ioackin_DATA_OUTPUT_WREADY)
    begin
        if (((ap_reg_ioackin_DATA_OUTPUT_WREADY = ap_const_logic_0) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_01001))) then 
            DATA_OUTPUT_WVALID <= ap_const_logic_1;
        else 
            DATA_OUTPUT_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_OUTPUT_blk_n_AW_assign_proc : process(m_axi_DATA_OUTPUT_AWREADY, ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            DATA_OUTPUT_blk_n_AW <= m_axi_DATA_OUTPUT_AWREADY;
        else 
            DATA_OUTPUT_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    DATA_OUTPUT_blk_n_B_assign_proc : process(m_axi_DATA_OUTPUT_BVALID, ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage12) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            DATA_OUTPUT_blk_n_B <= m_axi_DATA_OUTPUT_BVALID;
        else 
            DATA_OUTPUT_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    DATA_OUTPUT_blk_n_W_assign_proc : process(m_axi_DATA_OUTPUT_WREADY, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            DATA_OUTPUT_blk_n_W <= m_axi_DATA_OUTPUT_WREADY;
        else 
            DATA_OUTPUT_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    DATA_WEIGHT_ARVALID_assign_proc : process(ap_CS_fsm_state14, ap_reg_ioackin_DATA_WEIGHT_ARREADY)
    begin
        if (((ap_reg_ioackin_DATA_WEIGHT_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            DATA_WEIGHT_ARVALID <= ap_const_logic_1;
        else 
            DATA_WEIGHT_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_WEIGHT_RREADY_assign_proc : process(ap_CS_fsm_state21, exitcond5_fu_1178_p2, DATA_WEIGHT_RVALID)
    begin
        if ((not(((ap_const_logic_0 = DATA_WEIGHT_RVALID) and (exitcond5_fu_1178_p2 = ap_const_lv1_0))) and (exitcond5_fu_1178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            DATA_WEIGHT_RREADY <= ap_const_logic_1;
        else 
            DATA_WEIGHT_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_WEIGHT_blk_n_AR_assign_proc : process(m_axi_DATA_WEIGHT_ARREADY, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            DATA_WEIGHT_blk_n_AR <= m_axi_DATA_WEIGHT_ARREADY;
        else 
            DATA_WEIGHT_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_WEIGHT_blk_n_R_assign_proc : process(m_axi_DATA_WEIGHT_RVALID, ap_CS_fsm_state21, exitcond5_fu_1178_p2)
    begin
        if (((exitcond5_fu_1178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            DATA_WEIGHT_blk_n_R <= m_axi_DATA_WEIGHT_RVALID;
        else 
            DATA_WEIGHT_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(32);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(33);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(34);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(26);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(27);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(28);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(29);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(30);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(31);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state166 <= ap_CS_fsm(35);
    ap_CS_fsm_state167 <= ap_CS_fsm(36);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_11001_assign_proc : process(ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, DATA_OUTPUT_BVALID)
    begin
                ap_block_pp0_stage12_11001 <= ((ap_const_logic_0 = DATA_OUTPUT_BVALID) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage12_subdone_assign_proc : process(ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, DATA_OUTPUT_BVALID)
    begin
                ap_block_pp0_stage12_subdone <= ((ap_const_logic_0 = DATA_OUTPUT_BVALID) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, DATA_BIAS_RVALID)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_const_logic_0 = DATA_BIAS_RVALID) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, DATA_BIAS_RVALID)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_const_logic_0 = DATA_BIAS_RVALID) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_state159_io)
    begin
                ap_block_pp0_stage6_11001 <= ((ap_const_boolean_1 = ap_block_state159_io) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_state159_io)
    begin
                ap_block_pp0_stage6_subdone <= ((ap_const_boolean_1 = ap_block_state159_io) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_block_state147_io, ap_block_state160_io)
    begin
                ap_block_pp0_stage7_11001 <= (((ap_const_boolean_1 = ap_block_state160_io) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state147_io) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_block_state147_io, ap_block_state160_io)
    begin
                ap_block_pp0_stage7_subdone <= (((ap_const_boolean_1 = ap_block_state160_io) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state147_io) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_assign_proc : process(exitcond8_fu_1065_p2, DATA_INPUT_RVALID)
    begin
                ap_block_state10 <= ((ap_const_logic_0 = DATA_INPUT_RVALID) and (exitcond8_fu_1065_p2 = ap_const_lv1_0));
    end process;

        ap_block_state100_pp0_stage12_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp0_stage5_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp0_stage6_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp0_stage7_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp0_stage8_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp0_stage9_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp0_stage10_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp0_stage11_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp0_stage12_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp0_stage5_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp0_stage6_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp0_stage7_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp0_stage8_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state123_pp0_stage9_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp0_stage10_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state125_pp0_stage11_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp0_stage12_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state127_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state130_pp0_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state131_pp0_stage4_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state132_pp0_stage5_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state133_pp0_stage6_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state134_pp0_stage7_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state135_pp0_stage8_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state136_pp0_stage9_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state137_pp0_stage10_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state138_pp0_stage11_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state139_pp0_stage12_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state140_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state141_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state142_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state143_pp0_stage3_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state144_pp0_stage4_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state145_pp0_stage5_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state146_pp0_stage6_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state147_io_assign_proc : process(exitcond_flatten1_reg_2166_pp0_iter9_reg, ap_sig_ioackin_DATA_BIAS_ARREADY)
    begin
                ap_block_state147_io <= ((ap_sig_ioackin_DATA_BIAS_ARREADY = ap_const_logic_0) and (exitcond_flatten1_reg_2166_pp0_iter9_reg = ap_const_lv1_0));
    end process;

        ap_block_state147_pp0_stage7_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state148_pp0_stage8_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state149_pp0_stage9_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state150_pp0_stage10_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state151_pp0_stage11_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state152_pp0_stage12_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state153_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state154_pp0_stage1_iter10_assign_proc : process(exitcond_flatten1_reg_2166_pp0_iter10_reg, DATA_BIAS_RVALID)
    begin
                ap_block_state154_pp0_stage1_iter10 <= ((ap_const_logic_0 = DATA_BIAS_RVALID) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0));
    end process;

        ap_block_state155_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state156_pp0_stage3_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state157_pp0_stage4_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state158_pp0_stage5_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state159_io_assign_proc : process(exitcond_flatten1_reg_2166_pp0_iter10_reg, ap_sig_ioackin_DATA_OUTPUT_AWREADY)
    begin
                ap_block_state159_io <= ((ap_sig_ioackin_DATA_OUTPUT_AWREADY = ap_const_logic_0) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0));
    end process;

        ap_block_state159_pp0_stage6_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state160_io_assign_proc : process(exitcond_flatten1_reg_2166_pp0_iter10_reg, ap_sig_ioackin_DATA_OUTPUT_WREADY)
    begin
                ap_block_state160_io <= ((ap_sig_ioackin_DATA_OUTPUT_WREADY = ap_const_logic_0) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0));
    end process;

        ap_block_state160_pp0_stage7_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state161_pp0_stage8_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state162_pp0_stage9_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state163_pp0_stage10_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state164_pp0_stage11_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state165_pp0_stage12_iter10_assign_proc : process(exitcond_flatten1_reg_2166_pp0_iter10_reg, DATA_OUTPUT_BVALID)
    begin
                ap_block_state165_pp0_stage12_iter10 <= ((ap_const_logic_0 = DATA_OUTPUT_BVALID) and (exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0));
    end process;


    ap_block_state21_assign_proc : process(exitcond5_fu_1178_p2, DATA_WEIGHT_RVALID)
    begin
                ap_block_state21 <= ((ap_const_logic_0 = DATA_WEIGHT_RVALID) and (exitcond5_fu_1178_p2 = ap_const_lv1_0));
    end process;

        ap_block_state23_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage10_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage11_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage12_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage8_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage9_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage10_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage11_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage12_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage8_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage9_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage10_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage11_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage12_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage6_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp0_stage7_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp0_stage8_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp0_stage9_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp0_stage10_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage11_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage12_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp0_stage5_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp0_stage6_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp0_stage7_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp0_stage8_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp0_stage9_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp0_stage10_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp0_stage11_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_2971_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter9, exitcond_flatten1_reg_2166_pp0_iter9_reg)
    begin
                ap_condition_2971 <= ((exitcond_flatten1_reg_2166_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7));
    end process;


    ap_condition_2976_assign_proc : process(ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg, ap_CS_fsm_pp0_stage6)
    begin
                ap_condition_2976 <= ((exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1));
    end process;


    ap_condition_2980_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter10, exitcond_flatten1_reg_2166_pp0_iter10_reg)
    begin
                ap_condition_2980 <= ((exitcond_flatten1_reg_2166_pp0_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7));
    end process;


    ap_condition_pp0_exit_iter0_state23_assign_proc : process(exitcond_flatten1_fu_1199_p2)
    begin
        if ((exitcond_flatten1_fu_1199_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state167)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state167)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_co_phi_fu_764_p4_assign_proc : process(exitcond_flatten1_reg_2166, co_reg_760, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_mid2_reg_2185, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_co_phi_fu_764_p4 <= tmp_5_mid2_reg_2185;
        else 
            ap_phi_mux_co_phi_fu_764_p4 <= co_reg_760;
        end if; 
    end process;


    ap_phi_mux_h_phi_fu_786_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, h_reg_782, ap_enable_reg_pp0_iter1, exitcond_flatten1_reg_2166_pp0_iter1_reg, tmp_9_mid2_reg_2272)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (exitcond_flatten1_reg_2166_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_h_phi_fu_786_p4 <= tmp_9_mid2_reg_2272;
        else 
            ap_phi_mux_h_phi_fu_786_p4 <= h_reg_782;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten1_phi_fu_753_p4_assign_proc : process(exitcond_flatten1_reg_2166, indvar_flatten1_reg_749, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, indvar_flatten_next1_reg_2170, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten1_phi_fu_753_p4 <= indvar_flatten_next1_reg_2170;
        else 
            ap_phi_mux_indvar_flatten1_phi_fu_753_p4 <= indvar_flatten1_reg_749;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_775_p4_assign_proc : process(exitcond_flatten1_reg_2166, indvar_flatten_reg_771, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, indvar_flatten_next_reg_2467, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_775_p4 <= indvar_flatten_next_reg_2467;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_775_p4 <= indvar_flatten_reg_771;
        end if; 
    end process;


    ap_phi_mux_w_phi_fu_798_p4_assign_proc : process(exitcond_flatten1_reg_2166, w_reg_794, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, w_1_reg_2286, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_2166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_w_phi_fu_798_p4 <= w_1_reg_2286;
        else 
            ap_phi_mux_w_phi_fu_798_p4 <= w_reg_794;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state167)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state167)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_DATA_BIAS_ARREADY_assign_proc : process(DATA_BIAS_ARREADY, ap_reg_ioackin_DATA_BIAS_ARREADY)
    begin
        if ((ap_reg_ioackin_DATA_BIAS_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_DATA_BIAS_ARREADY <= DATA_BIAS_ARREADY;
        else 
            ap_sig_ioackin_DATA_BIAS_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_INPUT_ARREADY_assign_proc : process(DATA_INPUT_ARREADY, ap_reg_ioackin_DATA_INPUT_ARREADY)
    begin
        if ((ap_reg_ioackin_DATA_INPUT_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_DATA_INPUT_ARREADY <= DATA_INPUT_ARREADY;
        else 
            ap_sig_ioackin_DATA_INPUT_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_OUTPUT_AWREADY_assign_proc : process(DATA_OUTPUT_AWREADY, ap_reg_ioackin_DATA_OUTPUT_AWREADY)
    begin
        if ((ap_reg_ioackin_DATA_OUTPUT_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_DATA_OUTPUT_AWREADY <= DATA_OUTPUT_AWREADY;
        else 
            ap_sig_ioackin_DATA_OUTPUT_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_OUTPUT_WREADY_assign_proc : process(DATA_OUTPUT_WREADY, ap_reg_ioackin_DATA_OUTPUT_WREADY)
    begin
        if ((ap_reg_ioackin_DATA_OUTPUT_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_DATA_OUTPUT_WREADY <= DATA_OUTPUT_WREADY;
        else 
            ap_sig_ioackin_DATA_OUTPUT_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_DATA_WEIGHT_ARREADY_assign_proc : process(DATA_WEIGHT_ARREADY, ap_reg_ioackin_DATA_WEIGHT_ARREADY)
    begin
        if ((ap_reg_ioackin_DATA_WEIGHT_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_DATA_WEIGHT_ARREADY <= DATA_WEIGHT_ARREADY;
        else 
            ap_sig_ioackin_DATA_WEIGHT_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias6_sum_cast_fu_1965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bias6_sum_reg_2732),64));
    bias6_sum_fu_1960_p2 <= std_logic_vector(unsigned(tmp_5_mid2_cast_fu_1957_p1) + unsigned(tmp_10_cast_reg_2053));
    co_1_fu_1211_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_co_phi_fu_764_p4));
    exitcond2_mid_fu_1257_p2 <= (not_exitcond_flatten_fu_1245_p2 and exitcond_fu_1251_p2);
    exitcond5_fu_1178_p2 <= "1" when (k_reg_738 = ap_const_lv3_5) else "0";
    exitcond6_fu_1124_p2 <= "1" when (j2_reg_727 = ap_const_lv3_5) else "0";
    exitcond7_fu_1090_p2 <= "1" when (i1_reg_716 = ap_const_lv3_6) else "0";
    exitcond8_fu_1065_p2 <= "1" when (j_reg_705 = ap_const_lv6_20) else "0";
    exitcond9_fu_1023_p2 <= "1" when (i_reg_694 = ap_const_lv6_20) else "0";
    exitcond_flatten1_fu_1199_p2 <= "1" when (ap_phi_mux_indvar_flatten1_phi_fu_753_p4 = ap_const_lv13_1260) else "0";
    exitcond_flatten_fu_1217_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_775_p4 = ap_const_lv10_310) else "0";
    exitcond_fu_1251_p2 <= "1" when (ap_phi_mux_w_phi_fu_798_p4 = ap_const_lv5_1C) else "0";

    grp_fu_805_ce_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_805_ce <= ap_const_logic_1;
        else 
            grp_fu_805_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_805_p0_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_906, reg_911, ap_enable_reg_pp0_iter2, reg_916, reg_921, ap_enable_reg_pp0_iter3, reg_926, ap_enable_reg_pp0_iter4, reg_931, ap_enable_reg_pp0_iter5, tmp_8_reg_2452, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2)))) then 
            grp_fu_805_p0 <= reg_931;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5)))) then 
            grp_fu_805_p0 <= reg_926;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)))) then 
            grp_fu_805_p0 <= reg_921;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            grp_fu_805_p0 <= reg_916;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            grp_fu_805_p0 <= reg_911;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then 
            grp_fu_805_p0 <= reg_906;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_805_p0 <= tmp_8_reg_2452;
        else 
            grp_fu_805_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_805_p1_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, tmp_14_0_1_reg_2462, tmp_14_0_2_reg_2487, tmp_14_0_3_reg_2497_pp0_iter1_reg, tmp_14_0_4_reg_2522_pp0_iter1_reg, tmp_14_1_reg_2527_pp0_iter1_reg, tmp_14_1_1_reg_2552_pp0_iter2_reg, tmp_14_1_2_reg_2557_pp0_iter2_reg, tmp_14_1_3_reg_2582_pp0_iter2_reg, tmp_14_1_4_reg_2587_pp0_iter3_reg, tmp_14_2_reg_2612_pp0_iter3_reg, tmp_14_2_1_reg_2617_pp0_iter3_reg, tmp_14_2_2_reg_2642_pp0_iter4_reg, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_805_p1 <= tmp_14_2_2_reg_2642_pp0_iter4_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            grp_fu_805_p1 <= tmp_14_2_1_reg_2617_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            grp_fu_805_p1 <= tmp_14_2_reg_2612_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_805_p1 <= tmp_14_1_4_reg_2587_pp0_iter3_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            grp_fu_805_p1 <= tmp_14_1_3_reg_2582_pp0_iter2_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_805_p1 <= tmp_14_1_2_reg_2557_pp0_iter2_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
            grp_fu_805_p1 <= tmp_14_1_1_reg_2552_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_805_p1 <= tmp_14_1_reg_2527_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_805_p1 <= tmp_14_0_4_reg_2522_pp0_iter1_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
            grp_fu_805_p1 <= tmp_14_0_3_reg_2497_pp0_iter1_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            grp_fu_805_p1 <= tmp_14_0_2_reg_2487;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_805_p1 <= tmp_14_0_1_reg_2462;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_805_p1 <= ap_const_lv32_0;
        else 
            grp_fu_805_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_810_ce_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_810_ce <= ap_const_logic_1;
        else 
            grp_fu_810_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_810_p0_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter9, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter10, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, reg_936, ap_enable_reg_pp0_iter6, reg_941, ap_enable_reg_pp0_iter7, reg_947, reg_952, ap_enable_reg_pp0_iter8, reg_957, reg_962, sum_2_2_2_reg_2727, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10)))) then 
            grp_fu_810_p0 <= reg_962;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5)))) then 
            grp_fu_810_p0 <= reg_957;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)))) then 
            grp_fu_810_p0 <= reg_952;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            grp_fu_810_p0 <= reg_947;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            grp_fu_810_p0 <= reg_941;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            grp_fu_810_p0 <= reg_936;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_810_p0 <= sum_2_2_2_reg_2727;
        else 
            grp_fu_810_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_810_p1_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter9, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter10, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, tmp_14_2_3_reg_2647_pp0_iter4_reg, tmp_14_2_4_reg_2662_pp0_iter5_reg, tmp_14_3_reg_2667_pp0_iter6_reg, tmp_14_3_1_reg_2677_pp0_iter6_reg, tmp_14_3_2_reg_2682_pp0_iter6_reg, tmp_14_3_3_reg_2692_pp0_iter7_reg, tmp_14_3_4_reg_2697_pp0_iter7_reg, tmp_14_4_reg_2702_pp0_iter7_reg, tmp_14_4_1_reg_2707_pp0_iter8_reg, tmp_14_4_2_reg_2712_pp0_iter8_reg, tmp_14_4_3_reg_2717_pp0_iter9_reg, tmp_14_4_4_reg_2722_pp0_iter9_reg, DATA_BIAS_addr_read_reg_2743, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_810_p1 <= DATA_BIAS_addr_read_reg_2743;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            grp_fu_810_p1 <= tmp_14_4_4_reg_2722_pp0_iter9_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            grp_fu_810_p1 <= tmp_14_4_3_reg_2717_pp0_iter9_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_810_p1 <= tmp_14_4_2_reg_2712_pp0_iter8_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            grp_fu_810_p1 <= tmp_14_4_1_reg_2707_pp0_iter8_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_810_p1 <= tmp_14_4_reg_2702_pp0_iter7_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
            grp_fu_810_p1 <= tmp_14_3_4_reg_2697_pp0_iter7_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            grp_fu_810_p1 <= tmp_14_3_3_reg_2692_pp0_iter7_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            grp_fu_810_p1 <= tmp_14_3_2_reg_2682_pp0_iter6_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
            grp_fu_810_p1 <= tmp_14_3_1_reg_2677_pp0_iter6_reg;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            grp_fu_810_p1 <= tmp_14_3_reg_2667_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_810_p1 <= tmp_14_2_4_reg_2662_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_810_p1 <= tmp_14_2_3_reg_2647_pp0_iter4_reg;
        else 
            grp_fu_810_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_814_ce_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_814_ce <= ap_const_logic_1;
        else 
            grp_fu_814_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_814_p0_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, reg_822, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, reg_846, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, reg_866, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, reg_886, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, weights_oc_0_load_24_reg_2672, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_814_p0 <= weights_oc_0_load_24_reg_2672;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_814_p0 <= reg_886;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5)))) then 
            grp_fu_814_p0 <= reg_866;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then 
            grp_fu_814_p0 <= reg_846;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_814_p0 <= reg_822;
        else 
            grp_fu_814_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_814_p1_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, reg_834, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, reg_856, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, reg_876, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_896, input_oc_0_load_24_reg_2687, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_814_p1 <= input_oc_0_load_24_reg_2687;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_814_p1 <= reg_896;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5)))) then 
            grp_fu_814_p1 <= reg_876;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then 
            grp_fu_814_p1 <= reg_856;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_814_p1 <= reg_834;
        else 
            grp_fu_814_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_818_ce_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_818_ce <= ap_const_logic_1;
        else 
            grp_fu_818_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_818_p0_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, reg_828, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, reg_851, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, reg_871, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_891, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_818_p0 <= reg_891;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5)))) then 
            grp_fu_818_p0 <= reg_871;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then 
            grp_fu_818_p0 <= reg_851;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_818_p0 <= reg_828;
        else 
            grp_fu_818_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_818_p1_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, reg_840, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, reg_861, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, reg_881, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_901, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_818_p1 <= reg_901;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5)))) then 
            grp_fu_818_p1 <= reg_881;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then 
            grp_fu_818_p1 <= reg_861;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_818_p1 <= reg_840;
        else 
            grp_fu_818_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_1_dup_fu_1304_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(h_mid_fu_1283_p3));
    h_1_mid1_fu_1421_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(h_mid_reg_2254));
    h_mid_fu_1283_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_reg_2175(0) = '1') else 
        ap_phi_mux_h_phi_fu_786_p4;
    h_s_fu_1426_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(h_reg_782));
    i_1_fu_1029_p2 <= std_logic_vector(unsigned(i_reg_694) + unsigned(ap_const_lv6_1));
    i_2_fu_1096_p2 <= std_logic_vector(unsigned(i1_reg_716) + unsigned(ap_const_lv3_1));
    indvar_flatten_next1_fu_1205_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten1_phi_fu_753_p4) + unsigned(ap_const_lv13_1));
    indvar_flatten_next_fu_1678_p3 <= 
        ap_const_lv10_1 when (exitcond_flatten_reg_2175(0) = '1') else 
        indvar_flatten_op_reg_2249;
    indvar_flatten_op_fu_1277_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_775_p4));

    input_oc_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state11, ap_block_pp0_stage0, tmp_17_cast_fu_1086_p1, tmp_34_fu_1324_p1, ap_block_pp0_stage2, tmp_61_fu_1396_p1, ap_block_pp0_stage3, tmp_36_fu_1453_p1, ap_block_pp0_stage4, tmp_56_fu_1512_p1, ap_block_pp0_stage5, tmp_67_fu_1554_p1, tmp_48_fu_1673_p1, tmp_63_fu_1721_p1, ap_block_pp0_stage8, tmp_40_fu_1752_p1, ap_block_pp0_stage9, tmp_59_fu_1805_p1, ap_block_pp0_stage10, tmp_69_fu_1847_p1, ap_block_pp0_stage11, tmp_52_fu_1889_p1, tmp_65_fu_1931_p1, tmp_70_fu_1952_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_oc_0_address0 <= tmp_70_fu_1952_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            input_oc_0_address0 <= tmp_65_fu_1931_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
            input_oc_0_address0 <= tmp_52_fu_1889_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            input_oc_0_address0 <= tmp_69_fu_1847_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
            input_oc_0_address0 <= tmp_59_fu_1805_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            input_oc_0_address0 <= tmp_40_fu_1752_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            input_oc_0_address0 <= tmp_63_fu_1721_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            input_oc_0_address0 <= tmp_48_fu_1673_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            input_oc_0_address0 <= tmp_67_fu_1554_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            input_oc_0_address0 <= tmp_56_fu_1512_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            input_oc_0_address0 <= tmp_36_fu_1453_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            input_oc_0_address0 <= tmp_61_fu_1396_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_oc_0_address0 <= tmp_34_fu_1324_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_oc_0_address0 <= tmp_17_cast_fu_1086_p1(10 - 1 downto 0);
        else 
            input_oc_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_oc_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, tmp_44_fu_1342_p1, ap_block_pp0_stage2, tmp_54_fu_1379_p1, ap_block_pp0_stage3, tmp_66_fu_1470_p1, ap_block_pp0_stage4, tmp_46_fu_1501_p1, ap_block_pp0_stage5, tmp_62_fu_1543_p1, tmp_38_fu_1661_p1, tmp_58_fu_1710_p1, ap_block_pp0_stage8, tmp_68_fu_1763_p1, ap_block_pp0_stage9, tmp_50_fu_1794_p1, ap_block_pp0_stage10, tmp_64_fu_1836_p1, ap_block_pp0_stage11, tmp_42_fu_1878_p1, tmp_60_fu_1920_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                input_oc_0_address1 <= tmp_60_fu_1920_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                input_oc_0_address1 <= tmp_42_fu_1878_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
                input_oc_0_address1 <= tmp_64_fu_1836_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                input_oc_0_address1 <= tmp_50_fu_1794_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
                input_oc_0_address1 <= tmp_68_fu_1763_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                input_oc_0_address1 <= tmp_58_fu_1710_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                input_oc_0_address1 <= tmp_38_fu_1661_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                input_oc_0_address1 <= tmp_62_fu_1543_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                input_oc_0_address1 <= tmp_46_fu_1501_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                input_oc_0_address1 <= tmp_66_fu_1470_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                input_oc_0_address1 <= tmp_54_fu_1379_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_oc_0_address1 <= tmp_44_fu_1342_p1(10 - 1 downto 0);
            else 
                input_oc_0_address1 <= "XXXXXXXXXX";
            end if;
        else 
            input_oc_0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_oc_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            input_oc_0_ce0 <= ap_const_logic_1;
        else 
            input_oc_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_oc_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            input_oc_0_ce1 <= ap_const_logic_1;
        else 
            input_oc_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_oc_0_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_oc_0_we0 <= ap_const_logic_1;
        else 
            input_oc_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_1071_p2 <= std_logic_vector(unsigned(j_reg_705) + unsigned(ap_const_lv6_1));
    j_2_fu_1130_p2 <= std_logic_vector(unsigned(j2_reg_727) + unsigned(ap_const_lv3_1));
    k_1_fu_1184_p2 <= std_logic_vector(unsigned(k_reg_738) + unsigned(ap_const_lv3_1));
    not_exitcond_flatten_fu_1245_p2 <= (exitcond_flatten_fu_1217_p2 xor ap_const_lv1_1);
    output7_fu_967_p4 <= output_r(31 downto 2);
    output8_sum_fu_2037_p2 <= std_logic_vector(unsigned(tmp_32_fu_2031_p2) + unsigned(tmp_reg_2048));
    p_shl1_fu_1982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1975_p3),64));
    p_shl2_fu_1993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1986_p3),64));
    p_shl9_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_1149_p3),64));
    p_shl_cast_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1106_p3),6));
    tmp_10_cast_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_981_p4),31));
    tmp_10_fu_1047_p2 <= std_logic_vector(unsigned(tmp_9_fu_1043_p1) + unsigned(tmp_12_cast_reg_2063));
    tmp_11_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_2081),64));
    tmp_12_0_2_fu_1367_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(w_mid2_reg_2235));
    tmp_12_0_3_fu_1384_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(w_mid2_reg_2235));
    tmp_12_0_4_fu_1458_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(w_mid2_reg_2235));
    tmp_12_cast_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1009_p4),31));
    tmp_12_fu_1106_p3 <= (i1_reg_716 & ap_const_lv2_0);
    tmp_13_fu_1118_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_1102_p1) + unsigned(p_shl_cast_fu_1114_p1));
    tmp_14_cast_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_2076),12));
    tmp_14_fu_1081_p2 <= std_logic_vector(unsigned(tmp_14_cast_reg_2092) + unsigned(tmp_3_cast_fu_1077_p1));
    tmp_15_fu_1975_p3 <= (tmp_5_mid2_reg_2185_pp0_iter10_reg & ap_const_lv5_0);
    tmp_16_fu_1986_p3 <= (tmp_5_mid2_reg_2185_pp0_iter10_reg & ap_const_lv2_0);
    tmp_17_cast_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_2105),64));
    tmp_17_fu_1997_p2 <= std_logic_vector(unsigned(p_shl1_fu_1982_p1) - unsigned(p_shl2_fu_1993_p1));
    tmp_18_fu_1241_p1 <= weights_oc_0_load_m_fu_1235_p2(8 - 1 downto 0);
    tmp_19_fu_1263_p2 <= (exitcond_flatten_fu_1217_p2 or exitcond2_mid_fu_1257_p2);
    tmp_1_cast_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_716),6));
    tmp_1_fu_981_p4 <= bias(31 downto 2);
    tmp_20_fu_2006_p2 <= std_logic_vector(unsigned(tmp_9_mid2_cast_fu_2003_p1) + unsigned(tmp_17_fu_1997_p2));
    tmp_21_fu_2012_p2 <= std_logic_vector(shift_left(unsigned(tmp_20_reg_2748),to_integer(unsigned('0' & ap_const_lv64_5(31-1 downto 0)))));
    tmp_22_fu_2017_p2 <= std_logic_vector(shift_left(unsigned(tmp_20_reg_2748),to_integer(unsigned('0' & ap_const_lv64_2(31-1 downto 0)))));
    tmp_23_fu_2022_p2 <= std_logic_vector(unsigned(tmp_21_fu_2012_p2) - unsigned(tmp_22_fu_2017_p2));
    tmp_24_fu_1432_p3 <= 
        ap_const_lv5_1 when (exitcond_flatten_reg_2175(0) = '1') else 
        h_s_fu_1426_p2;
    tmp_25_fu_1439_p3 <= 
        h_1_mid1_fu_1421_p2 when (exitcond2_mid_reg_2226(0) = '1') else 
        tmp_24_fu_1432_p3;
    tmp_26_fu_1590_p3 <= 
        ap_const_lv5_2 when (exitcond_flatten_reg_2175(0) = '1') else 
        tmp_8_s_fu_1584_p2;
    tmp_27_fu_1597_p3 <= 
        tmp_8_2_mid1_fu_1579_p2 when (exitcond2_mid_reg_2226(0) = '1') else 
        tmp_26_fu_1590_p3;
    tmp_28_fu_1615_p3 <= 
        ap_const_lv5_3 when (exitcond_flatten_reg_2175(0) = '1') else 
        tmp_8_1_fu_1609_p2;
    tmp_29_fu_1622_p3 <= 
        tmp_8_3_mid1_fu_1604_p2 when (exitcond2_mid_reg_2226(0) = '1') else 
        tmp_28_fu_1615_p3;
    tmp_30_fu_1640_p3 <= 
        ap_const_lv5_4 when (exitcond_flatten_reg_2175(0) = '1') else 
        tmp_8_2_fu_1634_p2;
    tmp_31_fu_1647_p3 <= 
        tmp_8_4_mid1_fu_1629_p2 when (exitcond2_mid_reg_2226(0) = '1') else 
        tmp_30_fu_1640_p3;
    tmp_32_fu_2031_p2 <= std_logic_vector(unsigned(tmp_6_fu_2028_p1) + unsigned(tmp_23_fu_2022_p2));
    tmp_33_fu_1317_p3 <= (tmp_9_mid2_fu_1310_p3 & w_mid2_reg_2235);
    tmp_34_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_1317_p3),64));
    tmp_35_fu_1446_p3 <= (tmp_25_fu_1439_p3 & w_mid2_reg_2235);
    tmp_36_fu_1453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1446_p3),64));
    tmp_37_fu_1654_p3 <= (tmp_27_fu_1597_p3 & w_mid2_reg_2235);
    tmp_38_fu_1661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_1654_p3),64));
    tmp_39_fu_1746_p3 <= (tmp_29_reg_2429 & w_mid2_reg_2235);
    tmp_3_cast_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_705),12));
    tmp_3_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights3_fu_995_p4),64));
    tmp_40_fu_1752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1746_p3),64));
    tmp_41_fu_1872_p3 <= (tmp_31_reg_2438 & w_mid2_reg_2235);
    tmp_42_fu_1878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_1872_p3),64));
    tmp_43_fu_1334_p3 <= (tmp_9_mid2_fu_1310_p3 & w_1_fu_1329_p2);
    tmp_44_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_1334_p3),64));
    tmp_45_fu_1495_p3 <= (tmp_25_reg_2346 & w_1_reg_2286);
    tmp_46_fu_1501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_1495_p3),64));
    tmp_47_fu_1666_p3 <= (tmp_27_fu_1597_p3 & w_1_reg_2286);
    tmp_48_fu_1673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_1666_p3),64));
    tmp_49_fu_1788_p3 <= (tmp_29_reg_2429 & w_1_reg_2286);
    tmp_50_fu_1794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_1788_p3),64));
    tmp_51_fu_1883_p3 <= (tmp_31_reg_2438 & w_1_reg_2286);
    tmp_52_fu_1889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_1883_p3),64));
    tmp_53_fu_1372_p3 <= (tmp_9_mid2_reg_2272 & tmp_12_0_2_fu_1367_p2);
    tmp_54_fu_1379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_1372_p3),64));
    tmp_55_fu_1506_p3 <= (tmp_25_reg_2346 & tmp_12_0_2_reg_2310);
    tmp_56_fu_1512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_1506_p3),64));
    tmp_57_fu_1704_p3 <= (tmp_27_reg_2422 & tmp_12_0_2_reg_2310);
    tmp_58_fu_1710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_1704_p3),64));
    tmp_59_fu_1805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_1799_p3),64));
    tmp_5_fu_1009_p4 <= input_r(31 downto 2);
    tmp_5_mid2_cast_fu_1957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_mid2_reg_2185_pp0_iter9_reg),31));
    tmp_5_mid2_fu_1223_p3 <= 
        co_1_fu_1211_p2 when (exitcond_flatten_fu_1217_p2(0) = '1') else 
        ap_phi_mux_co_phi_fu_764_p4;
    tmp_60_fu_1920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_1914_p3),64));
    tmp_61_fu_1396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_1389_p3),64));
    tmp_62_fu_1543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_1537_p3),64));
    tmp_63_fu_1721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_fu_1715_p3),64));
    tmp_64_fu_1836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_1830_p3),64));
    tmp_65_fu_1931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_1925_p3),64));
    tmp_66_fu_1470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_1463_p3),64));
    tmp_67_fu_1554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_1548_p3),64));
    tmp_68_fu_1763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_1757_p3),64));
    tmp_69_fu_1847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_1841_p3),64));
    tmp_6_fu_2028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_mid2_reg_2235_pp0_iter10_reg),64));
    tmp_70_fu_1952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_1946_p3),64));
    tmp_71_cast_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_1140_p2),64));
    tmp_71_fu_1140_p2 <= std_logic_vector(unsigned(tmp_13_reg_2124) + unsigned(tmp_7_cast_fu_1136_p1));
    tmp_72_fu_1799_p3 <= (tmp_29_reg_2429 & tmp_12_0_2_reg_2310);
    tmp_73_fu_1161_p2 <= std_logic_vector(unsigned(tmp_71_cast_fu_1145_p1) + unsigned(p_shl9_fu_1157_p1));
    tmp_74_fu_1194_p2 <= std_logic_vector(unsigned(tmp_s_fu_1190_p1) + unsigned(tmp_73_reg_2137));
    tmp_75_fu_1914_p3 <= (tmp_31_reg_2438 & tmp_12_0_2_reg_2310);
    tmp_76_fu_1389_p3 <= (tmp_9_mid2_reg_2272 & tmp_12_0_3_fu_1384_p2);
    tmp_77_fu_1537_p3 <= (tmp_25_reg_2346 & tmp_12_0_3_reg_2323);
    tmp_78_fu_1715_p3 <= (tmp_27_reg_2422 & tmp_12_0_3_reg_2323);
    tmp_79_fu_1830_p3 <= (tmp_29_reg_2429 & tmp_12_0_3_reg_2323);
    tmp_7_cast_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_727),6));
    tmp_7_fu_1035_p3 <= (i_reg_694 & ap_const_lv5_0);
    tmp_80_fu_1925_p3 <= (tmp_31_reg_2438 & tmp_12_0_3_reg_2323);
    tmp_81_fu_1463_p3 <= (tmp_9_mid2_reg_2272 & tmp_12_0_4_fu_1458_p2);
    tmp_82_fu_1548_p3 <= (tmp_25_reg_2346 & tmp_12_0_4_reg_2359);
    tmp_83_fu_1757_p3 <= (tmp_27_reg_2422 & tmp_12_0_4_reg_2359);
    tmp_84_fu_1841_p3 <= (tmp_29_reg_2429 & tmp_12_0_4_reg_2359);
    tmp_85_fu_1946_p3 <= (tmp_31_reg_2438 & tmp_12_0_4_reg_2359);
    tmp_86_fu_1149_p3 <= (tmp_71_fu_1140_p2 & ap_const_lv2_0);
    tmp_87_fu_1167_p2 <= std_logic_vector(unsigned(tmp_73_fu_1161_p2) + unsigned(tmp_3_reg_2058));
    tmp_8_1_fu_1609_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(h_reg_782));
    tmp_8_2_fu_1634_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(h_reg_782));
    tmp_8_2_mid1_fu_1579_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(h_mid_reg_2254));
    tmp_8_3_mid1_fu_1604_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(h_mid_reg_2254));
    tmp_8_4_mid1_fu_1629_p2 <= std_logic_vector(unsigned(ap_const_lv5_5) + unsigned(h_mid_reg_2254));
    tmp_8_s_fu_1584_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(h_reg_782));
    tmp_9_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1035_p3),31));
    tmp_9_mid2_cast_fu_2003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_mid2_reg_2272_pp0_iter10_reg),64));
    tmp_9_mid2_fu_1310_p3 <= 
        h_1_dup_fu_1304_p2 when (exitcond2_mid_reg_2226(0) = '1') else 
        h_mid_fu_1283_p3;
    tmp_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output7_fu_967_p4),64));
    tmp_s_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_738),64));
    w_1_fu_1329_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(w_mid2_reg_2235));
    w_mid2_fu_1269_p3 <= 
        ap_const_lv5_0 when (tmp_19_fu_1263_p2(0) = '1') else 
        ap_phi_mux_w_phi_fu_798_p4;
    weights3_fu_995_p4 <= weights(31 downto 2);

    weights_oc_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_74_reg_2156, ap_CS_fsm_state22, ap_block_pp0_stage0, weights_oc_0_load_m_2_fu_1290_p1, ap_block_pp0_stage2, weights_oc_0_load_3_1_fu_1362_p1, ap_block_pp0_stage3, weights_oc_0_load_5_1_fu_1416_p1, ap_block_pp0_stage4, weights_oc_0_load_7_1_fu_1490_p1, ap_block_pp0_stage5, weights_oc_0_load_9_1_fu_1532_p1, weights_oc_0_load_1_13_fu_1574_p1, weights_oc_0_load_1_16_fu_1699_p1, ap_block_pp0_stage8, weights_oc_0_load_1_18_fu_1741_p1, ap_block_pp0_stage9, weights_oc_0_load_1_20_fu_1783_p1, ap_block_pp0_stage10, weights_oc_0_load_1_22_fu_1825_p1, ap_block_pp0_stage11, weights_oc_0_load_2_7_fu_1867_p1, weights_oc_0_load_2_11_fu_1909_p1, weights_oc_0_load_2_12_fu_1941_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            weights_oc_0_address0 <= weights_oc_0_load_2_12_fu_1941_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            weights_oc_0_address0 <= weights_oc_0_load_2_11_fu_1909_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
            weights_oc_0_address0 <= weights_oc_0_load_2_7_fu_1867_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
            weights_oc_0_address0 <= weights_oc_0_load_1_22_fu_1825_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
            weights_oc_0_address0 <= weights_oc_0_load_1_20_fu_1783_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
            weights_oc_0_address0 <= weights_oc_0_load_1_18_fu_1741_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            weights_oc_0_address0 <= weights_oc_0_load_1_16_fu_1699_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            weights_oc_0_address0 <= weights_oc_0_load_1_13_fu_1574_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            weights_oc_0_address0 <= weights_oc_0_load_9_1_fu_1532_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            weights_oc_0_address0 <= weights_oc_0_load_7_1_fu_1490_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            weights_oc_0_address0 <= weights_oc_0_load_5_1_fu_1416_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            weights_oc_0_address0 <= weights_oc_0_load_3_1_fu_1362_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_oc_0_address0 <= weights_oc_0_load_m_2_fu_1290_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            weights_oc_0_address0 <= tmp_74_reg_2156(8 - 1 downto 0);
        else 
            weights_oc_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    weights_oc_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, weights_oc_0_load_1_11_fu_1299_p1, weights_oc_0_load_2_3_fu_1352_p1, ap_block_pp0_stage2, weights_oc_0_load_4_1_fu_1406_p1, ap_block_pp0_stage3, weights_oc_0_load_6_1_fu_1480_p1, ap_block_pp0_stage4, weights_oc_0_load_8_1_fu_1522_p1, ap_block_pp0_stage5, weights_oc_0_load_1_12_fu_1564_p1, weights_oc_0_load_1_14_fu_1689_p1, weights_oc_0_load_1_17_fu_1731_p1, ap_block_pp0_stage8, weights_oc_0_load_1_19_fu_1773_p1, ap_block_pp0_stage9, weights_oc_0_load_1_21_fu_1815_p1, ap_block_pp0_stage10, weights_oc_0_load_2_5_fu_1857_p1, ap_block_pp0_stage11, weights_oc_0_load_2_9_fu_1899_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                weights_oc_0_address1 <= weights_oc_0_load_2_9_fu_1899_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11))) then 
                weights_oc_0_address1 <= weights_oc_0_load_2_5_fu_1857_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10))) then 
                weights_oc_0_address1 <= weights_oc_0_load_1_21_fu_1815_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9))) then 
                weights_oc_0_address1 <= weights_oc_0_load_1_19_fu_1773_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8))) then 
                weights_oc_0_address1 <= weights_oc_0_load_1_17_fu_1731_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                weights_oc_0_address1 <= weights_oc_0_load_1_14_fu_1689_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                weights_oc_0_address1 <= weights_oc_0_load_1_12_fu_1564_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
                weights_oc_0_address1 <= weights_oc_0_load_8_1_fu_1522_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
                weights_oc_0_address1 <= weights_oc_0_load_6_1_fu_1480_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
                weights_oc_0_address1 <= weights_oc_0_load_4_1_fu_1406_p1(8 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
                weights_oc_0_address1 <= weights_oc_0_load_2_3_fu_1352_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                weights_oc_0_address1 <= weights_oc_0_load_1_11_fu_1299_p1(8 - 1 downto 0);
            else 
                weights_oc_0_address1 <= "XXXXXXXX";
            end if;
        else 
            weights_oc_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    weights_oc_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            weights_oc_0_ce0 <= ap_const_logic_1;
        else 
            weights_oc_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_oc_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            weights_oc_0_ce1 <= ap_const_logic_1;
        else 
            weights_oc_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    weights_oc_0_load_1_10_fu_1820_p2 <= std_logic_vector(unsigned(ap_const_lv8_13) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_11_fu_1299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_2_fu_1294_p2),64));
    weights_oc_0_load_1_12_fu_1564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_4_fu_1559_p2),64));
    weights_oc_0_load_1_13_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_6_fu_1569_p2),64));
    weights_oc_0_load_1_14_fu_1689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_8_fu_1684_p2),64));
    weights_oc_0_load_1_15_fu_1694_p2 <= std_logic_vector(unsigned(ap_const_lv8_D) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_16_fu_1699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_15_fu_1694_p2),64));
    weights_oc_0_load_1_17_fu_1731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_1_fu_1726_p2),64));
    weights_oc_0_load_1_18_fu_1741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_3_fu_1736_p2),64));
    weights_oc_0_load_1_19_fu_1773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_5_fu_1768_p2),64));
    weights_oc_0_load_1_1_fu_1726_p2 <= std_logic_vector(unsigned(ap_const_lv8_E) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_20_fu_1783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_7_fu_1778_p2),64));
    weights_oc_0_load_1_21_fu_1815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_9_fu_1810_p2),64));
    weights_oc_0_load_1_22_fu_1825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_1_10_fu_1820_p2),64));
    weights_oc_0_load_1_2_fu_1294_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_3_fu_1736_p2 <= std_logic_vector(unsigned(ap_const_lv8_F) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_4_fu_1559_p2 <= std_logic_vector(unsigned(ap_const_lv8_A) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_5_fu_1768_p2 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_6_fu_1569_p2 <= std_logic_vector(unsigned(ap_const_lv8_B) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_7_fu_1778_p2 <= std_logic_vector(unsigned(ap_const_lv8_11) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_8_fu_1684_p2 <= std_logic_vector(unsigned(ap_const_lv8_C) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_1_9_fu_1810_p2 <= std_logic_vector(unsigned(ap_const_lv8_12) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_2_10_fu_1904_p2 <= std_logic_vector(unsigned(ap_const_lv8_17) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_2_11_fu_1909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_2_10_fu_1904_p2),64));
    weights_oc_0_load_2_12_fu_1941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_2_1_fu_1936_p2),64));
    weights_oc_0_load_2_1_fu_1936_p2 <= std_logic_vector(unsigned(ap_const_lv8_18) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_2_2_fu_1347_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_2_3_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_2_2_fu_1347_p2),64));
    weights_oc_0_load_2_4_fu_1852_p2 <= std_logic_vector(unsigned(ap_const_lv8_14) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_2_5_fu_1857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_2_4_fu_1852_p2),64));
    weights_oc_0_load_2_6_fu_1862_p2 <= std_logic_vector(unsigned(ap_const_lv8_15) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_2_7_fu_1867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_2_6_fu_1862_p2),64));
    weights_oc_0_load_2_8_fu_1894_p2 <= std_logic_vector(unsigned(ap_const_lv8_16) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_2_9_fu_1899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_2_8_fu_1894_p2),64));
    weights_oc_0_load_3_1_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_3_2_fu_1357_p2),64));
    weights_oc_0_load_3_2_fu_1357_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_4_1_fu_1406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_4_2_fu_1401_p2),64));
    weights_oc_0_load_4_2_fu_1401_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_5_1_fu_1416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_5_2_fu_1411_p2),64));
    weights_oc_0_load_5_2_fu_1411_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_6_1_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_6_2_fu_1475_p2),64));
    weights_oc_0_load_6_2_fu_1475_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_7_1_fu_1490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_7_2_fu_1485_p2),64));
    weights_oc_0_load_7_2_fu_1485_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_8_1_fu_1522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_8_2_fu_1517_p2),64));
    weights_oc_0_load_8_2_fu_1517_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_9_1_fu_1532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_9_2_fu_1527_p2),64));
    weights_oc_0_load_9_2_fu_1527_p2 <= std_logic_vector(unsigned(ap_const_lv8_9) + unsigned(tmp_18_reg_2198));
    weights_oc_0_load_m_2_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_oc_0_load_m_reg_2193),64));
    weights_oc_0_load_m_fu_1235_p1 <= weights_oc_0_load_m_fu_1235_p10(3 - 1 downto 0);
    weights_oc_0_load_m_fu_1235_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_mid2_fu_1223_p3),9));
    weights_oc_0_load_m_fu_1235_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv9_19) * unsigned(weights_oc_0_load_m_fu_1235_p1), 9));

    weights_oc_0_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            weights_oc_0_we0 <= ap_const_logic_1;
        else 
            weights_oc_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
