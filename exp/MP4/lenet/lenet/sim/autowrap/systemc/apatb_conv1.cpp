// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "DATA_INPUT"
#define AUTOTB_TVIN_DATA_INPUT  "../tv/cdatafile/c.conv1.autotvin_DATA_INPUT.dat"
// wrapc file define: "DATA_WEIGHT"
#define AUTOTB_TVIN_DATA_WEIGHT  "../tv/cdatafile/c.conv1.autotvin_DATA_WEIGHT.dat"
// wrapc file define: "DATA_BIAS"
#define AUTOTB_TVIN_DATA_BIAS  "../tv/cdatafile/c.conv1.autotvin_DATA_BIAS.dat"
// wrapc file define: "DATA_OUTPUT"
#define AUTOTB_TVOUT_DATA_OUTPUT  "../tv/cdatafile/c.conv1.autotvout_DATA_OUTPUT.dat"
#define AUTOTB_TVIN_DATA_OUTPUT  "../tv/cdatafile/c.conv1.autotvin_DATA_OUTPUT.dat"
// wrapc file define: "input_r"
#define AUTOTB_TVIN_input_r  "../tv/cdatafile/c.conv1.autotvin_input_r.dat"
// wrapc file define: "weights"
#define AUTOTB_TVIN_weights  "../tv/cdatafile/c.conv1.autotvin_weights.dat"
// wrapc file define: "bias"
#define AUTOTB_TVIN_bias  "../tv/cdatafile/c.conv1.autotvin_bias.dat"
// wrapc file define: "output_r"
#define AUTOTB_TVIN_output_r  "../tv/cdatafile/c.conv1.autotvin_output_r.dat"
// wrapc file define: "ap_return"
#define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.conv1.autotvout_ap_return.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "DATA_OUTPUT"
#define AUTOTB_TVOUT_PC_DATA_OUTPUT  "../tv/rtldatafile/rtl.conv1.autotvout_DATA_OUTPUT.dat"
// tvout file define: "ap_return"
#define AUTOTB_TVOUT_PC_ap_return  "../tv/rtldatafile/rtl.conv1.autotvout_ap_return.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			DATA_INPUT_depth = 0;
			DATA_WEIGHT_depth = 0;
			DATA_BIAS_depth = 0;
			DATA_OUTPUT_depth = 0;
			input_r_depth = 0;
			weights_depth = 0;
			bias_depth = 0;
			output_r_depth = 0;
			ap_return_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{DATA_INPUT " << DATA_INPUT_depth << "}\n";
			total_list << "{DATA_WEIGHT " << DATA_WEIGHT_depth << "}\n";
			total_list << "{DATA_BIAS " << DATA_BIAS_depth << "}\n";
			total_list << "{DATA_OUTPUT " << DATA_OUTPUT_depth << "}\n";
			total_list << "{input_r " << input_r_depth << "}\n";
			total_list << "{weights " << weights_depth << "}\n";
			total_list << "{bias " << bias_depth << "}\n";
			total_list << "{output_r " << output_r_depth << "}\n";
			total_list << "{ap_return " << ap_return_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int DATA_INPUT_depth;
		int DATA_WEIGHT_depth;
		int DATA_BIAS_depth;
		int DATA_OUTPUT_depth;
		int input_r_depth;
		int weights_depth;
		int bias_depth;
		int output_r_depth;
		int ap_return_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern int conv1 (
float input[1][32][32],
float weights[6][1][5][5],
float bias[6],
float output[6][14][14]);

int AESL_WRAP_conv1 (
float input[1][32][32],
float weights[6][1][5][5],
float bias[6],
float output[6][14][14])
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;

		int AESL_return;

		// output port post check: "DATA_OUTPUT"
		aesl_fh.read(AUTOTB_TVOUT_PC_DATA_OUTPUT, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_DATA_OUTPUT, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_DATA_OUTPUT, AESL_token); // data

			sc_bv<32> *DATA_OUTPUT_pc_buffer = new sc_bv<32>[1176];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'DATA_OUTPUT', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'DATA_OUTPUT', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					DATA_OUTPUT_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_DATA_OUTPUT, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_DATA_OUTPUT))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: DATA_OUTPUT
				{
					// bitslice(31, 0)
					// {
						// celement: output(31, 0)
						// {
							sc_lv<32>* output_lv0_0_5_1_lv1_0_13_1_lv2_0_13_1 = new sc_lv<32>[1176];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: output(31, 0)
						{
							// carray: (0) => (5) @ (1)
							for (int i_0 = 0; i_0 <= 5; i_0 += 1)
							{
								// carray: (0) => (13) @ (1)
								for (int i_1 = 0; i_1 <= 13; i_1 += 1)
								{
									// carray: (0) => (13) @ (1)
									for (int i_2 = 0; i_2 <= 13; i_2 += 1)
									{
										if (&(output[0][0][0]) != NULL) // check the null address if the c port is array or others
										{
											output_lv0_0_5_1_lv1_0_13_1_lv2_0_13_1[hls_map_index].range(31, 0) = sc_bv<32>(DATA_OUTPUT_pc_buffer[hls_map_index].range(31, 0));
											hls_map_index++;
										}
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: output(31, 0)
						{
							// carray: (0) => (5) @ (1)
							for (int i_0 = 0; i_0 <= 5; i_0 += 1)
							{
								// carray: (0) => (13) @ (1)
								for (int i_1 = 0; i_1 <= 13; i_1 += 1)
								{
									// carray: (0) => (13) @ (1)
									for (int i_2 = 0; i_2 <= 13; i_2 += 1)
									{
										// sub                    : i_0 i_1 i_2
										// ori_name               : output[i_0][i_1][i_2]
										// sub_1st_elem           : 0 0 0
										// ori_name_1st_elem      : output[0][0][0]
										// output_left_conversion : *(int*)&output[i_0][i_1][i_2]
										// output_type_conversion : (output_lv0_0_5_1_lv1_0_13_1_lv2_0_13_1[hls_map_index]).to_uint64()
										if (&(output[0][0][0]) != NULL) // check the null address if the c port is array or others
										{
											*(int*)&output[i_0][i_1][i_2] = (output_lv0_0_5_1_lv1_0_13_1_lv2_0_13_1[hls_map_index]).to_uint64();
											hls_map_index++;
										}
									}
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] DATA_OUTPUT_pc_buffer;
		}

		// output port post check: "ap_return"
		aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // data

			sc_bv<32> ap_return_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					ap_return_pc_buffer = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_ap_return))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: ap_return
				{
					// bitslice(31, 0)
					// {
						// celement: return(31, 0)
						// {
							sc_lv<32> return_lv0_0_1_0;
						// }
					// }

					// bitslice(31, 0)
					{
						// celement: return(31, 0)
						{
							// carray: (0) => (1) @ (0)
							{
								if (&(AESL_return) != NULL) // check the null address if the c port is array or others
								{
									return_lv0_0_1_0.range(31, 0) = sc_bv<32>(ap_return_pc_buffer.range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						// celement: return(31, 0)
						{
							// carray: (0) => (1) @ (0)
							{
								// sub                    : 
								// ori_name               : AESL_return
								// sub_1st_elem           : 
								// ori_name_1st_elem      : AESL_return
								// output_left_conversion : AESL_return
								// output_type_conversion : (return_lv0_0_1_0).to_uint64()
								if (&(AESL_return) != NULL) // check the null address if the c port is array or others
								{
									AESL_return = (return_lv0_0_1_0).to_uint64();
								}
							}
						}
					}
				}
			}
		}

		AESL_transaction_pc++;

		return AESL_return;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "DATA_INPUT"
		char* tvin_DATA_INPUT = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_DATA_INPUT);

		// "DATA_WEIGHT"
		char* tvin_DATA_WEIGHT = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_DATA_WEIGHT);

		// "DATA_BIAS"
		char* tvin_DATA_BIAS = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_DATA_BIAS);

		// "DATA_OUTPUT"
		char* tvin_DATA_OUTPUT = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_DATA_OUTPUT);
		char* tvout_DATA_OUTPUT = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_DATA_OUTPUT);

		// "input_r"
		char* tvin_input_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_r);

		// "weights"
		char* tvin_weights = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_weights);

		// "bias"
		char* tvin_bias = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_bias);

		// "output_r"
		char* tvin_output_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_output_r);

		// "ap_return"
		char* tvout_ap_return = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_ap_return);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_DATA_INPUT, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_DATA_INPUT, tvin_DATA_INPUT);

		sc_bv<32>* DATA_INPUT_tvin_wrapc_buffer = new sc_bv<32>[1024];

		// RTL Name: DATA_INPUT
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input(31, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// carray: (0) => (31) @ (1)
						for (int i_1 = 0; i_1 <= 31; i_1 += 1)
						{
							// carray: (0) => (31) @ (1)
							for (int i_2 = 0; i_2 <= 31; i_2 += 1)
							{
								// sub                   : i_0 i_1 i_2
								// ori_name              : input[i_0][i_1][i_2]
								// sub_1st_elem          : 0 0 0
								// ori_name_1st_elem     : input[0][0][0]
								// regulate_c_name       : input
								// input_type_conversion : *(int*)&input[i_0][i_1][i_2]
								if (&(input[0][0][0]) != NULL) // check the null address if the c port is array or others
								{
									sc_lv<32> input_tmp_mem;
									input_tmp_mem = *(int*)&input[i_0][i_1][i_2];
									DATA_INPUT_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_tmp_mem.range(31, 0);
                                 			       hls_map_index++;
								}
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_DATA_INPUT, "%s\n", (DATA_INPUT_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_DATA_INPUT, tvin_DATA_INPUT);
		}

		tcl_file.set_num(1024, &tcl_file.DATA_INPUT_depth);
		sprintf(tvin_DATA_INPUT, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_DATA_INPUT, tvin_DATA_INPUT);

		// release memory allocation
		delete [] DATA_INPUT_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_DATA_WEIGHT, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_DATA_WEIGHT, tvin_DATA_WEIGHT);

		sc_bv<32>* DATA_WEIGHT_tvin_wrapc_buffer = new sc_bv<32>[150];

		// RTL Name: DATA_WEIGHT
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: weights(31, 0)
				{
					// carray: (0) => (5) @ (1)
					for (int i_0 = 0; i_0 <= 5; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// carray: (0) => (4) @ (1)
							for (int i_2 = 0; i_2 <= 4; i_2 += 1)
							{
								// carray: (0) => (4) @ (1)
								for (int i_3 = 0; i_3 <= 4; i_3 += 1)
								{
									// sub                   : i_0 i_1 i_2 i_3
									// ori_name              : weights[i_0][i_1][i_2][i_3]
									// sub_1st_elem          : 0 0 0 0
									// ori_name_1st_elem     : weights[0][0][0][0]
									// regulate_c_name       : weights
									// input_type_conversion : *(int*)&weights[i_0][i_1][i_2][i_3]
									if (&(weights[0][0][0][0]) != NULL) // check the null address if the c port is array or others
									{
										sc_lv<32> weights_tmp_mem;
										weights_tmp_mem = *(int*)&weights[i_0][i_1][i_2][i_3];
										DATA_WEIGHT_tvin_wrapc_buffer[hls_map_index].range(31, 0) = weights_tmp_mem.range(31, 0);
                                 				       hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 150; i++)
		{
			sprintf(tvin_DATA_WEIGHT, "%s\n", (DATA_WEIGHT_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_DATA_WEIGHT, tvin_DATA_WEIGHT);
		}

		tcl_file.set_num(150, &tcl_file.DATA_WEIGHT_depth);
		sprintf(tvin_DATA_WEIGHT, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_DATA_WEIGHT, tvin_DATA_WEIGHT);

		// release memory allocation
		delete [] DATA_WEIGHT_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_DATA_BIAS, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_DATA_BIAS, tvin_DATA_BIAS);

		sc_bv<32>* DATA_BIAS_tvin_wrapc_buffer = new sc_bv<32>[6];

		// RTL Name: DATA_BIAS
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: bias(31, 0)
				{
					// carray: (0) => (5) @ (1)
					for (int i_0 = 0; i_0 <= 5; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : bias[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : bias[0]
						// regulate_c_name       : bias
						// input_type_conversion : *(int*)&bias[i_0]
						if (&(bias[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> bias_tmp_mem;
							bias_tmp_mem = *(int*)&bias[i_0];
							DATA_BIAS_tvin_wrapc_buffer[hls_map_index].range(31, 0) = bias_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 6; i++)
		{
			sprintf(tvin_DATA_BIAS, "%s\n", (DATA_BIAS_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_DATA_BIAS, tvin_DATA_BIAS);
		}

		tcl_file.set_num(6, &tcl_file.DATA_BIAS_depth);
		sprintf(tvin_DATA_BIAS, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_DATA_BIAS, tvin_DATA_BIAS);

		// release memory allocation
		delete [] DATA_BIAS_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_DATA_OUTPUT, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_DATA_OUTPUT, tvin_DATA_OUTPUT);

		sc_bv<32>* DATA_OUTPUT_tvin_wrapc_buffer = new sc_bv<32>[1176];

		// RTL Name: DATA_OUTPUT
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: output(31, 0)
				{
					// carray: (0) => (5) @ (1)
					for (int i_0 = 0; i_0 <= 5; i_0 += 1)
					{
						// carray: (0) => (13) @ (1)
						for (int i_1 = 0; i_1 <= 13; i_1 += 1)
						{
							// carray: (0) => (13) @ (1)
							for (int i_2 = 0; i_2 <= 13; i_2 += 1)
							{
								// sub                   : i_0 i_1 i_2
								// ori_name              : output[i_0][i_1][i_2]
								// sub_1st_elem          : 0 0 0
								// ori_name_1st_elem     : output[0][0][0]
								// regulate_c_name       : output
								// input_type_conversion : *(int*)&output[i_0][i_1][i_2]
								if (&(output[0][0][0]) != NULL) // check the null address if the c port is array or others
								{
									sc_lv<32> output_tmp_mem;
									output_tmp_mem = *(int*)&output[i_0][i_1][i_2];
									DATA_OUTPUT_tvin_wrapc_buffer[hls_map_index].range(31, 0) = output_tmp_mem.range(31, 0);
                                 			       hls_map_index++;
								}
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1176; i++)
		{
			sprintf(tvin_DATA_OUTPUT, "%s\n", (DATA_OUTPUT_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_DATA_OUTPUT, tvin_DATA_OUTPUT);
		}

		tcl_file.set_num(1176, &tcl_file.DATA_OUTPUT_depth);
		sprintf(tvin_DATA_OUTPUT, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_DATA_OUTPUT, tvin_DATA_OUTPUT);

		// release memory allocation
		delete [] DATA_OUTPUT_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_input_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_r, tvin_input_r);

		sc_bv<32> input_r_tvin_wrapc_buffer;

		// RTL Name: input_r
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_input_r, "%s\n", (input_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_r, tvin_input_r);
		}

		tcl_file.set_num(1, &tcl_file.input_r_depth);
		sprintf(tvin_input_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_r, tvin_input_r);

		// [[transaction]]
		sprintf(tvin_weights, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_weights, tvin_weights);

		sc_bv<32> weights_tvin_wrapc_buffer;

		// RTL Name: weights
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_weights, "%s\n", (weights_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_weights, tvin_weights);
		}

		tcl_file.set_num(1, &tcl_file.weights_depth);
		sprintf(tvin_weights, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_weights, tvin_weights);

		// [[transaction]]
		sprintf(tvin_bias, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_bias, tvin_bias);

		sc_bv<32> bias_tvin_wrapc_buffer;

		// RTL Name: bias
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_bias, "%s\n", (bias_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_bias, tvin_bias);
		}

		tcl_file.set_num(1, &tcl_file.bias_depth);
		sprintf(tvin_bias, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_bias, tvin_bias);

		// [[transaction]]
		sprintf(tvin_output_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_output_r, tvin_output_r);

		sc_bv<32> output_r_tvin_wrapc_buffer;

		// RTL Name: output_r
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_output_r, "%s\n", (output_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_output_r, tvin_output_r);
		}

		tcl_file.set_num(1, &tcl_file.output_r_depth);
		sprintf(tvin_output_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_output_r, tvin_output_r);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		int AESL_return = conv1(input, weights, bias, output);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_DATA_OUTPUT, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_DATA_OUTPUT, tvout_DATA_OUTPUT);

		sc_bv<32>* DATA_OUTPUT_tvout_wrapc_buffer = new sc_bv<32>[1176];

		// RTL Name: DATA_OUTPUT
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: output(31, 0)
				{
					// carray: (0) => (5) @ (1)
					for (int i_0 = 0; i_0 <= 5; i_0 += 1)
					{
						// carray: (0) => (13) @ (1)
						for (int i_1 = 0; i_1 <= 13; i_1 += 1)
						{
							// carray: (0) => (13) @ (1)
							for (int i_2 = 0; i_2 <= 13; i_2 += 1)
							{
								// sub                   : i_0 i_1 i_2
								// ori_name              : output[i_0][i_1][i_2]
								// sub_1st_elem          : 0 0 0
								// ori_name_1st_elem     : output[0][0][0]
								// regulate_c_name       : output
								// input_type_conversion : *(int*)&output[i_0][i_1][i_2]
								if (&(output[0][0][0]) != NULL) // check the null address if the c port is array or others
								{
									sc_lv<32> output_tmp_mem;
									output_tmp_mem = *(int*)&output[i_0][i_1][i_2];
									DATA_OUTPUT_tvout_wrapc_buffer[hls_map_index].range(31, 0) = output_tmp_mem.range(31, 0);
                                 			       hls_map_index++;
								}
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1176; i++)
		{
			sprintf(tvout_DATA_OUTPUT, "%s\n", (DATA_OUTPUT_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_DATA_OUTPUT, tvout_DATA_OUTPUT);
		}

		tcl_file.set_num(1176, &tcl_file.DATA_OUTPUT_depth);
		sprintf(tvout_DATA_OUTPUT, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_DATA_OUTPUT, tvout_DATA_OUTPUT);

		// release memory allocation
		delete [] DATA_OUTPUT_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_ap_return, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

		sc_bv<32> ap_return_tvout_wrapc_buffer;

		// RTL Name: ap_return
		{
			// bitslice(31, 0)
			{
				// celement: return(31, 0)
				{
					// carray: (0) => (1) @ (0)
					{
						// sub                   : 
						// ori_name              : AESL_return
						// sub_1st_elem          : 
						// ori_name_1st_elem     : AESL_return
						// regulate_c_name       : return
						// input_type_conversion : AESL_return
						if (&(AESL_return) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> return_tmp_mem;
							return_tmp_mem = AESL_return;
							ap_return_tvout_wrapc_buffer.range(31, 0) = return_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_ap_return, "%s\n", (ap_return_tvout_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);
		}

		tcl_file.set_num(1, &tcl_file.ap_return_depth);
		sprintf(tvout_ap_return, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "DATA_INPUT"
		delete [] tvin_DATA_INPUT;
		// release memory allocation: "DATA_WEIGHT"
		delete [] tvin_DATA_WEIGHT;
		// release memory allocation: "DATA_BIAS"
		delete [] tvin_DATA_BIAS;
		// release memory allocation: "DATA_OUTPUT"
		delete [] tvout_DATA_OUTPUT;
		delete [] tvin_DATA_OUTPUT;
		// release memory allocation: "input_r"
		delete [] tvin_input_r;
		// release memory allocation: "weights"
		delete [] tvin_weights;
		// release memory allocation: "bias"
		delete [] tvin_bias;
		// release memory allocation: "output_r"
		delete [] tvin_output_r;
		// release memory allocation: "ap_return"
		delete [] tvout_ap_return;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

		return AESL_return;
	}
}

