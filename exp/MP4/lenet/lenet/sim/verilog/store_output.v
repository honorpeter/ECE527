// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module store_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY,
        m_axi_output_r_AWADDR,
        m_axi_output_r_AWID,
        m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID,
        m_axi_output_r_WREADY,
        m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST,
        m_axi_output_r_WID,
        m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY,
        m_axi_output_r_ARADDR,
        m_axi_output_r_ARID,
        m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID,
        m_axi_output_r_RREADY,
        m_axi_output_r_RDATA,
        m_axi_output_r_RLAST,
        m_axi_output_r_RID,
        m_axi_output_r_RUSER,
        m_axi_output_r_RRESP,
        m_axi_output_r_BVALID,
        m_axi_output_r_BREADY,
        m_axi_output_r_BRESP,
        m_axi_output_r_BID,
        m_axi_output_r_BUSER,
        output_offset,
        output_oc_address0,
        output_oc_ce0,
        output_oc_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_output_r_AWVALID;
input   m_axi_output_r_AWREADY;
output  [31:0] m_axi_output_r_AWADDR;
output  [0:0] m_axi_output_r_AWID;
output  [31:0] m_axi_output_r_AWLEN;
output  [2:0] m_axi_output_r_AWSIZE;
output  [1:0] m_axi_output_r_AWBURST;
output  [1:0] m_axi_output_r_AWLOCK;
output  [3:0] m_axi_output_r_AWCACHE;
output  [2:0] m_axi_output_r_AWPROT;
output  [3:0] m_axi_output_r_AWQOS;
output  [3:0] m_axi_output_r_AWREGION;
output  [0:0] m_axi_output_r_AWUSER;
output   m_axi_output_r_WVALID;
input   m_axi_output_r_WREADY;
output  [31:0] m_axi_output_r_WDATA;
output  [3:0] m_axi_output_r_WSTRB;
output   m_axi_output_r_WLAST;
output  [0:0] m_axi_output_r_WID;
output  [0:0] m_axi_output_r_WUSER;
output   m_axi_output_r_ARVALID;
input   m_axi_output_r_ARREADY;
output  [31:0] m_axi_output_r_ARADDR;
output  [0:0] m_axi_output_r_ARID;
output  [31:0] m_axi_output_r_ARLEN;
output  [2:0] m_axi_output_r_ARSIZE;
output  [1:0] m_axi_output_r_ARBURST;
output  [1:0] m_axi_output_r_ARLOCK;
output  [3:0] m_axi_output_r_ARCACHE;
output  [2:0] m_axi_output_r_ARPROT;
output  [3:0] m_axi_output_r_ARQOS;
output  [3:0] m_axi_output_r_ARREGION;
output  [0:0] m_axi_output_r_ARUSER;
input   m_axi_output_r_RVALID;
output   m_axi_output_r_RREADY;
input  [31:0] m_axi_output_r_RDATA;
input   m_axi_output_r_RLAST;
input  [0:0] m_axi_output_r_RID;
input  [0:0] m_axi_output_r_RUSER;
input  [1:0] m_axi_output_r_RRESP;
input   m_axi_output_r_BVALID;
output   m_axi_output_r_BREADY;
input  [1:0] m_axi_output_r_BRESP;
input  [0:0] m_axi_output_r_BID;
input  [0:0] m_axi_output_r_BUSER;
input  [29:0] output_offset;
output  [10:0] output_oc_address0;
output   output_oc_ce0;
input  [31:0] output_oc_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_output_r_AWVALID;
reg m_axi_output_r_WVALID;
reg m_axi_output_r_BREADY;
reg output_oc_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    output_r_blk_n_AW;
wire    ap_CS_fsm_state4;
reg    output_r_blk_n_W;
wire    ap_CS_fsm_state7;
reg    output_r_blk_n_B;
wire    ap_CS_fsm_state11;
wire   [63:0] sext_fu_134_p1;
reg   [63:0] sext_reg_264;
wire   [4:0] i_2_fu_144_p2;
reg   [4:0] i_2_reg_272;
wire    ap_CS_fsm_state2;
wire   [8:0] tmp_1_fu_174_p2;
reg   [8:0] tmp_1_reg_277;
wire   [0:0] exitcond2_fu_138_p2;
wire   [3:0] j_2_fu_186_p2;
reg   [3:0] j_2_reg_285;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_5_fu_225_p2;
reg   [63:0] tmp_5_reg_290;
wire   [0:0] exitcond1_fu_180_p2;
reg   [31:0] output_addr_reg_295;
wire   [3:0] k_2_fu_248_p2;
reg   [3:0] k_2_reg_304;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_242_p2;
reg   [31:0] output_oc_load_reg_314;
wire    ap_CS_fsm_state6;
reg   [4:0] i_reg_101;
reg   [3:0] j_reg_112;
reg   [3:0] k_reg_123;
reg    ap_sig_ioackin_m_axi_output_r_WREADY;
reg    ap_sig_ioackin_m_axi_output_r_AWREADY;
wire   [63:0] tmp_7_fu_258_p2;
wire   [63:0] tmp_6_fu_231_p2;
reg    ap_reg_ioackin_m_axi_output_r_AWREADY;
reg    ap_reg_ioackin_m_axi_output_r_WREADY;
wire   [7:0] tmp_fu_150_p3;
wire   [5:0] tmp_s_fu_162_p3;
wire   [8:0] p_shl1_cast_fu_170_p1;
wire   [8:0] p_shl_cast_fu_158_p1;
wire   [8:0] tmp_7_cast_fu_192_p1;
wire   [8:0] tmp_2_fu_196_p2;
wire   [11:0] tmp_3_fu_201_p3;
wire   [9:0] tmp_4_fu_213_p3;
wire   [63:0] p_shl3_fu_221_p1;
wire   [63:0] p_shl2_fu_209_p1;
wire   [63:0] tmp_9_fu_254_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_reg_ioackin_m_axi_output_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_output_r_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_output_r_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_sig_ioackin_m_axi_output_r_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_output_r_AWREADY <= 1'b0;
            end else if ((m_axi_output_r_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_output_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_output_r_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((ap_sig_ioackin_m_axi_output_r_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_output_r_WREADY <= 1'b0;
            end else if ((m_axi_output_r_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_output_r_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_180_p2 == 1'd1))) begin
        i_reg_101 <= i_2_reg_272;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_101 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_112 <= 4'd0;
    end else if (((m_axi_output_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        j_reg_112 <= j_2_reg_285;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_m_axi_output_r_AWREADY == 1'b1))) begin
        k_reg_123 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (ap_sig_ioackin_m_axi_output_r_WREADY == 1'b1))) begin
        k_reg_123 <= k_2_reg_304;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_272 <= i_2_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_285 <= j_2_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_2_reg_304 <= k_2_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_addr_reg_295 <= tmp_6_fu_231_p2;
        tmp_5_reg_290[63 : 1] <= tmp_5_fu_225_p2[63 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_oc_load_reg_314 <= output_oc_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_reg_264[29 : 0] <= sext_fu_134_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_277[8 : 1] <= tmp_1_fu_174_p2[8 : 1];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_138_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_138_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_output_r_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_output_r_AWREADY = m_axi_output_r_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_output_r_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_output_r_WREADY = m_axi_output_r_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_output_r_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        m_axi_output_r_AWVALID = 1'b1;
    end else begin
        m_axi_output_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_output_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_output_r_BREADY = 1'b1;
    end else begin
        m_axi_output_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_output_r_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_output_r_WVALID = 1'b1;
    end else begin
        m_axi_output_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_oc_ce0 = 1'b1;
    end else begin
        output_oc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_blk_n_AW = m_axi_output_r_AWREADY;
    end else begin
        output_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_blk_n_B = m_axi_output_r_BVALID;
    end else begin
        output_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_blk_n_W = m_axi_output_r_WREADY;
    end else begin
        output_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_138_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_180_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_sig_ioackin_m_axi_output_r_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_242_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (ap_sig_ioackin_m_axi_output_r_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_output_r_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign exitcond1_fu_180_p2 = ((j_reg_112 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond2_fu_138_p2 = ((i_reg_101 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_242_p2 = ((k_reg_123 == 4'd10) ? 1'b1 : 1'b0);

assign i_2_fu_144_p2 = (i_reg_101 + 5'd1);

assign j_2_fu_186_p2 = (j_reg_112 + 4'd1);

assign k_2_fu_248_p2 = (k_reg_123 + 4'd1);

assign m_axi_output_r_ARADDR = 32'd0;

assign m_axi_output_r_ARBURST = 2'd0;

assign m_axi_output_r_ARCACHE = 4'd0;

assign m_axi_output_r_ARID = 1'd0;

assign m_axi_output_r_ARLEN = 32'd0;

assign m_axi_output_r_ARLOCK = 2'd0;

assign m_axi_output_r_ARPROT = 3'd0;

assign m_axi_output_r_ARQOS = 4'd0;

assign m_axi_output_r_ARREGION = 4'd0;

assign m_axi_output_r_ARSIZE = 3'd0;

assign m_axi_output_r_ARUSER = 1'd0;

assign m_axi_output_r_ARVALID = 1'b0;

assign m_axi_output_r_AWADDR = output_addr_reg_295;

assign m_axi_output_r_AWBURST = 2'd0;

assign m_axi_output_r_AWCACHE = 4'd0;

assign m_axi_output_r_AWID = 1'd0;

assign m_axi_output_r_AWLEN = 32'd10;

assign m_axi_output_r_AWLOCK = 2'd0;

assign m_axi_output_r_AWPROT = 3'd0;

assign m_axi_output_r_AWQOS = 4'd0;

assign m_axi_output_r_AWREGION = 4'd0;

assign m_axi_output_r_AWSIZE = 3'd0;

assign m_axi_output_r_AWUSER = 1'd0;

assign m_axi_output_r_RREADY = 1'b0;

assign m_axi_output_r_WDATA = output_oc_load_reg_314;

assign m_axi_output_r_WID = 1'd0;

assign m_axi_output_r_WLAST = 1'b0;

assign m_axi_output_r_WSTRB = 4'd15;

assign m_axi_output_r_WUSER = 1'd0;

assign output_oc_address0 = tmp_7_fu_258_p2;

assign p_shl1_cast_fu_170_p1 = tmp_s_fu_162_p3;

assign p_shl2_fu_209_p1 = tmp_3_fu_201_p3;

assign p_shl3_fu_221_p1 = tmp_4_fu_213_p3;

assign p_shl_cast_fu_158_p1 = tmp_fu_150_p3;

assign sext_fu_134_p1 = output_offset;

assign tmp_1_fu_174_p2 = (p_shl1_cast_fu_170_p1 + p_shl_cast_fu_158_p1);

assign tmp_2_fu_196_p2 = (tmp_1_reg_277 + tmp_7_cast_fu_192_p1);

assign tmp_3_fu_201_p3 = {{tmp_2_fu_196_p2}, {3'd0}};

assign tmp_4_fu_213_p3 = {{tmp_2_fu_196_p2}, {1'd0}};

assign tmp_5_fu_225_p2 = (p_shl3_fu_221_p1 + p_shl2_fu_209_p1);

assign tmp_6_fu_231_p2 = (sext_reg_264 + tmp_5_fu_225_p2);

assign tmp_7_cast_fu_192_p1 = j_reg_112;

assign tmp_7_fu_258_p2 = (tmp_9_fu_254_p1 + tmp_5_reg_290);

assign tmp_9_fu_254_p1 = k_reg_123;

assign tmp_fu_150_p3 = {{i_reg_101}, {3'd0}};

assign tmp_s_fu_162_p3 = {{i_reg_101}, {1'd0}};

always @ (posedge ap_clk) begin
    sext_reg_264[63:30] <= 34'b0000000000000000000000000000000000;
    tmp_1_reg_277[0] <= 1'b0;
    tmp_5_reg_290[0] <= 1'b0;
end

endmodule //store_output
