// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        weights_offset,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_pp0_stage0 = 16'd8;
parameter    ap_ST_fsm_pp0_stage1 = 16'd16;
parameter    ap_ST_fsm_pp0_stage2 = 16'd32;
parameter    ap_ST_fsm_pp0_stage3 = 16'd64;
parameter    ap_ST_fsm_pp0_stage4 = 16'd128;
parameter    ap_ST_fsm_state24 = 16'd256;
parameter    ap_ST_fsm_state25 = 16'd512;
parameter    ap_ST_fsm_state26 = 16'd1024;
parameter    ap_ST_fsm_state27 = 16'd2048;
parameter    ap_ST_fsm_state28 = 16'd4096;
parameter    ap_ST_fsm_state29 = 16'd8192;
parameter    ap_ST_fsm_state30 = 16'd16384;
parameter    ap_ST_fsm_state31 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [31:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [31:0] m_axi_weights_WDATA;
output  [3:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [31:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [31:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [29:0] weights_offset;
output  [3:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg m_axi_weights_ARVALID;
reg m_axi_weights_RREADY;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_blk_n_AR;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage3;
reg   [0:0] exitcond_flatten4_reg_862;
reg    weights_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten4_reg_862_pp0_iter1_reg;
reg   [7:0] indvar_flatten4_reg_229;
reg   [2:0] m_reg_240;
reg   [5:0] indvar_flatten_reg_251;
reg   [2:0] n_reg_262;
reg   [31:0] sum_2_reg_273;
reg   [2:0] ci_reg_285;
wire   [63:0] sext_fu_305_p1;
reg   [63:0] sext_reg_800;
wire   [10:0] indvar_flatten_next3_fu_315_p2;
reg   [10:0] indvar_flatten_next3_reg_808;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_321_p2;
reg   [0:0] exitcond_flatten_reg_813;
wire   [0:0] exitcond_flatten3_fu_309_p2;
wire   [3:0] h_mid_fu_327_p3;
reg   [3:0] h_mid_reg_821;
wire   [4:0] tmp_mid2_v_fu_341_p3;
reg   [4:0] tmp_mid2_v_reg_827;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_mid2_fu_348_p1;
reg   [63:0] tmp_mid2_reg_832;
wire  signed [9:0] tmp_131_cast_fu_382_p1;
reg  signed [9:0] tmp_131_cast_reg_837;
wire   [3:0] w_mid2_fu_419_p3;
reg   [3:0] w_mid2_reg_842;
wire   [3:0] tmp_mid2_25_fu_427_p3;
reg   [3:0] tmp_mid2_25_reg_851;
wire   [11:0] tmp_135_fu_464_p2;
reg   [11:0] tmp_135_reg_857;
wire   [0:0] exitcond_flatten4_fu_479_p2;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_state14_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten4_reg_862_pp0_iter2_reg;
reg   [0:0] exitcond_flatten4_reg_862_pp0_iter3_reg;
wire   [7:0] indvar_flatten_next4_fu_485_p2;
reg   [7:0] indvar_flatten_next4_reg_866;
wire   [2:0] tmp_9_mid2_v_fu_511_p3;
reg   [2:0] tmp_9_mid2_v_reg_871;
reg   [2:0] tmp_9_mid2_v_reg_871_pp0_iter1_reg;
wire   [2:0] ci_mid2_fu_549_p3;
reg   [2:0] ci_mid2_reg_878;
reg   [2:0] ci_mid2_reg_878_pp0_iter1_reg;
wire   [2:0] tmp_4_mid2_fu_561_p3;
reg   [2:0] tmp_4_mid2_reg_886;
wire   [3:0] tmp_139_fu_581_p3;
reg   [3:0] tmp_139_reg_892;
reg   [3:0] tmp_139_reg_892_pp0_iter1_reg;
wire   [5:0] indvar_flatten_next_fu_595_p3;
reg   [5:0] indvar_flatten_next_reg_897;
wire   [63:0] tmp_151_fu_636_p2;
reg   [63:0] tmp_151_reg_902;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_state15_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] weights_addr_reg_908;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_state16_pp0_stage2_iter2;
wire    ap_block_state21_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire   [2:0] ci_1_fu_672_p2;
reg   [2:0] ci_1_reg_914;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_state13_pp0_stage4_iter1;
wire    ap_block_state18_pp0_stage4_iter2;
wire    ap_block_state23_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_11001;
wire   [11:0] tmp_147_fu_760_p2;
reg   [11:0] tmp_147_reg_919;
wire    ap_block_state7_pp0_stage3_iter0;
reg    ap_sig_ioackin_m_axi_weights_ARREADY;
reg    ap_block_state7_io;
wire    ap_block_state12_pp0_stage3_iter1;
wire    ap_block_state17_pp0_stage3_iter2;
wire    ap_block_state22_pp0_stage3_iter3;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] weights_addr_read_reg_929;
reg   [31:0] input_load_reg_934;
wire   [31:0] grp_fu_301_p2;
reg   [31:0] tmp_11_reg_939;
wire   [31:0] grp_fu_296_p2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state24;
wire   [11:0] tmp_136_fu_773_p2;
reg   [11:0] tmp_136_reg_954;
wire   [3:0] w_3_fu_778_p2;
reg   [3:0] w_3_reg_959;
wire   [7:0] indvar_flatten_next2_fu_789_p3;
reg   [7:0] indvar_flatten_next2_reg_964;
reg   [31:0] bias_load_reg_969;
wire    ap_CS_fsm_state25;
reg   [31:0] tmp_7_reg_974;
wire    ap_CS_fsm_state30;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage4_subdone;
reg   [10:0] indvar_flatten2_reg_171;
wire    ap_CS_fsm_state31;
reg   [4:0] co_reg_182;
reg   [7:0] indvar_flatten3_reg_194;
reg   [3:0] h_reg_206;
reg   [3:0] w_reg_217;
reg   [7:0] ap_phi_mux_indvar_flatten4_phi_fu_233_p4;
reg   [2:0] ap_phi_mux_m_phi_fu_244_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_255_p4;
reg   [2:0] ap_phi_mux_n_phi_fu_266_p4;
wire   [31:0] ap_phi_mux_sum_2_phi_fu_277_p4;
reg   [2:0] ap_phi_mux_ci_phi_fu_289_p4;
wire   [63:0] tmp_149_cast_fu_766_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_140_cast_fu_796_p1;
wire   [63:0] sum_fu_661_p2;
wire    ap_block_pp0_stage2;
reg    ap_reg_ioackin_m_axi_weights_ARREADY;
wire    ap_block_pp0_stage3_01001;
reg   [31:0] grp_fu_296_p0;
reg   [31:0] grp_fu_296_p1;
wire    ap_CS_fsm_state26;
wire    ap_block_pp0_stage1;
wire   [4:0] co_2_fu_335_p2;
wire   [7:0] tmp_fu_352_p3;
wire   [5:0] tmp_s_fu_364_p3;
wire   [8:0] p_shl4_cast_fu_360_p1;
wire   [8:0] p_shl5_cast_fu_372_p1;
wire   [8:0] tmp_130_fu_376_p2;
wire   [0:0] exitcond_fu_397_p2;
wire   [0:0] not_exitcond_flatten_2_fu_392_p2;
wire   [0:0] exitcond3_mid_fu_403_p2;
wire   [0:0] tmp_132_fu_414_p2;
wire   [3:0] h_2_fu_409_p2;
wire   [8:0] tmp_mid2_cast_fu_434_p1;
wire   [8:0] tmp_131_fu_386_p2;
wire   [8:0] tmp_133_fu_438_p2;
wire   [9:0] tmp_134_fu_452_p3;
wire   [11:0] p_shl_cast_fu_444_p3;
wire   [11:0] p_shl1_cast_fu_460_p1;
wire   [3:0] n_cast_fu_470_p1;
wire   [0:0] exitcond_flatten1_fu_497_p2;
wire   [2:0] m_1_fu_491_p2;
wire   [0:0] exitcond1_fu_525_p2;
wire   [0:0] not_exitcond_flatten_fu_519_p2;
wire   [2:0] n_mid_fu_503_p3;
wire   [0:0] exitcond_mid_fu_531_p2;
wire   [0:0] tmp_137_fu_543_p2;
wire   [2:0] n_1_fu_537_p2;
wire   [3:0] n_cast_mid1_fu_557_p1;
wire   [3:0] tmp_5_fu_474_p2;
wire   [3:0] tmp_5_mid1_fu_569_p2;
wire   [3:0] tmp_138_fu_574_p3;
wire   [5:0] indvar_flatten_op_fu_589_p2;
wire   [9:0] tmp_10_cast_fu_606_p1;
wire  signed [9:0] tmp_148_fu_609_p2;
wire   [11:0] tmp_149_fu_618_p3;
wire  signed [63:0] tmp_150_cast_fu_614_p1;
wire  signed [63:0] p_shl7_fu_626_p1;
wire   [63:0] tmp_150_fu_630_p2;
wire   [63:0] tmp_9_mid2_fu_603_p1;
wire   [63:0] tmp_152_fu_645_p2;
wire   [63:0] tmp_153_fu_650_p2;
wire   [63:0] tmp_4_mid2_cast_fu_642_p1;
wire   [63:0] tmp_154_fu_655_p2;
wire   [3:0] tmp_3_mid2_v_v_fu_677_p1;
wire   [3:0] tmp_3_mid2_v_fu_680_p2;
wire   [6:0] tmp_140_fu_692_p3;
wire   [3:0] tmp_141_fu_703_p3;
wire   [7:0] p_shl10_cast_fu_699_p1;
wire   [7:0] p_shl11_cast_fu_710_p1;
wire   [7:0] tmp_142_fu_714_p2;
wire  signed [8:0] tmp_144_cast_fu_720_p1;
wire   [8:0] tmp_3_mid2_cast_fu_685_p1;
wire   [8:0] tmp_143_fu_724_p2;
wire   [7:0] tmp_144_fu_730_p1;
wire   [9:0] tmp_145_fu_742_p3;
wire   [11:0] p_shl8_cast_fu_734_p3;
wire  signed [11:0] p_shl9_cast_fu_750_p1;
wire   [11:0] tmp_146_fu_754_p2;
wire   [11:0] tmp_6_mid2_cast_fu_689_p1;
wire   [11:0] tmp_8_cast_fu_770_p1;
wire   [7:0] indvar_flatten28_op_fu_783_p2;
reg    grp_fu_296_ce;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
reg    grp_fu_301_ce;
reg   [15:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_856;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_m_axi_weights_ARREADY = 1'b0;
end

conv1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fadd_32ns_3bkb_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_296_p0),
    .din1(grp_fu_296_p1),
    .ce(grp_fu_296_ce),
    .dout(grp_fu_296_p2)
);

conv1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fmul_32ns_3cud_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_addr_read_reg_929),
    .din1(input_load_reg_934),
    .ce(grp_fu_301_ce),
    .dout(grp_fu_301_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_856)) begin
            if ((1'b0 == ap_block_pp0_stage3_11001)) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage3_01001) & (m_axi_weights_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ci_reg_285 <= ci_1_reg_914;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ci_reg_285 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        co_reg_182 <= tmp_mid2_v_reg_827;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        co_reg_182 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        h_reg_206 <= tmp_mid2_25_reg_851;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h_reg_206 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        indvar_flatten2_reg_171 <= indvar_flatten_next3_reg_808;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten2_reg_171 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        indvar_flatten3_reg_194 <= indvar_flatten_next2_reg_964;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_194 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten4_reg_229 <= indvar_flatten_next4_reg_866;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten4_reg_229 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_251 <= indvar_flatten_next_reg_897;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_251 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_reg_240 <= tmp_9_mid2_v_reg_871;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_reg_240 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        n_reg_262 <= tmp_4_mid2_reg_886;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        n_reg_262 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        sum_2_reg_273 <= grp_fu_296_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_2_reg_273 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        w_reg_217 <= w_3_reg_959;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_reg_217 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        bias_load_reg_969 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ci_1_reg_914 <= ci_1_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ci_mid2_reg_878 <= ci_mid2_fu_549_p3;
        tmp_139_reg_892 <= tmp_139_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ci_mid2_reg_878_pp0_iter1_reg <= ci_mid2_reg_878;
        exitcond_flatten4_reg_862 <= exitcond_flatten4_fu_479_p2;
        exitcond_flatten4_reg_862_pp0_iter1_reg <= exitcond_flatten4_reg_862;
        exitcond_flatten4_reg_862_pp0_iter2_reg <= exitcond_flatten4_reg_862_pp0_iter1_reg;
        exitcond_flatten4_reg_862_pp0_iter3_reg <= exitcond_flatten4_reg_862_pp0_iter2_reg;
        tmp_139_reg_892_pp0_iter1_reg <= tmp_139_reg_892;
        tmp_9_mid2_v_reg_871_pp0_iter1_reg <= tmp_9_mid2_v_reg_871;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        exitcond_flatten_reg_813 <= exitcond_flatten_fu_321_p2;
        h_mid_reg_821 <= h_mid_fu_327_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten_next2_reg_964 <= indvar_flatten_next2_fu_789_p3;
        tmp_136_reg_954 <= tmp_136_fu_773_p2;
        w_3_reg_959 <= w_3_fu_778_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next3_reg_808 <= indvar_flatten_next3_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next4_reg_866 <= indvar_flatten_next4_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_897 <= indvar_flatten_next_fu_595_p3;
        tmp_4_mid2_reg_886 <= tmp_4_mid2_fu_561_p3;
        tmp_9_mid2_v_reg_871 <= tmp_9_mid2_v_fu_511_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_load_reg_934 <= input_r_q0;
        weights_addr_read_reg_929 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_reg_800[29 : 0] <= sext_fu_305_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_11_reg_939 <= grp_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_131_cast_reg_837[9 : 1] <= tmp_131_cast_fu_382_p1[9 : 1];
        tmp_135_reg_857[11 : 1] <= tmp_135_fu_464_p2[11 : 1];
        tmp_mid2_25_reg_851 <= tmp_mid2_25_fu_427_p3;
        tmp_mid2_reg_832[4 : 0] <= tmp_mid2_fu_348_p1[4 : 0];
        tmp_mid2_v_reg_827 <= tmp_mid2_v_fu_341_p3;
        w_mid2_reg_842 <= w_mid2_fu_419_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_147_reg_919 <= tmp_147_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_151_reg_902 <= tmp_151_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp_7_reg_974 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        weights_addr_reg_908 <= sum_fu_661_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten4_fu_479_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten3_fu_309_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_ci_phi_fu_289_p4 = ci_1_reg_914;
    end else begin
        ap_phi_mux_ci_phi_fu_289_p4 = ci_reg_285;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten4_phi_fu_233_p4 = indvar_flatten_next4_reg_866;
    end else begin
        ap_phi_mux_indvar_flatten4_phi_fu_233_p4 = indvar_flatten4_reg_229;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_255_p4 = indvar_flatten_next_reg_897;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_255_p4 = indvar_flatten_reg_251;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_m_phi_fu_244_p4 = tmp_9_mid2_v_reg_871;
    end else begin
        ap_phi_mux_m_phi_fu_244_p4 = m_reg_240;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_n_phi_fu_266_p4 = tmp_4_mid2_reg_886;
    end else begin
        ap_phi_mux_n_phi_fu_266_p4 = n_reg_262;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten3_fu_309_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_weights_ARREADY = m_axi_weights_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weights_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state30) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_296_ce = 1'b1;
    end else begin
        grp_fu_296_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_296_p0 = sum_2_reg_273;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_296_p0 = ap_phi_mux_sum_2_phi_fu_277_p4;
    end else begin
        grp_fu_296_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_296_p1 = bias_load_reg_969;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_296_p1 = tmp_11_reg_939;
    end else begin
        grp_fu_296_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_301_ce = 1'b1;
    end else begin
        grp_fu_301_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (1'b0 == ap_block_pp0_stage3_01001) & (ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        m_axi_weights_ARVALID = 1'b1;
    end else begin
        m_axi_weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_862_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_weights_RREADY = 1'b1;
    end else begin
        m_axi_weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        weights_blk_n_AR = m_axi_weights_ARREADY;
    end else begin
        weights_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_862_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_blk_n_R = m_axi_weights_RVALID;
    end else begin
        weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten3_fu_309_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten4_fu_479_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten4_fu_479_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd15];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_flatten4_reg_862_pp0_iter1_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_flatten4_reg_862_pp0_iter1_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage0_iter2 = ((exitcond_flatten4_reg_862_pp0_iter1_reg == 1'd0) & (m_axi_weights_RVALID == 1'b0));
end

assign ap_block_state15_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((exitcond_flatten4_reg_862 == 1'd0) & (ap_sig_ioackin_m_axi_weights_ARREADY == 1'b0));
end

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_856 = ((exitcond_flatten4_reg_862 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_sum_2_phi_fu_277_p4 = sum_2_reg_273;

assign bias_address0 = tmp_mid2_reg_832;

assign ci_1_fu_672_p2 = (3'd1 + ci_mid2_reg_878);

assign ci_mid2_fu_549_p3 = ((tmp_137_fu_543_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_ci_phi_fu_289_p4);

assign co_2_fu_335_p2 = (co_reg_182 + 5'd1);

assign exitcond1_fu_525_p2 = ((ap_phi_mux_ci_phi_fu_289_p4 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond3_mid_fu_403_p2 = (not_exitcond_flatten_2_fu_392_p2 & exitcond_fu_397_p2);

assign exitcond_flatten1_fu_497_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_255_p4 == 6'd30) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_309_p2 = ((indvar_flatten2_reg_171 == 11'd1600) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_479_p2 = ((ap_phi_mux_indvar_flatten4_phi_fu_233_p4 == 8'd150) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_321_p2 = ((indvar_flatten3_reg_194 == 8'd100) ? 1'b1 : 1'b0);

assign exitcond_fu_397_p2 = ((w_reg_217 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_531_p2 = (not_exitcond_flatten_fu_519_p2 & exitcond1_fu_525_p2);

assign h_2_fu_409_p2 = (h_mid_reg_821 + 4'd1);

assign h_mid_fu_327_p3 = ((exitcond_flatten_fu_321_p2[0:0] === 1'b1) ? 4'd0 : h_reg_206);

assign indvar_flatten28_op_fu_783_p2 = (indvar_flatten3_reg_194 + 8'd1);

assign indvar_flatten_next2_fu_789_p3 = ((exitcond_flatten_reg_813[0:0] === 1'b1) ? 8'd1 : indvar_flatten28_op_fu_783_p2);

assign indvar_flatten_next3_fu_315_p2 = (indvar_flatten2_reg_171 + 11'd1);

assign indvar_flatten_next4_fu_485_p2 = (ap_phi_mux_indvar_flatten4_phi_fu_233_p4 + 8'd1);

assign indvar_flatten_next_fu_595_p3 = ((exitcond_flatten1_fu_497_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten_op_fu_589_p2);

assign indvar_flatten_op_fu_589_p2 = (6'd1 + ap_phi_mux_indvar_flatten_phi_fu_255_p4);

assign input_r_address0 = tmp_149_cast_fu_766_p1;

assign m_1_fu_491_p2 = (3'd1 + ap_phi_mux_m_phi_fu_244_p4);

assign m_axi_weights_ARADDR = weights_addr_reg_908;

assign m_axi_weights_ARBURST = 2'd0;

assign m_axi_weights_ARCACHE = 4'd0;

assign m_axi_weights_ARID = 1'd0;

assign m_axi_weights_ARLEN = 32'd1;

assign m_axi_weights_ARLOCK = 2'd0;

assign m_axi_weights_ARPROT = 3'd0;

assign m_axi_weights_ARQOS = 4'd0;

assign m_axi_weights_ARREGION = 4'd0;

assign m_axi_weights_ARSIZE = 3'd0;

assign m_axi_weights_ARUSER = 1'd0;

assign m_axi_weights_AWADDR = 32'd0;

assign m_axi_weights_AWBURST = 2'd0;

assign m_axi_weights_AWCACHE = 4'd0;

assign m_axi_weights_AWID = 1'd0;

assign m_axi_weights_AWLEN = 32'd0;

assign m_axi_weights_AWLOCK = 2'd0;

assign m_axi_weights_AWPROT = 3'd0;

assign m_axi_weights_AWQOS = 4'd0;

assign m_axi_weights_AWREGION = 4'd0;

assign m_axi_weights_AWSIZE = 3'd0;

assign m_axi_weights_AWUSER = 1'd0;

assign m_axi_weights_AWVALID = 1'b0;

assign m_axi_weights_BREADY = 1'b0;

assign m_axi_weights_WDATA = 32'd0;

assign m_axi_weights_WID = 1'd0;

assign m_axi_weights_WLAST = 1'b0;

assign m_axi_weights_WSTRB = 4'd0;

assign m_axi_weights_WUSER = 1'd0;

assign m_axi_weights_WVALID = 1'b0;

assign n_1_fu_537_p2 = (3'd1 + n_mid_fu_503_p3);

assign n_cast_fu_470_p1 = ap_phi_mux_n_phi_fu_266_p4;

assign n_cast_mid1_fu_557_p1 = n_1_fu_537_p2;

assign n_mid_fu_503_p3 = ((exitcond_flatten1_fu_497_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_n_phi_fu_266_p4);

assign not_exitcond_flatten_2_fu_392_p2 = (exitcond_flatten_reg_813 ^ 1'd1);

assign not_exitcond_flatten_fu_519_p2 = (exitcond_flatten1_fu_497_p2 ^ 1'd1);

assign output_r_address0 = tmp_140_cast_fu_796_p1;

assign output_r_d0 = tmp_7_reg_974;

assign p_shl10_cast_fu_699_p1 = tmp_140_fu_692_p3;

assign p_shl11_cast_fu_710_p1 = tmp_141_fu_703_p3;

assign p_shl1_cast_fu_460_p1 = tmp_134_fu_452_p3;

assign p_shl4_cast_fu_360_p1 = tmp_fu_352_p3;

assign p_shl5_cast_fu_372_p1 = tmp_s_fu_364_p3;

assign p_shl7_fu_626_p1 = $signed(tmp_149_fu_618_p3);

assign p_shl8_cast_fu_734_p3 = {{tmp_144_fu_730_p1}, {4'd0}};

assign p_shl9_cast_fu_750_p1 = $signed(tmp_145_fu_742_p3);

assign p_shl_cast_fu_444_p3 = {{tmp_133_fu_438_p2}, {3'd0}};

assign sext_fu_305_p1 = weights_offset;

assign sum_fu_661_p2 = (sext_reg_800 + tmp_154_fu_655_p2);

assign tmp_10_cast_fu_606_p1 = ci_mid2_reg_878;

assign tmp_130_fu_376_p2 = (p_shl4_cast_fu_360_p1 - p_shl5_cast_fu_372_p1);

assign tmp_131_cast_fu_382_p1 = $signed(tmp_130_fu_376_p2);

assign tmp_131_fu_386_p2 = (p_shl4_cast_fu_360_p1 + p_shl5_cast_fu_372_p1);

assign tmp_132_fu_414_p2 = (exitcond_flatten_reg_813 | exitcond3_mid_fu_403_p2);

assign tmp_133_fu_438_p2 = (tmp_mid2_cast_fu_434_p1 + tmp_131_fu_386_p2);

assign tmp_134_fu_452_p3 = {{tmp_133_fu_438_p2}, {1'd0}};

assign tmp_135_fu_464_p2 = (p_shl_cast_fu_444_p3 + p_shl1_cast_fu_460_p1);

assign tmp_136_fu_773_p2 = (tmp_135_reg_857 + tmp_8_cast_fu_770_p1);

assign tmp_137_fu_543_p2 = (exitcond_mid_fu_531_p2 | exitcond_flatten1_fu_497_p2);

assign tmp_138_fu_574_p3 = ((exitcond_flatten1_fu_497_p2[0:0] === 1'b1) ? w_mid2_reg_842 : tmp_5_fu_474_p2);

assign tmp_139_fu_581_p3 = ((exitcond_mid_fu_531_p2[0:0] === 1'b1) ? tmp_5_mid1_fu_569_p2 : tmp_138_fu_574_p3);

assign tmp_140_cast_fu_796_p1 = tmp_136_reg_954;

assign tmp_140_fu_692_p3 = {{ci_mid2_reg_878_pp0_iter1_reg}, {4'd0}};

assign tmp_141_fu_703_p3 = {{ci_mid2_reg_878_pp0_iter1_reg}, {1'd0}};

assign tmp_142_fu_714_p2 = (p_shl10_cast_fu_699_p1 - p_shl11_cast_fu_710_p1);

assign tmp_143_fu_724_p2 = ($signed(tmp_144_cast_fu_720_p1) + $signed(tmp_3_mid2_cast_fu_685_p1));

assign tmp_144_cast_fu_720_p1 = $signed(tmp_142_fu_714_p2);

assign tmp_144_fu_730_p1 = tmp_143_fu_724_p2[7:0];

assign tmp_145_fu_742_p3 = {{tmp_143_fu_724_p2}, {1'd0}};

assign tmp_146_fu_754_p2 = ($signed(p_shl8_cast_fu_734_p3) - $signed(p_shl9_cast_fu_750_p1));

assign tmp_147_fu_760_p2 = (tmp_146_fu_754_p2 + tmp_6_mid2_cast_fu_689_p1);

assign tmp_148_fu_609_p2 = ($signed(tmp_131_cast_reg_837) + $signed(tmp_10_cast_fu_606_p1));

assign tmp_149_cast_fu_766_p1 = tmp_147_reg_919;

assign tmp_149_fu_618_p3 = {{tmp_148_fu_609_p2}, {2'd0}};

assign tmp_150_cast_fu_614_p1 = tmp_148_fu_609_p2;

assign tmp_150_fu_630_p2 = ($signed(tmp_150_cast_fu_614_p1) + $signed(p_shl7_fu_626_p1));

assign tmp_151_fu_636_p2 = (tmp_150_fu_630_p2 + tmp_9_mid2_fu_603_p1);

assign tmp_152_fu_645_p2 = tmp_151_reg_902 << 64'd2;

assign tmp_153_fu_650_p2 = (tmp_151_reg_902 + tmp_152_fu_645_p2);

assign tmp_154_fu_655_p2 = (tmp_153_fu_650_p2 + tmp_4_mid2_cast_fu_642_p1);

assign tmp_3_mid2_cast_fu_685_p1 = tmp_3_mid2_v_fu_680_p2;

assign tmp_3_mid2_v_fu_680_p2 = (tmp_3_mid2_v_v_fu_677_p1 + tmp_mid2_25_reg_851);

assign tmp_3_mid2_v_v_fu_677_p1 = tmp_9_mid2_v_reg_871_pp0_iter1_reg;

assign tmp_4_mid2_cast_fu_642_p1 = tmp_4_mid2_reg_886;

assign tmp_4_mid2_fu_561_p3 = ((exitcond_mid_fu_531_p2[0:0] === 1'b1) ? n_1_fu_537_p2 : n_mid_fu_503_p3);

assign tmp_5_fu_474_p2 = (w_mid2_reg_842 + n_cast_fu_470_p1);

assign tmp_5_mid1_fu_569_p2 = (n_cast_mid1_fu_557_p1 + w_mid2_reg_842);

assign tmp_6_mid2_cast_fu_689_p1 = tmp_139_reg_892_pp0_iter1_reg;

assign tmp_8_cast_fu_770_p1 = w_mid2_reg_842;

assign tmp_9_mid2_fu_603_p1 = tmp_9_mid2_v_reg_871;

assign tmp_9_mid2_v_fu_511_p3 = ((exitcond_flatten1_fu_497_p2[0:0] === 1'b1) ? m_1_fu_491_p2 : ap_phi_mux_m_phi_fu_244_p4);

assign tmp_fu_352_p3 = {{tmp_mid2_v_fu_341_p3}, {3'd0}};

assign tmp_mid2_25_fu_427_p3 = ((exitcond3_mid_fu_403_p2[0:0] === 1'b1) ? h_2_fu_409_p2 : h_mid_reg_821);

assign tmp_mid2_cast_fu_434_p1 = tmp_mid2_25_fu_427_p3;

assign tmp_mid2_fu_348_p1 = tmp_mid2_v_fu_341_p3;

assign tmp_mid2_v_fu_341_p3 = ((exitcond_flatten_reg_813[0:0] === 1'b1) ? co_2_fu_335_p2 : co_reg_182);

assign tmp_s_fu_364_p3 = {{tmp_mid2_v_fu_341_p3}, {1'd0}};

assign w_3_fu_778_p2 = (w_mid2_reg_842 + 4'd1);

assign w_mid2_fu_419_p3 = ((tmp_132_fu_414_p2[0:0] === 1'b1) ? 4'd0 : w_reg_217);

always @ (posedge ap_clk) begin
    sext_reg_800[63:30] <= 34'b0000000000000000000000000000000000;
    tmp_mid2_reg_832[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_131_cast_reg_837[0] <= 1'b0;
    tmp_135_reg_857[0] <= 1'b0;
end

endmodule //convolution_3
