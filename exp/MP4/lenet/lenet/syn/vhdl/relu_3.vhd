-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of relu_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_10_fu_104_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_10_reg_257 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_25_fu_134_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_reg_262 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_146_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_reg_270 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_27_fu_181_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_reg_275 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_5_fu_193_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_5_reg_283 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_addr_reg_288 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_load_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_reg_60 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_71 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_41_cast_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_110_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_122_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_130_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_118_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_152_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_fu_156_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_169_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_161_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_177_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_cast_fu_199_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_203_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal output_load_to_int_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_216_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_226_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component conv1_fcmp_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv1_fcmp_32ns_3dEe_U46 : component conv1_fcmp_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => output_load_reg_293,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_9_fu_93_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_60 <= i_10_reg_257;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_60 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_71 <= j_6_reg_270;
            elsif (((exitcond2_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_71 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_reg_82 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_reg_82 <= k_5_reg_283;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_10_reg_257 <= i_10_fu_104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_6_reg_270 <= j_6_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_5_reg_283 <= k_5_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                output_addr_reg_288 <= tmp_41_cast_fu_208_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                output_load_reg_293 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_25_reg_262(8 downto 1) <= tmp_25_fu_134_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_140_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_27_reg_275(11 downto 1) <= tmp_27_fu_181_p2(11 downto 1);
            end if;
        end if;
    end process;
    tmp_25_reg_262(0) <= '0';
    tmp_27_reg_275(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_98_p2, ap_CS_fsm_state3, exitcond1_fu_140_p2, ap_CS_fsm_state4, exitcond_fu_187_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_140_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_98_p2)
    begin
        if ((((exitcond2_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_98_p2)
    begin
        if (((exitcond2_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_140_p2 <= "1" when (j_reg_71 = ap_const_lv4_A) else "0";
    exitcond2_fu_98_p2 <= "1" when (i_reg_60 = ap_const_lv5_10) else "0";
    exitcond_fu_187_p2 <= "1" when (k_reg_82 = ap_const_lv4_A) else "0";
    i_10_fu_104_p2 <= std_logic_vector(unsigned(i_reg_60) + unsigned(ap_const_lv5_1));
    j_6_fu_146_p2 <= std_logic_vector(unsigned(j_reg_71) + unsigned(ap_const_lv4_1));
    k_5_fu_193_p2 <= std_logic_vector(unsigned(k_reg_82) + unsigned(ap_const_lv4_1));
    notlhs_fu_230_p2 <= "0" when (tmp_5_fu_216_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_236_p2 <= "1" when (tmp_14_fu_226_p1 = ap_const_lv23_0) else "0";
    output_load_to_int_fu_213_p1 <= output_load_reg_293;

    output_r_address0_assign_proc : process(ap_CS_fsm_state4, output_addr_reg_288, ap_CS_fsm_state6, tmp_41_cast_fu_208_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= output_addr_reg_288;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= tmp_41_cast_fu_208_p1(11 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= ap_const_lv32_0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state6, tmp_10_fu_248_p2)
    begin
        if (((tmp_10_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_122_p3),9));
    p_shl2_cast_fu_161_p3 <= (tmp_26_fu_156_p2 & ap_const_lv3_0);
    p_shl3_cast_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_169_p3),12));
    p_shl_cast_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_110_p3),9));
    tmp_10_fu_248_p2 <= (tmp_9_fu_93_p2 and tmp_8_fu_242_p2);
    tmp_13_fu_169_p3 <= (tmp_26_fu_156_p2 & ap_const_lv1_0);
    tmp_14_fu_226_p1 <= output_load_to_int_fu_213_p1(23 - 1 downto 0);
    tmp_25_fu_134_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_130_p1) + unsigned(p_shl_cast_fu_118_p1));
    tmp_26_fu_156_p2 <= std_logic_vector(unsigned(tmp_cast_fu_152_p1) + unsigned(tmp_25_reg_262));
    tmp_27_fu_181_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_161_p3) + unsigned(p_shl3_cast_fu_177_p1));
    tmp_28_fu_203_p2 <= std_logic_vector(unsigned(tmp_27_reg_275) + unsigned(tmp_7_cast_fu_199_p1));
    tmp_41_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_203_p2),64));
    tmp_5_fu_216_p4 <= output_load_to_int_fu_213_p1(30 downto 23);
    tmp_7_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_82),12));
    tmp_8_fu_242_p2 <= (notrhs_fu_236_p2 or notlhs_fu_230_p2);
    tmp_cast_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_71),9));
    tmp_fu_110_p3 <= (i_reg_60 & ap_const_lv3_0);
    tmp_s_fu_122_p3 <= (i_reg_60 & ap_const_lv1_0);
end behav;
