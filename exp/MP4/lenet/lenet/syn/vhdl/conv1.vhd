-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1 is
generic (
    C_M_AXI_DATA_INPUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_INPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_INPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_INPUT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WEIGHT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_WEIGHT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_WEIGHT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_BIAS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_BIAS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_BIAS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_OUTPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_OUTPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_OUTPUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_INPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_INPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_INPUT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_WEIGHT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_WEIGHT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_WEIGHT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_BIAS_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_BIAS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_BIAS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_OUTPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_OUTPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_OUTPUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DATA_INPUT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_INPUT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_INPUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_INPUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_INPUT_WREADY : IN STD_LOGIC;
    m_axi_DATA_INPUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_INPUT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_INPUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_INPUT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_INPUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_INPUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_INPUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_INPUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RVALID : IN STD_LOGIC;
    m_axi_DATA_INPUT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_INPUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RLAST : IN STD_LOGIC;
    m_axi_DATA_INPUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_BVALID : IN STD_LOGIC;
    m_axi_DATA_INPUT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_INPUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_INPUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_INPUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_INPUT_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_WEIGHT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_WREADY : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_WEIGHT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_WEIGHT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_WEIGHT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_WEIGHT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RVALID : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RLAST : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_BVALID : IN STD_LOGIC;
    m_axi_DATA_WEIGHT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_WEIGHT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_WEIGHT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_ID_WIDTH-1 downto 0);
    m_axi_DATA_WEIGHT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WEIGHT_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_BIAS_AWREADY : IN STD_LOGIC;
    m_axi_DATA_BIAS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_BIAS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_WVALID : OUT STD_LOGIC;
    m_axi_DATA_BIAS_WREADY : IN STD_LOGIC;
    m_axi_DATA_BIAS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_DATA_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_BIAS_WLAST : OUT STD_LOGIC;
    m_axi_DATA_BIAS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_BIAS_ARREADY : IN STD_LOGIC;
    m_axi_DATA_BIAS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_BIAS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_BIAS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_BIAS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RVALID : IN STD_LOGIC;
    m_axi_DATA_BIAS_RREADY : OUT STD_LOGIC;
    m_axi_DATA_BIAS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_DATA_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RLAST : IN STD_LOGIC;
    m_axi_DATA_BIAS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_BVALID : IN STD_LOGIC;
    m_axi_DATA_BIAS_BREADY : OUT STD_LOGIC;
    m_axi_DATA_BIAS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_BIAS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_ID_WIDTH-1 downto 0);
    m_axi_DATA_BIAS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_BIAS_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_OUTPUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_WREADY : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_OUTPUT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_OUTPUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_OUTPUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_OUTPUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RVALID : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RLAST : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_BVALID : IN STD_LOGIC;
    m_axi_DATA_OUTPUT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_OUTPUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_OUTPUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_OUTPUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_OUTPUT_BUSER_WIDTH-1 downto 0);
    s_axi_CTL_AWVALID : IN STD_LOGIC;
    s_axi_CTL_AWREADY : OUT STD_LOGIC;
    s_axi_CTL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_WVALID : IN STD_LOGIC;
    s_axi_CTL_WREADY : OUT STD_LOGIC;
    s_axi_CTL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTL_ARVALID : IN STD_LOGIC;
    s_axi_CTL_ARREADY : OUT STD_LOGIC;
    s_axi_CTL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_RVALID : OUT STD_LOGIC;
    s_axi_CTL_RREADY : IN STD_LOGIC;
    s_axi_CTL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTL_BVALID : OUT STD_LOGIC;
    s_axi_CTL_BREADY : IN STD_LOGIC;
    s_axi_CTL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv1,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.042850,HLS_SYN_LAT=527880,HLS_SYN_TPT=none,HLS_SYN_MEM=174,HLS_SYN_DSP=37,HLS_SYN_FF=17491,HLS_SYN_LUT=22673,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (55 downto 0) := "00000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (55 downto 0) := "00000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (55 downto 0) := "00000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (55 downto 0) := "00000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (55 downto 0) := "00000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (55 downto 0) := "00000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (55 downto 0) := "00001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (55 downto 0) := "00010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (55 downto 0) := "00100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (55 downto 0) := "01000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (55 downto 0) := "10000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal weights : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_INPUT_AWREADY : STD_LOGIC;
    signal DATA_INPUT_WREADY : STD_LOGIC;
    signal DATA_INPUT_ARVALID : STD_LOGIC;
    signal DATA_INPUT_ARREADY : STD_LOGIC;
    signal DATA_INPUT_RVALID : STD_LOGIC;
    signal DATA_INPUT_RREADY : STD_LOGIC;
    signal DATA_INPUT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_INPUT_RLAST : STD_LOGIC;
    signal DATA_INPUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_INPUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_INPUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_INPUT_BVALID : STD_LOGIC;
    signal DATA_INPUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_INPUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_INPUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_AWREADY : STD_LOGIC;
    signal DATA_WEIGHT_WREADY : STD_LOGIC;
    signal DATA_WEIGHT_ARVALID : STD_LOGIC;
    signal DATA_WEIGHT_ARREADY : STD_LOGIC;
    signal DATA_WEIGHT_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_WEIGHT_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_WEIGHT_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_WEIGHT_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_WEIGHT_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_WEIGHT_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_WEIGHT_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_WEIGHT_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_RVALID : STD_LOGIC;
    signal DATA_WEIGHT_RREADY : STD_LOGIC;
    signal DATA_WEIGHT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_WEIGHT_RLAST : STD_LOGIC;
    signal DATA_WEIGHT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_BVALID : STD_LOGIC;
    signal DATA_WEIGHT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_WEIGHT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_WEIGHT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_AWREADY : STD_LOGIC;
    signal DATA_BIAS_WREADY : STD_LOGIC;
    signal DATA_BIAS_ARVALID : STD_LOGIC;
    signal DATA_BIAS_ARREADY : STD_LOGIC;
    signal DATA_BIAS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BIAS_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BIAS_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_BIAS_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_BIAS_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal DATA_BIAS_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_BIAS_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_BIAS_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_RVALID : STD_LOGIC;
    signal DATA_BIAS_RREADY : STD_LOGIC;
    signal DATA_BIAS_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_BIAS_RLAST : STD_LOGIC;
    signal DATA_BIAS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_BVALID : STD_LOGIC;
    signal DATA_BIAS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_BIAS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_BIAS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_AWVALID : STD_LOGIC;
    signal DATA_OUTPUT_AWREADY : STD_LOGIC;
    signal DATA_OUTPUT_WVALID : STD_LOGIC;
    signal DATA_OUTPUT_WREADY : STD_LOGIC;
    signal DATA_OUTPUT_ARREADY : STD_LOGIC;
    signal DATA_OUTPUT_RVALID : STD_LOGIC;
    signal DATA_OUTPUT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_OUTPUT_RLAST : STD_LOGIC;
    signal DATA_OUTPUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_OUTPUT_BVALID : STD_LOGIC;
    signal DATA_OUTPUT_BREADY : STD_LOGIC;
    signal DATA_OUTPUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_OUTPUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_OUTPUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal output1_reg_863 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_s_reg_868 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_1_reg_873 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_2_reg_878 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias1_reg_883 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights_s_reg_888 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights_1_reg_893 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights_2_reg_898 : STD_LOGIC_VECTOR (29 downto 0);
    signal weights3_reg_903 : STD_LOGIC_VECTOR (29 downto 0);
    signal input1_reg_908 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_fu_753_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_916 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal output5_oc_0_0_add_reg_921 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond2_i_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output5_oc_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output5_oc_0_0_loa_reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal i_14_fu_811_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_14_reg_938 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal output6_oc_addr_reg_943 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i1_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output6_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output6_oc_load_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal input_oc_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_oc_0_ce0 : STD_LOGIC;
    signal input_oc_0_we0 : STD_LOGIC;
    signal input_oc_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_oc_0_ce1 : STD_LOGIC;
    signal input_oc_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_oc_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_oc_0_ce0 : STD_LOGIC;
    signal weights_oc_0_we0 : STD_LOGIC;
    signal weights_oc_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_oc_0_ce1 : STD_LOGIC;
    signal weights_oc_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_3_0_oc_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_3_0_oc_ce0 : STD_LOGIC;
    signal weights_3_0_oc_we0 : STD_LOGIC;
    signal weights_3_0_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_3_1_oc_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_3_1_oc_ce0 : STD_LOGIC;
    signal weights_3_1_oc_we0 : STD_LOGIC;
    signal weights_3_1_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_3_2_oc_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_3_2_oc_ce0 : STD_LOGIC;
    signal weights_3_2_oc_we0 : STD_LOGIC;
    signal weights_3_2_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_3_3_oc_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_3_3_oc_ce0 : STD_LOGIC;
    signal weights_3_3_oc_we0 : STD_LOGIC;
    signal weights_3_3_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_3_4_oc_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_3_4_oc_ce0 : STD_LOGIC;
    signal weights_3_4_oc_we0 : STD_LOGIC;
    signal weights_3_4_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_3_5_oc_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal weights_3_5_oc_ce0 : STD_LOGIC;
    signal weights_3_5_oc_we0 : STD_LOGIC;
    signal weights_3_5_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_0_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_0_oc_ce0 : STD_LOGIC;
    signal weights_5_0_oc_we0 : STD_LOGIC;
    signal weights_5_0_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_1_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_1_oc_ce0 : STD_LOGIC;
    signal weights_5_1_oc_we0 : STD_LOGIC;
    signal weights_5_1_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_2_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_2_oc_ce0 : STD_LOGIC;
    signal weights_5_2_oc_we0 : STD_LOGIC;
    signal weights_5_2_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_3_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_3_oc_ce0 : STD_LOGIC;
    signal weights_5_3_oc_we0 : STD_LOGIC;
    signal weights_5_3_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_4_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_4_oc_ce0 : STD_LOGIC;
    signal weights_5_4_oc_we0 : STD_LOGIC;
    signal weights_5_4_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_5_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_5_oc_ce0 : STD_LOGIC;
    signal weights_5_5_oc_we0 : STD_LOGIC;
    signal weights_5_5_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_6_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_6_oc_ce0 : STD_LOGIC;
    signal weights_5_6_oc_we0 : STD_LOGIC;
    signal weights_5_6_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_7_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_7_oc_ce0 : STD_LOGIC;
    signal weights_5_7_oc_we0 : STD_LOGIC;
    signal weights_5_7_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_8_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_8_oc_ce0 : STD_LOGIC;
    signal weights_5_8_oc_we0 : STD_LOGIC;
    signal weights_5_8_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_9_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_9_oc_ce0 : STD_LOGIC;
    signal weights_5_9_oc_we0 : STD_LOGIC;
    signal weights_5_9_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_10_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_10_oc_ce0 : STD_LOGIC;
    signal weights_5_10_oc_we0 : STD_LOGIC;
    signal weights_5_10_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_11_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_11_oc_ce0 : STD_LOGIC;
    signal weights_5_11_oc_we0 : STD_LOGIC;
    signal weights_5_11_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_12_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_12_oc_ce0 : STD_LOGIC;
    signal weights_5_12_oc_we0 : STD_LOGIC;
    signal weights_5_12_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_13_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_13_oc_ce0 : STD_LOGIC;
    signal weights_5_13_oc_we0 : STD_LOGIC;
    signal weights_5_13_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_14_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_14_oc_ce0 : STD_LOGIC;
    signal weights_5_14_oc_we0 : STD_LOGIC;
    signal weights_5_14_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_5_15_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_5_15_oc_ce0 : STD_LOGIC;
    signal weights_5_15_oc_we0 : STD_LOGIC;
    signal weights_5_15_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_oc_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias_oc_ce0 : STD_LOGIC;
    signal bias_oc_we0 : STD_LOGIC;
    signal bias_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_3_oc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_3_oc_ce0 : STD_LOGIC;
    signal bias_3_oc_we0 : STD_LOGIC;
    signal bias_3_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_5_oc_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_5_oc_ce0 : STD_LOGIC;
    signal bias_5_oc_we0 : STD_LOGIC;
    signal bias_5_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output1_oc_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal output1_oc_ce0 : STD_LOGIC;
    signal output1_oc_we0 : STD_LOGIC;
    signal output1_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output2_oc_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal output2_oc_ce0 : STD_LOGIC;
    signal output2_oc_we0 : STD_LOGIC;
    signal output2_oc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output2_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output2_oc_ce1 : STD_LOGIC;
    signal output2_oc_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output3_oc_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal output3_oc_ce0 : STD_LOGIC;
    signal output3_oc_we0 : STD_LOGIC;
    signal output3_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output4_oc_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal output4_oc_ce0 : STD_LOGIC;
    signal output4_oc_we0 : STD_LOGIC;
    signal output4_oc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output4_oc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output4_oc_ce1 : STD_LOGIC;
    signal output4_oc_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output5_oc_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal output5_oc_0_0_ce0 : STD_LOGIC;
    signal output5_oc_0_0_we0 : STD_LOGIC;
    signal output5_oc_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output6_oc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output6_oc_ce0 : STD_LOGIC;
    signal output6_oc_we0 : STD_LOGIC;
    signal output6_oc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_5_fu_470_ap_start : STD_LOGIC;
    signal grp_convolution_5_fu_470_ap_done : STD_LOGIC;
    signal grp_convolution_5_fu_470_ap_idle : STD_LOGIC;
    signal grp_convolution_5_fu_470_ap_ready : STD_LOGIC;
    signal grp_convolution_5_fu_470_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution_5_fu_470_input_r_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_input_r_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution_5_fu_470_input_r_ce1 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_0_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_1_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_2_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_3_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_4_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_5_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_6_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_7_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_8_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_8_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_9_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_9_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_10_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_10_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_11_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_11_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_12_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_12_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_13_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_13_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_14_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_14_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_weights_15_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution_5_fu_470_weights_15_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_convolution_5_fu_470_bias_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_output_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_convolution_5_fu_470_output_0_0_ce0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_output_0_0_we0 : STD_LOGIC;
    signal grp_convolution_5_fu_470_output_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convulution1_fu_493_ap_start : STD_LOGIC;
    signal grp_convulution1_fu_493_ap_done : STD_LOGIC;
    signal grp_convulution1_fu_493_ap_idle : STD_LOGIC;
    signal grp_convulution1_fu_493_ap_ready : STD_LOGIC;
    signal grp_convulution1_fu_493_input_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convulution1_fu_493_input_0_ce0 : STD_LOGIC;
    signal grp_convulution1_fu_493_input_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convulution1_fu_493_input_0_ce1 : STD_LOGIC;
    signal grp_convulution1_fu_493_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convulution1_fu_493_weights_0_ce0 : STD_LOGIC;
    signal grp_convulution1_fu_493_weights_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convulution1_fu_493_weights_0_ce1 : STD_LOGIC;
    signal grp_convulution1_fu_493_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convulution1_fu_493_bias_ce0 : STD_LOGIC;
    signal grp_convulution1_fu_493_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_convulution1_fu_493_output_r_ce0 : STD_LOGIC;
    signal grp_convulution1_fu_493_output_r_we0 : STD_LOGIC;
    signal grp_convulution1_fu_493_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution_3_fu_501_ap_start : STD_LOGIC;
    signal grp_convolution_3_fu_501_ap_done : STD_LOGIC;
    signal grp_convolution_3_fu_501_ap_idle : STD_LOGIC;
    signal grp_convolution_3_fu_501_ap_ready : STD_LOGIC;
    signal grp_convolution_3_fu_501_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution_3_fu_501_input_r_ce0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_input_r_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution_3_fu_501_input_r_ce1 : STD_LOGIC;
    signal grp_convolution_3_fu_501_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution_3_fu_501_weights_0_ce0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_weights_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution_3_fu_501_weights_1_ce0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_weights_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution_3_fu_501_weights_2_ce0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_weights_3_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution_3_fu_501_weights_3_ce0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_weights_4_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution_3_fu_501_weights_4_ce0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_weights_5_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution_3_fu_501_weights_5_ce0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution_3_fu_501_bias_ce0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution_3_fu_501_output_r_ce0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_output_r_we0 : STD_LOGIC;
    signal grp_convolution_3_fu_501_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_ap_start : STD_LOGIC;
    signal grp_fc_6_fu_514_ap_done : STD_LOGIC;
    signal grp_fc_6_fu_514_ap_idle : STD_LOGIC;
    signal grp_fc_6_fu_514_ap_ready : STD_LOGIC;
    signal grp_fc_6_fu_514_input_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fc_6_fu_514_input_0_0_ce0 : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_weights_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_bias_AWVALID : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_bias_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_WVALID : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_bias_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_WLAST : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_bias_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARVALID : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_bias_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc_6_fu_514_m_axi_bias_RREADY : STD_LOGIC;
    signal grp_fc_6_fu_514_m_axi_bias_BREADY : STD_LOGIC;
    signal grp_fc_6_fu_514_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc_6_fu_514_output_r_ce0 : STD_LOGIC;
    signal grp_fc_6_fu_514_output_r_we0 : STD_LOGIC;
    signal grp_fc_6_fu_514_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_maxpool_2_fu_526_ap_start : STD_LOGIC;
    signal grp_maxpool_2_fu_526_ap_done : STD_LOGIC;
    signal grp_maxpool_2_fu_526_ap_idle : STD_LOGIC;
    signal grp_maxpool_2_fu_526_ap_ready : STD_LOGIC;
    signal grp_maxpool_2_fu_526_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_maxpool_2_fu_526_input_r_ce0 : STD_LOGIC;
    signal grp_maxpool_2_fu_526_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_maxpool_2_fu_526_output_r_ce0 : STD_LOGIC;
    signal grp_maxpool_2_fu_526_output_r_we0 : STD_LOGIC;
    signal grp_maxpool_2_fu_526_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_maxpool_4_fu_532_ap_start : STD_LOGIC;
    signal grp_maxpool_4_fu_532_ap_done : STD_LOGIC;
    signal grp_maxpool_4_fu_532_ap_idle : STD_LOGIC;
    signal grp_maxpool_4_fu_532_ap_ready : STD_LOGIC;
    signal grp_maxpool_4_fu_532_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_maxpool_4_fu_532_input_r_ce0 : STD_LOGIC;
    signal grp_maxpool_4_fu_532_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_maxpool_4_fu_532_output_r_ce0 : STD_LOGIC;
    signal grp_maxpool_4_fu_532_output_r_we0 : STD_LOGIC;
    signal grp_maxpool_4_fu_532_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_relu_4_fu_538_ap_start : STD_LOGIC;
    signal grp_relu_4_fu_538_ap_done : STD_LOGIC;
    signal grp_relu_4_fu_538_ap_idle : STD_LOGIC;
    signal grp_relu_4_fu_538_ap_ready : STD_LOGIC;
    signal grp_relu_4_fu_538_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_relu_4_fu_538_output_r_ce0 : STD_LOGIC;
    signal grp_relu_4_fu_538_output_r_we0 : STD_LOGIC;
    signal grp_relu_4_fu_538_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_relu_2_fu_543_ap_start : STD_LOGIC;
    signal grp_relu_2_fu_543_ap_done : STD_LOGIC;
    signal grp_relu_2_fu_543_ap_idle : STD_LOGIC;
    signal grp_relu_2_fu_543_ap_ready : STD_LOGIC;
    signal grp_relu_2_fu_543_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_relu_2_fu_543_output_r_ce0 : STD_LOGIC;
    signal grp_relu_2_fu_543_output_r_we0 : STD_LOGIC;
    signal grp_relu_2_fu_543_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_5_fu_548_ap_start : STD_LOGIC;
    signal grp_store_weights_5_fu_548_ap_done : STD_LOGIC;
    signal grp_store_weights_5_fu_548_ap_idle : STD_LOGIC;
    signal grp_store_weights_5_fu_548_ap_ready : STD_LOGIC;
    signal grp_store_weights_5_fu_548_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_store_weights_5_fu_548_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_store_weights_5_fu_548_m_axi_weights_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_store_weights_5_fu_548_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_store_weights_5_fu_548_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_5_fu_548_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_store_weights_5_fu_548_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_store_weights_5_fu_548_weights_oc_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_store_weights_5_fu_548_weights_oc_ce0 : STD_LOGIC;
    signal grp_store_weights_5_fu_548_weights_oc_we0 : STD_LOGIC;
    signal grp_store_weights_5_fu_548_weights_oc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_5_fu_548_input_channel : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_store_weights_3_fu_573_ap_start : STD_LOGIC;
    signal grp_store_weights_3_fu_573_ap_done : STD_LOGIC;
    signal grp_store_weights_3_fu_573_ap_idle : STD_LOGIC;
    signal grp_store_weights_3_fu_573_ap_ready : STD_LOGIC;
    signal grp_store_weights_3_fu_573_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_store_weights_3_fu_573_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_store_weights_3_fu_573_m_axi_weights_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_store_weights_3_fu_573_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_store_weights_3_fu_573_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_3_fu_573_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_store_weights_3_fu_573_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_store_weights_3_fu_573_weights_oc_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_store_weights_3_fu_573_weights_oc_ce0 : STD_LOGIC;
    signal grp_store_weights_3_fu_573_weights_oc_we0 : STD_LOGIC;
    signal grp_store_weights_3_fu_573_weights_oc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_3_fu_573_input_channel : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_fu_588_ap_start : STD_LOGIC;
    signal grp_store_weights_fu_588_ap_done : STD_LOGIC;
    signal grp_store_weights_fu_588_ap_idle : STD_LOGIC;
    signal grp_store_weights_fu_588_ap_ready : STD_LOGIC;
    signal grp_store_weights_fu_588_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_store_weights_fu_588_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_store_weights_fu_588_m_axi_weights_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_store_weights_fu_588_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_store_weights_fu_588_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_weights_fu_588_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_store_weights_fu_588_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_store_weights_fu_588_weights_oc_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_store_weights_fu_588_weights_oc_0_ce0 : STD_LOGIC;
    signal grp_store_weights_fu_588_weights_oc_0_we0 : STD_LOGIC;
    signal grp_store_weights_fu_588_weights_oc_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_input_fu_597_ap_start : STD_LOGIC;
    signal grp_store_input_fu_597_ap_done : STD_LOGIC;
    signal grp_store_input_fu_597_ap_idle : STD_LOGIC;
    signal grp_store_input_fu_597_ap_ready : STD_LOGIC;
    signal grp_store_input_fu_597_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_store_input_fu_597_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_store_input_fu_597_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_store_input_fu_597_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_store_input_fu_597_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_input_fu_597_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_store_input_fu_597_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_store_input_fu_597_input_oc_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_store_input_fu_597_input_oc_0_ce0 : STD_LOGIC;
    signal grp_store_input_fu_597_input_oc_0_we0 : STD_LOGIC;
    signal grp_store_input_fu_597_input_oc_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_5_fu_606_ap_start : STD_LOGIC;
    signal grp_store_bias_5_fu_606_ap_done : STD_LOGIC;
    signal grp_store_bias_5_fu_606_ap_idle : STD_LOGIC;
    signal grp_store_bias_5_fu_606_ap_ready : STD_LOGIC;
    signal grp_store_bias_5_fu_606_m_axi_bias_AWVALID : STD_LOGIC;
    signal grp_store_bias_5_fu_606_m_axi_bias_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_WVALID : STD_LOGIC;
    signal grp_store_bias_5_fu_606_m_axi_bias_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_WLAST : STD_LOGIC;
    signal grp_store_bias_5_fu_606_m_axi_bias_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARVALID : STD_LOGIC;
    signal grp_store_bias_5_fu_606_m_axi_bias_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_5_fu_606_m_axi_bias_RREADY : STD_LOGIC;
    signal grp_store_bias_5_fu_606_m_axi_bias_BREADY : STD_LOGIC;
    signal grp_store_bias_5_fu_606_bias_oc_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_store_bias_5_fu_606_bias_oc_ce0 : STD_LOGIC;
    signal grp_store_bias_5_fu_606_bias_oc_we0 : STD_LOGIC;
    signal grp_store_bias_5_fu_606_bias_oc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_3_fu_614_ap_start : STD_LOGIC;
    signal grp_store_bias_3_fu_614_ap_done : STD_LOGIC;
    signal grp_store_bias_3_fu_614_ap_idle : STD_LOGIC;
    signal grp_store_bias_3_fu_614_ap_ready : STD_LOGIC;
    signal grp_store_bias_3_fu_614_m_axi_bias_AWVALID : STD_LOGIC;
    signal grp_store_bias_3_fu_614_m_axi_bias_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_WVALID : STD_LOGIC;
    signal grp_store_bias_3_fu_614_m_axi_bias_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_WLAST : STD_LOGIC;
    signal grp_store_bias_3_fu_614_m_axi_bias_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARVALID : STD_LOGIC;
    signal grp_store_bias_3_fu_614_m_axi_bias_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_3_fu_614_m_axi_bias_RREADY : STD_LOGIC;
    signal grp_store_bias_3_fu_614_m_axi_bias_BREADY : STD_LOGIC;
    signal grp_store_bias_3_fu_614_bias_oc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_3_fu_614_bias_oc_ce0 : STD_LOGIC;
    signal grp_store_bias_3_fu_614_bias_oc_we0 : STD_LOGIC;
    signal grp_store_bias_3_fu_614_bias_oc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_622_ap_start : STD_LOGIC;
    signal grp_store_output_fu_622_ap_done : STD_LOGIC;
    signal grp_store_output_fu_622_ap_idle : STD_LOGIC;
    signal grp_store_output_fu_622_ap_ready : STD_LOGIC;
    signal grp_store_output_fu_622_m_axi_output_r_AWVALID : STD_LOGIC;
    signal grp_store_output_fu_622_m_axi_output_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_WVALID : STD_LOGIC;
    signal grp_store_output_fu_622_m_axi_output_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_WLAST : STD_LOGIC;
    signal grp_store_output_fu_622_m_axi_output_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARVALID : STD_LOGIC;
    signal grp_store_output_fu_622_m_axi_output_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_output_fu_622_m_axi_output_r_RREADY : STD_LOGIC;
    signal grp_store_output_fu_622_m_axi_output_r_BREADY : STD_LOGIC;
    signal grp_store_output_fu_622_output_oc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_output_fu_622_output_oc_ce0 : STD_LOGIC;
    signal grp_store_bias_fu_630_ap_start : STD_LOGIC;
    signal grp_store_bias_fu_630_ap_done : STD_LOGIC;
    signal grp_store_bias_fu_630_ap_idle : STD_LOGIC;
    signal grp_store_bias_fu_630_ap_ready : STD_LOGIC;
    signal grp_store_bias_fu_630_m_axi_bias_AWVALID : STD_LOGIC;
    signal grp_store_bias_fu_630_m_axi_bias_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_WVALID : STD_LOGIC;
    signal grp_store_bias_fu_630_m_axi_bias_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_WLAST : STD_LOGIC;
    signal grp_store_bias_fu_630_m_axi_bias_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARVALID : STD_LOGIC;
    signal grp_store_bias_fu_630_m_axi_bias_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_bias_fu_630_m_axi_bias_RREADY : STD_LOGIC;
    signal grp_store_bias_fu_630_m_axi_bias_BREADY : STD_LOGIC;
    signal grp_store_bias_fu_630_bias_oc_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_bias_fu_630_bias_oc_ce0 : STD_LOGIC;
    signal grp_store_bias_fu_630_bias_oc_we0 : STD_LOGIC;
    signal grp_store_bias_fu_630_bias_oc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_448 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_i1_reg_459 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_convolution_5_fu_470_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_convulution1_fu_493_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_convolution_3_fu_501_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fc_6_fu_514_ap_start_reg : STD_LOGIC := '0';
    signal grp_maxpool_2_fu_526_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_maxpool_4_fu_532_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_relu_4_fu_538_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_relu_2_fu_543_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_store_weights_5_fu_548_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_store_weights_3_fu_573_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_store_weights_fu_588_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_store_input_fu_597_ap_start_reg : STD_LOGIC := '0';
    signal grp_store_bias_5_fu_606_ap_start_reg : STD_LOGIC := '0';
    signal grp_store_bias_3_fu_614_ap_start_reg : STD_LOGIC := '0';
    signal grp_store_output_fu_622_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_store_bias_fu_630_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_639_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_0_0_assign_s_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_767_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_fu_777_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_assign_load_t_fu_822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_825_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_101_fu_835_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (55 downto 0);
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_block_state16_on_subcall_done : BOOLEAN;
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal ap_block_state20_on_subcall_done : BOOLEAN;

    component convolution_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_0_ce0 : OUT STD_LOGIC;
        weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_1_ce0 : OUT STD_LOGIC;
        weights_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_2_ce0 : OUT STD_LOGIC;
        weights_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_3_ce0 : OUT STD_LOGIC;
        weights_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_4_ce0 : OUT STD_LOGIC;
        weights_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_5_ce0 : OUT STD_LOGIC;
        weights_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_6_ce0 : OUT STD_LOGIC;
        weights_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_7_ce0 : OUT STD_LOGIC;
        weights_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_8_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_8_ce0 : OUT STD_LOGIC;
        weights_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_9_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_9_ce0 : OUT STD_LOGIC;
        weights_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_10_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_10_ce0 : OUT STD_LOGIC;
        weights_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_11_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_11_ce0 : OUT STD_LOGIC;
        weights_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_12_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_12_ce0 : OUT STD_LOGIC;
        weights_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_13_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_13_ce0 : OUT STD_LOGIC;
        weights_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_14_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_14_ce0 : OUT STD_LOGIC;
        weights_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_15_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_15_ce0 : OUT STD_LOGIC;
        weights_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_0_0_ce0 : OUT STD_LOGIC;
        output_0_0_we0 : OUT STD_LOGIC;
        output_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convulution1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce1 : OUT STD_LOGIC;
        input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_0_ce0 : OUT STD_LOGIC;
        weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_0_ce1 : OUT STD_LOGIC;
        weights_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_0_ce0 : OUT STD_LOGIC;
        weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_1_ce0 : OUT STD_LOGIC;
        weights_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_2_ce0 : OUT STD_LOGIC;
        weights_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_3_ce0 : OUT STD_LOGIC;
        weights_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_4_ce0 : OUT STD_LOGIC;
        weights_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_5_ce0 : OUT STD_LOGIC;
        weights_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_0_0_ce0 : OUT STD_LOGIC;
        input_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        m_axi_bias_AWVALID : OUT STD_LOGIC;
        m_axi_bias_AWREADY : IN STD_LOGIC;
        m_axi_bias_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WVALID : OUT STD_LOGIC;
        m_axi_bias_WREADY : IN STD_LOGIC;
        m_axi_bias_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_WLAST : OUT STD_LOGIC;
        m_axi_bias_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARVALID : OUT STD_LOGIC;
        m_axi_bias_ARREADY : IN STD_LOGIC;
        m_axi_bias_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RVALID : IN STD_LOGIC;
        m_axi_bias_RREADY : OUT STD_LOGIC;
        m_axi_bias_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_RLAST : IN STD_LOGIC;
        m_axi_bias_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BVALID : IN STD_LOGIC;
        m_axi_bias_BREADY : OUT STD_LOGIC;
        m_axi_bias_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bias_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxpool_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxpool_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component relu_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component relu_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_weights_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        weights_oc_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_oc_ce0 : OUT STD_LOGIC;
        weights_oc_we0 : OUT STD_LOGIC;
        weights_oc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_channel : IN STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component store_weights_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        weights_oc_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weights_oc_ce0 : OUT STD_LOGIC;
        weights_oc_we0 : OUT STD_LOGIC;
        weights_oc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_channel : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component store_weights IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weights_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        weights_oc_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_oc_0_ce0 : OUT STD_LOGIC;
        weights_oc_0_we0 : OUT STD_LOGIC;
        weights_oc_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        input_oc_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_oc_0_ce0 : OUT STD_LOGIC;
        input_oc_0_we0 : OUT STD_LOGIC;
        input_oc_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_bias_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bias_AWVALID : OUT STD_LOGIC;
        m_axi_bias_AWREADY : IN STD_LOGIC;
        m_axi_bias_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WVALID : OUT STD_LOGIC;
        m_axi_bias_WREADY : IN STD_LOGIC;
        m_axi_bias_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_WLAST : OUT STD_LOGIC;
        m_axi_bias_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARVALID : OUT STD_LOGIC;
        m_axi_bias_ARREADY : IN STD_LOGIC;
        m_axi_bias_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RVALID : IN STD_LOGIC;
        m_axi_bias_RREADY : OUT STD_LOGIC;
        m_axi_bias_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_RLAST : IN STD_LOGIC;
        m_axi_bias_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BVALID : IN STD_LOGIC;
        m_axi_bias_BREADY : OUT STD_LOGIC;
        m_axi_bias_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bias_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        bias_oc_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bias_oc_ce0 : OUT STD_LOGIC;
        bias_oc_we0 : OUT STD_LOGIC;
        bias_oc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_bias_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bias_AWVALID : OUT STD_LOGIC;
        m_axi_bias_AWREADY : IN STD_LOGIC;
        m_axi_bias_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WVALID : OUT STD_LOGIC;
        m_axi_bias_WREADY : IN STD_LOGIC;
        m_axi_bias_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_WLAST : OUT STD_LOGIC;
        m_axi_bias_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARVALID : OUT STD_LOGIC;
        m_axi_bias_ARREADY : IN STD_LOGIC;
        m_axi_bias_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RVALID : IN STD_LOGIC;
        m_axi_bias_RREADY : OUT STD_LOGIC;
        m_axi_bias_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_RLAST : IN STD_LOGIC;
        m_axi_bias_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BVALID : IN STD_LOGIC;
        m_axi_bias_BREADY : OUT STD_LOGIC;
        m_axi_bias_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bias_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        bias_oc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bias_oc_ce0 : OUT STD_LOGIC;
        bias_oc_we0 : OUT STD_LOGIC;
        bias_oc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_output_r_AWVALID : OUT STD_LOGIC;
        m_axi_output_r_AWREADY : IN STD_LOGIC;
        m_axi_output_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WVALID : OUT STD_LOGIC;
        m_axi_output_r_WREADY : IN STD_LOGIC;
        m_axi_output_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_WLAST : OUT STD_LOGIC;
        m_axi_output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARVALID : OUT STD_LOGIC;
        m_axi_output_r_ARREADY : IN STD_LOGIC;
        m_axi_output_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RVALID : IN STD_LOGIC;
        m_axi_output_r_RREADY : OUT STD_LOGIC;
        m_axi_output_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_RLAST : IN STD_LOGIC;
        m_axi_output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BVALID : IN STD_LOGIC;
        m_axi_output_r_BREADY : OUT STD_LOGIC;
        m_axi_output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        output_oc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_oc_ce0 : OUT STD_LOGIC;
        output_oc_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component store_bias IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_bias_AWVALID : OUT STD_LOGIC;
        m_axi_bias_AWREADY : IN STD_LOGIC;
        m_axi_bias_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WVALID : OUT STD_LOGIC;
        m_axi_bias_WREADY : IN STD_LOGIC;
        m_axi_bias_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_WLAST : OUT STD_LOGIC;
        m_axi_bias_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARVALID : OUT STD_LOGIC;
        m_axi_bias_ARREADY : IN STD_LOGIC;
        m_axi_bias_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_bias_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_bias_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RVALID : IN STD_LOGIC;
        m_axi_bias_RREADY : OUT STD_LOGIC;
        m_axi_bias_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_bias_RLAST : IN STD_LOGIC;
        m_axi_bias_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BVALID : IN STD_LOGIC;
        m_axi_bias_BREADY : OUT STD_LOGIC;
        m_axi_bias_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_bias_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_bias_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bias_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        bias_oc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bias_oc_ce0 : OUT STD_LOGIC;
        bias_oc_we0 : OUT STD_LOGIC;
        bias_oc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_fcmp_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv1_input_oc_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_weights_oc_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_weights_3_0eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_weights_5_0kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_bias_oc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_bias_3_oc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_bias_5_oc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_output1_oc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_output2_oc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_output3_oc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_output4_oc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_output6_oc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_CTL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_DATA_INPUT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv1_DATA_WEIGHT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv1_DATA_BIAS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv1_DATA_OUTPUT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv1_CTL_s_axi_U : component conv1_CTL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTL_AWVALID,
        AWREADY => s_axi_CTL_AWREADY,
        AWADDR => s_axi_CTL_AWADDR,
        WVALID => s_axi_CTL_WVALID,
        WREADY => s_axi_CTL_WREADY,
        WDATA => s_axi_CTL_WDATA,
        WSTRB => s_axi_CTL_WSTRB,
        ARVALID => s_axi_CTL_ARVALID,
        ARREADY => s_axi_CTL_ARREADY,
        ARADDR => s_axi_CTL_ARADDR,
        RVALID => s_axi_CTL_RVALID,
        RREADY => s_axi_CTL_RREADY,
        RDATA => s_axi_CTL_RDATA,
        RRESP => s_axi_CTL_RRESP,
        BVALID => s_axi_CTL_BVALID,
        BREADY => s_axi_CTL_BREADY,
        BRESP => s_axi_CTL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        input_r => input_r,
        weights => weights,
        weights_3 => weights_3,
        weights_5 => weights_5,
        weights_6 => weights_6,
        bias => bias,
        bias_3 => bias_3,
        bias_5 => bias_5,
        bias_6 => bias_6,
        output_r => output_r);

    conv1_DATA_INPUT_m_axi_U : component conv1_DATA_INPUT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_INPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_INPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_INPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_INPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_INPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_INPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_INPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_INPUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_INPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_INPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_INPUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_INPUT_AWVALID,
        AWREADY => m_axi_DATA_INPUT_AWREADY,
        AWADDR => m_axi_DATA_INPUT_AWADDR,
        AWID => m_axi_DATA_INPUT_AWID,
        AWLEN => m_axi_DATA_INPUT_AWLEN,
        AWSIZE => m_axi_DATA_INPUT_AWSIZE,
        AWBURST => m_axi_DATA_INPUT_AWBURST,
        AWLOCK => m_axi_DATA_INPUT_AWLOCK,
        AWCACHE => m_axi_DATA_INPUT_AWCACHE,
        AWPROT => m_axi_DATA_INPUT_AWPROT,
        AWQOS => m_axi_DATA_INPUT_AWQOS,
        AWREGION => m_axi_DATA_INPUT_AWREGION,
        AWUSER => m_axi_DATA_INPUT_AWUSER,
        WVALID => m_axi_DATA_INPUT_WVALID,
        WREADY => m_axi_DATA_INPUT_WREADY,
        WDATA => m_axi_DATA_INPUT_WDATA,
        WSTRB => m_axi_DATA_INPUT_WSTRB,
        WLAST => m_axi_DATA_INPUT_WLAST,
        WID => m_axi_DATA_INPUT_WID,
        WUSER => m_axi_DATA_INPUT_WUSER,
        ARVALID => m_axi_DATA_INPUT_ARVALID,
        ARREADY => m_axi_DATA_INPUT_ARREADY,
        ARADDR => m_axi_DATA_INPUT_ARADDR,
        ARID => m_axi_DATA_INPUT_ARID,
        ARLEN => m_axi_DATA_INPUT_ARLEN,
        ARSIZE => m_axi_DATA_INPUT_ARSIZE,
        ARBURST => m_axi_DATA_INPUT_ARBURST,
        ARLOCK => m_axi_DATA_INPUT_ARLOCK,
        ARCACHE => m_axi_DATA_INPUT_ARCACHE,
        ARPROT => m_axi_DATA_INPUT_ARPROT,
        ARQOS => m_axi_DATA_INPUT_ARQOS,
        ARREGION => m_axi_DATA_INPUT_ARREGION,
        ARUSER => m_axi_DATA_INPUT_ARUSER,
        RVALID => m_axi_DATA_INPUT_RVALID,
        RREADY => m_axi_DATA_INPUT_RREADY,
        RDATA => m_axi_DATA_INPUT_RDATA,
        RLAST => m_axi_DATA_INPUT_RLAST,
        RID => m_axi_DATA_INPUT_RID,
        RUSER => m_axi_DATA_INPUT_RUSER,
        RRESP => m_axi_DATA_INPUT_RRESP,
        BVALID => m_axi_DATA_INPUT_BVALID,
        BREADY => m_axi_DATA_INPUT_BREADY,
        BRESP => m_axi_DATA_INPUT_BRESP,
        BID => m_axi_DATA_INPUT_BID,
        BUSER => m_axi_DATA_INPUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_INPUT_ARVALID,
        I_ARREADY => DATA_INPUT_ARREADY,
        I_ARADDR => grp_store_input_fu_597_m_axi_input_r_ARADDR,
        I_ARID => grp_store_input_fu_597_m_axi_input_r_ARID,
        I_ARLEN => grp_store_input_fu_597_m_axi_input_r_ARLEN,
        I_ARSIZE => grp_store_input_fu_597_m_axi_input_r_ARSIZE,
        I_ARLOCK => grp_store_input_fu_597_m_axi_input_r_ARLOCK,
        I_ARCACHE => grp_store_input_fu_597_m_axi_input_r_ARCACHE,
        I_ARQOS => grp_store_input_fu_597_m_axi_input_r_ARQOS,
        I_ARPROT => grp_store_input_fu_597_m_axi_input_r_ARPROT,
        I_ARUSER => grp_store_input_fu_597_m_axi_input_r_ARUSER,
        I_ARBURST => grp_store_input_fu_597_m_axi_input_r_ARBURST,
        I_ARREGION => grp_store_input_fu_597_m_axi_input_r_ARREGION,
        I_RVALID => DATA_INPUT_RVALID,
        I_RREADY => DATA_INPUT_RREADY,
        I_RDATA => DATA_INPUT_RDATA,
        I_RID => DATA_INPUT_RID,
        I_RUSER => DATA_INPUT_RUSER,
        I_RRESP => DATA_INPUT_RRESP,
        I_RLAST => DATA_INPUT_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_INPUT_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_INPUT_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_INPUT_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_INPUT_BRESP,
        I_BID => DATA_INPUT_BID,
        I_BUSER => DATA_INPUT_BUSER);

    conv1_DATA_WEIGHT_m_axi_U : component conv1_DATA_WEIGHT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_WEIGHT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_WEIGHT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_WEIGHT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_WEIGHT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_WEIGHT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_WEIGHT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_WEIGHT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_WEIGHT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_WEIGHT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_WEIGHT_AWVALID,
        AWREADY => m_axi_DATA_WEIGHT_AWREADY,
        AWADDR => m_axi_DATA_WEIGHT_AWADDR,
        AWID => m_axi_DATA_WEIGHT_AWID,
        AWLEN => m_axi_DATA_WEIGHT_AWLEN,
        AWSIZE => m_axi_DATA_WEIGHT_AWSIZE,
        AWBURST => m_axi_DATA_WEIGHT_AWBURST,
        AWLOCK => m_axi_DATA_WEIGHT_AWLOCK,
        AWCACHE => m_axi_DATA_WEIGHT_AWCACHE,
        AWPROT => m_axi_DATA_WEIGHT_AWPROT,
        AWQOS => m_axi_DATA_WEIGHT_AWQOS,
        AWREGION => m_axi_DATA_WEIGHT_AWREGION,
        AWUSER => m_axi_DATA_WEIGHT_AWUSER,
        WVALID => m_axi_DATA_WEIGHT_WVALID,
        WREADY => m_axi_DATA_WEIGHT_WREADY,
        WDATA => m_axi_DATA_WEIGHT_WDATA,
        WSTRB => m_axi_DATA_WEIGHT_WSTRB,
        WLAST => m_axi_DATA_WEIGHT_WLAST,
        WID => m_axi_DATA_WEIGHT_WID,
        WUSER => m_axi_DATA_WEIGHT_WUSER,
        ARVALID => m_axi_DATA_WEIGHT_ARVALID,
        ARREADY => m_axi_DATA_WEIGHT_ARREADY,
        ARADDR => m_axi_DATA_WEIGHT_ARADDR,
        ARID => m_axi_DATA_WEIGHT_ARID,
        ARLEN => m_axi_DATA_WEIGHT_ARLEN,
        ARSIZE => m_axi_DATA_WEIGHT_ARSIZE,
        ARBURST => m_axi_DATA_WEIGHT_ARBURST,
        ARLOCK => m_axi_DATA_WEIGHT_ARLOCK,
        ARCACHE => m_axi_DATA_WEIGHT_ARCACHE,
        ARPROT => m_axi_DATA_WEIGHT_ARPROT,
        ARQOS => m_axi_DATA_WEIGHT_ARQOS,
        ARREGION => m_axi_DATA_WEIGHT_ARREGION,
        ARUSER => m_axi_DATA_WEIGHT_ARUSER,
        RVALID => m_axi_DATA_WEIGHT_RVALID,
        RREADY => m_axi_DATA_WEIGHT_RREADY,
        RDATA => m_axi_DATA_WEIGHT_RDATA,
        RLAST => m_axi_DATA_WEIGHT_RLAST,
        RID => m_axi_DATA_WEIGHT_RID,
        RUSER => m_axi_DATA_WEIGHT_RUSER,
        RRESP => m_axi_DATA_WEIGHT_RRESP,
        BVALID => m_axi_DATA_WEIGHT_BVALID,
        BREADY => m_axi_DATA_WEIGHT_BREADY,
        BRESP => m_axi_DATA_WEIGHT_BRESP,
        BID => m_axi_DATA_WEIGHT_BID,
        BUSER => m_axi_DATA_WEIGHT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_WEIGHT_ARVALID,
        I_ARREADY => DATA_WEIGHT_ARREADY,
        I_ARADDR => DATA_WEIGHT_ARADDR,
        I_ARID => DATA_WEIGHT_ARID,
        I_ARLEN => DATA_WEIGHT_ARLEN,
        I_ARSIZE => DATA_WEIGHT_ARSIZE,
        I_ARLOCK => DATA_WEIGHT_ARLOCK,
        I_ARCACHE => DATA_WEIGHT_ARCACHE,
        I_ARQOS => DATA_WEIGHT_ARQOS,
        I_ARPROT => DATA_WEIGHT_ARPROT,
        I_ARUSER => DATA_WEIGHT_ARUSER,
        I_ARBURST => DATA_WEIGHT_ARBURST,
        I_ARREGION => DATA_WEIGHT_ARREGION,
        I_RVALID => DATA_WEIGHT_RVALID,
        I_RREADY => DATA_WEIGHT_RREADY,
        I_RDATA => DATA_WEIGHT_RDATA,
        I_RID => DATA_WEIGHT_RID,
        I_RUSER => DATA_WEIGHT_RUSER,
        I_RRESP => DATA_WEIGHT_RRESP,
        I_RLAST => DATA_WEIGHT_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_WEIGHT_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_WEIGHT_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_WEIGHT_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_WEIGHT_BRESP,
        I_BID => DATA_WEIGHT_BID,
        I_BUSER => DATA_WEIGHT_BUSER);

    conv1_DATA_BIAS_m_axi_U : component conv1_DATA_BIAS_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_BIAS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_BIAS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_BIAS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_BIAS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_BIAS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_BIAS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_BIAS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_BIAS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_BIAS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_BIAS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_BIAS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_BIAS_AWVALID,
        AWREADY => m_axi_DATA_BIAS_AWREADY,
        AWADDR => m_axi_DATA_BIAS_AWADDR,
        AWID => m_axi_DATA_BIAS_AWID,
        AWLEN => m_axi_DATA_BIAS_AWLEN,
        AWSIZE => m_axi_DATA_BIAS_AWSIZE,
        AWBURST => m_axi_DATA_BIAS_AWBURST,
        AWLOCK => m_axi_DATA_BIAS_AWLOCK,
        AWCACHE => m_axi_DATA_BIAS_AWCACHE,
        AWPROT => m_axi_DATA_BIAS_AWPROT,
        AWQOS => m_axi_DATA_BIAS_AWQOS,
        AWREGION => m_axi_DATA_BIAS_AWREGION,
        AWUSER => m_axi_DATA_BIAS_AWUSER,
        WVALID => m_axi_DATA_BIAS_WVALID,
        WREADY => m_axi_DATA_BIAS_WREADY,
        WDATA => m_axi_DATA_BIAS_WDATA,
        WSTRB => m_axi_DATA_BIAS_WSTRB,
        WLAST => m_axi_DATA_BIAS_WLAST,
        WID => m_axi_DATA_BIAS_WID,
        WUSER => m_axi_DATA_BIAS_WUSER,
        ARVALID => m_axi_DATA_BIAS_ARVALID,
        ARREADY => m_axi_DATA_BIAS_ARREADY,
        ARADDR => m_axi_DATA_BIAS_ARADDR,
        ARID => m_axi_DATA_BIAS_ARID,
        ARLEN => m_axi_DATA_BIAS_ARLEN,
        ARSIZE => m_axi_DATA_BIAS_ARSIZE,
        ARBURST => m_axi_DATA_BIAS_ARBURST,
        ARLOCK => m_axi_DATA_BIAS_ARLOCK,
        ARCACHE => m_axi_DATA_BIAS_ARCACHE,
        ARPROT => m_axi_DATA_BIAS_ARPROT,
        ARQOS => m_axi_DATA_BIAS_ARQOS,
        ARREGION => m_axi_DATA_BIAS_ARREGION,
        ARUSER => m_axi_DATA_BIAS_ARUSER,
        RVALID => m_axi_DATA_BIAS_RVALID,
        RREADY => m_axi_DATA_BIAS_RREADY,
        RDATA => m_axi_DATA_BIAS_RDATA,
        RLAST => m_axi_DATA_BIAS_RLAST,
        RID => m_axi_DATA_BIAS_RID,
        RUSER => m_axi_DATA_BIAS_RUSER,
        RRESP => m_axi_DATA_BIAS_RRESP,
        BVALID => m_axi_DATA_BIAS_BVALID,
        BREADY => m_axi_DATA_BIAS_BREADY,
        BRESP => m_axi_DATA_BIAS_BRESP,
        BID => m_axi_DATA_BIAS_BID,
        BUSER => m_axi_DATA_BIAS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_BIAS_ARVALID,
        I_ARREADY => DATA_BIAS_ARREADY,
        I_ARADDR => DATA_BIAS_ARADDR,
        I_ARID => DATA_BIAS_ARID,
        I_ARLEN => DATA_BIAS_ARLEN,
        I_ARSIZE => DATA_BIAS_ARSIZE,
        I_ARLOCK => DATA_BIAS_ARLOCK,
        I_ARCACHE => DATA_BIAS_ARCACHE,
        I_ARQOS => DATA_BIAS_ARQOS,
        I_ARPROT => DATA_BIAS_ARPROT,
        I_ARUSER => DATA_BIAS_ARUSER,
        I_ARBURST => DATA_BIAS_ARBURST,
        I_ARREGION => DATA_BIAS_ARREGION,
        I_RVALID => DATA_BIAS_RVALID,
        I_RREADY => DATA_BIAS_RREADY,
        I_RDATA => DATA_BIAS_RDATA,
        I_RID => DATA_BIAS_RID,
        I_RUSER => DATA_BIAS_RUSER,
        I_RRESP => DATA_BIAS_RRESP,
        I_RLAST => DATA_BIAS_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_BIAS_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_BIAS_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_BIAS_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_BIAS_BRESP,
        I_BID => DATA_BIAS_BID,
        I_BUSER => DATA_BIAS_BUSER);

    conv1_DATA_OUTPUT_m_axi_U : component conv1_DATA_OUTPUT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_OUTPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_OUTPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_OUTPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_OUTPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_OUTPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_OUTPUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_OUTPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_OUTPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_OUTPUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_OUTPUT_AWVALID,
        AWREADY => m_axi_DATA_OUTPUT_AWREADY,
        AWADDR => m_axi_DATA_OUTPUT_AWADDR,
        AWID => m_axi_DATA_OUTPUT_AWID,
        AWLEN => m_axi_DATA_OUTPUT_AWLEN,
        AWSIZE => m_axi_DATA_OUTPUT_AWSIZE,
        AWBURST => m_axi_DATA_OUTPUT_AWBURST,
        AWLOCK => m_axi_DATA_OUTPUT_AWLOCK,
        AWCACHE => m_axi_DATA_OUTPUT_AWCACHE,
        AWPROT => m_axi_DATA_OUTPUT_AWPROT,
        AWQOS => m_axi_DATA_OUTPUT_AWQOS,
        AWREGION => m_axi_DATA_OUTPUT_AWREGION,
        AWUSER => m_axi_DATA_OUTPUT_AWUSER,
        WVALID => m_axi_DATA_OUTPUT_WVALID,
        WREADY => m_axi_DATA_OUTPUT_WREADY,
        WDATA => m_axi_DATA_OUTPUT_WDATA,
        WSTRB => m_axi_DATA_OUTPUT_WSTRB,
        WLAST => m_axi_DATA_OUTPUT_WLAST,
        WID => m_axi_DATA_OUTPUT_WID,
        WUSER => m_axi_DATA_OUTPUT_WUSER,
        ARVALID => m_axi_DATA_OUTPUT_ARVALID,
        ARREADY => m_axi_DATA_OUTPUT_ARREADY,
        ARADDR => m_axi_DATA_OUTPUT_ARADDR,
        ARID => m_axi_DATA_OUTPUT_ARID,
        ARLEN => m_axi_DATA_OUTPUT_ARLEN,
        ARSIZE => m_axi_DATA_OUTPUT_ARSIZE,
        ARBURST => m_axi_DATA_OUTPUT_ARBURST,
        ARLOCK => m_axi_DATA_OUTPUT_ARLOCK,
        ARCACHE => m_axi_DATA_OUTPUT_ARCACHE,
        ARPROT => m_axi_DATA_OUTPUT_ARPROT,
        ARQOS => m_axi_DATA_OUTPUT_ARQOS,
        ARREGION => m_axi_DATA_OUTPUT_ARREGION,
        ARUSER => m_axi_DATA_OUTPUT_ARUSER,
        RVALID => m_axi_DATA_OUTPUT_RVALID,
        RREADY => m_axi_DATA_OUTPUT_RREADY,
        RDATA => m_axi_DATA_OUTPUT_RDATA,
        RLAST => m_axi_DATA_OUTPUT_RLAST,
        RID => m_axi_DATA_OUTPUT_RID,
        RUSER => m_axi_DATA_OUTPUT_RUSER,
        RRESP => m_axi_DATA_OUTPUT_RRESP,
        BVALID => m_axi_DATA_OUTPUT_BVALID,
        BREADY => m_axi_DATA_OUTPUT_BREADY,
        BRESP => m_axi_DATA_OUTPUT_BRESP,
        BID => m_axi_DATA_OUTPUT_BID,
        BUSER => m_axi_DATA_OUTPUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DATA_OUTPUT_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_OUTPUT_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DATA_OUTPUT_RDATA,
        I_RID => DATA_OUTPUT_RID,
        I_RUSER => DATA_OUTPUT_RUSER,
        I_RRESP => DATA_OUTPUT_RRESP,
        I_RLAST => DATA_OUTPUT_RLAST,
        I_AWVALID => DATA_OUTPUT_AWVALID,
        I_AWREADY => DATA_OUTPUT_AWREADY,
        I_AWADDR => grp_store_output_fu_622_m_axi_output_r_AWADDR,
        I_AWID => grp_store_output_fu_622_m_axi_output_r_AWID,
        I_AWLEN => grp_store_output_fu_622_m_axi_output_r_AWLEN,
        I_AWSIZE => grp_store_output_fu_622_m_axi_output_r_AWSIZE,
        I_AWLOCK => grp_store_output_fu_622_m_axi_output_r_AWLOCK,
        I_AWCACHE => grp_store_output_fu_622_m_axi_output_r_AWCACHE,
        I_AWQOS => grp_store_output_fu_622_m_axi_output_r_AWQOS,
        I_AWPROT => grp_store_output_fu_622_m_axi_output_r_AWPROT,
        I_AWUSER => grp_store_output_fu_622_m_axi_output_r_AWUSER,
        I_AWBURST => grp_store_output_fu_622_m_axi_output_r_AWBURST,
        I_AWREGION => grp_store_output_fu_622_m_axi_output_r_AWREGION,
        I_WVALID => DATA_OUTPUT_WVALID,
        I_WREADY => DATA_OUTPUT_WREADY,
        I_WDATA => grp_store_output_fu_622_m_axi_output_r_WDATA,
        I_WID => grp_store_output_fu_622_m_axi_output_r_WID,
        I_WUSER => grp_store_output_fu_622_m_axi_output_r_WUSER,
        I_WLAST => grp_store_output_fu_622_m_axi_output_r_WLAST,
        I_WSTRB => grp_store_output_fu_622_m_axi_output_r_WSTRB,
        I_BVALID => DATA_OUTPUT_BVALID,
        I_BREADY => DATA_OUTPUT_BREADY,
        I_BRESP => DATA_OUTPUT_BRESP,
        I_BID => DATA_OUTPUT_BID,
        I_BUSER => DATA_OUTPUT_BUSER);

    input_oc_0_U : component conv1_input_oc_0
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_oc_0_address0,
        ce0 => input_oc_0_ce0,
        we0 => input_oc_0_we0,
        d0 => grp_store_input_fu_597_input_oc_0_d0,
        q0 => input_oc_0_q0,
        address1 => grp_convulution1_fu_493_input_0_address1,
        ce1 => input_oc_0_ce1,
        q1 => input_oc_0_q1);

    weights_oc_0_U : component conv1_weights_oc_0
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_oc_0_address0,
        ce0 => weights_oc_0_ce0,
        we0 => weights_oc_0_we0,
        d0 => grp_store_weights_fu_588_weights_oc_0_d0,
        q0 => weights_oc_0_q0,
        address1 => grp_convulution1_fu_493_weights_0_address1,
        ce1 => weights_oc_0_ce1,
        q1 => weights_oc_0_q1);

    weights_3_0_oc_U : component conv1_weights_3_0eOg
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_3_0_oc_address0,
        ce0 => weights_3_0_oc_ce0,
        we0 => weights_3_0_oc_we0,
        d0 => grp_store_weights_3_fu_573_weights_oc_d0,
        q0 => weights_3_0_oc_q0);

    weights_3_1_oc_U : component conv1_weights_3_0eOg
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_3_1_oc_address0,
        ce0 => weights_3_1_oc_ce0,
        we0 => weights_3_1_oc_we0,
        d0 => grp_store_weights_3_fu_573_weights_oc_d0,
        q0 => weights_3_1_oc_q0);

    weights_3_2_oc_U : component conv1_weights_3_0eOg
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_3_2_oc_address0,
        ce0 => weights_3_2_oc_ce0,
        we0 => weights_3_2_oc_we0,
        d0 => grp_store_weights_3_fu_573_weights_oc_d0,
        q0 => weights_3_2_oc_q0);

    weights_3_3_oc_U : component conv1_weights_3_0eOg
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_3_3_oc_address0,
        ce0 => weights_3_3_oc_ce0,
        we0 => weights_3_3_oc_we0,
        d0 => grp_store_weights_3_fu_573_weights_oc_d0,
        q0 => weights_3_3_oc_q0);

    weights_3_4_oc_U : component conv1_weights_3_0eOg
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_3_4_oc_address0,
        ce0 => weights_3_4_oc_ce0,
        we0 => weights_3_4_oc_we0,
        d0 => grp_store_weights_3_fu_573_weights_oc_d0,
        q0 => weights_3_4_oc_q0);

    weights_3_5_oc_U : component conv1_weights_3_0eOg
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_3_5_oc_address0,
        ce0 => weights_3_5_oc_ce0,
        we0 => weights_3_5_oc_we0,
        d0 => grp_store_weights_3_fu_573_weights_oc_d0,
        q0 => weights_3_5_oc_q0);

    weights_5_0_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_0_oc_address0,
        ce0 => weights_5_0_oc_ce0,
        we0 => weights_5_0_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_0_oc_q0);

    weights_5_1_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_1_oc_address0,
        ce0 => weights_5_1_oc_ce0,
        we0 => weights_5_1_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_1_oc_q0);

    weights_5_2_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_2_oc_address0,
        ce0 => weights_5_2_oc_ce0,
        we0 => weights_5_2_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_2_oc_q0);

    weights_5_3_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_3_oc_address0,
        ce0 => weights_5_3_oc_ce0,
        we0 => weights_5_3_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_3_oc_q0);

    weights_5_4_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_4_oc_address0,
        ce0 => weights_5_4_oc_ce0,
        we0 => weights_5_4_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_4_oc_q0);

    weights_5_5_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_5_oc_address0,
        ce0 => weights_5_5_oc_ce0,
        we0 => weights_5_5_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_5_oc_q0);

    weights_5_6_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_6_oc_address0,
        ce0 => weights_5_6_oc_ce0,
        we0 => weights_5_6_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_6_oc_q0);

    weights_5_7_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_7_oc_address0,
        ce0 => weights_5_7_oc_ce0,
        we0 => weights_5_7_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_7_oc_q0);

    weights_5_8_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_8_oc_address0,
        ce0 => weights_5_8_oc_ce0,
        we0 => weights_5_8_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_8_oc_q0);

    weights_5_9_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_9_oc_address0,
        ce0 => weights_5_9_oc_ce0,
        we0 => weights_5_9_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_9_oc_q0);

    weights_5_10_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_10_oc_address0,
        ce0 => weights_5_10_oc_ce0,
        we0 => weights_5_10_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_10_oc_q0);

    weights_5_11_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_11_oc_address0,
        ce0 => weights_5_11_oc_ce0,
        we0 => weights_5_11_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_11_oc_q0);

    weights_5_12_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_12_oc_address0,
        ce0 => weights_5_12_oc_ce0,
        we0 => weights_5_12_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_12_oc_q0);

    weights_5_13_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_13_oc_address0,
        ce0 => weights_5_13_oc_ce0,
        we0 => weights_5_13_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_13_oc_q0);

    weights_5_14_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_14_oc_address0,
        ce0 => weights_5_14_oc_ce0,
        we0 => weights_5_14_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_14_oc_q0);

    weights_5_15_oc_U : component conv1_weights_5_0kbM
    generic map (
        DataWidth => 32,
        AddressRange => 3000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_5_15_oc_address0,
        ce0 => weights_5_15_oc_ce0,
        we0 => weights_5_15_oc_we0,
        d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        q0 => weights_5_15_oc_q0);

    bias_oc_U : component conv1_bias_oc
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_oc_address0,
        ce0 => bias_oc_ce0,
        we0 => bias_oc_we0,
        d0 => grp_store_bias_fu_630_bias_oc_d0,
        q0 => bias_oc_q0);

    bias_3_oc_U : component conv1_bias_3_oc
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_3_oc_address0,
        ce0 => bias_3_oc_ce0,
        we0 => bias_3_oc_we0,
        d0 => grp_store_bias_3_fu_614_bias_oc_d0,
        q0 => bias_3_oc_q0);

    bias_5_oc_U : component conv1_bias_5_oc
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bias_5_oc_address0,
        ce0 => bias_5_oc_ce0,
        we0 => bias_5_oc_we0,
        d0 => grp_store_bias_5_fu_606_bias_oc_d0,
        q0 => bias_5_oc_q0);

    output1_oc_U : component conv1_output1_oc
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output1_oc_address0,
        ce0 => output1_oc_ce0,
        we0 => output1_oc_we0,
        d0 => grp_convulution1_fu_493_output_r_d0,
        q0 => output1_oc_q0);

    output2_oc_U : component conv1_output2_oc
    generic map (
        DataWidth => 32,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output2_oc_address0,
        ce0 => output2_oc_ce0,
        we0 => output2_oc_we0,
        d0 => output2_oc_d0,
        q0 => output2_oc_q0,
        address1 => grp_convolution_3_fu_501_input_r_address1,
        ce1 => output2_oc_ce1,
        q1 => output2_oc_q1);

    output3_oc_U : component conv1_output3_oc
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output3_oc_address0,
        ce0 => output3_oc_ce0,
        we0 => output3_oc_we0,
        d0 => grp_convolution_3_fu_501_output_r_d0,
        q0 => output3_oc_q0);

    output4_oc_U : component conv1_output4_oc
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output4_oc_address0,
        ce0 => output4_oc_ce0,
        we0 => output4_oc_we0,
        d0 => output4_oc_d0,
        q0 => output4_oc_q0,
        address1 => grp_convolution_5_fu_470_input_r_address1,
        ce1 => output4_oc_ce1,
        q1 => output4_oc_q1);

    output5_oc_0_0_U : component conv1_bias_5_oc
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output5_oc_0_0_address0,
        ce0 => output5_oc_0_0_ce0,
        we0 => output5_oc_0_0_we0,
        d0 => output5_oc_0_0_d0,
        q0 => output5_oc_0_0_q0);

    output6_oc_U : component conv1_output6_oc
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output6_oc_address0,
        ce0 => output6_oc_ce0,
        we0 => output6_oc_we0,
        d0 => output6_oc_d0,
        q0 => output6_oc_q0);

    grp_convolution_5_fu_470 : component convolution_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution_5_fu_470_ap_start,
        ap_done => grp_convolution_5_fu_470_ap_done,
        ap_idle => grp_convolution_5_fu_470_ap_idle,
        ap_ready => grp_convolution_5_fu_470_ap_ready,
        input_r_address0 => grp_convolution_5_fu_470_input_r_address0,
        input_r_ce0 => grp_convolution_5_fu_470_input_r_ce0,
        input_r_q0 => output4_oc_q0,
        input_r_address1 => grp_convolution_5_fu_470_input_r_address1,
        input_r_ce1 => grp_convolution_5_fu_470_input_r_ce1,
        input_r_q1 => output4_oc_q1,
        weights_0_address0 => grp_convolution_5_fu_470_weights_0_address0,
        weights_0_ce0 => grp_convolution_5_fu_470_weights_0_ce0,
        weights_0_q0 => weights_5_0_oc_q0,
        weights_1_address0 => grp_convolution_5_fu_470_weights_1_address0,
        weights_1_ce0 => grp_convolution_5_fu_470_weights_1_ce0,
        weights_1_q0 => weights_5_1_oc_q0,
        weights_2_address0 => grp_convolution_5_fu_470_weights_2_address0,
        weights_2_ce0 => grp_convolution_5_fu_470_weights_2_ce0,
        weights_2_q0 => weights_5_2_oc_q0,
        weights_3_address0 => grp_convolution_5_fu_470_weights_3_address0,
        weights_3_ce0 => grp_convolution_5_fu_470_weights_3_ce0,
        weights_3_q0 => weights_5_3_oc_q0,
        weights_4_address0 => grp_convolution_5_fu_470_weights_4_address0,
        weights_4_ce0 => grp_convolution_5_fu_470_weights_4_ce0,
        weights_4_q0 => weights_5_4_oc_q0,
        weights_5_address0 => grp_convolution_5_fu_470_weights_5_address0,
        weights_5_ce0 => grp_convolution_5_fu_470_weights_5_ce0,
        weights_5_q0 => weights_5_5_oc_q0,
        weights_6_address0 => grp_convolution_5_fu_470_weights_6_address0,
        weights_6_ce0 => grp_convolution_5_fu_470_weights_6_ce0,
        weights_6_q0 => weights_5_6_oc_q0,
        weights_7_address0 => grp_convolution_5_fu_470_weights_7_address0,
        weights_7_ce0 => grp_convolution_5_fu_470_weights_7_ce0,
        weights_7_q0 => weights_5_7_oc_q0,
        weights_8_address0 => grp_convolution_5_fu_470_weights_8_address0,
        weights_8_ce0 => grp_convolution_5_fu_470_weights_8_ce0,
        weights_8_q0 => weights_5_8_oc_q0,
        weights_9_address0 => grp_convolution_5_fu_470_weights_9_address0,
        weights_9_ce0 => grp_convolution_5_fu_470_weights_9_ce0,
        weights_9_q0 => weights_5_9_oc_q0,
        weights_10_address0 => grp_convolution_5_fu_470_weights_10_address0,
        weights_10_ce0 => grp_convolution_5_fu_470_weights_10_ce0,
        weights_10_q0 => weights_5_10_oc_q0,
        weights_11_address0 => grp_convolution_5_fu_470_weights_11_address0,
        weights_11_ce0 => grp_convolution_5_fu_470_weights_11_ce0,
        weights_11_q0 => weights_5_11_oc_q0,
        weights_12_address0 => grp_convolution_5_fu_470_weights_12_address0,
        weights_12_ce0 => grp_convolution_5_fu_470_weights_12_ce0,
        weights_12_q0 => weights_5_12_oc_q0,
        weights_13_address0 => grp_convolution_5_fu_470_weights_13_address0,
        weights_13_ce0 => grp_convolution_5_fu_470_weights_13_ce0,
        weights_13_q0 => weights_5_13_oc_q0,
        weights_14_address0 => grp_convolution_5_fu_470_weights_14_address0,
        weights_14_ce0 => grp_convolution_5_fu_470_weights_14_ce0,
        weights_14_q0 => weights_5_14_oc_q0,
        weights_15_address0 => grp_convolution_5_fu_470_weights_15_address0,
        weights_15_ce0 => grp_convolution_5_fu_470_weights_15_ce0,
        weights_15_q0 => weights_5_15_oc_q0,
        bias_address0 => grp_convolution_5_fu_470_bias_address0,
        bias_ce0 => grp_convolution_5_fu_470_bias_ce0,
        bias_q0 => bias_5_oc_q0,
        output_0_0_address0 => grp_convolution_5_fu_470_output_0_0_address0,
        output_0_0_ce0 => grp_convolution_5_fu_470_output_0_0_ce0,
        output_0_0_we0 => grp_convolution_5_fu_470_output_0_0_we0,
        output_0_0_d0 => grp_convolution_5_fu_470_output_0_0_d0);

    grp_convulution1_fu_493 : component convulution1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convulution1_fu_493_ap_start,
        ap_done => grp_convulution1_fu_493_ap_done,
        ap_idle => grp_convulution1_fu_493_ap_idle,
        ap_ready => grp_convulution1_fu_493_ap_ready,
        input_0_address0 => grp_convulution1_fu_493_input_0_address0,
        input_0_ce0 => grp_convulution1_fu_493_input_0_ce0,
        input_0_q0 => input_oc_0_q0,
        input_0_address1 => grp_convulution1_fu_493_input_0_address1,
        input_0_ce1 => grp_convulution1_fu_493_input_0_ce1,
        input_0_q1 => input_oc_0_q1,
        weights_0_address0 => grp_convulution1_fu_493_weights_0_address0,
        weights_0_ce0 => grp_convulution1_fu_493_weights_0_ce0,
        weights_0_q0 => weights_oc_0_q0,
        weights_0_address1 => grp_convulution1_fu_493_weights_0_address1,
        weights_0_ce1 => grp_convulution1_fu_493_weights_0_ce1,
        weights_0_q1 => weights_oc_0_q1,
        bias_address0 => grp_convulution1_fu_493_bias_address0,
        bias_ce0 => grp_convulution1_fu_493_bias_ce0,
        bias_q0 => bias_oc_q0,
        output_r_address0 => grp_convulution1_fu_493_output_r_address0,
        output_r_ce0 => grp_convulution1_fu_493_output_r_ce0,
        output_r_we0 => grp_convulution1_fu_493_output_r_we0,
        output_r_d0 => grp_convulution1_fu_493_output_r_d0);

    grp_convolution_3_fu_501 : component convolution_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution_3_fu_501_ap_start,
        ap_done => grp_convolution_3_fu_501_ap_done,
        ap_idle => grp_convolution_3_fu_501_ap_idle,
        ap_ready => grp_convolution_3_fu_501_ap_ready,
        input_r_address0 => grp_convolution_3_fu_501_input_r_address0,
        input_r_ce0 => grp_convolution_3_fu_501_input_r_ce0,
        input_r_q0 => output2_oc_q0,
        input_r_address1 => grp_convolution_3_fu_501_input_r_address1,
        input_r_ce1 => grp_convolution_3_fu_501_input_r_ce1,
        input_r_q1 => output2_oc_q1,
        weights_0_address0 => grp_convolution_3_fu_501_weights_0_address0,
        weights_0_ce0 => grp_convolution_3_fu_501_weights_0_ce0,
        weights_0_q0 => weights_3_0_oc_q0,
        weights_1_address0 => grp_convolution_3_fu_501_weights_1_address0,
        weights_1_ce0 => grp_convolution_3_fu_501_weights_1_ce0,
        weights_1_q0 => weights_3_1_oc_q0,
        weights_2_address0 => grp_convolution_3_fu_501_weights_2_address0,
        weights_2_ce0 => grp_convolution_3_fu_501_weights_2_ce0,
        weights_2_q0 => weights_3_2_oc_q0,
        weights_3_address0 => grp_convolution_3_fu_501_weights_3_address0,
        weights_3_ce0 => grp_convolution_3_fu_501_weights_3_ce0,
        weights_3_q0 => weights_3_3_oc_q0,
        weights_4_address0 => grp_convolution_3_fu_501_weights_4_address0,
        weights_4_ce0 => grp_convolution_3_fu_501_weights_4_ce0,
        weights_4_q0 => weights_3_4_oc_q0,
        weights_5_address0 => grp_convolution_3_fu_501_weights_5_address0,
        weights_5_ce0 => grp_convolution_3_fu_501_weights_5_ce0,
        weights_5_q0 => weights_3_5_oc_q0,
        bias_address0 => grp_convolution_3_fu_501_bias_address0,
        bias_ce0 => grp_convolution_3_fu_501_bias_ce0,
        bias_q0 => bias_3_oc_q0,
        output_r_address0 => grp_convolution_3_fu_501_output_r_address0,
        output_r_ce0 => grp_convolution_3_fu_501_output_r_ce0,
        output_r_we0 => grp_convolution_3_fu_501_output_r_we0,
        output_r_d0 => grp_convolution_3_fu_501_output_r_d0);

    grp_fc_6_fu_514 : component fc_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc_6_fu_514_ap_start,
        ap_done => grp_fc_6_fu_514_ap_done,
        ap_idle => grp_fc_6_fu_514_ap_idle,
        ap_ready => grp_fc_6_fu_514_ap_ready,
        input_0_0_address0 => grp_fc_6_fu_514_input_0_0_address0,
        input_0_0_ce0 => grp_fc_6_fu_514_input_0_0_ce0,
        input_0_0_q0 => output5_oc_0_0_q0,
        m_axi_weights_AWVALID => grp_fc_6_fu_514_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_fc_6_fu_514_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_fc_6_fu_514_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_fc_6_fu_514_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_fc_6_fu_514_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_fc_6_fu_514_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_fc_6_fu_514_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_fc_6_fu_514_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_fc_6_fu_514_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_fc_6_fu_514_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_fc_6_fu_514_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_fc_6_fu_514_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_fc_6_fu_514_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_fc_6_fu_514_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_fc_6_fu_514_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_fc_6_fu_514_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_fc_6_fu_514_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_fc_6_fu_514_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_fc_6_fu_514_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => DATA_WEIGHT_ARREADY,
        m_axi_weights_ARADDR => grp_fc_6_fu_514_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_fc_6_fu_514_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_fc_6_fu_514_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_fc_6_fu_514_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_fc_6_fu_514_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_fc_6_fu_514_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_fc_6_fu_514_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_fc_6_fu_514_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_fc_6_fu_514_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_fc_6_fu_514_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_fc_6_fu_514_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => DATA_WEIGHT_RVALID,
        m_axi_weights_RREADY => grp_fc_6_fu_514_m_axi_weights_RREADY,
        m_axi_weights_RDATA => DATA_WEIGHT_RDATA,
        m_axi_weights_RLAST => DATA_WEIGHT_RLAST,
        m_axi_weights_RID => DATA_WEIGHT_RID,
        m_axi_weights_RUSER => DATA_WEIGHT_RUSER,
        m_axi_weights_RRESP => DATA_WEIGHT_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_fc_6_fu_514_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset => weights_s_reg_888,
        m_axi_bias_AWVALID => grp_fc_6_fu_514_m_axi_bias_AWVALID,
        m_axi_bias_AWREADY => ap_const_logic_0,
        m_axi_bias_AWADDR => grp_fc_6_fu_514_m_axi_bias_AWADDR,
        m_axi_bias_AWID => grp_fc_6_fu_514_m_axi_bias_AWID,
        m_axi_bias_AWLEN => grp_fc_6_fu_514_m_axi_bias_AWLEN,
        m_axi_bias_AWSIZE => grp_fc_6_fu_514_m_axi_bias_AWSIZE,
        m_axi_bias_AWBURST => grp_fc_6_fu_514_m_axi_bias_AWBURST,
        m_axi_bias_AWLOCK => grp_fc_6_fu_514_m_axi_bias_AWLOCK,
        m_axi_bias_AWCACHE => grp_fc_6_fu_514_m_axi_bias_AWCACHE,
        m_axi_bias_AWPROT => grp_fc_6_fu_514_m_axi_bias_AWPROT,
        m_axi_bias_AWQOS => grp_fc_6_fu_514_m_axi_bias_AWQOS,
        m_axi_bias_AWREGION => grp_fc_6_fu_514_m_axi_bias_AWREGION,
        m_axi_bias_AWUSER => grp_fc_6_fu_514_m_axi_bias_AWUSER,
        m_axi_bias_WVALID => grp_fc_6_fu_514_m_axi_bias_WVALID,
        m_axi_bias_WREADY => ap_const_logic_0,
        m_axi_bias_WDATA => grp_fc_6_fu_514_m_axi_bias_WDATA,
        m_axi_bias_WSTRB => grp_fc_6_fu_514_m_axi_bias_WSTRB,
        m_axi_bias_WLAST => grp_fc_6_fu_514_m_axi_bias_WLAST,
        m_axi_bias_WID => grp_fc_6_fu_514_m_axi_bias_WID,
        m_axi_bias_WUSER => grp_fc_6_fu_514_m_axi_bias_WUSER,
        m_axi_bias_ARVALID => grp_fc_6_fu_514_m_axi_bias_ARVALID,
        m_axi_bias_ARREADY => DATA_BIAS_ARREADY,
        m_axi_bias_ARADDR => grp_fc_6_fu_514_m_axi_bias_ARADDR,
        m_axi_bias_ARID => grp_fc_6_fu_514_m_axi_bias_ARID,
        m_axi_bias_ARLEN => grp_fc_6_fu_514_m_axi_bias_ARLEN,
        m_axi_bias_ARSIZE => grp_fc_6_fu_514_m_axi_bias_ARSIZE,
        m_axi_bias_ARBURST => grp_fc_6_fu_514_m_axi_bias_ARBURST,
        m_axi_bias_ARLOCK => grp_fc_6_fu_514_m_axi_bias_ARLOCK,
        m_axi_bias_ARCACHE => grp_fc_6_fu_514_m_axi_bias_ARCACHE,
        m_axi_bias_ARPROT => grp_fc_6_fu_514_m_axi_bias_ARPROT,
        m_axi_bias_ARQOS => grp_fc_6_fu_514_m_axi_bias_ARQOS,
        m_axi_bias_ARREGION => grp_fc_6_fu_514_m_axi_bias_ARREGION,
        m_axi_bias_ARUSER => grp_fc_6_fu_514_m_axi_bias_ARUSER,
        m_axi_bias_RVALID => DATA_BIAS_RVALID,
        m_axi_bias_RREADY => grp_fc_6_fu_514_m_axi_bias_RREADY,
        m_axi_bias_RDATA => DATA_BIAS_RDATA,
        m_axi_bias_RLAST => DATA_BIAS_RLAST,
        m_axi_bias_RID => DATA_BIAS_RID,
        m_axi_bias_RUSER => DATA_BIAS_RUSER,
        m_axi_bias_RRESP => DATA_BIAS_RRESP,
        m_axi_bias_BVALID => ap_const_logic_0,
        m_axi_bias_BREADY => grp_fc_6_fu_514_m_axi_bias_BREADY,
        m_axi_bias_BRESP => ap_const_lv2_0,
        m_axi_bias_BID => ap_const_lv1_0,
        m_axi_bias_BUSER => ap_const_lv1_0,
        bias_offset => bias_s_reg_868,
        output_r_address0 => grp_fc_6_fu_514_output_r_address0,
        output_r_ce0 => grp_fc_6_fu_514_output_r_ce0,
        output_r_we0 => grp_fc_6_fu_514_output_r_we0,
        output_r_d0 => grp_fc_6_fu_514_output_r_d0);

    grp_maxpool_2_fu_526 : component maxpool_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_maxpool_2_fu_526_ap_start,
        ap_done => grp_maxpool_2_fu_526_ap_done,
        ap_idle => grp_maxpool_2_fu_526_ap_idle,
        ap_ready => grp_maxpool_2_fu_526_ap_ready,
        input_r_address0 => grp_maxpool_2_fu_526_input_r_address0,
        input_r_ce0 => grp_maxpool_2_fu_526_input_r_ce0,
        input_r_q0 => output1_oc_q0,
        output_r_address0 => grp_maxpool_2_fu_526_output_r_address0,
        output_r_ce0 => grp_maxpool_2_fu_526_output_r_ce0,
        output_r_we0 => grp_maxpool_2_fu_526_output_r_we0,
        output_r_d0 => grp_maxpool_2_fu_526_output_r_d0);

    grp_maxpool_4_fu_532 : component maxpool_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_maxpool_4_fu_532_ap_start,
        ap_done => grp_maxpool_4_fu_532_ap_done,
        ap_idle => grp_maxpool_4_fu_532_ap_idle,
        ap_ready => grp_maxpool_4_fu_532_ap_ready,
        input_r_address0 => grp_maxpool_4_fu_532_input_r_address0,
        input_r_ce0 => grp_maxpool_4_fu_532_input_r_ce0,
        input_r_q0 => output3_oc_q0,
        output_r_address0 => grp_maxpool_4_fu_532_output_r_address0,
        output_r_ce0 => grp_maxpool_4_fu_532_output_r_ce0,
        output_r_we0 => grp_maxpool_4_fu_532_output_r_we0,
        output_r_d0 => grp_maxpool_4_fu_532_output_r_d0);

    grp_relu_4_fu_538 : component relu_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_relu_4_fu_538_ap_start,
        ap_done => grp_relu_4_fu_538_ap_done,
        ap_idle => grp_relu_4_fu_538_ap_idle,
        ap_ready => grp_relu_4_fu_538_ap_ready,
        output_r_address0 => grp_relu_4_fu_538_output_r_address0,
        output_r_ce0 => grp_relu_4_fu_538_output_r_ce0,
        output_r_we0 => grp_relu_4_fu_538_output_r_we0,
        output_r_d0 => grp_relu_4_fu_538_output_r_d0,
        output_r_q0 => output4_oc_q0);

    grp_relu_2_fu_543 : component relu_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_relu_2_fu_543_ap_start,
        ap_done => grp_relu_2_fu_543_ap_done,
        ap_idle => grp_relu_2_fu_543_ap_idle,
        ap_ready => grp_relu_2_fu_543_ap_ready,
        output_r_address0 => grp_relu_2_fu_543_output_r_address0,
        output_r_ce0 => grp_relu_2_fu_543_output_r_ce0,
        output_r_we0 => grp_relu_2_fu_543_output_r_we0,
        output_r_d0 => grp_relu_2_fu_543_output_r_d0,
        output_r_q0 => output2_oc_q0);

    grp_store_weights_5_fu_548 : component store_weights_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_store_weights_5_fu_548_ap_start,
        ap_done => grp_store_weights_5_fu_548_ap_done,
        ap_idle => grp_store_weights_5_fu_548_ap_idle,
        ap_ready => grp_store_weights_5_fu_548_ap_ready,
        m_axi_weights_AWVALID => grp_store_weights_5_fu_548_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_store_weights_5_fu_548_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_store_weights_5_fu_548_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_store_weights_5_fu_548_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_store_weights_5_fu_548_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_store_weights_5_fu_548_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_store_weights_5_fu_548_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_store_weights_5_fu_548_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_store_weights_5_fu_548_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_store_weights_5_fu_548_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_store_weights_5_fu_548_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_store_weights_5_fu_548_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_store_weights_5_fu_548_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_store_weights_5_fu_548_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_store_weights_5_fu_548_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_store_weights_5_fu_548_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_store_weights_5_fu_548_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_store_weights_5_fu_548_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_store_weights_5_fu_548_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => DATA_WEIGHT_ARREADY,
        m_axi_weights_ARADDR => grp_store_weights_5_fu_548_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_store_weights_5_fu_548_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_store_weights_5_fu_548_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_store_weights_5_fu_548_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_store_weights_5_fu_548_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_store_weights_5_fu_548_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_store_weights_5_fu_548_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_store_weights_5_fu_548_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_store_weights_5_fu_548_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_store_weights_5_fu_548_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_store_weights_5_fu_548_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => DATA_WEIGHT_RVALID,
        m_axi_weights_RREADY => grp_store_weights_5_fu_548_m_axi_weights_RREADY,
        m_axi_weights_RDATA => DATA_WEIGHT_RDATA,
        m_axi_weights_RLAST => DATA_WEIGHT_RLAST,
        m_axi_weights_RID => DATA_WEIGHT_RID,
        m_axi_weights_RUSER => DATA_WEIGHT_RUSER,
        m_axi_weights_RRESP => DATA_WEIGHT_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_store_weights_5_fu_548_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset => weights_1_reg_893,
        weights_oc_address0 => grp_store_weights_5_fu_548_weights_oc_address0,
        weights_oc_ce0 => grp_store_weights_5_fu_548_weights_oc_ce0,
        weights_oc_we0 => grp_store_weights_5_fu_548_weights_oc_we0,
        weights_oc_d0 => grp_store_weights_5_fu_548_weights_oc_d0,
        input_channel => grp_store_weights_5_fu_548_input_channel);

    grp_store_weights_3_fu_573 : component store_weights_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_store_weights_3_fu_573_ap_start,
        ap_done => grp_store_weights_3_fu_573_ap_done,
        ap_idle => grp_store_weights_3_fu_573_ap_idle,
        ap_ready => grp_store_weights_3_fu_573_ap_ready,
        m_axi_weights_AWVALID => grp_store_weights_3_fu_573_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_store_weights_3_fu_573_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_store_weights_3_fu_573_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_store_weights_3_fu_573_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_store_weights_3_fu_573_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_store_weights_3_fu_573_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_store_weights_3_fu_573_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_store_weights_3_fu_573_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_store_weights_3_fu_573_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_store_weights_3_fu_573_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_store_weights_3_fu_573_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_store_weights_3_fu_573_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_store_weights_3_fu_573_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_store_weights_3_fu_573_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_store_weights_3_fu_573_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_store_weights_3_fu_573_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_store_weights_3_fu_573_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_store_weights_3_fu_573_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_store_weights_3_fu_573_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => DATA_WEIGHT_ARREADY,
        m_axi_weights_ARADDR => grp_store_weights_3_fu_573_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_store_weights_3_fu_573_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_store_weights_3_fu_573_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_store_weights_3_fu_573_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_store_weights_3_fu_573_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_store_weights_3_fu_573_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_store_weights_3_fu_573_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_store_weights_3_fu_573_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_store_weights_3_fu_573_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_store_weights_3_fu_573_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_store_weights_3_fu_573_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => DATA_WEIGHT_RVALID,
        m_axi_weights_RREADY => grp_store_weights_3_fu_573_m_axi_weights_RREADY,
        m_axi_weights_RDATA => DATA_WEIGHT_RDATA,
        m_axi_weights_RLAST => DATA_WEIGHT_RLAST,
        m_axi_weights_RID => DATA_WEIGHT_RID,
        m_axi_weights_RUSER => DATA_WEIGHT_RUSER,
        m_axi_weights_RRESP => DATA_WEIGHT_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_store_weights_3_fu_573_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset => weights_2_reg_898,
        weights_oc_address0 => grp_store_weights_3_fu_573_weights_oc_address0,
        weights_oc_ce0 => grp_store_weights_3_fu_573_weights_oc_ce0,
        weights_oc_we0 => grp_store_weights_3_fu_573_weights_oc_we0,
        weights_oc_d0 => grp_store_weights_3_fu_573_weights_oc_d0,
        input_channel => grp_store_weights_3_fu_573_input_channel);

    grp_store_weights_fu_588 : component store_weights
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_store_weights_fu_588_ap_start,
        ap_done => grp_store_weights_fu_588_ap_done,
        ap_idle => grp_store_weights_fu_588_ap_idle,
        ap_ready => grp_store_weights_fu_588_ap_ready,
        m_axi_weights_AWVALID => grp_store_weights_fu_588_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => ap_const_logic_0,
        m_axi_weights_AWADDR => grp_store_weights_fu_588_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_store_weights_fu_588_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_store_weights_fu_588_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_store_weights_fu_588_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_store_weights_fu_588_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_store_weights_fu_588_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_store_weights_fu_588_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_store_weights_fu_588_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_store_weights_fu_588_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_store_weights_fu_588_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_store_weights_fu_588_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_store_weights_fu_588_m_axi_weights_WVALID,
        m_axi_weights_WREADY => ap_const_logic_0,
        m_axi_weights_WDATA => grp_store_weights_fu_588_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_store_weights_fu_588_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_store_weights_fu_588_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_store_weights_fu_588_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_store_weights_fu_588_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_store_weights_fu_588_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => DATA_WEIGHT_ARREADY,
        m_axi_weights_ARADDR => grp_store_weights_fu_588_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_store_weights_fu_588_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_store_weights_fu_588_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_store_weights_fu_588_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_store_weights_fu_588_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_store_weights_fu_588_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_store_weights_fu_588_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_store_weights_fu_588_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_store_weights_fu_588_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_store_weights_fu_588_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_store_weights_fu_588_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => DATA_WEIGHT_RVALID,
        m_axi_weights_RREADY => grp_store_weights_fu_588_m_axi_weights_RREADY,
        m_axi_weights_RDATA => DATA_WEIGHT_RDATA,
        m_axi_weights_RLAST => DATA_WEIGHT_RLAST,
        m_axi_weights_RID => DATA_WEIGHT_RID,
        m_axi_weights_RUSER => DATA_WEIGHT_RUSER,
        m_axi_weights_RRESP => DATA_WEIGHT_RRESP,
        m_axi_weights_BVALID => ap_const_logic_0,
        m_axi_weights_BREADY => grp_store_weights_fu_588_m_axi_weights_BREADY,
        m_axi_weights_BRESP => ap_const_lv2_0,
        m_axi_weights_BID => ap_const_lv1_0,
        m_axi_weights_BUSER => ap_const_lv1_0,
        weights_offset => weights3_reg_903,
        weights_oc_0_address0 => grp_store_weights_fu_588_weights_oc_0_address0,
        weights_oc_0_ce0 => grp_store_weights_fu_588_weights_oc_0_ce0,
        weights_oc_0_we0 => grp_store_weights_fu_588_weights_oc_0_we0,
        weights_oc_0_d0 => grp_store_weights_fu_588_weights_oc_0_d0);

    grp_store_input_fu_597 : component store_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_store_input_fu_597_ap_start,
        ap_done => grp_store_input_fu_597_ap_done,
        ap_idle => grp_store_input_fu_597_ap_idle,
        ap_ready => grp_store_input_fu_597_ap_ready,
        m_axi_input_r_AWVALID => grp_store_input_fu_597_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_store_input_fu_597_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_store_input_fu_597_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_store_input_fu_597_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_store_input_fu_597_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_store_input_fu_597_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_store_input_fu_597_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_store_input_fu_597_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_store_input_fu_597_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_store_input_fu_597_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_store_input_fu_597_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_store_input_fu_597_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_store_input_fu_597_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_store_input_fu_597_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_store_input_fu_597_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_store_input_fu_597_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_store_input_fu_597_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_store_input_fu_597_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_store_input_fu_597_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => DATA_INPUT_ARREADY,
        m_axi_input_r_ARADDR => grp_store_input_fu_597_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_store_input_fu_597_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_store_input_fu_597_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_store_input_fu_597_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_store_input_fu_597_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_store_input_fu_597_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_store_input_fu_597_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_store_input_fu_597_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_store_input_fu_597_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_store_input_fu_597_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_store_input_fu_597_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => DATA_INPUT_RVALID,
        m_axi_input_r_RREADY => grp_store_input_fu_597_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => DATA_INPUT_RDATA,
        m_axi_input_r_RLAST => DATA_INPUT_RLAST,
        m_axi_input_r_RID => DATA_INPUT_RID,
        m_axi_input_r_RUSER => DATA_INPUT_RUSER,
        m_axi_input_r_RRESP => DATA_INPUT_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_store_input_fu_597_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input_offset => input1_reg_908,
        input_oc_0_address0 => grp_store_input_fu_597_input_oc_0_address0,
        input_oc_0_ce0 => grp_store_input_fu_597_input_oc_0_ce0,
        input_oc_0_we0 => grp_store_input_fu_597_input_oc_0_we0,
        input_oc_0_d0 => grp_store_input_fu_597_input_oc_0_d0);

    grp_store_bias_5_fu_606 : component store_bias_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_store_bias_5_fu_606_ap_start,
        ap_done => grp_store_bias_5_fu_606_ap_done,
        ap_idle => grp_store_bias_5_fu_606_ap_idle,
        ap_ready => grp_store_bias_5_fu_606_ap_ready,
        m_axi_bias_AWVALID => grp_store_bias_5_fu_606_m_axi_bias_AWVALID,
        m_axi_bias_AWREADY => ap_const_logic_0,
        m_axi_bias_AWADDR => grp_store_bias_5_fu_606_m_axi_bias_AWADDR,
        m_axi_bias_AWID => grp_store_bias_5_fu_606_m_axi_bias_AWID,
        m_axi_bias_AWLEN => grp_store_bias_5_fu_606_m_axi_bias_AWLEN,
        m_axi_bias_AWSIZE => grp_store_bias_5_fu_606_m_axi_bias_AWSIZE,
        m_axi_bias_AWBURST => grp_store_bias_5_fu_606_m_axi_bias_AWBURST,
        m_axi_bias_AWLOCK => grp_store_bias_5_fu_606_m_axi_bias_AWLOCK,
        m_axi_bias_AWCACHE => grp_store_bias_5_fu_606_m_axi_bias_AWCACHE,
        m_axi_bias_AWPROT => grp_store_bias_5_fu_606_m_axi_bias_AWPROT,
        m_axi_bias_AWQOS => grp_store_bias_5_fu_606_m_axi_bias_AWQOS,
        m_axi_bias_AWREGION => grp_store_bias_5_fu_606_m_axi_bias_AWREGION,
        m_axi_bias_AWUSER => grp_store_bias_5_fu_606_m_axi_bias_AWUSER,
        m_axi_bias_WVALID => grp_store_bias_5_fu_606_m_axi_bias_WVALID,
        m_axi_bias_WREADY => ap_const_logic_0,
        m_axi_bias_WDATA => grp_store_bias_5_fu_606_m_axi_bias_WDATA,
        m_axi_bias_WSTRB => grp_store_bias_5_fu_606_m_axi_bias_WSTRB,
        m_axi_bias_WLAST => grp_store_bias_5_fu_606_m_axi_bias_WLAST,
        m_axi_bias_WID => grp_store_bias_5_fu_606_m_axi_bias_WID,
        m_axi_bias_WUSER => grp_store_bias_5_fu_606_m_axi_bias_WUSER,
        m_axi_bias_ARVALID => grp_store_bias_5_fu_606_m_axi_bias_ARVALID,
        m_axi_bias_ARREADY => DATA_BIAS_ARREADY,
        m_axi_bias_ARADDR => grp_store_bias_5_fu_606_m_axi_bias_ARADDR,
        m_axi_bias_ARID => grp_store_bias_5_fu_606_m_axi_bias_ARID,
        m_axi_bias_ARLEN => grp_store_bias_5_fu_606_m_axi_bias_ARLEN,
        m_axi_bias_ARSIZE => grp_store_bias_5_fu_606_m_axi_bias_ARSIZE,
        m_axi_bias_ARBURST => grp_store_bias_5_fu_606_m_axi_bias_ARBURST,
        m_axi_bias_ARLOCK => grp_store_bias_5_fu_606_m_axi_bias_ARLOCK,
        m_axi_bias_ARCACHE => grp_store_bias_5_fu_606_m_axi_bias_ARCACHE,
        m_axi_bias_ARPROT => grp_store_bias_5_fu_606_m_axi_bias_ARPROT,
        m_axi_bias_ARQOS => grp_store_bias_5_fu_606_m_axi_bias_ARQOS,
        m_axi_bias_ARREGION => grp_store_bias_5_fu_606_m_axi_bias_ARREGION,
        m_axi_bias_ARUSER => grp_store_bias_5_fu_606_m_axi_bias_ARUSER,
        m_axi_bias_RVALID => DATA_BIAS_RVALID,
        m_axi_bias_RREADY => grp_store_bias_5_fu_606_m_axi_bias_RREADY,
        m_axi_bias_RDATA => DATA_BIAS_RDATA,
        m_axi_bias_RLAST => DATA_BIAS_RLAST,
        m_axi_bias_RID => DATA_BIAS_RID,
        m_axi_bias_RUSER => DATA_BIAS_RUSER,
        m_axi_bias_RRESP => DATA_BIAS_RRESP,
        m_axi_bias_BVALID => ap_const_logic_0,
        m_axi_bias_BREADY => grp_store_bias_5_fu_606_m_axi_bias_BREADY,
        m_axi_bias_BRESP => ap_const_lv2_0,
        m_axi_bias_BID => ap_const_lv1_0,
        m_axi_bias_BUSER => ap_const_lv1_0,
        bias_offset => bias_1_reg_873,
        bias_oc_address0 => grp_store_bias_5_fu_606_bias_oc_address0,
        bias_oc_ce0 => grp_store_bias_5_fu_606_bias_oc_ce0,
        bias_oc_we0 => grp_store_bias_5_fu_606_bias_oc_we0,
        bias_oc_d0 => grp_store_bias_5_fu_606_bias_oc_d0);

    grp_store_bias_3_fu_614 : component store_bias_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_store_bias_3_fu_614_ap_start,
        ap_done => grp_store_bias_3_fu_614_ap_done,
        ap_idle => grp_store_bias_3_fu_614_ap_idle,
        ap_ready => grp_store_bias_3_fu_614_ap_ready,
        m_axi_bias_AWVALID => grp_store_bias_3_fu_614_m_axi_bias_AWVALID,
        m_axi_bias_AWREADY => ap_const_logic_0,
        m_axi_bias_AWADDR => grp_store_bias_3_fu_614_m_axi_bias_AWADDR,
        m_axi_bias_AWID => grp_store_bias_3_fu_614_m_axi_bias_AWID,
        m_axi_bias_AWLEN => grp_store_bias_3_fu_614_m_axi_bias_AWLEN,
        m_axi_bias_AWSIZE => grp_store_bias_3_fu_614_m_axi_bias_AWSIZE,
        m_axi_bias_AWBURST => grp_store_bias_3_fu_614_m_axi_bias_AWBURST,
        m_axi_bias_AWLOCK => grp_store_bias_3_fu_614_m_axi_bias_AWLOCK,
        m_axi_bias_AWCACHE => grp_store_bias_3_fu_614_m_axi_bias_AWCACHE,
        m_axi_bias_AWPROT => grp_store_bias_3_fu_614_m_axi_bias_AWPROT,
        m_axi_bias_AWQOS => grp_store_bias_3_fu_614_m_axi_bias_AWQOS,
        m_axi_bias_AWREGION => grp_store_bias_3_fu_614_m_axi_bias_AWREGION,
        m_axi_bias_AWUSER => grp_store_bias_3_fu_614_m_axi_bias_AWUSER,
        m_axi_bias_WVALID => grp_store_bias_3_fu_614_m_axi_bias_WVALID,
        m_axi_bias_WREADY => ap_const_logic_0,
        m_axi_bias_WDATA => grp_store_bias_3_fu_614_m_axi_bias_WDATA,
        m_axi_bias_WSTRB => grp_store_bias_3_fu_614_m_axi_bias_WSTRB,
        m_axi_bias_WLAST => grp_store_bias_3_fu_614_m_axi_bias_WLAST,
        m_axi_bias_WID => grp_store_bias_3_fu_614_m_axi_bias_WID,
        m_axi_bias_WUSER => grp_store_bias_3_fu_614_m_axi_bias_WUSER,
        m_axi_bias_ARVALID => grp_store_bias_3_fu_614_m_axi_bias_ARVALID,
        m_axi_bias_ARREADY => DATA_BIAS_ARREADY,
        m_axi_bias_ARADDR => grp_store_bias_3_fu_614_m_axi_bias_ARADDR,
        m_axi_bias_ARID => grp_store_bias_3_fu_614_m_axi_bias_ARID,
        m_axi_bias_ARLEN => grp_store_bias_3_fu_614_m_axi_bias_ARLEN,
        m_axi_bias_ARSIZE => grp_store_bias_3_fu_614_m_axi_bias_ARSIZE,
        m_axi_bias_ARBURST => grp_store_bias_3_fu_614_m_axi_bias_ARBURST,
        m_axi_bias_ARLOCK => grp_store_bias_3_fu_614_m_axi_bias_ARLOCK,
        m_axi_bias_ARCACHE => grp_store_bias_3_fu_614_m_axi_bias_ARCACHE,
        m_axi_bias_ARPROT => grp_store_bias_3_fu_614_m_axi_bias_ARPROT,
        m_axi_bias_ARQOS => grp_store_bias_3_fu_614_m_axi_bias_ARQOS,
        m_axi_bias_ARREGION => grp_store_bias_3_fu_614_m_axi_bias_ARREGION,
        m_axi_bias_ARUSER => grp_store_bias_3_fu_614_m_axi_bias_ARUSER,
        m_axi_bias_RVALID => DATA_BIAS_RVALID,
        m_axi_bias_RREADY => grp_store_bias_3_fu_614_m_axi_bias_RREADY,
        m_axi_bias_RDATA => DATA_BIAS_RDATA,
        m_axi_bias_RLAST => DATA_BIAS_RLAST,
        m_axi_bias_RID => DATA_BIAS_RID,
        m_axi_bias_RUSER => DATA_BIAS_RUSER,
        m_axi_bias_RRESP => DATA_BIAS_RRESP,
        m_axi_bias_BVALID => ap_const_logic_0,
        m_axi_bias_BREADY => grp_store_bias_3_fu_614_m_axi_bias_BREADY,
        m_axi_bias_BRESP => ap_const_lv2_0,
        m_axi_bias_BID => ap_const_lv1_0,
        m_axi_bias_BUSER => ap_const_lv1_0,
        bias_offset => bias_2_reg_878,
        bias_oc_address0 => grp_store_bias_3_fu_614_bias_oc_address0,
        bias_oc_ce0 => grp_store_bias_3_fu_614_bias_oc_ce0,
        bias_oc_we0 => grp_store_bias_3_fu_614_bias_oc_we0,
        bias_oc_d0 => grp_store_bias_3_fu_614_bias_oc_d0);

    grp_store_output_fu_622 : component store_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_store_output_fu_622_ap_start,
        ap_done => grp_store_output_fu_622_ap_done,
        ap_idle => grp_store_output_fu_622_ap_idle,
        ap_ready => grp_store_output_fu_622_ap_ready,
        m_axi_output_r_AWVALID => grp_store_output_fu_622_m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY => DATA_OUTPUT_AWREADY,
        m_axi_output_r_AWADDR => grp_store_output_fu_622_m_axi_output_r_AWADDR,
        m_axi_output_r_AWID => grp_store_output_fu_622_m_axi_output_r_AWID,
        m_axi_output_r_AWLEN => grp_store_output_fu_622_m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE => grp_store_output_fu_622_m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST => grp_store_output_fu_622_m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK => grp_store_output_fu_622_m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE => grp_store_output_fu_622_m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT => grp_store_output_fu_622_m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS => grp_store_output_fu_622_m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION => grp_store_output_fu_622_m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER => grp_store_output_fu_622_m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID => grp_store_output_fu_622_m_axi_output_r_WVALID,
        m_axi_output_r_WREADY => DATA_OUTPUT_WREADY,
        m_axi_output_r_WDATA => grp_store_output_fu_622_m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB => grp_store_output_fu_622_m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST => grp_store_output_fu_622_m_axi_output_r_WLAST,
        m_axi_output_r_WID => grp_store_output_fu_622_m_axi_output_r_WID,
        m_axi_output_r_WUSER => grp_store_output_fu_622_m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID => grp_store_output_fu_622_m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY => ap_const_logic_0,
        m_axi_output_r_ARADDR => grp_store_output_fu_622_m_axi_output_r_ARADDR,
        m_axi_output_r_ARID => grp_store_output_fu_622_m_axi_output_r_ARID,
        m_axi_output_r_ARLEN => grp_store_output_fu_622_m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE => grp_store_output_fu_622_m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST => grp_store_output_fu_622_m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK => grp_store_output_fu_622_m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE => grp_store_output_fu_622_m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT => grp_store_output_fu_622_m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS => grp_store_output_fu_622_m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION => grp_store_output_fu_622_m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER => grp_store_output_fu_622_m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID => ap_const_logic_0,
        m_axi_output_r_RREADY => grp_store_output_fu_622_m_axi_output_r_RREADY,
        m_axi_output_r_RDATA => ap_const_lv32_0,
        m_axi_output_r_RLAST => ap_const_logic_0,
        m_axi_output_r_RID => ap_const_lv1_0,
        m_axi_output_r_RUSER => ap_const_lv1_0,
        m_axi_output_r_RRESP => ap_const_lv2_0,
        m_axi_output_r_BVALID => DATA_OUTPUT_BVALID,
        m_axi_output_r_BREADY => grp_store_output_fu_622_m_axi_output_r_BREADY,
        m_axi_output_r_BRESP => DATA_OUTPUT_BRESP,
        m_axi_output_r_BID => DATA_OUTPUT_BID,
        m_axi_output_r_BUSER => DATA_OUTPUT_BUSER,
        output_offset => output1_reg_863,
        output_oc_address0 => grp_store_output_fu_622_output_oc_address0,
        output_oc_ce0 => grp_store_output_fu_622_output_oc_ce0,
        output_oc_q0 => output6_oc_q0);

    grp_store_bias_fu_630 : component store_bias
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_store_bias_fu_630_ap_start,
        ap_done => grp_store_bias_fu_630_ap_done,
        ap_idle => grp_store_bias_fu_630_ap_idle,
        ap_ready => grp_store_bias_fu_630_ap_ready,
        m_axi_bias_AWVALID => grp_store_bias_fu_630_m_axi_bias_AWVALID,
        m_axi_bias_AWREADY => ap_const_logic_0,
        m_axi_bias_AWADDR => grp_store_bias_fu_630_m_axi_bias_AWADDR,
        m_axi_bias_AWID => grp_store_bias_fu_630_m_axi_bias_AWID,
        m_axi_bias_AWLEN => grp_store_bias_fu_630_m_axi_bias_AWLEN,
        m_axi_bias_AWSIZE => grp_store_bias_fu_630_m_axi_bias_AWSIZE,
        m_axi_bias_AWBURST => grp_store_bias_fu_630_m_axi_bias_AWBURST,
        m_axi_bias_AWLOCK => grp_store_bias_fu_630_m_axi_bias_AWLOCK,
        m_axi_bias_AWCACHE => grp_store_bias_fu_630_m_axi_bias_AWCACHE,
        m_axi_bias_AWPROT => grp_store_bias_fu_630_m_axi_bias_AWPROT,
        m_axi_bias_AWQOS => grp_store_bias_fu_630_m_axi_bias_AWQOS,
        m_axi_bias_AWREGION => grp_store_bias_fu_630_m_axi_bias_AWREGION,
        m_axi_bias_AWUSER => grp_store_bias_fu_630_m_axi_bias_AWUSER,
        m_axi_bias_WVALID => grp_store_bias_fu_630_m_axi_bias_WVALID,
        m_axi_bias_WREADY => ap_const_logic_0,
        m_axi_bias_WDATA => grp_store_bias_fu_630_m_axi_bias_WDATA,
        m_axi_bias_WSTRB => grp_store_bias_fu_630_m_axi_bias_WSTRB,
        m_axi_bias_WLAST => grp_store_bias_fu_630_m_axi_bias_WLAST,
        m_axi_bias_WID => grp_store_bias_fu_630_m_axi_bias_WID,
        m_axi_bias_WUSER => grp_store_bias_fu_630_m_axi_bias_WUSER,
        m_axi_bias_ARVALID => grp_store_bias_fu_630_m_axi_bias_ARVALID,
        m_axi_bias_ARREADY => DATA_BIAS_ARREADY,
        m_axi_bias_ARADDR => grp_store_bias_fu_630_m_axi_bias_ARADDR,
        m_axi_bias_ARID => grp_store_bias_fu_630_m_axi_bias_ARID,
        m_axi_bias_ARLEN => grp_store_bias_fu_630_m_axi_bias_ARLEN,
        m_axi_bias_ARSIZE => grp_store_bias_fu_630_m_axi_bias_ARSIZE,
        m_axi_bias_ARBURST => grp_store_bias_fu_630_m_axi_bias_ARBURST,
        m_axi_bias_ARLOCK => grp_store_bias_fu_630_m_axi_bias_ARLOCK,
        m_axi_bias_ARCACHE => grp_store_bias_fu_630_m_axi_bias_ARCACHE,
        m_axi_bias_ARPROT => grp_store_bias_fu_630_m_axi_bias_ARPROT,
        m_axi_bias_ARQOS => grp_store_bias_fu_630_m_axi_bias_ARQOS,
        m_axi_bias_ARREGION => grp_store_bias_fu_630_m_axi_bias_ARREGION,
        m_axi_bias_ARUSER => grp_store_bias_fu_630_m_axi_bias_ARUSER,
        m_axi_bias_RVALID => DATA_BIAS_RVALID,
        m_axi_bias_RREADY => grp_store_bias_fu_630_m_axi_bias_RREADY,
        m_axi_bias_RDATA => DATA_BIAS_RDATA,
        m_axi_bias_RLAST => DATA_BIAS_RLAST,
        m_axi_bias_RID => DATA_BIAS_RID,
        m_axi_bias_RUSER => DATA_BIAS_RUSER,
        m_axi_bias_RRESP => DATA_BIAS_RRESP,
        m_axi_bias_BVALID => ap_const_logic_0,
        m_axi_bias_BREADY => grp_store_bias_fu_630_m_axi_bias_BREADY,
        m_axi_bias_BRESP => ap_const_lv2_0,
        m_axi_bias_BID => ap_const_lv1_0,
        m_axi_bias_BUSER => ap_const_lv1_0,
        bias_offset => bias1_reg_883,
        bias_oc_address0 => grp_store_bias_fu_630_bias_oc_address0,
        bias_oc_ce0 => grp_store_bias_fu_630_bias_oc_ce0,
        bias_oc_we0 => grp_store_bias_fu_630_bias_oc_we0,
        bias_oc_d0 => grp_store_bias_fu_630_bias_oc_d0);

    conv1_fcmp_32ns_3dEe_U93 : component conv1_fcmp_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_639_p0,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => grp_fu_639_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolution_3_fu_501_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convolution_3_fu_501_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_convolution_3_fu_501_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_3_fu_501_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_3_fu_501_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_5_fu_470_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convolution_5_fu_470_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    grp_convolution_5_fu_470_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_5_fu_470_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_5_fu_470_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convulution1_fu_493_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convulution1_fu_493_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_convulution1_fu_493_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convulution1_fu_493_ap_ready = ap_const_logic_1)) then 
                    grp_convulution1_fu_493_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc_6_fu_514_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc_6_fu_514_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                    grp_fc_6_fu_514_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc_6_fu_514_ap_ready = ap_const_logic_1)) then 
                    grp_fc_6_fu_514_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_maxpool_2_fu_526_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_maxpool_2_fu_526_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_maxpool_2_fu_526_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_maxpool_2_fu_526_ap_ready = ap_const_logic_1)) then 
                    grp_maxpool_2_fu_526_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_maxpool_4_fu_532_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_maxpool_4_fu_532_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_maxpool_4_fu_532_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_maxpool_4_fu_532_ap_ready = ap_const_logic_1)) then 
                    grp_maxpool_4_fu_532_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_relu_2_fu_543_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_relu_2_fu_543_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_relu_2_fu_543_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_relu_2_fu_543_ap_ready = ap_const_logic_1)) then 
                    grp_relu_2_fu_543_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_relu_4_fu_538_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_relu_4_fu_538_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_relu_4_fu_538_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_relu_4_fu_538_ap_ready = ap_const_logic_1)) then 
                    grp_relu_4_fu_538_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_bias_3_fu_614_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_store_bias_3_fu_614_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_store_bias_3_fu_614_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_bias_3_fu_614_ap_ready = ap_const_logic_1)) then 
                    grp_store_bias_3_fu_614_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_bias_5_fu_606_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_store_bias_5_fu_606_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_store_bias_5_fu_606_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_bias_5_fu_606_ap_ready = ap_const_logic_1)) then 
                    grp_store_bias_5_fu_606_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_bias_fu_630_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_store_bias_fu_630_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_store_bias_fu_630_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_bias_fu_630_ap_ready = ap_const_logic_1)) then 
                    grp_store_bias_fu_630_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_input_fu_597_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_store_input_fu_597_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_store_input_fu_597_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_input_fu_597_ap_ready = ap_const_logic_1)) then 
                    grp_store_input_fu_597_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_output_fu_622_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_store_output_fu_622_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_i1_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                    grp_store_output_fu_622_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_output_fu_622_ap_ready = ap_const_logic_1)) then 
                    grp_store_output_fu_622_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_weights_3_fu_573_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_store_weights_3_fu_573_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_store_weights_3_fu_573_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_weights_3_fu_573_ap_ready = ap_const_logic_1)) then 
                    grp_store_weights_3_fu_573_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_weights_5_fu_548_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_store_weights_5_fu_548_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    grp_store_weights_5_fu_548_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_weights_5_fu_548_ap_ready = ap_const_logic_1)) then 
                    grp_store_weights_5_fu_548_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_store_weights_fu_588_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_store_weights_fu_588_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_store_weights_fu_588_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_weights_fu_588_ap_ready = ap_const_logic_1)) then 
                    grp_store_weights_fu_588_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                i_i1_reg_459 <= i_14_reg_938;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_fc_6_fu_514_ap_done = ap_const_logic_1))) then 
                i_i1_reg_459 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_i_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                i_i_reg_448 <= i_reg_916;
            elsif (((grp_convolution_5_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                i_i_reg_448 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bias1_reg_883 <= bias(31 downto 2);
                bias_1_reg_873 <= bias_5(31 downto 2);
                bias_2_reg_878 <= bias_3(31 downto 2);
                bias_s_reg_868 <= bias_6(31 downto 2);
                input1_reg_908 <= input_r(31 downto 2);
                output1_reg_863 <= output_r(31 downto 2);
                weights3_reg_903 <= weights(31 downto 2);
                weights_1_reg_893 <= weights_5(31 downto 2);
                weights_2_reg_898 <= weights_3(31 downto 2);
                weights_s_reg_888 <= weights_6(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                i_14_reg_938 <= i_14_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                i_reg_916 <= i_fu_753_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_i_fu_747_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                output5_oc_0_0_add_reg_921 <= tmp_i_fu_759_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                output5_oc_0_0_loa_reg_926 <= output5_oc_0_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_805_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                output6_oc_addr_reg_943 <= tmp_i1_fu_817_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                output6_oc_load_reg_948 <= output6_oc_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, ap_CS_fsm_state53, exitcond_i1_fu_805_p2, grp_convolution_5_fu_470_ap_done, grp_fc_6_fu_514_ap_done, grp_store_weights_5_fu_548_ap_done, grp_store_weights_3_fu_573_ap_done, grp_store_output_fu_622_ap_done, ap_CS_fsm_state48, ap_CS_fsm_state52, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state8, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2, ap_CS_fsm_state56, ap_block_state2_on_subcall_done, ap_block_state4_on_subcall_done, ap_block_state6_on_subcall_done, ap_block_state8_on_subcall_done, ap_block_state16_on_subcall_done, ap_block_state18_on_subcall_done, ap_block_state20_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_boolean_0 = ap_block_state6_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_store_weights_3_fu_573_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_store_weights_3_fu_573_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_store_weights_3_fu_573_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (grp_store_weights_5_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_convolution_5_fu_470_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_fc_6_fu_514_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                if (((exitcond_i1_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_store_output_fu_622_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DATA_BIAS_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARADDR, grp_store_bias_5_fu_606_m_axi_bias_ARADDR, grp_store_bias_3_fu_614_m_axi_bias_ARADDR, grp_store_bias_fu_630_m_axi_bias_ARADDR, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARADDR <= grp_store_bias_fu_630_m_axi_bias_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARADDR <= grp_store_bias_3_fu_614_m_axi_bias_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARADDR <= grp_store_bias_5_fu_606_m_axi_bias_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARADDR <= grp_fc_6_fu_514_m_axi_bias_ARADDR;
        else 
            DATA_BIAS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_BIAS_ARBURST_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARBURST, grp_store_bias_5_fu_606_m_axi_bias_ARBURST, grp_store_bias_3_fu_614_m_axi_bias_ARBURST, grp_store_bias_fu_630_m_axi_bias_ARBURST, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARBURST <= grp_store_bias_fu_630_m_axi_bias_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARBURST <= grp_store_bias_3_fu_614_m_axi_bias_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARBURST <= grp_store_bias_5_fu_606_m_axi_bias_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARBURST <= grp_fc_6_fu_514_m_axi_bias_ARBURST;
        else 
            DATA_BIAS_ARBURST <= "XX";
        end if; 
    end process;


    DATA_BIAS_ARCACHE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARCACHE, grp_store_bias_5_fu_606_m_axi_bias_ARCACHE, grp_store_bias_3_fu_614_m_axi_bias_ARCACHE, grp_store_bias_fu_630_m_axi_bias_ARCACHE, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARCACHE <= grp_store_bias_fu_630_m_axi_bias_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARCACHE <= grp_store_bias_3_fu_614_m_axi_bias_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARCACHE <= grp_store_bias_5_fu_606_m_axi_bias_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARCACHE <= grp_fc_6_fu_514_m_axi_bias_ARCACHE;
        else 
            DATA_BIAS_ARCACHE <= "XXXX";
        end if; 
    end process;


    DATA_BIAS_ARID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARID, grp_store_bias_5_fu_606_m_axi_bias_ARID, grp_store_bias_3_fu_614_m_axi_bias_ARID, grp_store_bias_fu_630_m_axi_bias_ARID, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARID <= grp_store_bias_fu_630_m_axi_bias_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARID <= grp_store_bias_3_fu_614_m_axi_bias_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARID <= grp_store_bias_5_fu_606_m_axi_bias_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARID <= grp_fc_6_fu_514_m_axi_bias_ARID;
        else 
            DATA_BIAS_ARID <= "X";
        end if; 
    end process;


    DATA_BIAS_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARLEN, grp_store_bias_5_fu_606_m_axi_bias_ARLEN, grp_store_bias_3_fu_614_m_axi_bias_ARLEN, grp_store_bias_fu_630_m_axi_bias_ARLEN, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARLEN <= grp_store_bias_fu_630_m_axi_bias_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARLEN <= grp_store_bias_3_fu_614_m_axi_bias_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARLEN <= grp_store_bias_5_fu_606_m_axi_bias_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARLEN <= grp_fc_6_fu_514_m_axi_bias_ARLEN;
        else 
            DATA_BIAS_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_BIAS_ARLOCK_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARLOCK, grp_store_bias_5_fu_606_m_axi_bias_ARLOCK, grp_store_bias_3_fu_614_m_axi_bias_ARLOCK, grp_store_bias_fu_630_m_axi_bias_ARLOCK, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARLOCK <= grp_store_bias_fu_630_m_axi_bias_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARLOCK <= grp_store_bias_3_fu_614_m_axi_bias_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARLOCK <= grp_store_bias_5_fu_606_m_axi_bias_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARLOCK <= grp_fc_6_fu_514_m_axi_bias_ARLOCK;
        else 
            DATA_BIAS_ARLOCK <= "XX";
        end if; 
    end process;


    DATA_BIAS_ARPROT_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARPROT, grp_store_bias_5_fu_606_m_axi_bias_ARPROT, grp_store_bias_3_fu_614_m_axi_bias_ARPROT, grp_store_bias_fu_630_m_axi_bias_ARPROT, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARPROT <= grp_store_bias_fu_630_m_axi_bias_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARPROT <= grp_store_bias_3_fu_614_m_axi_bias_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARPROT <= grp_store_bias_5_fu_606_m_axi_bias_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARPROT <= grp_fc_6_fu_514_m_axi_bias_ARPROT;
        else 
            DATA_BIAS_ARPROT <= "XXX";
        end if; 
    end process;


    DATA_BIAS_ARQOS_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARQOS, grp_store_bias_5_fu_606_m_axi_bias_ARQOS, grp_store_bias_3_fu_614_m_axi_bias_ARQOS, grp_store_bias_fu_630_m_axi_bias_ARQOS, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARQOS <= grp_store_bias_fu_630_m_axi_bias_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARQOS <= grp_store_bias_3_fu_614_m_axi_bias_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARQOS <= grp_store_bias_5_fu_606_m_axi_bias_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARQOS <= grp_fc_6_fu_514_m_axi_bias_ARQOS;
        else 
            DATA_BIAS_ARQOS <= "XXXX";
        end if; 
    end process;


    DATA_BIAS_ARREGION_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARREGION, grp_store_bias_5_fu_606_m_axi_bias_ARREGION, grp_store_bias_3_fu_614_m_axi_bias_ARREGION, grp_store_bias_fu_630_m_axi_bias_ARREGION, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARREGION <= grp_store_bias_fu_630_m_axi_bias_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARREGION <= grp_store_bias_3_fu_614_m_axi_bias_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARREGION <= grp_store_bias_5_fu_606_m_axi_bias_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARREGION <= grp_fc_6_fu_514_m_axi_bias_ARREGION;
        else 
            DATA_BIAS_ARREGION <= "XXXX";
        end if; 
    end process;


    DATA_BIAS_ARSIZE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARSIZE, grp_store_bias_5_fu_606_m_axi_bias_ARSIZE, grp_store_bias_3_fu_614_m_axi_bias_ARSIZE, grp_store_bias_fu_630_m_axi_bias_ARSIZE, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARSIZE <= grp_store_bias_fu_630_m_axi_bias_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARSIZE <= grp_store_bias_3_fu_614_m_axi_bias_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARSIZE <= grp_store_bias_5_fu_606_m_axi_bias_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARSIZE <= grp_fc_6_fu_514_m_axi_bias_ARSIZE;
        else 
            DATA_BIAS_ARSIZE <= "XXX";
        end if; 
    end process;


    DATA_BIAS_ARUSER_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARUSER, grp_store_bias_5_fu_606_m_axi_bias_ARUSER, grp_store_bias_3_fu_614_m_axi_bias_ARUSER, grp_store_bias_fu_630_m_axi_bias_ARUSER, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARUSER <= grp_store_bias_fu_630_m_axi_bias_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARUSER <= grp_store_bias_3_fu_614_m_axi_bias_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARUSER <= grp_store_bias_5_fu_606_m_axi_bias_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARUSER <= grp_fc_6_fu_514_m_axi_bias_ARUSER;
        else 
            DATA_BIAS_ARUSER <= "X";
        end if; 
    end process;


    DATA_BIAS_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_ARVALID, grp_store_bias_5_fu_606_m_axi_bias_ARVALID, grp_store_bias_3_fu_614_m_axi_bias_ARVALID, grp_store_bias_fu_630_m_axi_bias_ARVALID, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_ARVALID <= grp_store_bias_fu_630_m_axi_bias_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_ARVALID <= grp_store_bias_3_fu_614_m_axi_bias_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_ARVALID <= grp_store_bias_5_fu_606_m_axi_bias_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_ARVALID <= grp_fc_6_fu_514_m_axi_bias_ARVALID;
        else 
            DATA_BIAS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_BIAS_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_bias_RREADY, grp_store_bias_5_fu_606_m_axi_bias_RREADY, grp_store_bias_3_fu_614_m_axi_bias_RREADY, grp_store_bias_fu_630_m_axi_bias_RREADY, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_BIAS_RREADY <= grp_store_bias_fu_630_m_axi_bias_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_BIAS_RREADY <= grp_store_bias_3_fu_614_m_axi_bias_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            DATA_BIAS_RREADY <= grp_store_bias_5_fu_606_m_axi_bias_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_BIAS_RREADY <= grp_fc_6_fu_514_m_axi_bias_RREADY;
        else 
            DATA_BIAS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_INPUT_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_store_input_fu_597_m_axi_input_r_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_INPUT_ARVALID <= grp_store_input_fu_597_m_axi_input_r_ARVALID;
        else 
            DATA_INPUT_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_INPUT_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_store_input_fu_597_m_axi_input_r_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_INPUT_RREADY <= grp_store_input_fu_597_m_axi_input_r_RREADY;
        else 
            DATA_INPUT_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_OUTPUT_AWVALID_assign_proc : process(ap_CS_fsm_state53, exitcond_i1_fu_805_p2, grp_store_output_fu_622_m_axi_output_r_AWVALID, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((exitcond_i1_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            DATA_OUTPUT_AWVALID <= grp_store_output_fu_622_m_axi_output_r_AWVALID;
        else 
            DATA_OUTPUT_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_OUTPUT_BREADY_assign_proc : process(ap_CS_fsm_state53, exitcond_i1_fu_805_p2, grp_store_output_fu_622_m_axi_output_r_BREADY, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((exitcond_i1_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            DATA_OUTPUT_BREADY <= grp_store_output_fu_622_m_axi_output_r_BREADY;
        else 
            DATA_OUTPUT_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_OUTPUT_WVALID_assign_proc : process(ap_CS_fsm_state53, exitcond_i1_fu_805_p2, grp_store_output_fu_622_m_axi_output_r_WVALID, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or ((exitcond_i1_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            DATA_OUTPUT_WVALID <= grp_store_output_fu_622_m_axi_output_r_WVALID;
        else 
            DATA_OUTPUT_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_WEIGHT_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARADDR, grp_store_weights_5_fu_548_m_axi_weights_ARADDR, grp_store_weights_3_fu_573_m_axi_weights_ARADDR, grp_store_weights_fu_588_m_axi_weights_ARADDR, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARADDR <= grp_store_weights_fu_588_m_axi_weights_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARADDR <= grp_store_weights_3_fu_573_m_axi_weights_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARADDR <= grp_store_weights_5_fu_548_m_axi_weights_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARADDR <= grp_fc_6_fu_514_m_axi_weights_ARADDR;
        else 
            DATA_WEIGHT_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARBURST_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARBURST, grp_store_weights_5_fu_548_m_axi_weights_ARBURST, grp_store_weights_3_fu_573_m_axi_weights_ARBURST, grp_store_weights_fu_588_m_axi_weights_ARBURST, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARBURST <= grp_store_weights_fu_588_m_axi_weights_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARBURST <= grp_store_weights_3_fu_573_m_axi_weights_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARBURST <= grp_store_weights_5_fu_548_m_axi_weights_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARBURST <= grp_fc_6_fu_514_m_axi_weights_ARBURST;
        else 
            DATA_WEIGHT_ARBURST <= "XX";
        end if; 
    end process;


    DATA_WEIGHT_ARCACHE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARCACHE, grp_store_weights_5_fu_548_m_axi_weights_ARCACHE, grp_store_weights_3_fu_573_m_axi_weights_ARCACHE, grp_store_weights_fu_588_m_axi_weights_ARCACHE, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARCACHE <= grp_store_weights_fu_588_m_axi_weights_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARCACHE <= grp_store_weights_3_fu_573_m_axi_weights_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARCACHE <= grp_store_weights_5_fu_548_m_axi_weights_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARCACHE <= grp_fc_6_fu_514_m_axi_weights_ARCACHE;
        else 
            DATA_WEIGHT_ARCACHE <= "XXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARID, grp_store_weights_5_fu_548_m_axi_weights_ARID, grp_store_weights_3_fu_573_m_axi_weights_ARID, grp_store_weights_fu_588_m_axi_weights_ARID, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARID <= grp_store_weights_fu_588_m_axi_weights_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARID <= grp_store_weights_3_fu_573_m_axi_weights_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARID <= grp_store_weights_5_fu_548_m_axi_weights_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARID <= grp_fc_6_fu_514_m_axi_weights_ARID;
        else 
            DATA_WEIGHT_ARID <= "X";
        end if; 
    end process;


    DATA_WEIGHT_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARLEN, grp_store_weights_5_fu_548_m_axi_weights_ARLEN, grp_store_weights_3_fu_573_m_axi_weights_ARLEN, grp_store_weights_fu_588_m_axi_weights_ARLEN, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARLEN <= grp_store_weights_fu_588_m_axi_weights_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARLEN <= grp_store_weights_3_fu_573_m_axi_weights_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARLEN <= grp_store_weights_5_fu_548_m_axi_weights_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARLEN <= grp_fc_6_fu_514_m_axi_weights_ARLEN;
        else 
            DATA_WEIGHT_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARLOCK_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARLOCK, grp_store_weights_5_fu_548_m_axi_weights_ARLOCK, grp_store_weights_3_fu_573_m_axi_weights_ARLOCK, grp_store_weights_fu_588_m_axi_weights_ARLOCK, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARLOCK <= grp_store_weights_fu_588_m_axi_weights_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARLOCK <= grp_store_weights_3_fu_573_m_axi_weights_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARLOCK <= grp_store_weights_5_fu_548_m_axi_weights_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARLOCK <= grp_fc_6_fu_514_m_axi_weights_ARLOCK;
        else 
            DATA_WEIGHT_ARLOCK <= "XX";
        end if; 
    end process;


    DATA_WEIGHT_ARPROT_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARPROT, grp_store_weights_5_fu_548_m_axi_weights_ARPROT, grp_store_weights_3_fu_573_m_axi_weights_ARPROT, grp_store_weights_fu_588_m_axi_weights_ARPROT, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARPROT <= grp_store_weights_fu_588_m_axi_weights_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARPROT <= grp_store_weights_3_fu_573_m_axi_weights_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARPROT <= grp_store_weights_5_fu_548_m_axi_weights_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARPROT <= grp_fc_6_fu_514_m_axi_weights_ARPROT;
        else 
            DATA_WEIGHT_ARPROT <= "XXX";
        end if; 
    end process;


    DATA_WEIGHT_ARQOS_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARQOS, grp_store_weights_5_fu_548_m_axi_weights_ARQOS, grp_store_weights_3_fu_573_m_axi_weights_ARQOS, grp_store_weights_fu_588_m_axi_weights_ARQOS, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARQOS <= grp_store_weights_fu_588_m_axi_weights_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARQOS <= grp_store_weights_3_fu_573_m_axi_weights_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARQOS <= grp_store_weights_5_fu_548_m_axi_weights_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARQOS <= grp_fc_6_fu_514_m_axi_weights_ARQOS;
        else 
            DATA_WEIGHT_ARQOS <= "XXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARREGION_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARREGION, grp_store_weights_5_fu_548_m_axi_weights_ARREGION, grp_store_weights_3_fu_573_m_axi_weights_ARREGION, grp_store_weights_fu_588_m_axi_weights_ARREGION, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARREGION <= grp_store_weights_fu_588_m_axi_weights_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARREGION <= grp_store_weights_3_fu_573_m_axi_weights_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARREGION <= grp_store_weights_5_fu_548_m_axi_weights_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARREGION <= grp_fc_6_fu_514_m_axi_weights_ARREGION;
        else 
            DATA_WEIGHT_ARREGION <= "XXXX";
        end if; 
    end process;


    DATA_WEIGHT_ARSIZE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARSIZE, grp_store_weights_5_fu_548_m_axi_weights_ARSIZE, grp_store_weights_3_fu_573_m_axi_weights_ARSIZE, grp_store_weights_fu_588_m_axi_weights_ARSIZE, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARSIZE <= grp_store_weights_fu_588_m_axi_weights_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARSIZE <= grp_store_weights_3_fu_573_m_axi_weights_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARSIZE <= grp_store_weights_5_fu_548_m_axi_weights_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARSIZE <= grp_fc_6_fu_514_m_axi_weights_ARSIZE;
        else 
            DATA_WEIGHT_ARSIZE <= "XXX";
        end if; 
    end process;


    DATA_WEIGHT_ARUSER_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARUSER, grp_store_weights_5_fu_548_m_axi_weights_ARUSER, grp_store_weights_3_fu_573_m_axi_weights_ARUSER, grp_store_weights_fu_588_m_axi_weights_ARUSER, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARUSER <= grp_store_weights_fu_588_m_axi_weights_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARUSER <= grp_store_weights_3_fu_573_m_axi_weights_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARUSER <= grp_store_weights_5_fu_548_m_axi_weights_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARUSER <= grp_fc_6_fu_514_m_axi_weights_ARUSER;
        else 
            DATA_WEIGHT_ARUSER <= "X";
        end if; 
    end process;


    DATA_WEIGHT_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_ARVALID, grp_store_weights_5_fu_548_m_axi_weights_ARVALID, grp_store_weights_3_fu_573_m_axi_weights_ARVALID, grp_store_weights_fu_588_m_axi_weights_ARVALID, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_ARVALID <= grp_store_weights_fu_588_m_axi_weights_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_ARVALID <= grp_store_weights_3_fu_573_m_axi_weights_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_ARVALID <= grp_store_weights_5_fu_548_m_axi_weights_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_ARVALID <= grp_fc_6_fu_514_m_axi_weights_ARVALID;
        else 
            DATA_WEIGHT_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_WEIGHT_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_fc_6_fu_514_m_axi_weights_RREADY, grp_store_weights_5_fu_548_m_axi_weights_RREADY, grp_store_weights_3_fu_573_m_axi_weights_RREADY, grp_store_weights_fu_588_m_axi_weights_RREADY, ap_CS_fsm_state52, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state45, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_WEIGHT_RREADY <= grp_store_weights_fu_588_m_axi_weights_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            DATA_WEIGHT_RREADY <= grp_store_weights_3_fu_573_m_axi_weights_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            DATA_WEIGHT_RREADY <= grp_store_weights_5_fu_548_m_axi_weights_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            DATA_WEIGHT_RREADY <= grp_fc_6_fu_514_m_axi_weights_RREADY;
        else 
            DATA_WEIGHT_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state16_on_subcall_done_assign_proc : process(grp_convolution_3_fu_501_ap_done, grp_store_weights_5_fu_548_ap_done)
    begin
                ap_block_state16_on_subcall_done <= ((grp_store_weights_5_fu_548_ap_done = ap_const_logic_0) or (grp_convolution_3_fu_501_ap_done = ap_const_logic_0));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_maxpool_4_fu_532_ap_done, grp_store_weights_5_fu_548_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((grp_store_weights_5_fu_548_ap_done = ap_const_logic_0) or (grp_maxpool_4_fu_532_ap_done = ap_const_logic_0));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(grp_relu_4_fu_538_ap_done, grp_store_weights_5_fu_548_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((grp_store_weights_5_fu_548_ap_done = ap_const_logic_0) or (grp_relu_4_fu_538_ap_done = ap_const_logic_0));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(grp_store_weights_fu_588_ap_done, grp_store_input_fu_597_ap_done, grp_store_bias_fu_630_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_store_bias_fu_630_ap_done = ap_const_logic_0) or (grp_store_input_fu_597_ap_done = ap_const_logic_0) or (grp_store_weights_fu_588_ap_done = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_convulution1_fu_493_ap_done, grp_store_weights_3_fu_573_ap_done, grp_store_bias_3_fu_614_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_store_bias_3_fu_614_ap_done = ap_const_logic_0) or (grp_store_weights_3_fu_573_ap_done = ap_const_logic_0) or (grp_convulution1_fu_493_ap_done = ap_const_logic_0));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(grp_maxpool_2_fu_526_ap_done, grp_store_weights_3_fu_573_ap_done, grp_store_bias_5_fu_606_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_store_bias_5_fu_606_ap_done = ap_const_logic_0) or (grp_store_weights_3_fu_573_ap_done = ap_const_logic_0) or (grp_maxpool_2_fu_526_ap_done = ap_const_logic_0));
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(grp_relu_2_fu_543_ap_done, grp_store_weights_3_fu_573_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_store_weights_3_fu_573_ap_done = ap_const_logic_0) or (grp_relu_2_fu_543_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_store_output_fu_622_ap_done, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_store_output_fu_622_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_store_output_fu_622_ap_done, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) and (grp_store_output_fu_622_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bias_3_oc_address0_assign_proc : process(grp_convolution_3_fu_501_bias_address0, grp_store_bias_3_fu_614_bias_oc_address0, ap_CS_fsm_state4, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_3_oc_address0 <= grp_store_bias_3_fu_614_bias_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bias_3_oc_address0 <= grp_convolution_3_fu_501_bias_address0;
        else 
            bias_3_oc_address0 <= "XXXX";
        end if; 
    end process;


    bias_3_oc_ce0_assign_proc : process(grp_convolution_3_fu_501_bias_ce0, grp_store_bias_3_fu_614_bias_oc_ce0, ap_CS_fsm_state4, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_3_oc_ce0 <= grp_store_bias_3_fu_614_bias_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bias_3_oc_ce0 <= grp_convolution_3_fu_501_bias_ce0;
        else 
            bias_3_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_3_oc_we0_assign_proc : process(grp_store_bias_3_fu_614_bias_oc_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_3_oc_we0 <= grp_store_bias_3_fu_614_bias_oc_we0;
        else 
            bias_3_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_5_oc_address0_assign_proc : process(grp_convolution_5_fu_470_bias_address0, grp_store_bias_5_fu_606_bias_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bias_5_oc_address0 <= grp_store_bias_5_fu_606_bias_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            bias_5_oc_address0 <= grp_convolution_5_fu_470_bias_address0;
        else 
            bias_5_oc_address0 <= "XXXXXXX";
        end if; 
    end process;


    bias_5_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_bias_ce0, grp_store_bias_5_fu_606_bias_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bias_5_oc_ce0 <= grp_store_bias_5_fu_606_bias_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            bias_5_oc_ce0 <= grp_convolution_5_fu_470_bias_ce0;
        else 
            bias_5_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_5_oc_we0_assign_proc : process(grp_store_bias_5_fu_606_bias_oc_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bias_5_oc_we0 <= grp_store_bias_5_fu_606_bias_oc_we0;
        else 
            bias_5_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_oc_address0_assign_proc : process(grp_convulution1_fu_493_bias_address0, grp_store_bias_fu_630_bias_oc_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_oc_address0 <= grp_store_bias_fu_630_bias_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_oc_address0 <= grp_convulution1_fu_493_bias_address0;
        else 
            bias_oc_address0 <= "XXX";
        end if; 
    end process;


    bias_oc_ce0_assign_proc : process(grp_convulution1_fu_493_bias_ce0, grp_store_bias_fu_630_bias_oc_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_oc_ce0 <= grp_store_bias_fu_630_bias_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_oc_ce0 <= grp_convulution1_fu_493_bias_ce0;
        else 
            bias_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bias_oc_we0_assign_proc : process(grp_store_bias_fu_630_bias_oc_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_oc_we0 <= grp_store_bias_fu_630_bias_oc_we0;
        else 
            bias_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_i_fu_747_p2 <= "1" when (i_i_reg_448 = ap_const_lv7_78) else "0";
    exitcond_i1_fu_805_p2 <= "1" when (i_i1_reg_459 = ap_const_lv4_A) else "0";
    grp_convolution_3_fu_501_ap_start <= grp_convolution_3_fu_501_ap_start_reg;
    grp_convolution_5_fu_470_ap_start <= grp_convolution_5_fu_470_ap_start_reg;
    grp_convulution1_fu_493_ap_start <= grp_convulution1_fu_493_ap_start_reg;
    grp_fc_6_fu_514_ap_start <= grp_fc_6_fu_514_ap_start_reg;

    grp_fu_639_p0_assign_proc : process(output5_oc_0_0_loa_reg_926, output6_oc_load_reg_948, ap_CS_fsm_state51, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_639_p0 <= output6_oc_load_reg_948;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_639_p0 <= output5_oc_0_0_loa_reg_926;
        else 
            grp_fu_639_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_maxpool_2_fu_526_ap_start <= grp_maxpool_2_fu_526_ap_start_reg;
    grp_maxpool_4_fu_532_ap_start <= grp_maxpool_4_fu_532_ap_start_reg;
    grp_relu_2_fu_543_ap_start <= grp_relu_2_fu_543_ap_start_reg;
    grp_relu_4_fu_538_ap_start <= grp_relu_4_fu_538_ap_start_reg;
    grp_store_bias_3_fu_614_ap_start <= grp_store_bias_3_fu_614_ap_start_reg;
    grp_store_bias_5_fu_606_ap_start <= grp_store_bias_5_fu_606_ap_start_reg;
    grp_store_bias_fu_630_ap_start <= grp_store_bias_fu_630_ap_start_reg;
    grp_store_input_fu_597_ap_start <= grp_store_input_fu_597_ap_start_reg;
    grp_store_output_fu_622_ap_start <= grp_store_output_fu_622_ap_start_reg;
    grp_store_weights_3_fu_573_ap_start <= grp_store_weights_3_fu_573_ap_start_reg;

    grp_store_weights_3_fu_573_input_channel_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_store_weights_3_fu_573_input_channel <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_store_weights_3_fu_573_input_channel <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_store_weights_3_fu_573_input_channel <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_store_weights_3_fu_573_input_channel <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_store_weights_3_fu_573_input_channel <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_store_weights_3_fu_573_input_channel <= ap_const_lv4_0;
        else 
            grp_store_weights_3_fu_573_input_channel <= "XXXX";
        end if; 
    end process;

    grp_store_weights_5_fu_548_ap_start <= grp_store_weights_5_fu_548_ap_start_reg;

    grp_store_weights_5_fu_548_input_channel_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_store_weights_5_fu_548_input_channel <= ap_const_lv5_0;
        else 
            grp_store_weights_5_fu_548_input_channel <= "XXXXX";
        end if; 
    end process;

    grp_store_weights_fu_588_ap_start <= grp_store_weights_fu_588_ap_start_reg;
    i_14_fu_811_p2 <= std_logic_vector(unsigned(i_i1_reg_459) + unsigned(ap_const_lv4_1));
    i_fu_753_p2 <= std_logic_vector(unsigned(i_i_reg_448) + unsigned(ap_const_lv7_1));

    input_oc_0_address0_assign_proc : process(grp_convulution1_fu_493_input_0_address0, grp_store_input_fu_597_input_oc_0_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_oc_0_address0 <= grp_store_input_fu_597_input_oc_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_oc_0_address0 <= grp_convulution1_fu_493_input_0_address0;
        else 
            input_oc_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_oc_0_ce0_assign_proc : process(grp_convulution1_fu_493_input_0_ce0, grp_store_input_fu_597_input_oc_0_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_oc_0_ce0 <= grp_store_input_fu_597_input_oc_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_oc_0_ce0 <= grp_convulution1_fu_493_input_0_ce0;
        else 
            input_oc_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_oc_0_ce1_assign_proc : process(grp_convulution1_fu_493_input_0_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_oc_0_ce1 <= grp_convulution1_fu_493_input_0_ce1;
        else 
            input_oc_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_oc_0_we0_assign_proc : process(grp_store_input_fu_597_input_oc_0_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_oc_0_we0 <= grp_store_input_fu_597_input_oc_0_we0;
        else 
            input_oc_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs1_fu_839_p2 <= "0" when (tmp_fu_825_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_781_p2 <= "0" when (tmp_43_fu_767_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_845_p2 <= "1" when (tmp_101_fu_835_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_787_p2 <= "1" when (tmp_100_fu_777_p1 = ap_const_lv23_0) else "0";

    output1_oc_address0_assign_proc : process(grp_convulution1_fu_493_output_r_address0, grp_maxpool_2_fu_526_input_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output1_oc_address0 <= grp_maxpool_2_fu_526_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output1_oc_address0 <= grp_convulution1_fu_493_output_r_address0;
        else 
            output1_oc_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output1_oc_ce0_assign_proc : process(grp_convulution1_fu_493_output_r_ce0, grp_maxpool_2_fu_526_input_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output1_oc_ce0 <= grp_maxpool_2_fu_526_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output1_oc_ce0 <= grp_convulution1_fu_493_output_r_ce0;
        else 
            output1_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output1_oc_we0_assign_proc : process(grp_convulution1_fu_493_output_r_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output1_oc_we0 <= grp_convulution1_fu_493_output_r_we0;
        else 
            output1_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output2_oc_address0_assign_proc : process(grp_convolution_3_fu_501_input_r_address0, grp_maxpool_2_fu_526_output_r_address0, grp_relu_2_fu_543_output_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output2_oc_address0 <= grp_relu_2_fu_543_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output2_oc_address0 <= grp_maxpool_2_fu_526_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output2_oc_address0 <= grp_convolution_3_fu_501_input_r_address0;
        else 
            output2_oc_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output2_oc_ce0_assign_proc : process(grp_convolution_3_fu_501_input_r_ce0, grp_maxpool_2_fu_526_output_r_ce0, grp_relu_2_fu_543_output_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output2_oc_ce0 <= grp_relu_2_fu_543_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output2_oc_ce0 <= grp_maxpool_2_fu_526_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output2_oc_ce0 <= grp_convolution_3_fu_501_input_r_ce0;
        else 
            output2_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output2_oc_ce1_assign_proc : process(grp_convolution_3_fu_501_input_r_ce1, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output2_oc_ce1 <= grp_convolution_3_fu_501_input_r_ce1;
        else 
            output2_oc_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output2_oc_d0_assign_proc : process(grp_maxpool_2_fu_526_output_r_d0, grp_relu_2_fu_543_output_r_d0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output2_oc_d0 <= grp_relu_2_fu_543_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output2_oc_d0 <= grp_maxpool_2_fu_526_output_r_d0;
        else 
            output2_oc_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output2_oc_we0_assign_proc : process(grp_maxpool_2_fu_526_output_r_we0, grp_relu_2_fu_543_output_r_we0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output2_oc_we0 <= grp_relu_2_fu_543_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output2_oc_we0 <= grp_maxpool_2_fu_526_output_r_we0;
        else 
            output2_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output3_oc_address0_assign_proc : process(grp_convolution_3_fu_501_output_r_address0, grp_maxpool_4_fu_532_input_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output3_oc_address0 <= grp_maxpool_4_fu_532_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output3_oc_address0 <= grp_convolution_3_fu_501_output_r_address0;
        else 
            output3_oc_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    output3_oc_ce0_assign_proc : process(grp_convolution_3_fu_501_output_r_ce0, grp_maxpool_4_fu_532_input_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output3_oc_ce0 <= grp_maxpool_4_fu_532_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output3_oc_ce0 <= grp_convolution_3_fu_501_output_r_ce0;
        else 
            output3_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output3_oc_we0_assign_proc : process(grp_convolution_3_fu_501_output_r_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output3_oc_we0 <= grp_convolution_3_fu_501_output_r_we0;
        else 
            output3_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output4_oc_address0_assign_proc : process(grp_convolution_5_fu_470_input_r_address0, grp_maxpool_4_fu_532_output_r_address0, grp_relu_4_fu_538_output_r_address0, ap_CS_fsm_state48, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output4_oc_address0 <= grp_relu_4_fu_538_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output4_oc_address0 <= grp_maxpool_4_fu_532_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output4_oc_address0 <= grp_convolution_5_fu_470_input_r_address0;
        else 
            output4_oc_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output4_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_input_r_ce0, grp_maxpool_4_fu_532_output_r_ce0, grp_relu_4_fu_538_output_r_ce0, ap_CS_fsm_state48, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output4_oc_ce0 <= grp_relu_4_fu_538_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output4_oc_ce0 <= grp_maxpool_4_fu_532_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output4_oc_ce0 <= grp_convolution_5_fu_470_input_r_ce0;
        else 
            output4_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output4_oc_ce1_assign_proc : process(grp_convolution_5_fu_470_input_r_ce1, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output4_oc_ce1 <= grp_convolution_5_fu_470_input_r_ce1;
        else 
            output4_oc_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output4_oc_d0_assign_proc : process(grp_maxpool_4_fu_532_output_r_d0, grp_relu_4_fu_538_output_r_d0, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output4_oc_d0 <= grp_relu_4_fu_538_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output4_oc_d0 <= grp_maxpool_4_fu_532_output_r_d0;
        else 
            output4_oc_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output4_oc_we0_assign_proc : process(grp_maxpool_4_fu_532_output_r_we0, grp_relu_4_fu_538_output_r_we0, ap_CS_fsm_state18, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output4_oc_we0 <= grp_relu_4_fu_538_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output4_oc_we0 <= grp_maxpool_4_fu_532_output_r_we0;
        else 
            output4_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output5_oc_0_0_address0_assign_proc : process(ap_CS_fsm_state49, output5_oc_0_0_add_reg_921, exitcond2_i_fu_747_p2, grp_convolution_5_fu_470_output_0_0_address0, grp_fc_6_fu_514_input_0_0_address0, ap_CS_fsm_state48, ap_CS_fsm_state51, ap_CS_fsm_state52, tmp_i_fu_759_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            output5_oc_0_0_address0 <= output5_oc_0_0_add_reg_921;
        elsif (((exitcond2_i_fu_747_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            output5_oc_0_0_address0 <= tmp_i_fu_759_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output5_oc_0_0_address0 <= grp_fc_6_fu_514_input_0_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output5_oc_0_0_address0 <= grp_convolution_5_fu_470_output_0_0_address0;
        else 
            output5_oc_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    output5_oc_0_0_ce0_assign_proc : process(ap_CS_fsm_state49, exitcond2_i_fu_747_p2, grp_convolution_5_fu_470_output_0_0_ce0, grp_fc_6_fu_514_input_0_0_ce0, ap_CS_fsm_state48, ap_CS_fsm_state51, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((exitcond2_i_fu_747_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            output5_oc_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output5_oc_0_0_ce0 <= grp_fc_6_fu_514_input_0_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output5_oc_0_0_ce0 <= grp_convolution_5_fu_470_output_0_0_ce0;
        else 
            output5_oc_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output5_oc_0_0_d0_assign_proc : process(grp_convolution_5_fu_470_output_0_0_d0, ap_CS_fsm_state48, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            output5_oc_0_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output5_oc_0_0_d0 <= grp_convolution_5_fu_470_output_0_0_d0;
        else 
            output5_oc_0_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output5_oc_0_0_we0_assign_proc : process(grp_convolution_5_fu_470_output_0_0_we0, ap_CS_fsm_state48, ap_CS_fsm_state51, tmp_47_fu_799_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) and (tmp_47_fu_799_p2 = ap_const_lv1_1))) then 
            output5_oc_0_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output5_oc_0_0_we0 <= grp_convolution_5_fu_470_output_0_0_we0;
        else 
            output5_oc_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output6_oc_address0_assign_proc : process(ap_CS_fsm_state53, output6_oc_addr_reg_943, exitcond_i1_fu_805_p2, grp_fc_6_fu_514_output_r_address0, grp_store_output_fu_622_output_oc_address0, ap_CS_fsm_state52, ap_CS_fsm_state55, ap_CS_fsm_state56, tmp_i1_fu_817_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output6_oc_address0 <= output6_oc_addr_reg_943;
        elsif (((exitcond_i1_fu_805_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            output6_oc_address0 <= tmp_i1_fu_817_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            output6_oc_address0 <= grp_store_output_fu_622_output_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output6_oc_address0 <= grp_fc_6_fu_514_output_r_address0;
        else 
            output6_oc_address0 <= "XXXX";
        end if; 
    end process;


    output6_oc_ce0_assign_proc : process(ap_CS_fsm_state53, exitcond_i1_fu_805_p2, grp_fc_6_fu_514_output_r_ce0, grp_store_output_fu_622_output_oc_ce0, ap_CS_fsm_state52, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or ((exitcond_i1_fu_805_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            output6_oc_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            output6_oc_ce0 <= grp_store_output_fu_622_output_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output6_oc_ce0 <= grp_fc_6_fu_514_output_r_ce0;
        else 
            output6_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output6_oc_d0_assign_proc : process(grp_fc_6_fu_514_output_r_d0, ap_CS_fsm_state52, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            output6_oc_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output6_oc_d0 <= grp_fc_6_fu_514_output_r_d0;
        else 
            output6_oc_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output6_oc_we0_assign_proc : process(grp_fc_6_fu_514_output_r_we0, ap_CS_fsm_state52, ap_CS_fsm_state55, tmp_42_fu_857_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) and (tmp_42_fu_857_p2 = ap_const_lv1_1))) then 
            output6_oc_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            output6_oc_we0 <= grp_fc_6_fu_514_output_r_we0;
        else 
            output6_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_0_assign_s_fu_764_p1 <= output5_oc_0_0_loa_reg_926;
    output_assign_load_t_fu_822_p1 <= output6_oc_load_reg_948;
    tmp_100_fu_777_p1 <= output_0_0_assign_s_fu_764_p1(23 - 1 downto 0);
    tmp_101_fu_835_p1 <= output_assign_load_t_fu_822_p1(23 - 1 downto 0);
    tmp_40_fu_851_p2 <= (notrhs1_fu_845_p2 or notlhs1_fu_839_p2);
    tmp_42_fu_857_p2 <= (tmp_40_fu_851_p2 and grp_fu_639_p2);
    tmp_43_fu_767_p4 <= output_0_0_assign_s_fu_764_p1(30 downto 23);
    tmp_45_fu_793_p2 <= (notrhs_fu_787_p2 or notlhs_fu_781_p2);
    tmp_47_fu_799_p2 <= (tmp_45_fu_793_p2 and grp_fu_639_p2);
    tmp_fu_825_p4 <= output_assign_load_t_fu_822_p1(30 downto 23);
    tmp_i1_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_459),64));
    tmp_i_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_448),64));

    weights_3_0_oc_address0_assign_proc : process(grp_convolution_3_fu_501_weights_0_address0, grp_store_weights_3_fu_573_weights_oc_address0, ap_CS_fsm_state4, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_3_0_oc_address0 <= grp_store_weights_3_fu_573_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_0_oc_address0 <= grp_convolution_3_fu_501_weights_0_address0;
        else 
            weights_3_0_oc_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weights_3_0_oc_ce0_assign_proc : process(grp_convolution_3_fu_501_weights_0_ce0, grp_store_weights_3_fu_573_weights_oc_ce0, ap_CS_fsm_state4, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_3_0_oc_ce0 <= grp_store_weights_3_fu_573_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_0_oc_ce0 <= grp_convolution_3_fu_501_weights_0_ce0;
        else 
            weights_3_0_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_0_oc_we0_assign_proc : process(grp_store_weights_3_fu_573_weights_oc_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_3_0_oc_we0 <= grp_store_weights_3_fu_573_weights_oc_we0;
        else 
            weights_3_0_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_1_oc_address0_assign_proc : process(grp_convolution_3_fu_501_weights_1_address0, grp_store_weights_3_fu_573_weights_oc_address0, ap_CS_fsm_state16, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_3_1_oc_address0 <= grp_store_weights_3_fu_573_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_1_oc_address0 <= grp_convolution_3_fu_501_weights_1_address0;
        else 
            weights_3_1_oc_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weights_3_1_oc_ce0_assign_proc : process(grp_convolution_3_fu_501_weights_1_ce0, grp_store_weights_3_fu_573_weights_oc_ce0, ap_CS_fsm_state16, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_3_1_oc_ce0 <= grp_store_weights_3_fu_573_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_1_oc_ce0 <= grp_convolution_3_fu_501_weights_1_ce0;
        else 
            weights_3_1_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_1_oc_we0_assign_proc : process(grp_store_weights_3_fu_573_weights_oc_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_3_1_oc_we0 <= grp_store_weights_3_fu_573_weights_oc_we0;
        else 
            weights_3_1_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_2_oc_address0_assign_proc : process(grp_convolution_3_fu_501_weights_2_address0, grp_store_weights_3_fu_573_weights_oc_address0, ap_CS_fsm_state16, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_3_2_oc_address0 <= grp_store_weights_3_fu_573_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_2_oc_address0 <= grp_convolution_3_fu_501_weights_2_address0;
        else 
            weights_3_2_oc_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weights_3_2_oc_ce0_assign_proc : process(grp_convolution_3_fu_501_weights_2_ce0, grp_store_weights_3_fu_573_weights_oc_ce0, ap_CS_fsm_state16, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_3_2_oc_ce0 <= grp_store_weights_3_fu_573_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_2_oc_ce0 <= grp_convolution_3_fu_501_weights_2_ce0;
        else 
            weights_3_2_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_2_oc_we0_assign_proc : process(grp_store_weights_3_fu_573_weights_oc_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weights_3_2_oc_we0 <= grp_store_weights_3_fu_573_weights_oc_we0;
        else 
            weights_3_2_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_3_oc_address0_assign_proc : process(grp_convolution_3_fu_501_weights_3_address0, grp_store_weights_3_fu_573_weights_oc_address0, ap_CS_fsm_state16, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weights_3_3_oc_address0 <= grp_store_weights_3_fu_573_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_3_oc_address0 <= grp_convolution_3_fu_501_weights_3_address0;
        else 
            weights_3_3_oc_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weights_3_3_oc_ce0_assign_proc : process(grp_convolution_3_fu_501_weights_3_ce0, grp_store_weights_3_fu_573_weights_oc_ce0, ap_CS_fsm_state16, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weights_3_3_oc_ce0 <= grp_store_weights_3_fu_573_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_3_oc_ce0 <= grp_convolution_3_fu_501_weights_3_ce0;
        else 
            weights_3_3_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_3_oc_we0_assign_proc : process(grp_store_weights_3_fu_573_weights_oc_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weights_3_3_oc_we0 <= grp_store_weights_3_fu_573_weights_oc_we0;
        else 
            weights_3_3_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_4_oc_address0_assign_proc : process(grp_convolution_3_fu_501_weights_4_address0, grp_store_weights_3_fu_573_weights_oc_address0, ap_CS_fsm_state16, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weights_3_4_oc_address0 <= grp_store_weights_3_fu_573_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_4_oc_address0 <= grp_convolution_3_fu_501_weights_4_address0;
        else 
            weights_3_4_oc_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weights_3_4_oc_ce0_assign_proc : process(grp_convolution_3_fu_501_weights_4_ce0, grp_store_weights_3_fu_573_weights_oc_ce0, ap_CS_fsm_state16, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weights_3_4_oc_ce0 <= grp_store_weights_3_fu_573_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_4_oc_ce0 <= grp_convolution_3_fu_501_weights_4_ce0;
        else 
            weights_3_4_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_4_oc_we0_assign_proc : process(grp_store_weights_3_fu_573_weights_oc_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weights_3_4_oc_we0 <= grp_store_weights_3_fu_573_weights_oc_we0;
        else 
            weights_3_4_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_5_oc_address0_assign_proc : process(grp_convolution_3_fu_501_weights_5_address0, grp_store_weights_3_fu_573_weights_oc_address0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            weights_3_5_oc_address0 <= grp_store_weights_3_fu_573_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_5_oc_address0 <= grp_convolution_3_fu_501_weights_5_address0;
        else 
            weights_3_5_oc_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    weights_3_5_oc_ce0_assign_proc : process(grp_convolution_3_fu_501_weights_5_ce0, grp_store_weights_3_fu_573_weights_oc_ce0, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            weights_3_5_oc_ce0 <= grp_store_weights_3_fu_573_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_3_5_oc_ce0 <= grp_convolution_3_fu_501_weights_5_ce0;
        else 
            weights_3_5_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_3_5_oc_we0_assign_proc : process(grp_store_weights_3_fu_573_weights_oc_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            weights_3_5_oc_we0 <= grp_store_weights_3_fu_573_weights_oc_we0;
        else 
            weights_3_5_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_0_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_0_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_5_0_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_0_oc_address0 <= grp_convolution_5_fu_470_weights_0_address0;
        else 
            weights_5_0_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_0_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_0_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_5_0_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_0_oc_ce0 <= grp_convolution_5_fu_470_weights_0_ce0;
        else 
            weights_5_0_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_0_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_5_0_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_0_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_10_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_10_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            weights_5_10_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_10_oc_address0 <= grp_convolution_5_fu_470_weights_10_address0;
        else 
            weights_5_10_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_10_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_10_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            weights_5_10_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_10_oc_ce0 <= grp_convolution_5_fu_470_weights_10_ce0;
        else 
            weights_5_10_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_10_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            weights_5_10_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_10_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_11_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_11_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            weights_5_11_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_11_oc_address0 <= grp_convolution_5_fu_470_weights_11_address0;
        else 
            weights_5_11_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_11_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_11_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            weights_5_11_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_11_oc_ce0 <= grp_convolution_5_fu_470_weights_11_ce0;
        else 
            weights_5_11_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_11_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            weights_5_11_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_11_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_12_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_12_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            weights_5_12_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_12_oc_address0 <= grp_convolution_5_fu_470_weights_12_address0;
        else 
            weights_5_12_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_12_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_12_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            weights_5_12_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_12_oc_ce0 <= grp_convolution_5_fu_470_weights_12_ce0;
        else 
            weights_5_12_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_12_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            weights_5_12_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_12_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_13_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_13_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            weights_5_13_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_13_oc_address0 <= grp_convolution_5_fu_470_weights_13_address0;
        else 
            weights_5_13_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_13_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_13_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            weights_5_13_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_13_oc_ce0 <= grp_convolution_5_fu_470_weights_13_ce0;
        else 
            weights_5_13_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_13_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            weights_5_13_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_13_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_14_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_14_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            weights_5_14_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_14_oc_address0 <= grp_convolution_5_fu_470_weights_14_address0;
        else 
            weights_5_14_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_14_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_14_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            weights_5_14_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_14_oc_ce0 <= grp_convolution_5_fu_470_weights_14_ce0;
        else 
            weights_5_14_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_14_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            weights_5_14_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_14_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_15_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_15_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            weights_5_15_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_15_oc_address0 <= grp_convolution_5_fu_470_weights_15_address0;
        else 
            weights_5_15_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_15_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_15_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            weights_5_15_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_15_oc_ce0 <= grp_convolution_5_fu_470_weights_15_ce0;
        else 
            weights_5_15_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_15_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            weights_5_15_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_15_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_1_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_1_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            weights_5_1_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_1_oc_address0 <= grp_convolution_5_fu_470_weights_1_address0;
        else 
            weights_5_1_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_1_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_1_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            weights_5_1_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_1_oc_ce0 <= grp_convolution_5_fu_470_weights_1_ce0;
        else 
            weights_5_1_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_1_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            weights_5_1_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_1_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_2_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_2_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            weights_5_2_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_2_oc_address0 <= grp_convolution_5_fu_470_weights_2_address0;
        else 
            weights_5_2_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_2_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_2_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            weights_5_2_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_2_oc_ce0 <= grp_convolution_5_fu_470_weights_2_ce0;
        else 
            weights_5_2_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_2_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            weights_5_2_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_2_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_3_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_3_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            weights_5_3_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_3_oc_address0 <= grp_convolution_5_fu_470_weights_3_address0;
        else 
            weights_5_3_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_3_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_3_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            weights_5_3_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_3_oc_ce0 <= grp_convolution_5_fu_470_weights_3_ce0;
        else 
            weights_5_3_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_3_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            weights_5_3_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_3_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_4_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_4_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            weights_5_4_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_4_oc_address0 <= grp_convolution_5_fu_470_weights_4_address0;
        else 
            weights_5_4_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_4_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_4_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            weights_5_4_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_4_oc_ce0 <= grp_convolution_5_fu_470_weights_4_ce0;
        else 
            weights_5_4_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_4_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            weights_5_4_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_4_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_5_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_5_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            weights_5_5_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_5_oc_address0 <= grp_convolution_5_fu_470_weights_5_address0;
        else 
            weights_5_5_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_5_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_5_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            weights_5_5_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_5_oc_ce0 <= grp_convolution_5_fu_470_weights_5_ce0;
        else 
            weights_5_5_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_5_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            weights_5_5_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_5_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_6_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_6_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            weights_5_6_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_6_oc_address0 <= grp_convolution_5_fu_470_weights_6_address0;
        else 
            weights_5_6_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_6_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_6_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            weights_5_6_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_6_oc_ce0 <= grp_convolution_5_fu_470_weights_6_ce0;
        else 
            weights_5_6_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_6_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            weights_5_6_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_6_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_7_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_7_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            weights_5_7_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_7_oc_address0 <= grp_convolution_5_fu_470_weights_7_address0;
        else 
            weights_5_7_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_7_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_7_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            weights_5_7_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_7_oc_ce0 <= grp_convolution_5_fu_470_weights_7_ce0;
        else 
            weights_5_7_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_7_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            weights_5_7_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_7_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_8_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_8_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            weights_5_8_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_8_oc_address0 <= grp_convolution_5_fu_470_weights_8_address0;
        else 
            weights_5_8_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_8_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_8_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            weights_5_8_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_8_oc_ce0 <= grp_convolution_5_fu_470_weights_8_ce0;
        else 
            weights_5_8_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_8_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            weights_5_8_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_8_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_9_oc_address0_assign_proc : process(grp_convolution_5_fu_470_weights_9_address0, grp_store_weights_5_fu_548_weights_oc_address0, ap_CS_fsm_state48, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            weights_5_9_oc_address0 <= grp_store_weights_5_fu_548_weights_oc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_9_oc_address0 <= grp_convolution_5_fu_470_weights_9_address0;
        else 
            weights_5_9_oc_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_5_9_oc_ce0_assign_proc : process(grp_convolution_5_fu_470_weights_9_ce0, grp_store_weights_5_fu_548_weights_oc_ce0, ap_CS_fsm_state48, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            weights_5_9_oc_ce0 <= grp_store_weights_5_fu_548_weights_oc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            weights_5_9_oc_ce0 <= grp_convolution_5_fu_470_weights_9_ce0;
        else 
            weights_5_9_oc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_5_9_oc_we0_assign_proc : process(grp_store_weights_5_fu_548_weights_oc_we0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            weights_5_9_oc_we0 <= grp_store_weights_5_fu_548_weights_oc_we0;
        else 
            weights_5_9_oc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_oc_0_address0_assign_proc : process(grp_convulution1_fu_493_weights_0_address0, grp_store_weights_fu_588_weights_oc_0_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_oc_0_address0 <= grp_store_weights_fu_588_weights_oc_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_oc_0_address0 <= grp_convulution1_fu_493_weights_0_address0;
        else 
            weights_oc_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    weights_oc_0_ce0_assign_proc : process(grp_convulution1_fu_493_weights_0_ce0, grp_store_weights_fu_588_weights_oc_0_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_oc_0_ce0 <= grp_store_weights_fu_588_weights_oc_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_oc_0_ce0 <= grp_convulution1_fu_493_weights_0_ce0;
        else 
            weights_oc_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weights_oc_0_ce1_assign_proc : process(grp_convulution1_fu_493_weights_0_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_oc_0_ce1 <= grp_convulution1_fu_493_weights_0_ce1;
        else 
            weights_oc_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    weights_oc_0_we0_assign_proc : process(grp_store_weights_fu_588_weights_oc_0_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_oc_0_we0 <= grp_store_weights_fu_588_weights_oc_0_we0;
        else 
            weights_oc_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
