-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxpool_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of maxpool_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D368D4A5 : STD_LOGIC_VECTOR (31 downto 0) := "11010011011010001101010010100101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_2_fu_184_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_2_reg_539 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_72_cast_fu_220_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_cast_reg_544 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_cast_fu_254_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_75_cast_reg_549 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_2_fu_264_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_2_reg_557 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_270_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_562 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_311_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_56_reg_567 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_2_fu_323_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_2_reg_575 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_8_fu_329_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_reg_580 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_347_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_12_reg_588 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_59_fu_391_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_59_reg_593 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_8_fu_421_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_8_reg_601 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal max_value_3_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal c_reg_92 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_reg_103 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_value_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_139 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_1_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_162 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_80_cast_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_cast_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_202_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_198_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_210_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_214_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_224_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_53_fu_236_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_232_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_244_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_cast_fu_278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_55_fu_282_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_fu_287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_299_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_291_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl5_cast_fu_307_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_cast2_fu_337_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast_fu_358_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_58_fu_362_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_367_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_fu_379_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_371_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_cast_fu_387_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_cast_fu_397_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_57_fu_401_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast1_fu_411_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_427_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_cast_fu_432_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_60_fu_436_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_value_1_to_int_fu_446_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_to_int_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_450_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_460_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_467_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_477_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component conv1_fcmp_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv1_fcmp_32ns_3dEe_U34 : component conv1_fcmp_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => max_value_1_reg_150,
        din1 => input_load_reg_611,
        opcode => ap_const_lv5_2,
        dout => tmp_28_fu_173_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_reg_92 <= c_2_reg_539;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_92 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    h_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                h_reg_103 <= h_2_reg_557;
            elsif (((exitcond4_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_reg_103 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_415_p2 = ap_const_lv1_1))) then 
                i_reg_139 <= i_12_reg_588;
            elsif (((exitcond2_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_139 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_162 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_162 <= j_8_reg_601;
            end if; 
        end if;
    end process;

    max_value_1_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_value_1_reg_150 <= max_value_reg_126;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                max_value_1_reg_150 <= max_value_3_fu_529_p3;
            end if; 
        end if;
    end process;

    max_value_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_415_p2 = ap_const_lv1_1))) then 
                max_value_reg_126 <= max_value_1_reg_150;
            elsif (((exitcond2_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_value_reg_126 <= ap_const_lv32_D368D4A5;
            end if; 
        end if;
    end process;

    w_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                w_reg_114 <= ap_const_lv4_0;
            elsif (((exitcond1_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_reg_114 <= w_2_reg_575;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_2_reg_539 <= c_2_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_2_reg_557 <= h_2_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_12_reg_588 <= i_12_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_reg_611 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_8_reg_601 <= j_8_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_56_reg_567(11 downto 1) <= tmp_56_fu_311_p2(11 downto 1);
                    tmp_s_reg_562(4 downto 1) <= tmp_s_fu_270_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_59_reg_593(13 downto 2) <= tmp_59_fu_391_p2(13 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_72_cast_reg_544(9 downto 2) <= tmp_72_cast_fu_220_p1(9 downto 2);
                    tmp_75_cast_reg_549(8 downto 1) <= tmp_75_cast_fu_254_p1(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_8_reg_580(4 downto 1) <= tmp_8_fu_329_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_2_reg_575 <= w_2_fu_323_p2;
            end if;
        end if;
    end process;
    tmp_72_cast_reg_544(1 downto 0) <= "00";
    tmp_75_cast_reg_549(0) <= '0';
    tmp_s_reg_562(0) <= '0';
    tmp_56_reg_567(0) <= '0';
    tmp_8_reg_580(0) <= '0';
    tmp_59_reg_593(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_178_p2, ap_CS_fsm_state3, exitcond3_fu_258_p2, ap_CS_fsm_state4, exitcond2_fu_317_p2, ap_CS_fsm_state5, exitcond1_fu_341_p2, ap_CS_fsm_state6, exitcond_fu_415_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_415_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_178_p2)
    begin
        if ((((exitcond4_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_178_p2)
    begin
        if (((exitcond4_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_2_fu_184_p2 <= std_logic_vector(unsigned(c_reg_92) + unsigned(ap_const_lv3_1));
    exitcond1_fu_341_p2 <= "1" when (i_reg_139 = ap_const_lv2_2) else "0";
    exitcond2_fu_317_p2 <= "1" when (w_reg_114 = ap_const_lv4_E) else "0";
    exitcond3_fu_258_p2 <= "1" when (h_reg_103 = ap_const_lv4_E) else "0";
    exitcond4_fu_178_p2 <= "1" when (c_reg_92 = ap_const_lv3_6) else "0";
    exitcond_fu_415_p2 <= "1" when (j_reg_162 = ap_const_lv2_2) else "0";
    h_2_fu_264_p2 <= std_logic_vector(unsigned(h_reg_103) + unsigned(ap_const_lv4_1));
    i_12_fu_347_p2 <= std_logic_vector(unsigned(i_reg_139) + unsigned(ap_const_lv2_1));
    i_cast2_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_139),5));
    input_load_to_int_fu_464_p1 <= input_load_reg_611;
    input_r_address0 <= tmp_85_cast_fu_441_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_8_fu_421_p2 <= std_logic_vector(unsigned(j_reg_162) + unsigned(ap_const_lv2_1));
    j_cast1_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_162),5));
    max_value_1_to_int_fu_446_p1 <= max_value_1_reg_150;
    max_value_3_fu_529_p3 <= 
        max_value_1_reg_150 when (tmp_29_fu_523_p2(0) = '1') else 
        input_load_reg_611;
    notlhs6_fu_499_p2 <= "0" when (tmp_23_fu_467_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_481_p2 <= "0" when (tmp_21_fu_450_p4 = ap_const_lv8_FF) else "1";
    notrhs7_fu_505_p2 <= "1" when (tmp_34_fu_477_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_487_p2 <= "1" when (tmp_33_fu_460_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= tmp_80_cast_fu_406_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= max_value_reg_126;

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_341_p2)
    begin
        if (((exitcond1_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_236_p3),8));
    p_shl2_cast_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_190_p3),9));
    p_shl3_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_202_p3),9));
    p_shl4_cast_fu_291_p3 <= (tmp_24_fu_287_p1 & ap_const_lv4_0);
        p_shl5_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_299_p3),12));

    p_shl6_cast_fu_371_p3 <= (tmp_31_fu_367_p1 & ap_const_lv5_0);
        p_shl7_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_379_p3),14));

    p_shl_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_224_p3),8));
    tmp_1_fu_353_p2 <= std_logic_vector(unsigned(i_cast2_fu_337_p1) + unsigned(tmp_s_reg_562));
    tmp_21_fu_450_p4 <= max_value_1_to_int_fu_446_p1(30 downto 23);
    tmp_23_fu_467_p4 <= input_load_to_int_fu_464_p1(30 downto 23);
    tmp_24_fu_287_p1 <= tmp_55_fu_282_p2(8 - 1 downto 0);
    tmp_25_fu_493_p2 <= (notrhs_fu_487_p2 or notlhs_fu_481_p2);
    tmp_26_fu_511_p2 <= (notrhs7_fu_505_p2 or notlhs6_fu_499_p2);
    tmp_27_fu_517_p2 <= (tmp_26_fu_511_p2 and tmp_25_fu_493_p2);
    tmp_29_fu_523_p2 <= (tmp_28_fu_173_p2 and tmp_27_fu_517_p2);
    tmp_2_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_353_p2),10));
    tmp_30_fu_299_p3 <= (tmp_55_fu_282_p2 & ap_const_lv1_0);
    tmp_31_fu_367_p1 <= tmp_58_fu_362_p2(9 - 1 downto 0);
    tmp_32_fu_379_p3 <= (tmp_58_fu_362_p2 & ap_const_lv2_0);
    tmp_33_fu_460_p1 <= max_value_1_to_int_fu_446_p1(23 - 1 downto 0);
    tmp_34_fu_477_p1 <= input_load_to_int_fu_464_p1(23 - 1 downto 0);
    tmp_3_fu_427_p2 <= std_logic_vector(unsigned(j_cast1_fu_411_p1) + unsigned(tmp_8_reg_580));
    tmp_4_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_427_p2),14));
    tmp_50_fu_202_p3 <= (c_reg_92 & ap_const_lv2_0);
    tmp_51_fu_214_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_198_p1) - unsigned(p_shl3_cast_fu_210_p1));
    tmp_52_fu_224_p3 <= (c_reg_92 & ap_const_lv4_0);
    tmp_53_fu_236_p3 <= (c_reg_92 & ap_const_lv1_0);
    tmp_54_fu_248_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_232_p1) - unsigned(p_shl1_cast_fu_244_p1));
    tmp_55_fu_282_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_278_p1) + unsigned(tmp_75_cast_reg_549));
    tmp_56_fu_311_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_291_p3) - unsigned(p_shl5_cast_fu_307_p1));
    tmp_57_fu_401_p2 <= std_logic_vector(unsigned(tmp_56_reg_567) + unsigned(tmp_9_cast_fu_397_p1));
    tmp_58_fu_362_p2 <= std_logic_vector(signed(tmp_72_cast_reg_544) + signed(tmp_2_cast_fu_358_p1));
    tmp_59_fu_391_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_371_p3) - unsigned(p_shl7_cast_fu_387_p1));
    tmp_60_fu_436_p2 <= std_logic_vector(unsigned(tmp_59_reg_593) + unsigned(tmp_4_cast_fu_432_p1));
        tmp_72_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_51_fu_214_p2),10));

        tmp_75_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_54_fu_248_p2),9));

    tmp_7_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_103),9));
    tmp_80_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_401_p2),64));
    tmp_85_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_436_p2),64));
    tmp_8_fu_329_p3 <= (w_reg_114 & ap_const_lv1_0);
    tmp_9_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_114),12));
    tmp_fu_190_p3 <= (c_reg_92 & ap_const_lv5_0);
    tmp_s_fu_270_p3 <= (h_reg_103 & ap_const_lv1_0);
    w_2_fu_323_p2 <= std_logic_vector(unsigned(w_reg_114) + unsigned(ap_const_lv4_1));
end behav;
