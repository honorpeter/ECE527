// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weights_address0,
        weights_ce0,
        weights_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_pp0_stage0 = 16'd8;
parameter    ap_ST_fsm_pp0_stage1 = 16'd16;
parameter    ap_ST_fsm_pp0_stage2 = 16'd32;
parameter    ap_ST_fsm_pp0_stage3 = 16'd64;
parameter    ap_ST_fsm_pp0_stage4 = 16'd128;
parameter    ap_ST_fsm_state17 = 16'd256;
parameter    ap_ST_fsm_state18 = 16'd512;
parameter    ap_ST_fsm_state19 = 16'd1024;
parameter    ap_ST_fsm_state20 = 16'd2048;
parameter    ap_ST_fsm_state21 = 16'd4096;
parameter    ap_ST_fsm_state22 = 16'd8192;
parameter    ap_ST_fsm_state23 = 16'd16384;
parameter    ap_ST_fsm_state24 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] weights_address0;
output   weights_ce0;
input  [31:0] weights_q0;
output  [3:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weights_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] indvar_flatten4_reg_204;
reg   [2:0] m_reg_215;
reg   [5:0] indvar_flatten_reg_226;
reg   [2:0] n_reg_237;
reg   [31:0] sum_2_reg_248;
reg   [2:0] ci_reg_260;
wire   [10:0] indvar_flatten_next3_fu_286_p2;
reg   [10:0] indvar_flatten_next3_reg_778;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_292_p2;
reg   [0:0] exitcond_flatten_reg_783;
wire   [0:0] exitcond_flatten3_fu_280_p2;
wire   [3:0] h_mid_fu_298_p3;
reg   [3:0] h_mid_reg_791;
wire   [4:0] tmp_mid2_v_fu_312_p3;
reg   [4:0] tmp_mid2_v_reg_797;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_mid2_fu_319_p1;
reg   [63:0] tmp_mid2_reg_802;
wire  signed [9:0] tmp_180_cast_fu_353_p1;
reg  signed [9:0] tmp_180_cast_reg_807;
wire   [3:0] w_mid2_fu_390_p3;
reg   [3:0] w_mid2_reg_812;
wire   [3:0] tmp_mid2_41_fu_398_p3;
reg   [3:0] tmp_mid2_41_reg_821;
wire   [11:0] tmp_154_fu_435_p2;
reg   [11:0] tmp_154_reg_827;
wire   [0:0] exitcond_flatten4_fu_450_p2;
reg   [0:0] exitcond_flatten4_reg_832;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten4_reg_832_pp0_iter1_reg;
reg   [0:0] exitcond_flatten4_reg_832_pp0_iter2_reg;
wire   [7:0] indvar_flatten_next4_fu_456_p2;
reg   [7:0] indvar_flatten_next4_reg_836;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] tmp_14_mid2_v_fu_482_p3;
reg   [2:0] tmp_14_mid2_v_reg_841;
wire   [2:0] ci_mid2_fu_520_p3;
reg   [2:0] ci_mid2_reg_848;
wire   [2:0] tmp_17_mid2_fu_532_p3;
reg   [2:0] tmp_17_mid2_reg_855;
wire   [3:0] tmp_157_fu_552_p3;
reg   [3:0] tmp_157_reg_861;
wire  signed [9:0] tmp_166_fu_564_p2;
reg  signed [9:0] tmp_166_reg_866;
wire   [5:0] indvar_flatten_next_fu_575_p3;
reg   [5:0] indvar_flatten_next_reg_872;
wire   [11:0] tmp_165_fu_672_p2;
reg   [11:0] tmp_165_reg_877;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_state15_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [12:0] tmp_173_fu_726_p2;
reg   [12:0] tmp_173_reg_882;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_state16_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] weights_load_reg_897;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state12_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] input_load_reg_902;
wire   [2:0] ci_2_fu_740_p2;
reg   [2:0] ci_2_reg_907;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_state13_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_276_p2;
reg   [31:0] tmp_21_reg_912;
wire   [31:0] grp_fu_271_p2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state17;
wire   [11:0] tmp_155_fu_748_p2;
reg   [11:0] tmp_155_reg_927;
wire   [3:0] w_4_fu_753_p2;
reg   [3:0] w_4_reg_932;
wire   [7:0] indvar_flatten_next2_fu_764_p3;
reg   [7:0] indvar_flatten_next2_reg_937;
reg   [31:0] bias_load_reg_942;
wire    ap_CS_fsm_state18;
reg   [31:0] tmp_12_reg_947;
wire    ap_CS_fsm_state23;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [10:0] indvar_flatten2_reg_146;
wire    ap_CS_fsm_state24;
reg   [4:0] co_reg_157;
reg   [7:0] indvar_flatten3_reg_169;
reg   [3:0] h_reg_181;
reg   [3:0] w_reg_192;
reg   [7:0] ap_phi_mux_indvar_flatten4_phi_fu_208_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_m_phi_fu_219_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_230_p4;
reg   [2:0] ap_phi_mux_n_phi_fu_241_p4;
wire   [31:0] ap_phi_mux_sum_2_phi_fu_252_p4;
reg   [2:0] ap_phi_mux_ci_phi_fu_264_p4;
wire   [63:0] tmp_198_cast_fu_732_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_205_cast_fu_736_p1;
wire   [63:0] tmp_189_cast_fu_771_p1;
reg   [31:0] grp_fu_271_p0;
reg   [31:0] grp_fu_271_p1;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_state19;
wire    ap_block_pp0_stage4;
wire   [4:0] co_3_fu_306_p2;
wire   [7:0] tmp_fu_323_p3;
wire   [5:0] tmp_s_fu_335_p3;
wire   [8:0] p_shl4_cast_fu_331_p1;
wire   [8:0] p_shl5_cast_fu_343_p1;
wire   [8:0] tmp_150_fu_347_p2;
wire   [0:0] exitcond_fu_368_p2;
wire   [0:0] not_exitcond_flatten_2_fu_363_p2;
wire   [0:0] exitcond3_mid_fu_374_p2;
wire   [0:0] tmp_152_fu_385_p2;
wire   [3:0] h_3_fu_380_p2;
wire   [8:0] tmp_mid2_cast_fu_405_p1;
wire   [8:0] tmp_151_fu_357_p2;
wire   [8:0] tmp_153_fu_409_p2;
wire   [9:0] tmp_148_fu_423_p3;
wire   [11:0] p_shl_cast_fu_415_p3;
wire   [11:0] p_shl1_cast_fu_431_p1;
wire   [3:0] n_cast_fu_441_p1;
wire   [0:0] exitcond_flatten1_fu_468_p2;
wire   [2:0] m_1_fu_462_p2;
wire   [0:0] exitcond1_fu_496_p2;
wire   [0:0] not_exitcond_flatten_fu_490_p2;
wire   [2:0] n_mid_fu_474_p3;
wire   [0:0] exitcond_mid_fu_502_p2;
wire   [0:0] tmp_156_fu_514_p2;
wire   [2:0] n_2_fu_508_p2;
wire   [3:0] n_cast_mid1_fu_528_p1;
wire   [3:0] tmp_18_fu_445_p2;
wire   [3:0] tmp_18_mid1_fu_540_p2;
wire   [3:0] tmp_149_fu_545_p3;
wire   [9:0] tmp_20_cast_fu_560_p1;
wire   [5:0] indvar_flatten_op_fu_569_p2;
wire    ap_block_pp0_stage1;
wire   [3:0] tmp_16_mid2_v_v_fu_586_p1;
wire   [3:0] tmp_16_mid2_v_fu_589_p2;
wire   [6:0] tmp_158_fu_604_p3;
wire   [3:0] tmp_159_fu_615_p3;
wire   [7:0] p_shl10_cast_fu_611_p1;
wire   [7:0] p_shl11_cast_fu_622_p1;
wire   [7:0] tmp_160_fu_626_p2;
wire  signed [8:0] tmp_193_cast_fu_632_p1;
wire   [8:0] tmp_16_mid2_cast_fu_594_p1;
wire   [8:0] tmp_161_fu_636_p2;
wire   [7:0] tmp_162_fu_642_p1;
wire   [9:0] tmp_163_fu_654_p3;
wire   [11:0] p_shl8_cast_fu_646_p3;
wire  signed [11:0] p_shl9_cast_fu_662_p1;
wire   [11:0] tmp_164_fu_666_p2;
wire   [11:0] tmp_19_mid2_cast_fu_601_p1;
wire   [11:0] tmp_167_fu_681_p3;
wire  signed [63:0] tmp_199_cast_fu_678_p1;
wire  signed [63:0] p_shl7_fu_688_p1;
wire   [63:0] tmp_168_fu_692_p2;
wire   [63:0] tmp_14_mid2_fu_583_p1;
wire   [63:0] tmp_169_fu_698_p2;
wire   [10:0] tmp_171_fu_708_p1;
wire   [12:0] tmp_170_fu_704_p1;
wire   [12:0] p_shl6_cast_fu_712_p3;
wire   [12:0] tmp_172_fu_720_p2;
wire   [12:0] tmp_17_mid2_cast_fu_598_p1;
wire   [11:0] tmp_13_cast_fu_745_p1;
wire   [7:0] indvar_flatten28_op_fu_758_p2;
reg   [15:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fadd_32ns_3bkb_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_271_p0),
    .din1(grp_fu_271_p1),
    .ce(1'b1),
    .dout(grp_fu_271_p2)
);

conv1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fmul_32ns_3cud_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_load_reg_897),
    .din1(input_load_reg_902),
    .ce(1'b1),
    .dout(grp_fu_276_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ci_reg_260 <= ci_2_reg_907;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ci_reg_260 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        co_reg_157 <= tmp_mid2_v_reg_797;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        co_reg_157 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        h_reg_181 <= tmp_mid2_41_reg_821;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h_reg_181 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten2_reg_146 <= indvar_flatten_next3_reg_778;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten2_reg_146 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten3_reg_169 <= indvar_flatten_next2_reg_937;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_169 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten4_reg_204 <= indvar_flatten_next4_reg_836;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten4_reg_204 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_226 <= indvar_flatten_next_reg_872;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_226 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_reg_215 <= tmp_14_mid2_v_reg_841;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_reg_215 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        n_reg_237 <= tmp_17_mid2_reg_855;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        n_reg_237 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sum_2_reg_248 <= grp_fu_271_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_2_reg_248 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        w_reg_192 <= w_4_reg_932;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_reg_192 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bias_load_reg_942 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ci_2_reg_907 <= ci_2_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ci_mid2_reg_848 <= ci_mid2_fu_520_p3;
        tmp_157_reg_861 <= tmp_157_fu_552_p3;
        tmp_166_reg_866 <= tmp_166_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten4_reg_832 <= exitcond_flatten4_fu_450_p2;
        exitcond_flatten4_reg_832_pp0_iter1_reg <= exitcond_flatten4_reg_832;
        exitcond_flatten4_reg_832_pp0_iter2_reg <= exitcond_flatten4_reg_832_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        exitcond_flatten_reg_783 <= exitcond_flatten_fu_292_p2;
        h_mid_reg_791 <= h_mid_fu_298_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten_next2_reg_937 <= indvar_flatten_next2_fu_764_p3;
        tmp_155_reg_927 <= tmp_155_fu_748_p2;
        w_4_reg_932 <= w_4_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next3_reg_778 <= indvar_flatten_next3_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next4_reg_836 <= indvar_flatten_next4_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_fu_450_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_872 <= indvar_flatten_next_fu_575_p3;
        tmp_14_mid2_v_reg_841 <= tmp_14_mid2_v_fu_482_p3;
        tmp_17_mid2_reg_855 <= tmp_17_mid2_fu_532_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        input_load_reg_902 <= input_r_q0;
        weights_load_reg_897 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_12_reg_947 <= grp_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_154_reg_827[11 : 1] <= tmp_154_fu_435_p2[11 : 1];
        tmp_180_cast_reg_807[9 : 1] <= tmp_180_cast_fu_353_p1[9 : 1];
        tmp_mid2_41_reg_821 <= tmp_mid2_41_fu_398_p3;
        tmp_mid2_reg_802[4 : 0] <= tmp_mid2_fu_319_p1[4 : 0];
        tmp_mid2_v_reg_797 <= tmp_mid2_v_fu_312_p3;
        w_mid2_reg_812 <= w_mid2_fu_390_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_165_reg_877 <= tmp_165_fu_672_p2;
        tmp_173_reg_882 <= tmp_173_fu_726_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_832_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_21_reg_912 <= grp_fu_276_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten4_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_flatten3_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ci_phi_fu_264_p4 = ci_2_reg_907;
    end else begin
        ap_phi_mux_ci_phi_fu_264_p4 = ci_reg_260;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten4_phi_fu_208_p4 = indvar_flatten_next4_reg_836;
    end else begin
        ap_phi_mux_indvar_flatten4_phi_fu_208_p4 = indvar_flatten4_reg_204;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_230_p4 = indvar_flatten_next_reg_872;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_230_p4 = indvar_flatten_reg_226;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_m_phi_fu_219_p4 = tmp_14_mid2_v_reg_841;
    end else begin
        ap_phi_mux_m_phi_fu_219_p4 = m_reg_215;
    end
end

always @ (*) begin
    if (((exitcond_flatten4_reg_832 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_n_phi_fu_241_p4 = tmp_17_mid2_reg_855;
    end else begin
        ap_phi_mux_n_phi_fu_241_p4 = n_reg_237;
    end
end

always @ (*) begin
    if (((exitcond_flatten3_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_271_p0 = sum_2_reg_248;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_271_p0 = ap_phi_mux_sum_2_phi_fu_252_p4;
    end else begin
        grp_fu_271_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_271_p1 = bias_load_reg_942;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_271_p1 = tmp_21_reg_912;
    end else begin
        grp_fu_271_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_flatten3_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten4_fu_450_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten4_fu_450_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_sum_2_phi_fu_252_p4 = sum_2_reg_248;

assign bias_address0 = tmp_mid2_reg_802;

assign ci_2_fu_740_p2 = (3'd1 + ci_mid2_reg_848);

assign ci_mid2_fu_520_p3 = ((tmp_156_fu_514_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_ci_phi_fu_264_p4);

assign co_3_fu_306_p2 = (co_reg_157 + 5'd1);

assign exitcond1_fu_496_p2 = ((ap_phi_mux_ci_phi_fu_264_p4 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond3_mid_fu_374_p2 = (not_exitcond_flatten_2_fu_363_p2 & exitcond_fu_368_p2);

assign exitcond_flatten1_fu_468_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_230_p4 == 6'd30) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_280_p2 = ((indvar_flatten2_reg_146 == 11'd1600) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_450_p2 = ((ap_phi_mux_indvar_flatten4_phi_fu_208_p4 == 8'd150) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_292_p2 = ((indvar_flatten3_reg_169 == 8'd100) ? 1'b1 : 1'b0);

assign exitcond_fu_368_p2 = ((w_reg_192 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_502_p2 = (not_exitcond_flatten_fu_490_p2 & exitcond1_fu_496_p2);

assign h_3_fu_380_p2 = (h_mid_reg_791 + 4'd1);

assign h_mid_fu_298_p3 = ((exitcond_flatten_fu_292_p2[0:0] === 1'b1) ? 4'd0 : h_reg_181);

assign indvar_flatten28_op_fu_758_p2 = (indvar_flatten3_reg_169 + 8'd1);

assign indvar_flatten_next2_fu_764_p3 = ((exitcond_flatten_reg_783[0:0] === 1'b1) ? 8'd1 : indvar_flatten28_op_fu_758_p2);

assign indvar_flatten_next3_fu_286_p2 = (indvar_flatten2_reg_146 + 11'd1);

assign indvar_flatten_next4_fu_456_p2 = (ap_phi_mux_indvar_flatten4_phi_fu_208_p4 + 8'd1);

assign indvar_flatten_next_fu_575_p3 = ((exitcond_flatten1_fu_468_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten_op_fu_569_p2);

assign indvar_flatten_op_fu_569_p2 = (6'd1 + ap_phi_mux_indvar_flatten_phi_fu_230_p4);

assign input_r_address0 = tmp_198_cast_fu_732_p1;

assign m_1_fu_462_p2 = (3'd1 + ap_phi_mux_m_phi_fu_219_p4);

assign n_2_fu_508_p2 = (3'd1 + n_mid_fu_474_p3);

assign n_cast_fu_441_p1 = ap_phi_mux_n_phi_fu_241_p4;

assign n_cast_mid1_fu_528_p1 = n_2_fu_508_p2;

assign n_mid_fu_474_p3 = ((exitcond_flatten1_fu_468_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_n_phi_fu_241_p4);

assign not_exitcond_flatten_2_fu_363_p2 = (exitcond_flatten_reg_783 ^ 1'd1);

assign not_exitcond_flatten_fu_490_p2 = (exitcond_flatten1_fu_468_p2 ^ 1'd1);

assign output_r_address0 = tmp_189_cast_fu_771_p1;

assign output_r_d0 = tmp_12_reg_947;

assign p_shl10_cast_fu_611_p1 = tmp_158_fu_604_p3;

assign p_shl11_cast_fu_622_p1 = tmp_159_fu_615_p3;

assign p_shl1_cast_fu_431_p1 = tmp_148_fu_423_p3;

assign p_shl4_cast_fu_331_p1 = tmp_fu_323_p3;

assign p_shl5_cast_fu_343_p1 = tmp_s_fu_335_p3;

assign p_shl6_cast_fu_712_p3 = {{tmp_171_fu_708_p1}, {2'd0}};

assign p_shl7_fu_688_p1 = $signed(tmp_167_fu_681_p3);

assign p_shl8_cast_fu_646_p3 = {{tmp_162_fu_642_p1}, {4'd0}};

assign p_shl9_cast_fu_662_p1 = $signed(tmp_163_fu_654_p3);

assign p_shl_cast_fu_415_p3 = {{tmp_153_fu_409_p2}, {3'd0}};

assign tmp_13_cast_fu_745_p1 = w_mid2_reg_812;

assign tmp_148_fu_423_p3 = {{tmp_153_fu_409_p2}, {1'd0}};

assign tmp_149_fu_545_p3 = ((exitcond_flatten1_fu_468_p2[0:0] === 1'b1) ? w_mid2_reg_812 : tmp_18_fu_445_p2);

assign tmp_14_mid2_fu_583_p1 = tmp_14_mid2_v_reg_841;

assign tmp_14_mid2_v_fu_482_p3 = ((exitcond_flatten1_fu_468_p2[0:0] === 1'b1) ? m_1_fu_462_p2 : ap_phi_mux_m_phi_fu_219_p4);

assign tmp_150_fu_347_p2 = (p_shl4_cast_fu_331_p1 - p_shl5_cast_fu_343_p1);

assign tmp_151_fu_357_p2 = (p_shl4_cast_fu_331_p1 + p_shl5_cast_fu_343_p1);

assign tmp_152_fu_385_p2 = (exitcond_flatten_reg_783 | exitcond3_mid_fu_374_p2);

assign tmp_153_fu_409_p2 = (tmp_mid2_cast_fu_405_p1 + tmp_151_fu_357_p2);

assign tmp_154_fu_435_p2 = (p_shl_cast_fu_415_p3 + p_shl1_cast_fu_431_p1);

assign tmp_155_fu_748_p2 = (tmp_154_reg_827 + tmp_13_cast_fu_745_p1);

assign tmp_156_fu_514_p2 = (exitcond_mid_fu_502_p2 | exitcond_flatten1_fu_468_p2);

assign tmp_157_fu_552_p3 = ((exitcond_mid_fu_502_p2[0:0] === 1'b1) ? tmp_18_mid1_fu_540_p2 : tmp_149_fu_545_p3);

assign tmp_158_fu_604_p3 = {{ci_mid2_reg_848}, {4'd0}};

assign tmp_159_fu_615_p3 = {{ci_mid2_reg_848}, {1'd0}};

assign tmp_160_fu_626_p2 = (p_shl10_cast_fu_611_p1 - p_shl11_cast_fu_622_p1);

assign tmp_161_fu_636_p2 = ($signed(tmp_193_cast_fu_632_p1) + $signed(tmp_16_mid2_cast_fu_594_p1));

assign tmp_162_fu_642_p1 = tmp_161_fu_636_p2[7:0];

assign tmp_163_fu_654_p3 = {{tmp_161_fu_636_p2}, {1'd0}};

assign tmp_164_fu_666_p2 = ($signed(p_shl8_cast_fu_646_p3) - $signed(p_shl9_cast_fu_662_p1));

assign tmp_165_fu_672_p2 = (tmp_164_fu_666_p2 + tmp_19_mid2_cast_fu_601_p1);

assign tmp_166_fu_564_p2 = ($signed(tmp_180_cast_reg_807) + $signed(tmp_20_cast_fu_560_p1));

assign tmp_167_fu_681_p3 = {{tmp_166_reg_866}, {2'd0}};

assign tmp_168_fu_692_p2 = ($signed(tmp_199_cast_fu_678_p1) + $signed(p_shl7_fu_688_p1));

assign tmp_169_fu_698_p2 = (tmp_168_fu_692_p2 + tmp_14_mid2_fu_583_p1);

assign tmp_16_mid2_cast_fu_594_p1 = tmp_16_mid2_v_fu_589_p2;

assign tmp_16_mid2_v_fu_589_p2 = (tmp_16_mid2_v_v_fu_586_p1 + tmp_mid2_41_reg_821);

assign tmp_16_mid2_v_v_fu_586_p1 = tmp_14_mid2_v_reg_841;

assign tmp_170_fu_704_p1 = tmp_169_fu_698_p2[12:0];

assign tmp_171_fu_708_p1 = tmp_169_fu_698_p2[10:0];

assign tmp_172_fu_720_p2 = (tmp_170_fu_704_p1 + p_shl6_cast_fu_712_p3);

assign tmp_173_fu_726_p2 = (tmp_172_fu_720_p2 + tmp_17_mid2_cast_fu_598_p1);

assign tmp_17_mid2_cast_fu_598_p1 = tmp_17_mid2_reg_855;

assign tmp_17_mid2_fu_532_p3 = ((exitcond_mid_fu_502_p2[0:0] === 1'b1) ? n_2_fu_508_p2 : n_mid_fu_474_p3);

assign tmp_180_cast_fu_353_p1 = $signed(tmp_150_fu_347_p2);

assign tmp_189_cast_fu_771_p1 = tmp_155_reg_927;

assign tmp_18_fu_445_p2 = (w_mid2_reg_812 + n_cast_fu_441_p1);

assign tmp_18_mid1_fu_540_p2 = (n_cast_mid1_fu_528_p1 + w_mid2_reg_812);

assign tmp_193_cast_fu_632_p1 = $signed(tmp_160_fu_626_p2);

assign tmp_198_cast_fu_732_p1 = tmp_165_reg_877;

assign tmp_199_cast_fu_678_p1 = tmp_166_reg_866;

assign tmp_19_mid2_cast_fu_601_p1 = tmp_157_reg_861;

assign tmp_205_cast_fu_736_p1 = tmp_173_reg_882;

assign tmp_20_cast_fu_560_p1 = ci_mid2_fu_520_p3;

assign tmp_fu_323_p3 = {{tmp_mid2_v_fu_312_p3}, {3'd0}};

assign tmp_mid2_41_fu_398_p3 = ((exitcond3_mid_fu_374_p2[0:0] === 1'b1) ? h_3_fu_380_p2 : h_mid_reg_791);

assign tmp_mid2_cast_fu_405_p1 = tmp_mid2_41_fu_398_p3;

assign tmp_mid2_fu_319_p1 = tmp_mid2_v_fu_312_p3;

assign tmp_mid2_v_fu_312_p3 = ((exitcond_flatten_reg_783[0:0] === 1'b1) ? co_3_fu_306_p2 : co_reg_157);

assign tmp_s_fu_335_p3 = {{tmp_mid2_v_fu_312_p3}, {1'd0}};

assign w_4_fu_753_p2 = (w_mid2_reg_812 + 4'd1);

assign w_mid2_fu_390_p3 = ((tmp_152_fu_385_p2[0:0] === 1'b1) ? 4'd0 : w_reg_192);

assign weights_address0 = tmp_205_cast_fu_736_p1;

always @ (posedge ap_clk) begin
    tmp_mid2_reg_802[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_180_cast_reg_807[0] <= 1'b0;
    tmp_154_reg_827[0] <= 1'b0;
end

endmodule //convolution_3
