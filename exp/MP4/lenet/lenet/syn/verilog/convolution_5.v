// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weights_address0,
        weights_ce0,
        weights_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_0_0_address0,
        output_0_0_ce0,
        output_0_0_we0,
        output_0_0_d0
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [15:0] weights_address0;
output   weights_ce0;
input  [31:0] weights_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [6:0] output_0_0_address0;
output   output_0_0_ce0;
output   output_0_0_we0;
output  [31:0] output_0_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weights_ce0;
reg bias_ce0;
reg output_0_0_ce0;
reg output_0_0_we0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_2_fu_200_p2;
reg   [6:0] co_2_reg_397;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_206_p1;
reg   [63:0] tmp_reg_402;
wire   [0:0] exitcond3_fu_194_p2;
wire   [11:0] tmp_165_cast_fu_218_p1;
reg   [11:0] tmp_165_cast_reg_408;
wire   [2:0] m_fu_228_p2;
reg   [2:0] m_reg_416;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_8_fu_234_p1;
reg   [63:0] tmp_8_reg_421;
wire   [0:0] exitcond2_fu_222_p2;
wire   [7:0] tmp_8_cast_fu_238_p1;
reg   [7:0] tmp_8_cast_reg_426;
wire   [2:0] n_fu_248_p2;
reg   [2:0] n_reg_439;
wire    ap_CS_fsm_state4;
wire   [16:0] tmp_9_cast1_fu_254_p1;
reg   [16:0] tmp_9_cast1_reg_444;
wire   [0:0] exitcond1_fu_242_p2;
wire   [9:0] tmp_9_cast_fu_258_p1;
reg   [9:0] tmp_9_cast_reg_449;
wire   [4:0] ci_1_fu_268_p2;
reg   [4:0] ci_1_reg_457;
wire    ap_CS_fsm_state5;
wire   [9:0] tmp_142_fu_323_p2;
reg   [9:0] tmp_142_reg_462;
wire   [0:0] exitcond_fu_262_p2;
wire   [16:0] tmp_146_fu_360_p1;
reg   [16:0] tmp_146_reg_467;
wire   [14:0] tmp_147_fu_364_p1;
reg   [14:0] tmp_147_reg_472;
wire    ap_CS_fsm_state6;
reg   [31:0] weights_load_reg_487;
wire    ap_CS_fsm_state7;
reg   [31:0] input_load_reg_492;
wire   [31:0] grp_fu_190_p2;
reg   [31:0] tmp_11_reg_497;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_184_p2;
wire    ap_CS_fsm_state16;
reg   [31:0] bias_load_reg_507;
wire    ap_CS_fsm_state17;
reg   [31:0] tmp_s_reg_512;
wire    ap_CS_fsm_state22;
reg   [6:0] co_reg_104;
wire    ap_CS_fsm_state23;
reg   [2:0] i_reg_115;
reg   [31:0] sum_reg_126;
reg   [31:0] sum_1_reg_138;
reg   [2:0] j_reg_150;
reg   [31:0] sum_2_reg_161;
reg   [4:0] ci_reg_173;
wire   [63:0] tmp_171_cast_fu_368_p1;
wire   [63:0] tmp_178_cast_fu_389_p1;
reg   [31:0] grp_fu_184_p0;
reg   [31:0] grp_fu_184_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state8;
wire   [10:0] tmp_137_fu_210_p3;
wire   [6:0] tmp_138_fu_282_p3;
wire   [7:0] p_shl3_cast_fu_290_p1;
wire   [7:0] tmp_10_cast_fu_278_p1;
wire   [7:0] tmp_139_fu_294_p2;
wire   [7:0] tmp_140_fu_300_p2;
wire   [9:0] p_shl2_cast_fu_309_p3;
wire   [9:0] tmp_168_cast_fu_305_p1;
wire   [9:0] tmp_141_fu_317_p2;
wire   [11:0] tmp_10_cast1_fu_274_p1;
wire   [11:0] tmp_143_fu_328_p2;
wire   [13:0] tmp_136_fu_337_p3;
wire   [63:0] p_shl1_fu_345_p1;
wire   [63:0] tmp_172_cast_fu_333_p1;
wire   [63:0] tmp_144_fu_349_p2;
wire   [63:0] tmp_145_fu_355_p2;
wire   [16:0] p_shl_cast_fu_372_p3;
wire   [16:0] tmp_148_fu_379_p2;
wire   [16:0] tmp_149_fu_384_p2;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

conv1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fadd_32ns_3bkb_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_184_p0),
    .din1(grp_fu_184_p1),
    .ce(1'b1),
    .dout(grp_fu_184_p2)
);

conv1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fmul_32ns_3cud_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_load_reg_487),
    .din1(input_load_reg_492),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ci_reg_173 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        ci_reg_173 <= ci_1_reg_457;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        co_reg_104 <= co_2_reg_397;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        co_reg_104 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_115 <= m_reg_416;
    end else if (((exitcond3_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_115 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_150 <= n_reg_439;
    end else if (((exitcond2_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_150 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        sum_1_reg_138 <= sum_2_reg_161;
    end else if (((exitcond2_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_1_reg_138 <= sum_reg_126;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_2_reg_161 <= sum_1_reg_138;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_2_reg_161 <= grp_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sum_reg_126 <= sum_1_reg_138;
    end else if (((exitcond3_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_reg_126 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bias_load_reg_507 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_1_reg_457 <= ci_1_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_2_reg_397 <= co_2_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_load_reg_492 <= input_r_q0;
        weights_load_reg_487 <= weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_reg_416 <= m_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        n_reg_439 <= n_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_11_reg_497 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_142_reg_462 <= tmp_142_fu_323_p2;
        tmp_146_reg_467 <= tmp_146_fu_360_p1;
        tmp_147_reg_472 <= tmp_147_fu_364_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_165_cast_reg_408[10 : 4] <= tmp_165_cast_fu_218_p1[10 : 4];
        tmp_reg_402[6 : 0] <= tmp_fu_206_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_8_cast_reg_426[2 : 0] <= tmp_8_cast_fu_238_p1[2 : 0];
        tmp_8_reg_421[2 : 0] <= tmp_8_fu_234_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_9_cast1_reg_444[2 : 0] <= tmp_9_cast1_fu_254_p1[2 : 0];
        tmp_9_cast_reg_449[2 : 0] <= tmp_9_cast_fu_258_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_s_reg_512 <= grp_fu_184_p2;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_184_p0 = sum_reg_126;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_184_p0 = sum_2_reg_161;
    end else begin
        grp_fu_184_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_184_p1 = bias_load_reg_507;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_184_p1 = tmp_11_reg_497;
    end else begin
        grp_fu_184_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_0_0_ce0 = 1'b1;
    end else begin
        output_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_0_0_we0 = 1'b1;
    end else begin
        output_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_222_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_262_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bias_address0 = tmp_reg_402;

assign ci_1_fu_268_p2 = (ci_reg_173 + 5'd1);

assign co_2_fu_200_p2 = (co_reg_104 + 7'd1);

assign exitcond1_fu_242_p2 = ((j_reg_150 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_222_p2 = ((i_reg_115 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_194_p2 = ((co_reg_104 == 7'd120) ? 1'b1 : 1'b0);

assign exitcond_fu_262_p2 = ((ci_reg_173 == 5'd16) ? 1'b1 : 1'b0);

assign input_r_address0 = tmp_171_cast_fu_368_p1;

assign m_fu_228_p2 = (i_reg_115 + 3'd1);

assign n_fu_248_p2 = (j_reg_150 + 3'd1);

assign output_0_0_address0 = tmp_reg_402;

assign output_0_0_d0 = tmp_s_reg_512;

assign p_shl1_fu_345_p1 = tmp_136_fu_337_p3;

assign p_shl2_cast_fu_309_p3 = {{tmp_140_fu_300_p2}, {2'd0}};

assign p_shl3_cast_fu_290_p1 = tmp_138_fu_282_p3;

assign p_shl_cast_fu_372_p3 = {{tmp_147_reg_472}, {2'd0}};

assign tmp_10_cast1_fu_274_p1 = ci_reg_173;

assign tmp_10_cast_fu_278_p1 = ci_reg_173;

assign tmp_136_fu_337_p3 = {{tmp_143_fu_328_p2}, {2'd0}};

assign tmp_137_fu_210_p3 = {{co_reg_104}, {4'd0}};

assign tmp_138_fu_282_p3 = {{ci_reg_173}, {2'd0}};

assign tmp_139_fu_294_p2 = (p_shl3_cast_fu_290_p1 + tmp_10_cast_fu_278_p1);

assign tmp_140_fu_300_p2 = (tmp_8_cast_reg_426 + tmp_139_fu_294_p2);

assign tmp_141_fu_317_p2 = (p_shl2_cast_fu_309_p3 + tmp_168_cast_fu_305_p1);

assign tmp_142_fu_323_p2 = (tmp_9_cast_reg_449 + tmp_141_fu_317_p2);

assign tmp_143_fu_328_p2 = (tmp_10_cast1_fu_274_p1 + tmp_165_cast_reg_408);

assign tmp_144_fu_349_p2 = (p_shl1_fu_345_p1 + tmp_172_cast_fu_333_p1);

assign tmp_145_fu_355_p2 = (tmp_8_reg_421 + tmp_144_fu_349_p2);

assign tmp_146_fu_360_p1 = tmp_145_fu_355_p2[16:0];

assign tmp_147_fu_364_p1 = tmp_145_fu_355_p2[14:0];

assign tmp_148_fu_379_p2 = (p_shl_cast_fu_372_p3 + tmp_146_reg_467);

assign tmp_149_fu_384_p2 = (tmp_9_cast1_reg_444 + tmp_148_fu_379_p2);

assign tmp_165_cast_fu_218_p1 = tmp_137_fu_210_p3;

assign tmp_168_cast_fu_305_p1 = tmp_140_fu_300_p2;

assign tmp_171_cast_fu_368_p1 = tmp_142_reg_462;

assign tmp_172_cast_fu_333_p1 = tmp_143_fu_328_p2;

assign tmp_178_cast_fu_389_p1 = tmp_149_fu_384_p2;

assign tmp_8_cast_fu_238_p1 = i_reg_115;

assign tmp_8_fu_234_p1 = i_reg_115;

assign tmp_9_cast1_fu_254_p1 = j_reg_150;

assign tmp_9_cast_fu_258_p1 = j_reg_150;

assign tmp_fu_206_p1 = co_reg_104;

assign weights_address0 = tmp_178_cast_fu_389_p1;

always @ (posedge ap_clk) begin
    tmp_reg_402[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_165_cast_reg_408[3:0] <= 4'b0000;
    tmp_165_cast_reg_408[11] <= 1'b0;
    tmp_8_reg_421[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_8_cast_reg_426[7:3] <= 5'b00000;
    tmp_9_cast1_reg_444[16:3] <= 14'b00000000000000;
    tmp_9_cast_reg_449[9:3] <= 7'b0000000;
end

endmodule //convolution_5
