// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv1,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=64204,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=10,HLS_SYN_FF=7162,HLS_SYN_LUT=7305,HLS_VERSION=2018_2}" *)

module conv1 (
        ap_clk,
        ap_rst_n,
        m_axi_DATA_INPUT_AWVALID,
        m_axi_DATA_INPUT_AWREADY,
        m_axi_DATA_INPUT_AWADDR,
        m_axi_DATA_INPUT_AWID,
        m_axi_DATA_INPUT_AWLEN,
        m_axi_DATA_INPUT_AWSIZE,
        m_axi_DATA_INPUT_AWBURST,
        m_axi_DATA_INPUT_AWLOCK,
        m_axi_DATA_INPUT_AWCACHE,
        m_axi_DATA_INPUT_AWPROT,
        m_axi_DATA_INPUT_AWQOS,
        m_axi_DATA_INPUT_AWREGION,
        m_axi_DATA_INPUT_AWUSER,
        m_axi_DATA_INPUT_WVALID,
        m_axi_DATA_INPUT_WREADY,
        m_axi_DATA_INPUT_WDATA,
        m_axi_DATA_INPUT_WSTRB,
        m_axi_DATA_INPUT_WLAST,
        m_axi_DATA_INPUT_WID,
        m_axi_DATA_INPUT_WUSER,
        m_axi_DATA_INPUT_ARVALID,
        m_axi_DATA_INPUT_ARREADY,
        m_axi_DATA_INPUT_ARADDR,
        m_axi_DATA_INPUT_ARID,
        m_axi_DATA_INPUT_ARLEN,
        m_axi_DATA_INPUT_ARSIZE,
        m_axi_DATA_INPUT_ARBURST,
        m_axi_DATA_INPUT_ARLOCK,
        m_axi_DATA_INPUT_ARCACHE,
        m_axi_DATA_INPUT_ARPROT,
        m_axi_DATA_INPUT_ARQOS,
        m_axi_DATA_INPUT_ARREGION,
        m_axi_DATA_INPUT_ARUSER,
        m_axi_DATA_INPUT_RVALID,
        m_axi_DATA_INPUT_RREADY,
        m_axi_DATA_INPUT_RDATA,
        m_axi_DATA_INPUT_RLAST,
        m_axi_DATA_INPUT_RID,
        m_axi_DATA_INPUT_RUSER,
        m_axi_DATA_INPUT_RRESP,
        m_axi_DATA_INPUT_BVALID,
        m_axi_DATA_INPUT_BREADY,
        m_axi_DATA_INPUT_BRESP,
        m_axi_DATA_INPUT_BID,
        m_axi_DATA_INPUT_BUSER,
        m_axi_DATA_WEIGHT_AWVALID,
        m_axi_DATA_WEIGHT_AWREADY,
        m_axi_DATA_WEIGHT_AWADDR,
        m_axi_DATA_WEIGHT_AWID,
        m_axi_DATA_WEIGHT_AWLEN,
        m_axi_DATA_WEIGHT_AWSIZE,
        m_axi_DATA_WEIGHT_AWBURST,
        m_axi_DATA_WEIGHT_AWLOCK,
        m_axi_DATA_WEIGHT_AWCACHE,
        m_axi_DATA_WEIGHT_AWPROT,
        m_axi_DATA_WEIGHT_AWQOS,
        m_axi_DATA_WEIGHT_AWREGION,
        m_axi_DATA_WEIGHT_AWUSER,
        m_axi_DATA_WEIGHT_WVALID,
        m_axi_DATA_WEIGHT_WREADY,
        m_axi_DATA_WEIGHT_WDATA,
        m_axi_DATA_WEIGHT_WSTRB,
        m_axi_DATA_WEIGHT_WLAST,
        m_axi_DATA_WEIGHT_WID,
        m_axi_DATA_WEIGHT_WUSER,
        m_axi_DATA_WEIGHT_ARVALID,
        m_axi_DATA_WEIGHT_ARREADY,
        m_axi_DATA_WEIGHT_ARADDR,
        m_axi_DATA_WEIGHT_ARID,
        m_axi_DATA_WEIGHT_ARLEN,
        m_axi_DATA_WEIGHT_ARSIZE,
        m_axi_DATA_WEIGHT_ARBURST,
        m_axi_DATA_WEIGHT_ARLOCK,
        m_axi_DATA_WEIGHT_ARCACHE,
        m_axi_DATA_WEIGHT_ARPROT,
        m_axi_DATA_WEIGHT_ARQOS,
        m_axi_DATA_WEIGHT_ARREGION,
        m_axi_DATA_WEIGHT_ARUSER,
        m_axi_DATA_WEIGHT_RVALID,
        m_axi_DATA_WEIGHT_RREADY,
        m_axi_DATA_WEIGHT_RDATA,
        m_axi_DATA_WEIGHT_RLAST,
        m_axi_DATA_WEIGHT_RID,
        m_axi_DATA_WEIGHT_RUSER,
        m_axi_DATA_WEIGHT_RRESP,
        m_axi_DATA_WEIGHT_BVALID,
        m_axi_DATA_WEIGHT_BREADY,
        m_axi_DATA_WEIGHT_BRESP,
        m_axi_DATA_WEIGHT_BID,
        m_axi_DATA_WEIGHT_BUSER,
        m_axi_DATA_BIAS_AWVALID,
        m_axi_DATA_BIAS_AWREADY,
        m_axi_DATA_BIAS_AWADDR,
        m_axi_DATA_BIAS_AWID,
        m_axi_DATA_BIAS_AWLEN,
        m_axi_DATA_BIAS_AWSIZE,
        m_axi_DATA_BIAS_AWBURST,
        m_axi_DATA_BIAS_AWLOCK,
        m_axi_DATA_BIAS_AWCACHE,
        m_axi_DATA_BIAS_AWPROT,
        m_axi_DATA_BIAS_AWQOS,
        m_axi_DATA_BIAS_AWREGION,
        m_axi_DATA_BIAS_AWUSER,
        m_axi_DATA_BIAS_WVALID,
        m_axi_DATA_BIAS_WREADY,
        m_axi_DATA_BIAS_WDATA,
        m_axi_DATA_BIAS_WSTRB,
        m_axi_DATA_BIAS_WLAST,
        m_axi_DATA_BIAS_WID,
        m_axi_DATA_BIAS_WUSER,
        m_axi_DATA_BIAS_ARVALID,
        m_axi_DATA_BIAS_ARREADY,
        m_axi_DATA_BIAS_ARADDR,
        m_axi_DATA_BIAS_ARID,
        m_axi_DATA_BIAS_ARLEN,
        m_axi_DATA_BIAS_ARSIZE,
        m_axi_DATA_BIAS_ARBURST,
        m_axi_DATA_BIAS_ARLOCK,
        m_axi_DATA_BIAS_ARCACHE,
        m_axi_DATA_BIAS_ARPROT,
        m_axi_DATA_BIAS_ARQOS,
        m_axi_DATA_BIAS_ARREGION,
        m_axi_DATA_BIAS_ARUSER,
        m_axi_DATA_BIAS_RVALID,
        m_axi_DATA_BIAS_RREADY,
        m_axi_DATA_BIAS_RDATA,
        m_axi_DATA_BIAS_RLAST,
        m_axi_DATA_BIAS_RID,
        m_axi_DATA_BIAS_RUSER,
        m_axi_DATA_BIAS_RRESP,
        m_axi_DATA_BIAS_BVALID,
        m_axi_DATA_BIAS_BREADY,
        m_axi_DATA_BIAS_BRESP,
        m_axi_DATA_BIAS_BID,
        m_axi_DATA_BIAS_BUSER,
        m_axi_DATA_OUTPUT_AWVALID,
        m_axi_DATA_OUTPUT_AWREADY,
        m_axi_DATA_OUTPUT_AWADDR,
        m_axi_DATA_OUTPUT_AWID,
        m_axi_DATA_OUTPUT_AWLEN,
        m_axi_DATA_OUTPUT_AWSIZE,
        m_axi_DATA_OUTPUT_AWBURST,
        m_axi_DATA_OUTPUT_AWLOCK,
        m_axi_DATA_OUTPUT_AWCACHE,
        m_axi_DATA_OUTPUT_AWPROT,
        m_axi_DATA_OUTPUT_AWQOS,
        m_axi_DATA_OUTPUT_AWREGION,
        m_axi_DATA_OUTPUT_AWUSER,
        m_axi_DATA_OUTPUT_WVALID,
        m_axi_DATA_OUTPUT_WREADY,
        m_axi_DATA_OUTPUT_WDATA,
        m_axi_DATA_OUTPUT_WSTRB,
        m_axi_DATA_OUTPUT_WLAST,
        m_axi_DATA_OUTPUT_WID,
        m_axi_DATA_OUTPUT_WUSER,
        m_axi_DATA_OUTPUT_ARVALID,
        m_axi_DATA_OUTPUT_ARREADY,
        m_axi_DATA_OUTPUT_ARADDR,
        m_axi_DATA_OUTPUT_ARID,
        m_axi_DATA_OUTPUT_ARLEN,
        m_axi_DATA_OUTPUT_ARSIZE,
        m_axi_DATA_OUTPUT_ARBURST,
        m_axi_DATA_OUTPUT_ARLOCK,
        m_axi_DATA_OUTPUT_ARCACHE,
        m_axi_DATA_OUTPUT_ARPROT,
        m_axi_DATA_OUTPUT_ARQOS,
        m_axi_DATA_OUTPUT_ARREGION,
        m_axi_DATA_OUTPUT_ARUSER,
        m_axi_DATA_OUTPUT_RVALID,
        m_axi_DATA_OUTPUT_RREADY,
        m_axi_DATA_OUTPUT_RDATA,
        m_axi_DATA_OUTPUT_RLAST,
        m_axi_DATA_OUTPUT_RID,
        m_axi_DATA_OUTPUT_RUSER,
        m_axi_DATA_OUTPUT_RRESP,
        m_axi_DATA_OUTPUT_BVALID,
        m_axi_DATA_OUTPUT_BREADY,
        m_axi_DATA_OUTPUT_BRESP,
        m_axi_DATA_OUTPUT_BID,
        m_axi_DATA_OUTPUT_BUSER,
        s_axi_CTL_AWVALID,
        s_axi_CTL_AWREADY,
        s_axi_CTL_AWADDR,
        s_axi_CTL_WVALID,
        s_axi_CTL_WREADY,
        s_axi_CTL_WDATA,
        s_axi_CTL_WSTRB,
        s_axi_CTL_ARVALID,
        s_axi_CTL_ARREADY,
        s_axi_CTL_ARADDR,
        s_axi_CTL_RVALID,
        s_axi_CTL_RREADY,
        s_axi_CTL_RDATA,
        s_axi_CTL_RRESP,
        s_axi_CTL_BVALID,
        s_axi_CTL_BREADY,
        s_axi_CTL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_pp0_stage0 = 37'd4194304;
parameter    ap_ST_fsm_pp0_stage1 = 37'd8388608;
parameter    ap_ST_fsm_pp0_stage2 = 37'd16777216;
parameter    ap_ST_fsm_pp0_stage3 = 37'd33554432;
parameter    ap_ST_fsm_pp0_stage4 = 37'd67108864;
parameter    ap_ST_fsm_pp0_stage5 = 37'd134217728;
parameter    ap_ST_fsm_pp0_stage6 = 37'd268435456;
parameter    ap_ST_fsm_pp0_stage7 = 37'd536870912;
parameter    ap_ST_fsm_pp0_stage8 = 37'd1073741824;
parameter    ap_ST_fsm_pp0_stage9 = 37'd2147483648;
parameter    ap_ST_fsm_pp0_stage10 = 37'd4294967296;
parameter    ap_ST_fsm_pp0_stage11 = 37'd8589934592;
parameter    ap_ST_fsm_pp0_stage12 = 37'd17179869184;
parameter    ap_ST_fsm_state166 = 37'd34359738368;
parameter    ap_ST_fsm_state167 = 37'd68719476736;
parameter    C_S_AXI_CTL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_INPUT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_INPUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_INPUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_INPUT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_INPUT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_INPUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_WEIGHT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_WEIGHT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WEIGHT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_WEIGHT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_WEIGHT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_BIAS_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_BIAS_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BIAS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BIAS_USER_VALUE = 0;
parameter    C_M_AXI_DATA_BIAS_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_BIAS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_OUTPUT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_OUTPUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_OUTPUT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_OUTPUT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_OUTPUT_CACHE_VALUE = 3;

parameter C_S_AXI_CTL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_INPUT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_WEIGHT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_BIAS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_OUTPUT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DATA_INPUT_AWVALID;
input   m_axi_DATA_INPUT_AWREADY;
output  [C_M_AXI_DATA_INPUT_ADDR_WIDTH - 1:0] m_axi_DATA_INPUT_AWADDR;
output  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_AWID;
output  [7:0] m_axi_DATA_INPUT_AWLEN;
output  [2:0] m_axi_DATA_INPUT_AWSIZE;
output  [1:0] m_axi_DATA_INPUT_AWBURST;
output  [1:0] m_axi_DATA_INPUT_AWLOCK;
output  [3:0] m_axi_DATA_INPUT_AWCACHE;
output  [2:0] m_axi_DATA_INPUT_AWPROT;
output  [3:0] m_axi_DATA_INPUT_AWQOS;
output  [3:0] m_axi_DATA_INPUT_AWREGION;
output  [C_M_AXI_DATA_INPUT_AWUSER_WIDTH - 1:0] m_axi_DATA_INPUT_AWUSER;
output   m_axi_DATA_INPUT_WVALID;
input   m_axi_DATA_INPUT_WREADY;
output  [C_M_AXI_DATA_INPUT_DATA_WIDTH - 1:0] m_axi_DATA_INPUT_WDATA;
output  [C_M_AXI_DATA_INPUT_WSTRB_WIDTH - 1:0] m_axi_DATA_INPUT_WSTRB;
output   m_axi_DATA_INPUT_WLAST;
output  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_WID;
output  [C_M_AXI_DATA_INPUT_WUSER_WIDTH - 1:0] m_axi_DATA_INPUT_WUSER;
output   m_axi_DATA_INPUT_ARVALID;
input   m_axi_DATA_INPUT_ARREADY;
output  [C_M_AXI_DATA_INPUT_ADDR_WIDTH - 1:0] m_axi_DATA_INPUT_ARADDR;
output  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_ARID;
output  [7:0] m_axi_DATA_INPUT_ARLEN;
output  [2:0] m_axi_DATA_INPUT_ARSIZE;
output  [1:0] m_axi_DATA_INPUT_ARBURST;
output  [1:0] m_axi_DATA_INPUT_ARLOCK;
output  [3:0] m_axi_DATA_INPUT_ARCACHE;
output  [2:0] m_axi_DATA_INPUT_ARPROT;
output  [3:0] m_axi_DATA_INPUT_ARQOS;
output  [3:0] m_axi_DATA_INPUT_ARREGION;
output  [C_M_AXI_DATA_INPUT_ARUSER_WIDTH - 1:0] m_axi_DATA_INPUT_ARUSER;
input   m_axi_DATA_INPUT_RVALID;
output   m_axi_DATA_INPUT_RREADY;
input  [C_M_AXI_DATA_INPUT_DATA_WIDTH - 1:0] m_axi_DATA_INPUT_RDATA;
input   m_axi_DATA_INPUT_RLAST;
input  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_RID;
input  [C_M_AXI_DATA_INPUT_RUSER_WIDTH - 1:0] m_axi_DATA_INPUT_RUSER;
input  [1:0] m_axi_DATA_INPUT_RRESP;
input   m_axi_DATA_INPUT_BVALID;
output   m_axi_DATA_INPUT_BREADY;
input  [1:0] m_axi_DATA_INPUT_BRESP;
input  [C_M_AXI_DATA_INPUT_ID_WIDTH - 1:0] m_axi_DATA_INPUT_BID;
input  [C_M_AXI_DATA_INPUT_BUSER_WIDTH - 1:0] m_axi_DATA_INPUT_BUSER;
output   m_axi_DATA_WEIGHT_AWVALID;
input   m_axi_DATA_WEIGHT_AWREADY;
output  [C_M_AXI_DATA_WEIGHT_ADDR_WIDTH - 1:0] m_axi_DATA_WEIGHT_AWADDR;
output  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_AWID;
output  [7:0] m_axi_DATA_WEIGHT_AWLEN;
output  [2:0] m_axi_DATA_WEIGHT_AWSIZE;
output  [1:0] m_axi_DATA_WEIGHT_AWBURST;
output  [1:0] m_axi_DATA_WEIGHT_AWLOCK;
output  [3:0] m_axi_DATA_WEIGHT_AWCACHE;
output  [2:0] m_axi_DATA_WEIGHT_AWPROT;
output  [3:0] m_axi_DATA_WEIGHT_AWQOS;
output  [3:0] m_axi_DATA_WEIGHT_AWREGION;
output  [C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_AWUSER;
output   m_axi_DATA_WEIGHT_WVALID;
input   m_axi_DATA_WEIGHT_WREADY;
output  [C_M_AXI_DATA_WEIGHT_DATA_WIDTH - 1:0] m_axi_DATA_WEIGHT_WDATA;
output  [C_M_AXI_DATA_WEIGHT_WSTRB_WIDTH - 1:0] m_axi_DATA_WEIGHT_WSTRB;
output   m_axi_DATA_WEIGHT_WLAST;
output  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_WID;
output  [C_M_AXI_DATA_WEIGHT_WUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_WUSER;
output   m_axi_DATA_WEIGHT_ARVALID;
input   m_axi_DATA_WEIGHT_ARREADY;
output  [C_M_AXI_DATA_WEIGHT_ADDR_WIDTH - 1:0] m_axi_DATA_WEIGHT_ARADDR;
output  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_ARID;
output  [7:0] m_axi_DATA_WEIGHT_ARLEN;
output  [2:0] m_axi_DATA_WEIGHT_ARSIZE;
output  [1:0] m_axi_DATA_WEIGHT_ARBURST;
output  [1:0] m_axi_DATA_WEIGHT_ARLOCK;
output  [3:0] m_axi_DATA_WEIGHT_ARCACHE;
output  [2:0] m_axi_DATA_WEIGHT_ARPROT;
output  [3:0] m_axi_DATA_WEIGHT_ARQOS;
output  [3:0] m_axi_DATA_WEIGHT_ARREGION;
output  [C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_ARUSER;
input   m_axi_DATA_WEIGHT_RVALID;
output   m_axi_DATA_WEIGHT_RREADY;
input  [C_M_AXI_DATA_WEIGHT_DATA_WIDTH - 1:0] m_axi_DATA_WEIGHT_RDATA;
input   m_axi_DATA_WEIGHT_RLAST;
input  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_RID;
input  [C_M_AXI_DATA_WEIGHT_RUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_RUSER;
input  [1:0] m_axi_DATA_WEIGHT_RRESP;
input   m_axi_DATA_WEIGHT_BVALID;
output   m_axi_DATA_WEIGHT_BREADY;
input  [1:0] m_axi_DATA_WEIGHT_BRESP;
input  [C_M_AXI_DATA_WEIGHT_ID_WIDTH - 1:0] m_axi_DATA_WEIGHT_BID;
input  [C_M_AXI_DATA_WEIGHT_BUSER_WIDTH - 1:0] m_axi_DATA_WEIGHT_BUSER;
output   m_axi_DATA_BIAS_AWVALID;
input   m_axi_DATA_BIAS_AWREADY;
output  [C_M_AXI_DATA_BIAS_ADDR_WIDTH - 1:0] m_axi_DATA_BIAS_AWADDR;
output  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_AWID;
output  [7:0] m_axi_DATA_BIAS_AWLEN;
output  [2:0] m_axi_DATA_BIAS_AWSIZE;
output  [1:0] m_axi_DATA_BIAS_AWBURST;
output  [1:0] m_axi_DATA_BIAS_AWLOCK;
output  [3:0] m_axi_DATA_BIAS_AWCACHE;
output  [2:0] m_axi_DATA_BIAS_AWPROT;
output  [3:0] m_axi_DATA_BIAS_AWQOS;
output  [3:0] m_axi_DATA_BIAS_AWREGION;
output  [C_M_AXI_DATA_BIAS_AWUSER_WIDTH - 1:0] m_axi_DATA_BIAS_AWUSER;
output   m_axi_DATA_BIAS_WVALID;
input   m_axi_DATA_BIAS_WREADY;
output  [C_M_AXI_DATA_BIAS_DATA_WIDTH - 1:0] m_axi_DATA_BIAS_WDATA;
output  [C_M_AXI_DATA_BIAS_WSTRB_WIDTH - 1:0] m_axi_DATA_BIAS_WSTRB;
output   m_axi_DATA_BIAS_WLAST;
output  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_WID;
output  [C_M_AXI_DATA_BIAS_WUSER_WIDTH - 1:0] m_axi_DATA_BIAS_WUSER;
output   m_axi_DATA_BIAS_ARVALID;
input   m_axi_DATA_BIAS_ARREADY;
output  [C_M_AXI_DATA_BIAS_ADDR_WIDTH - 1:0] m_axi_DATA_BIAS_ARADDR;
output  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_ARID;
output  [7:0] m_axi_DATA_BIAS_ARLEN;
output  [2:0] m_axi_DATA_BIAS_ARSIZE;
output  [1:0] m_axi_DATA_BIAS_ARBURST;
output  [1:0] m_axi_DATA_BIAS_ARLOCK;
output  [3:0] m_axi_DATA_BIAS_ARCACHE;
output  [2:0] m_axi_DATA_BIAS_ARPROT;
output  [3:0] m_axi_DATA_BIAS_ARQOS;
output  [3:0] m_axi_DATA_BIAS_ARREGION;
output  [C_M_AXI_DATA_BIAS_ARUSER_WIDTH - 1:0] m_axi_DATA_BIAS_ARUSER;
input   m_axi_DATA_BIAS_RVALID;
output   m_axi_DATA_BIAS_RREADY;
input  [C_M_AXI_DATA_BIAS_DATA_WIDTH - 1:0] m_axi_DATA_BIAS_RDATA;
input   m_axi_DATA_BIAS_RLAST;
input  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_RID;
input  [C_M_AXI_DATA_BIAS_RUSER_WIDTH - 1:0] m_axi_DATA_BIAS_RUSER;
input  [1:0] m_axi_DATA_BIAS_RRESP;
input   m_axi_DATA_BIAS_BVALID;
output   m_axi_DATA_BIAS_BREADY;
input  [1:0] m_axi_DATA_BIAS_BRESP;
input  [C_M_AXI_DATA_BIAS_ID_WIDTH - 1:0] m_axi_DATA_BIAS_BID;
input  [C_M_AXI_DATA_BIAS_BUSER_WIDTH - 1:0] m_axi_DATA_BIAS_BUSER;
output   m_axi_DATA_OUTPUT_AWVALID;
input   m_axi_DATA_OUTPUT_AWREADY;
output  [C_M_AXI_DATA_OUTPUT_ADDR_WIDTH - 1:0] m_axi_DATA_OUTPUT_AWADDR;
output  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_AWID;
output  [7:0] m_axi_DATA_OUTPUT_AWLEN;
output  [2:0] m_axi_DATA_OUTPUT_AWSIZE;
output  [1:0] m_axi_DATA_OUTPUT_AWBURST;
output  [1:0] m_axi_DATA_OUTPUT_AWLOCK;
output  [3:0] m_axi_DATA_OUTPUT_AWCACHE;
output  [2:0] m_axi_DATA_OUTPUT_AWPROT;
output  [3:0] m_axi_DATA_OUTPUT_AWQOS;
output  [3:0] m_axi_DATA_OUTPUT_AWREGION;
output  [C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_AWUSER;
output   m_axi_DATA_OUTPUT_WVALID;
input   m_axi_DATA_OUTPUT_WREADY;
output  [C_M_AXI_DATA_OUTPUT_DATA_WIDTH - 1:0] m_axi_DATA_OUTPUT_WDATA;
output  [C_M_AXI_DATA_OUTPUT_WSTRB_WIDTH - 1:0] m_axi_DATA_OUTPUT_WSTRB;
output   m_axi_DATA_OUTPUT_WLAST;
output  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_WID;
output  [C_M_AXI_DATA_OUTPUT_WUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_WUSER;
output   m_axi_DATA_OUTPUT_ARVALID;
input   m_axi_DATA_OUTPUT_ARREADY;
output  [C_M_AXI_DATA_OUTPUT_ADDR_WIDTH - 1:0] m_axi_DATA_OUTPUT_ARADDR;
output  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_ARID;
output  [7:0] m_axi_DATA_OUTPUT_ARLEN;
output  [2:0] m_axi_DATA_OUTPUT_ARSIZE;
output  [1:0] m_axi_DATA_OUTPUT_ARBURST;
output  [1:0] m_axi_DATA_OUTPUT_ARLOCK;
output  [3:0] m_axi_DATA_OUTPUT_ARCACHE;
output  [2:0] m_axi_DATA_OUTPUT_ARPROT;
output  [3:0] m_axi_DATA_OUTPUT_ARQOS;
output  [3:0] m_axi_DATA_OUTPUT_ARREGION;
output  [C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_ARUSER;
input   m_axi_DATA_OUTPUT_RVALID;
output   m_axi_DATA_OUTPUT_RREADY;
input  [C_M_AXI_DATA_OUTPUT_DATA_WIDTH - 1:0] m_axi_DATA_OUTPUT_RDATA;
input   m_axi_DATA_OUTPUT_RLAST;
input  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_RID;
input  [C_M_AXI_DATA_OUTPUT_RUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_RUSER;
input  [1:0] m_axi_DATA_OUTPUT_RRESP;
input   m_axi_DATA_OUTPUT_BVALID;
output   m_axi_DATA_OUTPUT_BREADY;
input  [1:0] m_axi_DATA_OUTPUT_BRESP;
input  [C_M_AXI_DATA_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_OUTPUT_BID;
input  [C_M_AXI_DATA_OUTPUT_BUSER_WIDTH - 1:0] m_axi_DATA_OUTPUT_BUSER;
input   s_axi_CTL_AWVALID;
output   s_axi_CTL_AWREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_AWADDR;
input   s_axi_CTL_WVALID;
output   s_axi_CTL_WREADY;
input  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_WDATA;
input  [C_S_AXI_CTL_WSTRB_WIDTH - 1:0] s_axi_CTL_WSTRB;
input   s_axi_CTL_ARVALID;
output   s_axi_CTL_ARREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_ARADDR;
output   s_axi_CTL_RVALID;
input   s_axi_CTL_RREADY;
output  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_RDATA;
output  [1:0] s_axi_CTL_RRESP;
output   s_axi_CTL_BVALID;
input   s_axi_CTL_BREADY;
output  [1:0] s_axi_CTL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] weights;
wire   [31:0] bias;
wire   [31:0] output_r;
wire   [31:0] ap_return;
reg    DATA_INPUT_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    DATA_INPUT_blk_n_R;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond8_fu_1065_p2;
reg    DATA_WEIGHT_blk_n_AR;
wire    ap_CS_fsm_state14;
reg    DATA_WEIGHT_blk_n_R;
wire    ap_CS_fsm_state21;
wire   [0:0] exitcond5_fu_1178_p2;
reg    DATA_BIAS_blk_n_AR;
wire    ap_CS_fsm_pp0_stage7;
reg    ap_enable_reg_pp0_iter9;
wire    ap_block_pp0_stage7;
reg   [0:0] exitcond_flatten1_reg_2166;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter9_reg;
reg    DATA_BIAS_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter10;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter10_reg;
reg    DATA_OUTPUT_blk_n_AW;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
reg    DATA_OUTPUT_blk_n_W;
reg    DATA_OUTPUT_blk_n_B;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    DATA_INPUT_AWREADY;
wire    DATA_INPUT_WREADY;
reg    DATA_INPUT_ARVALID;
wire    DATA_INPUT_ARREADY;
wire   [31:0] DATA_INPUT_ARADDR;
wire    DATA_INPUT_RVALID;
reg    DATA_INPUT_RREADY;
wire   [31:0] DATA_INPUT_RDATA;
wire    DATA_INPUT_RLAST;
wire   [0:0] DATA_INPUT_RID;
wire   [0:0] DATA_INPUT_RUSER;
wire   [1:0] DATA_INPUT_RRESP;
wire    DATA_INPUT_BVALID;
wire   [1:0] DATA_INPUT_BRESP;
wire   [0:0] DATA_INPUT_BID;
wire   [0:0] DATA_INPUT_BUSER;
wire    DATA_WEIGHT_AWREADY;
wire    DATA_WEIGHT_WREADY;
reg    DATA_WEIGHT_ARVALID;
wire    DATA_WEIGHT_ARREADY;
wire    DATA_WEIGHT_RVALID;
reg    DATA_WEIGHT_RREADY;
wire   [31:0] DATA_WEIGHT_RDATA;
wire    DATA_WEIGHT_RLAST;
wire   [0:0] DATA_WEIGHT_RID;
wire   [0:0] DATA_WEIGHT_RUSER;
wire   [1:0] DATA_WEIGHT_RRESP;
wire    DATA_WEIGHT_BVALID;
wire   [1:0] DATA_WEIGHT_BRESP;
wire   [0:0] DATA_WEIGHT_BID;
wire   [0:0] DATA_WEIGHT_BUSER;
wire    DATA_BIAS_AWREADY;
wire    DATA_BIAS_WREADY;
reg    DATA_BIAS_ARVALID;
wire    DATA_BIAS_ARREADY;
wire   [31:0] DATA_BIAS_ARADDR;
wire    DATA_BIAS_RVALID;
reg    DATA_BIAS_RREADY;
wire   [31:0] DATA_BIAS_RDATA;
wire    DATA_BIAS_RLAST;
wire   [0:0] DATA_BIAS_RID;
wire   [0:0] DATA_BIAS_RUSER;
wire   [1:0] DATA_BIAS_RRESP;
wire    DATA_BIAS_BVALID;
wire   [1:0] DATA_BIAS_BRESP;
wire   [0:0] DATA_BIAS_BID;
wire   [0:0] DATA_BIAS_BUSER;
reg    DATA_OUTPUT_AWVALID;
wire    DATA_OUTPUT_AWREADY;
reg    DATA_OUTPUT_WVALID;
wire    DATA_OUTPUT_WREADY;
wire    DATA_OUTPUT_ARREADY;
wire    DATA_OUTPUT_RVALID;
wire   [31:0] DATA_OUTPUT_RDATA;
wire    DATA_OUTPUT_RLAST;
wire   [0:0] DATA_OUTPUT_RID;
wire   [0:0] DATA_OUTPUT_RUSER;
wire   [1:0] DATA_OUTPUT_RRESP;
wire    DATA_OUTPUT_BVALID;
reg    DATA_OUTPUT_BREADY;
wire   [1:0] DATA_OUTPUT_BRESP;
wire   [0:0] DATA_OUTPUT_BID;
wire   [0:0] DATA_OUTPUT_BUSER;
reg   [12:0] indvar_flatten1_reg_749;
reg   [2:0] co_reg_760;
reg   [9:0] indvar_flatten_reg_771;
reg   [4:0] h_reg_782;
reg   [4:0] w_reg_794;
wire   [31:0] weights_oc_0_q0;
reg   [31:0] reg_822;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state25_pp0_stage2_iter0;
wire    ap_block_state38_pp0_stage2_iter1;
wire    ap_block_state51_pp0_stage2_iter2;
wire    ap_block_state64_pp0_stage2_iter3;
wire    ap_block_state77_pp0_stage2_iter4;
wire    ap_block_state90_pp0_stage2_iter5;
wire    ap_block_state103_pp0_stage2_iter6;
wire    ap_block_state116_pp0_stage2_iter7;
wire    ap_block_state129_pp0_stage2_iter8;
wire    ap_block_state142_pp0_stage2_iter9;
wire    ap_block_state155_pp0_stage2_iter10;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] weights_oc_0_q1;
wire    ap_block_state29_pp0_stage6_iter0;
wire    ap_block_state42_pp0_stage6_iter1;
wire    ap_block_state55_pp0_stage6_iter2;
wire    ap_block_state68_pp0_stage6_iter3;
wire    ap_block_state81_pp0_stage6_iter4;
wire    ap_block_state94_pp0_stage6_iter5;
wire    ap_block_state107_pp0_stage6_iter6;
wire    ap_block_state120_pp0_stage6_iter7;
wire    ap_block_state133_pp0_stage6_iter8;
wire    ap_block_state146_pp0_stage6_iter9;
wire    ap_block_state159_pp0_stage6_iter10;
reg    ap_sig_ioackin_DATA_OUTPUT_AWREADY;
reg    ap_block_state159_io;
reg    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state33_pp0_stage10_iter0;
wire    ap_block_state46_pp0_stage10_iter1;
wire    ap_block_state59_pp0_stage10_iter2;
wire    ap_block_state72_pp0_stage10_iter3;
wire    ap_block_state85_pp0_stage10_iter4;
wire    ap_block_state98_pp0_stage10_iter5;
wire    ap_block_state111_pp0_stage10_iter6;
wire    ap_block_state124_pp0_stage10_iter7;
wire    ap_block_state137_pp0_stage10_iter8;
wire    ap_block_state150_pp0_stage10_iter9;
wire    ap_block_state163_pp0_stage10_iter10;
wire    ap_block_pp0_stage10_11001;
reg   [31:0] reg_828;
wire   [31:0] input_oc_0_q0;
reg   [31:0] reg_834;
wire   [31:0] input_oc_0_q1;
reg   [31:0] reg_840;
reg   [31:0] reg_846;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state26_pp0_stage3_iter0;
wire    ap_block_state39_pp0_stage3_iter1;
wire    ap_block_state52_pp0_stage3_iter2;
wire    ap_block_state65_pp0_stage3_iter3;
wire    ap_block_state78_pp0_stage3_iter4;
wire    ap_block_state91_pp0_stage3_iter5;
wire    ap_block_state104_pp0_stage3_iter6;
wire    ap_block_state117_pp0_stage3_iter7;
wire    ap_block_state130_pp0_stage3_iter8;
wire    ap_block_state143_pp0_stage3_iter9;
wire    ap_block_state156_pp0_stage3_iter10;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_state30_pp0_stage7_iter0;
wire    ap_block_state43_pp0_stage7_iter1;
wire    ap_block_state56_pp0_stage7_iter2;
wire    ap_block_state69_pp0_stage7_iter3;
wire    ap_block_state82_pp0_stage7_iter4;
wire    ap_block_state95_pp0_stage7_iter5;
wire    ap_block_state108_pp0_stage7_iter6;
wire    ap_block_state121_pp0_stage7_iter7;
wire    ap_block_state134_pp0_stage7_iter8;
wire    ap_block_state147_pp0_stage7_iter9;
reg    ap_sig_ioackin_DATA_BIAS_ARREADY;
reg    ap_block_state147_io;
wire    ap_block_state160_pp0_stage7_iter10;
reg    ap_sig_ioackin_DATA_OUTPUT_WREADY;
reg    ap_block_state160_io;
reg    ap_block_pp0_stage7_11001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state34_pp0_stage11_iter0;
wire    ap_block_state47_pp0_stage11_iter1;
wire    ap_block_state60_pp0_stage11_iter2;
wire    ap_block_state73_pp0_stage11_iter3;
wire    ap_block_state86_pp0_stage11_iter4;
wire    ap_block_state99_pp0_stage11_iter5;
wire    ap_block_state112_pp0_stage11_iter6;
wire    ap_block_state125_pp0_stage11_iter7;
wire    ap_block_state138_pp0_stage11_iter8;
wire    ap_block_state151_pp0_stage11_iter9;
wire    ap_block_state164_pp0_stage11_iter10;
wire    ap_block_pp0_stage11_11001;
reg   [31:0] reg_851;
reg   [31:0] reg_856;
reg   [31:0] reg_861;
reg   [31:0] reg_866;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state27_pp0_stage4_iter0;
wire    ap_block_state40_pp0_stage4_iter1;
wire    ap_block_state53_pp0_stage4_iter2;
wire    ap_block_state66_pp0_stage4_iter3;
wire    ap_block_state79_pp0_stage4_iter4;
wire    ap_block_state92_pp0_stage4_iter5;
wire    ap_block_state105_pp0_stage4_iter6;
wire    ap_block_state118_pp0_stage4_iter7;
wire    ap_block_state131_pp0_stage4_iter8;
wire    ap_block_state144_pp0_stage4_iter9;
wire    ap_block_state157_pp0_stage4_iter10;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state31_pp0_stage8_iter0;
wire    ap_block_state44_pp0_stage8_iter1;
wire    ap_block_state57_pp0_stage8_iter2;
wire    ap_block_state70_pp0_stage8_iter3;
wire    ap_block_state83_pp0_stage8_iter4;
wire    ap_block_state96_pp0_stage8_iter5;
wire    ap_block_state109_pp0_stage8_iter6;
wire    ap_block_state122_pp0_stage8_iter7;
wire    ap_block_state135_pp0_stage8_iter8;
wire    ap_block_state148_pp0_stage8_iter9;
wire    ap_block_state161_pp0_stage8_iter10;
wire    ap_block_pp0_stage8_11001;
wire    ap_block_state35_pp0_stage12_iter0;
wire    ap_block_state48_pp0_stage12_iter1;
wire    ap_block_state61_pp0_stage12_iter2;
wire    ap_block_state74_pp0_stage12_iter3;
wire    ap_block_state87_pp0_stage12_iter4;
wire    ap_block_state100_pp0_stage12_iter5;
wire    ap_block_state113_pp0_stage12_iter6;
wire    ap_block_state126_pp0_stage12_iter7;
wire    ap_block_state139_pp0_stage12_iter8;
wire    ap_block_state152_pp0_stage12_iter9;
reg    ap_block_state165_pp0_stage12_iter10;
reg    ap_block_pp0_stage12_11001;
reg   [31:0] reg_871;
reg   [31:0] reg_876;
reg   [31:0] reg_881;
reg   [31:0] reg_886;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state28_pp0_stage5_iter0;
wire    ap_block_state41_pp0_stage5_iter1;
wire    ap_block_state54_pp0_stage5_iter2;
wire    ap_block_state67_pp0_stage5_iter3;
wire    ap_block_state80_pp0_stage5_iter4;
wire    ap_block_state93_pp0_stage5_iter5;
wire    ap_block_state106_pp0_stage5_iter6;
wire    ap_block_state119_pp0_stage5_iter7;
wire    ap_block_state132_pp0_stage5_iter8;
wire    ap_block_state145_pp0_stage5_iter9;
wire    ap_block_state158_pp0_stage5_iter10;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state32_pp0_stage9_iter0;
wire    ap_block_state45_pp0_stage9_iter1;
wire    ap_block_state58_pp0_stage9_iter2;
wire    ap_block_state71_pp0_stage9_iter3;
wire    ap_block_state84_pp0_stage9_iter4;
wire    ap_block_state97_pp0_stage9_iter5;
wire    ap_block_state110_pp0_stage9_iter6;
wire    ap_block_state123_pp0_stage9_iter7;
wire    ap_block_state136_pp0_stage9_iter8;
wire    ap_block_state149_pp0_stage9_iter9;
wire    ap_block_state162_pp0_stage9_iter10;
wire    ap_block_pp0_stage9_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state23_pp0_stage0_iter0;
wire    ap_block_state36_pp0_stage0_iter1;
wire    ap_block_state49_pp0_stage0_iter2;
wire    ap_block_state62_pp0_stage0_iter3;
wire    ap_block_state75_pp0_stage0_iter4;
wire    ap_block_state88_pp0_stage0_iter5;
wire    ap_block_state101_pp0_stage0_iter6;
wire    ap_block_state114_pp0_stage0_iter7;
wire    ap_block_state127_pp0_stage0_iter8;
wire    ap_block_state140_pp0_stage0_iter9;
wire    ap_block_state153_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] reg_891;
reg   [31:0] reg_896;
reg   [31:0] reg_901;
wire   [31:0] grp_fu_805_p2;
reg   [31:0] reg_906;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter1_reg;
reg   [31:0] reg_911;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] reg_916;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter2_reg;
reg   [31:0] reg_921;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter3_reg;
reg   [31:0] reg_926;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter4_reg;
reg   [31:0] reg_931;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_state24_pp0_stage1_iter0;
wire    ap_block_state37_pp0_stage1_iter1;
wire    ap_block_state50_pp0_stage1_iter2;
wire    ap_block_state63_pp0_stage1_iter3;
wire    ap_block_state76_pp0_stage1_iter4;
wire    ap_block_state89_pp0_stage1_iter5;
wire    ap_block_state102_pp0_stage1_iter6;
wire    ap_block_state115_pp0_stage1_iter7;
wire    ap_block_state128_pp0_stage1_iter8;
wire    ap_block_state141_pp0_stage1_iter9;
reg    ap_block_state154_pp0_stage1_iter10;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter5_reg;
wire   [31:0] grp_fu_810_p2;
reg   [31:0] reg_936;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter6_reg;
reg   [31:0] reg_941;
reg    ap_enable_reg_pp0_iter7;
reg   [31:0] reg_947;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter7_reg;
reg   [31:0] reg_952;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] exitcond_flatten1_reg_2166_pp0_iter8_reg;
reg   [31:0] reg_957;
reg   [31:0] reg_962;
wire   [63:0] tmp_fu_977_p1;
reg   [63:0] tmp_reg_2048;
wire   [30:0] tmp_10_cast_fu_991_p1;
reg   [30:0] tmp_10_cast_reg_2053;
wire   [63:0] tmp_3_fu_1005_p1;
reg   [63:0] tmp_3_reg_2058;
wire   [30:0] tmp_12_cast_fu_1019_p1;
reg   [30:0] tmp_12_cast_reg_2063;
wire   [5:0] i_1_fu_1029_p2;
reg   [5:0] i_1_reg_2071;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_7_fu_1035_p3;
reg   [10:0] tmp_7_reg_2076;
wire   [0:0] exitcond9_fu_1023_p2;
wire   [30:0] tmp_10_fu_1047_p2;
reg   [30:0] tmp_10_reg_2081;
reg    ap_sig_ioackin_DATA_INPUT_ARREADY;
wire   [11:0] tmp_14_cast_fu_1062_p1;
reg   [11:0] tmp_14_cast_reg_2092;
wire    ap_CS_fsm_state9;
wire   [5:0] j_1_fu_1071_p2;
reg   [5:0] j_1_reg_2100;
reg    ap_block_state10;
wire   [11:0] tmp_14_fu_1081_p2;
reg   [11:0] tmp_14_reg_2105;
reg   [31:0] DATA_INPUT_addr_read_reg_2110;
wire   [0:0] exitcond7_fu_1090_p2;
wire    ap_CS_fsm_state12;
wire   [2:0] i_2_fu_1096_p2;
reg   [2:0] i_2_reg_2119;
wire   [5:0] tmp_13_fu_1118_p2;
reg   [5:0] tmp_13_reg_2124;
wire   [2:0] j_2_fu_1130_p2;
reg   [2:0] j_2_reg_2132;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_73_fu_1161_p2;
reg   [63:0] tmp_73_reg_2137;
wire   [0:0] exitcond6_fu_1124_p2;
reg   [31:0] DATA_WEIGHT_addr_reg_2142;
wire   [2:0] k_1_fu_1184_p2;
reg   [2:0] k_1_reg_2151;
reg    ap_block_state21;
wire   [63:0] tmp_74_fu_1194_p2;
reg   [63:0] tmp_74_reg_2156;
reg   [31:0] DATA_WEIGHT_addr_rea_reg_2161;
wire   [0:0] exitcond_flatten1_fu_1199_p2;
wire   [12:0] indvar_flatten_next1_fu_1205_p2;
reg   [12:0] indvar_flatten_next1_reg_2170;
wire   [0:0] exitcond_flatten_fu_1217_p2;
reg   [0:0] exitcond_flatten_reg_2175;
wire   [2:0] tmp_5_mid2_fu_1223_p3;
reg   [2:0] tmp_5_mid2_reg_2185;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter1_reg;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter2_reg;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter3_reg;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter4_reg;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter5_reg;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter6_reg;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter7_reg;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter8_reg;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter9_reg;
reg   [2:0] tmp_5_mid2_reg_2185_pp0_iter10_reg;
wire   [8:0] weights_oc_0_load_m_fu_1235_p2;
reg   [8:0] weights_oc_0_load_m_reg_2193;
wire   [7:0] tmp_18_fu_1241_p1;
reg   [7:0] tmp_18_reg_2198;
wire   [0:0] exitcond2_mid_fu_1257_p2;
reg   [0:0] exitcond2_mid_reg_2226;
wire   [4:0] w_mid2_fu_1269_p3;
reg   [4:0] w_mid2_reg_2235;
reg   [4:0] w_mid2_reg_2235_pp0_iter1_reg;
reg   [4:0] w_mid2_reg_2235_pp0_iter2_reg;
reg   [4:0] w_mid2_reg_2235_pp0_iter3_reg;
reg   [4:0] w_mid2_reg_2235_pp0_iter4_reg;
reg   [4:0] w_mid2_reg_2235_pp0_iter5_reg;
reg   [4:0] w_mid2_reg_2235_pp0_iter6_reg;
reg   [4:0] w_mid2_reg_2235_pp0_iter7_reg;
reg   [4:0] w_mid2_reg_2235_pp0_iter8_reg;
reg   [4:0] w_mid2_reg_2235_pp0_iter9_reg;
reg   [4:0] w_mid2_reg_2235_pp0_iter10_reg;
wire   [9:0] indvar_flatten_op_fu_1277_p2;
reg   [9:0] indvar_flatten_op_reg_2249;
wire   [4:0] h_mid_fu_1283_p3;
reg   [4:0] h_mid_reg_2254;
wire   [4:0] tmp_9_mid2_fu_1310_p3;
reg   [4:0] tmp_9_mid2_reg_2272;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter1_reg;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter2_reg;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter3_reg;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter4_reg;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter5_reg;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter6_reg;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter7_reg;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter8_reg;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter9_reg;
reg   [4:0] tmp_9_mid2_reg_2272_pp0_iter10_reg;
wire   [4:0] w_1_fu_1329_p2;
reg   [4:0] w_1_reg_2286;
wire   [4:0] tmp_12_0_2_fu_1367_p2;
reg   [4:0] tmp_12_0_2_reg_2310;
wire   [4:0] tmp_12_0_3_fu_1384_p2;
reg   [4:0] tmp_12_0_3_reg_2323;
wire   [4:0] tmp_25_fu_1439_p3;
reg   [4:0] tmp_25_reg_2346;
wire   [4:0] tmp_12_0_4_fu_1458_p2;
reg   [4:0] tmp_12_0_4_reg_2359;
wire   [4:0] tmp_27_fu_1597_p3;
reg   [4:0] tmp_27_reg_2422;
wire   [4:0] tmp_29_fu_1622_p3;
reg   [4:0] tmp_29_reg_2429;
wire   [4:0] tmp_31_fu_1647_p3;
reg   [4:0] tmp_31_reg_2438;
wire   [31:0] grp_fu_814_p2;
reg   [31:0] tmp_8_reg_2452;
wire   [31:0] grp_fu_818_p2;
reg   [31:0] tmp_14_0_1_reg_2462;
wire   [9:0] indvar_flatten_next_fu_1678_p3;
reg   [9:0] indvar_flatten_next_reg_2467;
reg   [31:0] tmp_14_0_2_reg_2487;
reg   [31:0] tmp_14_0_3_reg_2497;
reg   [31:0] tmp_14_0_3_reg_2497_pp0_iter1_reg;
reg   [31:0] tmp_14_0_4_reg_2522;
reg   [31:0] tmp_14_0_4_reg_2522_pp0_iter1_reg;
reg   [31:0] tmp_14_1_reg_2527;
reg   [31:0] tmp_14_1_reg_2527_pp0_iter1_reg;
reg   [31:0] tmp_14_1_1_reg_2552;
reg   [31:0] tmp_14_1_1_reg_2552_pp0_iter1_reg;
reg   [31:0] tmp_14_1_1_reg_2552_pp0_iter2_reg;
reg   [31:0] tmp_14_1_2_reg_2557;
reg   [31:0] tmp_14_1_2_reg_2557_pp0_iter1_reg;
reg   [31:0] tmp_14_1_2_reg_2557_pp0_iter2_reg;
reg   [31:0] tmp_14_1_3_reg_2582;
reg   [31:0] tmp_14_1_3_reg_2582_pp0_iter1_reg;
reg   [31:0] tmp_14_1_3_reg_2582_pp0_iter2_reg;
reg   [31:0] tmp_14_1_4_reg_2587;
reg   [31:0] tmp_14_1_4_reg_2587_pp0_iter1_reg;
reg   [31:0] tmp_14_1_4_reg_2587_pp0_iter2_reg;
reg   [31:0] tmp_14_1_4_reg_2587_pp0_iter3_reg;
reg   [31:0] tmp_14_2_reg_2612;
reg   [31:0] tmp_14_2_reg_2612_pp0_iter1_reg;
reg   [31:0] tmp_14_2_reg_2612_pp0_iter2_reg;
reg   [31:0] tmp_14_2_reg_2612_pp0_iter3_reg;
reg   [31:0] tmp_14_2_1_reg_2617;
reg   [31:0] tmp_14_2_1_reg_2617_pp0_iter1_reg;
reg   [31:0] tmp_14_2_1_reg_2617_pp0_iter2_reg;
reg   [31:0] tmp_14_2_1_reg_2617_pp0_iter3_reg;
reg   [31:0] tmp_14_2_2_reg_2642;
reg   [31:0] tmp_14_2_2_reg_2642_pp0_iter1_reg;
reg   [31:0] tmp_14_2_2_reg_2642_pp0_iter2_reg;
reg   [31:0] tmp_14_2_2_reg_2642_pp0_iter3_reg;
reg   [31:0] tmp_14_2_2_reg_2642_pp0_iter4_reg;
reg   [31:0] tmp_14_2_3_reg_2647;
reg   [31:0] tmp_14_2_3_reg_2647_pp0_iter1_reg;
reg   [31:0] tmp_14_2_3_reg_2647_pp0_iter2_reg;
reg   [31:0] tmp_14_2_3_reg_2647_pp0_iter3_reg;
reg   [31:0] tmp_14_2_3_reg_2647_pp0_iter4_reg;
reg   [31:0] tmp_14_2_4_reg_2662;
reg   [31:0] tmp_14_2_4_reg_2662_pp0_iter2_reg;
reg   [31:0] tmp_14_2_4_reg_2662_pp0_iter3_reg;
reg   [31:0] tmp_14_2_4_reg_2662_pp0_iter4_reg;
reg   [31:0] tmp_14_2_4_reg_2662_pp0_iter5_reg;
reg   [31:0] tmp_14_3_reg_2667;
reg   [31:0] tmp_14_3_reg_2667_pp0_iter2_reg;
reg   [31:0] tmp_14_3_reg_2667_pp0_iter3_reg;
reg   [31:0] tmp_14_3_reg_2667_pp0_iter4_reg;
reg   [31:0] tmp_14_3_reg_2667_pp0_iter5_reg;
reg   [31:0] tmp_14_3_reg_2667_pp0_iter6_reg;
reg   [31:0] weights_oc_0_load_24_reg_2672;
reg   [31:0] tmp_14_3_1_reg_2677;
reg   [31:0] tmp_14_3_1_reg_2677_pp0_iter2_reg;
reg   [31:0] tmp_14_3_1_reg_2677_pp0_iter3_reg;
reg   [31:0] tmp_14_3_1_reg_2677_pp0_iter4_reg;
reg   [31:0] tmp_14_3_1_reg_2677_pp0_iter5_reg;
reg   [31:0] tmp_14_3_1_reg_2677_pp0_iter6_reg;
reg   [31:0] tmp_14_3_2_reg_2682;
reg   [31:0] tmp_14_3_2_reg_2682_pp0_iter2_reg;
reg   [31:0] tmp_14_3_2_reg_2682_pp0_iter3_reg;
reg   [31:0] tmp_14_3_2_reg_2682_pp0_iter4_reg;
reg   [31:0] tmp_14_3_2_reg_2682_pp0_iter5_reg;
reg   [31:0] tmp_14_3_2_reg_2682_pp0_iter6_reg;
reg   [31:0] input_oc_0_load_24_reg_2687;
reg   [31:0] tmp_14_3_3_reg_2692;
reg   [31:0] tmp_14_3_3_reg_2692_pp0_iter2_reg;
reg   [31:0] tmp_14_3_3_reg_2692_pp0_iter3_reg;
reg   [31:0] tmp_14_3_3_reg_2692_pp0_iter4_reg;
reg   [31:0] tmp_14_3_3_reg_2692_pp0_iter5_reg;
reg   [31:0] tmp_14_3_3_reg_2692_pp0_iter6_reg;
reg   [31:0] tmp_14_3_3_reg_2692_pp0_iter7_reg;
reg   [31:0] tmp_14_3_4_reg_2697;
reg   [31:0] tmp_14_3_4_reg_2697_pp0_iter2_reg;
reg   [31:0] tmp_14_3_4_reg_2697_pp0_iter3_reg;
reg   [31:0] tmp_14_3_4_reg_2697_pp0_iter4_reg;
reg   [31:0] tmp_14_3_4_reg_2697_pp0_iter5_reg;
reg   [31:0] tmp_14_3_4_reg_2697_pp0_iter6_reg;
reg   [31:0] tmp_14_3_4_reg_2697_pp0_iter7_reg;
reg   [31:0] tmp_14_4_reg_2702;
reg   [31:0] tmp_14_4_reg_2702_pp0_iter2_reg;
reg   [31:0] tmp_14_4_reg_2702_pp0_iter3_reg;
reg   [31:0] tmp_14_4_reg_2702_pp0_iter4_reg;
reg   [31:0] tmp_14_4_reg_2702_pp0_iter5_reg;
reg   [31:0] tmp_14_4_reg_2702_pp0_iter6_reg;
reg   [31:0] tmp_14_4_reg_2702_pp0_iter7_reg;
reg   [31:0] tmp_14_4_1_reg_2707;
reg   [31:0] tmp_14_4_1_reg_2707_pp0_iter2_reg;
reg   [31:0] tmp_14_4_1_reg_2707_pp0_iter3_reg;
reg   [31:0] tmp_14_4_1_reg_2707_pp0_iter4_reg;
reg   [31:0] tmp_14_4_1_reg_2707_pp0_iter5_reg;
reg   [31:0] tmp_14_4_1_reg_2707_pp0_iter6_reg;
reg   [31:0] tmp_14_4_1_reg_2707_pp0_iter7_reg;
reg   [31:0] tmp_14_4_1_reg_2707_pp0_iter8_reg;
reg   [31:0] tmp_14_4_2_reg_2712;
reg   [31:0] tmp_14_4_2_reg_2712_pp0_iter2_reg;
reg   [31:0] tmp_14_4_2_reg_2712_pp0_iter3_reg;
reg   [31:0] tmp_14_4_2_reg_2712_pp0_iter4_reg;
reg   [31:0] tmp_14_4_2_reg_2712_pp0_iter5_reg;
reg   [31:0] tmp_14_4_2_reg_2712_pp0_iter6_reg;
reg   [31:0] tmp_14_4_2_reg_2712_pp0_iter7_reg;
reg   [31:0] tmp_14_4_2_reg_2712_pp0_iter8_reg;
reg   [31:0] tmp_14_4_3_reg_2717;
reg   [31:0] tmp_14_4_3_reg_2717_pp0_iter2_reg;
reg   [31:0] tmp_14_4_3_reg_2717_pp0_iter3_reg;
reg   [31:0] tmp_14_4_3_reg_2717_pp0_iter4_reg;
reg   [31:0] tmp_14_4_3_reg_2717_pp0_iter5_reg;
reg   [31:0] tmp_14_4_3_reg_2717_pp0_iter6_reg;
reg   [31:0] tmp_14_4_3_reg_2717_pp0_iter7_reg;
reg   [31:0] tmp_14_4_3_reg_2717_pp0_iter8_reg;
reg   [31:0] tmp_14_4_3_reg_2717_pp0_iter9_reg;
reg   [31:0] tmp_14_4_4_reg_2722;
reg   [31:0] tmp_14_4_4_reg_2722_pp0_iter2_reg;
reg   [31:0] tmp_14_4_4_reg_2722_pp0_iter3_reg;
reg   [31:0] tmp_14_4_4_reg_2722_pp0_iter4_reg;
reg   [31:0] tmp_14_4_4_reg_2722_pp0_iter5_reg;
reg   [31:0] tmp_14_4_4_reg_2722_pp0_iter6_reg;
reg   [31:0] tmp_14_4_4_reg_2722_pp0_iter7_reg;
reg   [31:0] tmp_14_4_4_reg_2722_pp0_iter8_reg;
reg   [31:0] tmp_14_4_4_reg_2722_pp0_iter9_reg;
reg   [31:0] sum_2_2_2_reg_2727;
wire   [30:0] bias6_sum_fu_1960_p2;
reg   [30:0] bias6_sum_reg_2732;
reg   [31:0] DATA_BIAS_addr_read_reg_2743;
wire   [63:0] tmp_20_fu_2006_p2;
reg   [63:0] tmp_20_reg_2748;
reg   [31:0] DATA_OUTPUT_addr_reg_2754;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state23;
reg    ap_block_pp0_stage12_subdone;
reg   [9:0] input_oc_0_address0;
reg    input_oc_0_ce0;
reg    input_oc_0_we0;
reg   [9:0] input_oc_0_address1;
reg    input_oc_0_ce1;
reg   [7:0] weights_oc_0_address0;
reg    weights_oc_0_ce0;
reg    weights_oc_0_we0;
reg   [7:0] weights_oc_0_address1;
reg    weights_oc_0_ce1;
reg   [5:0] i_reg_694;
reg   [5:0] j_reg_705;
wire    ap_CS_fsm_state11;
reg   [2:0] i1_reg_716;
reg   [2:0] j2_reg_727;
reg   [2:0] k_reg_738;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state20;
reg   [12:0] ap_phi_mux_indvar_flatten1_phi_fu_753_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_co_phi_fu_764_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_775_p4;
reg   [4:0] ap_phi_mux_h_phi_fu_786_p4;
reg   [4:0] ap_phi_mux_w_phi_fu_798_p4;
wire   [63:0] tmp_17_cast_fu_1086_p1;
wire   [63:0] weights_oc_0_load_m_2_fu_1290_p1;
wire   [63:0] weights_oc_0_load_1_11_fu_1299_p1;
wire   [63:0] tmp_34_fu_1324_p1;
wire   [63:0] tmp_44_fu_1342_p1;
wire   [63:0] weights_oc_0_load_2_3_fu_1352_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] weights_oc_0_load_3_1_fu_1362_p1;
wire   [63:0] tmp_54_fu_1379_p1;
wire   [63:0] tmp_61_fu_1396_p1;
wire   [63:0] weights_oc_0_load_4_1_fu_1406_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] weights_oc_0_load_5_1_fu_1416_p1;
wire   [63:0] tmp_36_fu_1453_p1;
wire   [63:0] tmp_66_fu_1470_p1;
wire   [63:0] weights_oc_0_load_6_1_fu_1480_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] weights_oc_0_load_7_1_fu_1490_p1;
wire   [63:0] tmp_46_fu_1501_p1;
wire   [63:0] tmp_56_fu_1512_p1;
wire   [63:0] weights_oc_0_load_8_1_fu_1522_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] weights_oc_0_load_9_1_fu_1532_p1;
wire   [63:0] tmp_62_fu_1543_p1;
wire   [63:0] tmp_67_fu_1554_p1;
wire   [63:0] weights_oc_0_load_1_12_fu_1564_p1;
wire   [63:0] weights_oc_0_load_1_13_fu_1574_p1;
wire   [63:0] tmp_38_fu_1661_p1;
wire   [63:0] tmp_48_fu_1673_p1;
wire   [63:0] weights_oc_0_load_1_14_fu_1689_p1;
wire   [63:0] weights_oc_0_load_1_16_fu_1699_p1;
wire   [63:0] tmp_58_fu_1710_p1;
wire   [63:0] tmp_63_fu_1721_p1;
wire   [63:0] weights_oc_0_load_1_17_fu_1731_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] weights_oc_0_load_1_18_fu_1741_p1;
wire   [63:0] tmp_40_fu_1752_p1;
wire   [63:0] tmp_68_fu_1763_p1;
wire   [63:0] weights_oc_0_load_1_19_fu_1773_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] weights_oc_0_load_1_20_fu_1783_p1;
wire   [63:0] tmp_50_fu_1794_p1;
wire   [63:0] tmp_59_fu_1805_p1;
wire   [63:0] weights_oc_0_load_1_21_fu_1815_p1;
wire    ap_block_pp0_stage10;
wire   [63:0] weights_oc_0_load_1_22_fu_1825_p1;
wire   [63:0] tmp_64_fu_1836_p1;
wire   [63:0] tmp_69_fu_1847_p1;
wire   [63:0] weights_oc_0_load_2_5_fu_1857_p1;
wire    ap_block_pp0_stage11;
wire   [63:0] weights_oc_0_load_2_7_fu_1867_p1;
wire   [63:0] tmp_42_fu_1878_p1;
wire   [63:0] tmp_52_fu_1889_p1;
wire   [63:0] weights_oc_0_load_2_9_fu_1899_p1;
wire   [63:0] weights_oc_0_load_2_11_fu_1909_p1;
wire   [63:0] tmp_60_fu_1920_p1;
wire   [63:0] tmp_65_fu_1931_p1;
wire   [63:0] weights_oc_0_load_2_12_fu_1941_p1;
wire   [63:0] tmp_70_fu_1952_p1;
wire   [63:0] tmp_11_fu_1052_p1;
wire   [63:0] tmp_87_fu_1167_p2;
wire   [63:0] bias6_sum_cast_fu_1965_p1;
wire   [63:0] output8_sum_fu_2037_p2;
reg    ap_reg_ioackin_DATA_INPUT_ARREADY;
reg    ap_reg_ioackin_DATA_WEIGHT_ARREADY;
reg    ap_sig_ioackin_DATA_WEIGHT_ARREADY;
reg    ap_reg_ioackin_DATA_BIAS_ARREADY;
wire    ap_block_pp0_stage7_01001;
reg    ap_reg_ioackin_DATA_OUTPUT_AWREADY;
wire    ap_block_pp0_stage6_01001;
reg    ap_reg_ioackin_DATA_OUTPUT_WREADY;
reg   [31:0] grp_fu_805_p0;
reg   [31:0] grp_fu_805_p1;
reg   [31:0] grp_fu_810_p0;
reg   [31:0] grp_fu_810_p1;
reg   [31:0] grp_fu_814_p0;
reg   [31:0] grp_fu_814_p1;
reg   [31:0] grp_fu_818_p0;
reg   [31:0] grp_fu_818_p1;
wire   [29:0] output7_fu_967_p4;
wire   [29:0] tmp_1_fu_981_p4;
wire   [29:0] weights3_fu_995_p4;
wire   [29:0] tmp_5_fu_1009_p4;
wire   [30:0] tmp_9_fu_1043_p1;
wire   [11:0] tmp_3_cast_fu_1077_p1;
wire   [4:0] tmp_12_fu_1106_p3;
wire   [5:0] tmp_1_cast_fu_1102_p1;
wire   [5:0] p_shl_cast_fu_1114_p1;
wire   [5:0] tmp_7_cast_fu_1136_p1;
wire   [5:0] tmp_71_fu_1140_p2;
wire   [7:0] tmp_86_fu_1149_p3;
wire   [63:0] tmp_71_cast_fu_1145_p1;
wire   [63:0] p_shl9_fu_1157_p1;
wire   [63:0] tmp_s_fu_1190_p1;
wire   [2:0] co_1_fu_1211_p2;
wire   [2:0] weights_oc_0_load_m_fu_1235_p1;
wire   [0:0] exitcond_fu_1251_p2;
wire   [0:0] not_exitcond_flatten_fu_1245_p2;
wire   [0:0] tmp_19_fu_1263_p2;
wire   [7:0] weights_oc_0_load_1_2_fu_1294_p2;
wire   [4:0] h_1_dup_fu_1304_p2;
wire   [9:0] tmp_33_fu_1317_p3;
wire   [9:0] tmp_43_fu_1334_p3;
wire   [7:0] weights_oc_0_load_2_2_fu_1347_p2;
wire   [7:0] weights_oc_0_load_3_2_fu_1357_p2;
wire   [9:0] tmp_53_fu_1372_p3;
wire   [9:0] tmp_76_fu_1389_p3;
wire   [7:0] weights_oc_0_load_4_2_fu_1401_p2;
wire   [7:0] weights_oc_0_load_5_2_fu_1411_p2;
wire   [4:0] h_s_fu_1426_p2;
wire   [4:0] h_1_mid1_fu_1421_p2;
wire   [4:0] tmp_24_fu_1432_p3;
wire   [9:0] tmp_35_fu_1446_p3;
wire   [9:0] tmp_81_fu_1463_p3;
wire   [7:0] weights_oc_0_load_6_2_fu_1475_p2;
wire   [7:0] weights_oc_0_load_7_2_fu_1485_p2;
wire   [9:0] tmp_45_fu_1495_p3;
wire   [9:0] tmp_55_fu_1506_p3;
wire   [7:0] weights_oc_0_load_8_2_fu_1517_p2;
wire   [7:0] weights_oc_0_load_9_2_fu_1527_p2;
wire   [9:0] tmp_77_fu_1537_p3;
wire   [9:0] tmp_82_fu_1548_p3;
wire   [7:0] weights_oc_0_load_1_4_fu_1559_p2;
wire   [7:0] weights_oc_0_load_1_6_fu_1569_p2;
wire   [4:0] tmp_8_s_fu_1584_p2;
wire   [4:0] tmp_8_2_mid1_fu_1579_p2;
wire   [4:0] tmp_26_fu_1590_p3;
wire   [4:0] tmp_8_1_fu_1609_p2;
wire   [4:0] tmp_8_3_mid1_fu_1604_p2;
wire   [4:0] tmp_28_fu_1615_p3;
wire   [4:0] tmp_8_2_fu_1634_p2;
wire   [4:0] tmp_8_4_mid1_fu_1629_p2;
wire   [4:0] tmp_30_fu_1640_p3;
wire   [9:0] tmp_37_fu_1654_p3;
wire   [9:0] tmp_47_fu_1666_p3;
wire   [7:0] weights_oc_0_load_1_8_fu_1684_p2;
wire   [7:0] weights_oc_0_load_1_15_fu_1694_p2;
wire   [9:0] tmp_57_fu_1704_p3;
wire   [9:0] tmp_78_fu_1715_p3;
wire   [7:0] weights_oc_0_load_1_1_fu_1726_p2;
wire   [7:0] weights_oc_0_load_1_3_fu_1736_p2;
wire   [9:0] tmp_39_fu_1746_p3;
wire   [9:0] tmp_83_fu_1757_p3;
wire   [7:0] weights_oc_0_load_1_5_fu_1768_p2;
wire   [7:0] weights_oc_0_load_1_7_fu_1778_p2;
wire   [9:0] tmp_49_fu_1788_p3;
wire   [9:0] tmp_72_fu_1799_p3;
wire   [7:0] weights_oc_0_load_1_9_fu_1810_p2;
wire   [7:0] weights_oc_0_load_1_10_fu_1820_p2;
wire   [9:0] tmp_79_fu_1830_p3;
wire   [9:0] tmp_84_fu_1841_p3;
wire   [7:0] weights_oc_0_load_2_4_fu_1852_p2;
wire   [7:0] weights_oc_0_load_2_6_fu_1862_p2;
wire   [9:0] tmp_41_fu_1872_p3;
wire   [9:0] tmp_51_fu_1883_p3;
wire   [7:0] weights_oc_0_load_2_8_fu_1894_p2;
wire   [7:0] weights_oc_0_load_2_10_fu_1904_p2;
wire   [9:0] tmp_75_fu_1914_p3;
wire   [9:0] tmp_80_fu_1925_p3;
wire   [7:0] weights_oc_0_load_2_1_fu_1936_p2;
wire   [9:0] tmp_85_fu_1946_p3;
wire   [30:0] tmp_5_mid2_cast_fu_1957_p1;
wire   [7:0] tmp_15_fu_1975_p3;
wire   [4:0] tmp_16_fu_1986_p3;
wire   [63:0] p_shl1_fu_1982_p1;
wire   [63:0] p_shl2_fu_1993_p1;
wire   [63:0] tmp_9_mid2_cast_fu_2003_p1;
wire   [63:0] tmp_17_fu_1997_p2;
wire   [63:0] tmp_21_fu_2012_p2;
wire   [63:0] tmp_22_fu_2017_p2;
wire   [63:0] tmp_6_fu_2028_p1;
wire   [63:0] tmp_23_fu_2022_p2;
wire   [63:0] tmp_32_fu_2031_p2;
reg    grp_fu_805_ce;
reg    grp_fu_810_ce;
reg    grp_fu_814_ce;
reg    grp_fu_818_ce;
wire    ap_CS_fsm_state166;
wire    ap_CS_fsm_state167;
reg   [36:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [8:0] weights_oc_0_load_m_fu_1235_p10;
reg    ap_condition_2971;
reg    ap_condition_2976;
reg    ap_condition_2980;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_reg_ioackin_DATA_INPUT_ARREADY = 1'b0;
#0 ap_reg_ioackin_DATA_WEIGHT_ARREADY = 1'b0;
#0 ap_reg_ioackin_DATA_BIAS_ARREADY = 1'b0;
#0 ap_reg_ioackin_DATA_OUTPUT_AWREADY = 1'b0;
#0 ap_reg_ioackin_DATA_OUTPUT_WREADY = 1'b0;
end

conv1_CTL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTL_DATA_WIDTH ))
conv1_CTL_s_axi_U(
    .AWVALID(s_axi_CTL_AWVALID),
    .AWREADY(s_axi_CTL_AWREADY),
    .AWADDR(s_axi_CTL_AWADDR),
    .WVALID(s_axi_CTL_WVALID),
    .WREADY(s_axi_CTL_WREADY),
    .WDATA(s_axi_CTL_WDATA),
    .WSTRB(s_axi_CTL_WSTRB),
    .ARVALID(s_axi_CTL_ARVALID),
    .ARREADY(s_axi_CTL_ARREADY),
    .ARADDR(s_axi_CTL_ARADDR),
    .RVALID(s_axi_CTL_RVALID),
    .RREADY(s_axi_CTL_RREADY),
    .RDATA(s_axi_CTL_RDATA),
    .RRESP(s_axi_CTL_RRESP),
    .BVALID(s_axi_CTL_BVALID),
    .BREADY(s_axi_CTL_BREADY),
    .BRESP(s_axi_CTL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .input_r(input_r),
    .weights(weights),
    .bias(bias),
    .output_r(output_r)
);

conv1_DATA_INPUT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_INPUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_INPUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_INPUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_INPUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_INPUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_INPUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_INPUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_INPUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_INPUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_INPUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_INPUT_CACHE_VALUE ))
conv1_DATA_INPUT_m_axi_U(
    .AWVALID(m_axi_DATA_INPUT_AWVALID),
    .AWREADY(m_axi_DATA_INPUT_AWREADY),
    .AWADDR(m_axi_DATA_INPUT_AWADDR),
    .AWID(m_axi_DATA_INPUT_AWID),
    .AWLEN(m_axi_DATA_INPUT_AWLEN),
    .AWSIZE(m_axi_DATA_INPUT_AWSIZE),
    .AWBURST(m_axi_DATA_INPUT_AWBURST),
    .AWLOCK(m_axi_DATA_INPUT_AWLOCK),
    .AWCACHE(m_axi_DATA_INPUT_AWCACHE),
    .AWPROT(m_axi_DATA_INPUT_AWPROT),
    .AWQOS(m_axi_DATA_INPUT_AWQOS),
    .AWREGION(m_axi_DATA_INPUT_AWREGION),
    .AWUSER(m_axi_DATA_INPUT_AWUSER),
    .WVALID(m_axi_DATA_INPUT_WVALID),
    .WREADY(m_axi_DATA_INPUT_WREADY),
    .WDATA(m_axi_DATA_INPUT_WDATA),
    .WSTRB(m_axi_DATA_INPUT_WSTRB),
    .WLAST(m_axi_DATA_INPUT_WLAST),
    .WID(m_axi_DATA_INPUT_WID),
    .WUSER(m_axi_DATA_INPUT_WUSER),
    .ARVALID(m_axi_DATA_INPUT_ARVALID),
    .ARREADY(m_axi_DATA_INPUT_ARREADY),
    .ARADDR(m_axi_DATA_INPUT_ARADDR),
    .ARID(m_axi_DATA_INPUT_ARID),
    .ARLEN(m_axi_DATA_INPUT_ARLEN),
    .ARSIZE(m_axi_DATA_INPUT_ARSIZE),
    .ARBURST(m_axi_DATA_INPUT_ARBURST),
    .ARLOCK(m_axi_DATA_INPUT_ARLOCK),
    .ARCACHE(m_axi_DATA_INPUT_ARCACHE),
    .ARPROT(m_axi_DATA_INPUT_ARPROT),
    .ARQOS(m_axi_DATA_INPUT_ARQOS),
    .ARREGION(m_axi_DATA_INPUT_ARREGION),
    .ARUSER(m_axi_DATA_INPUT_ARUSER),
    .RVALID(m_axi_DATA_INPUT_RVALID),
    .RREADY(m_axi_DATA_INPUT_RREADY),
    .RDATA(m_axi_DATA_INPUT_RDATA),
    .RLAST(m_axi_DATA_INPUT_RLAST),
    .RID(m_axi_DATA_INPUT_RID),
    .RUSER(m_axi_DATA_INPUT_RUSER),
    .RRESP(m_axi_DATA_INPUT_RRESP),
    .BVALID(m_axi_DATA_INPUT_BVALID),
    .BREADY(m_axi_DATA_INPUT_BREADY),
    .BRESP(m_axi_DATA_INPUT_BRESP),
    .BID(m_axi_DATA_INPUT_BID),
    .BUSER(m_axi_DATA_INPUT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_INPUT_ARVALID),
    .I_ARREADY(DATA_INPUT_ARREADY),
    .I_ARADDR(DATA_INPUT_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd32),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_INPUT_RVALID),
    .I_RREADY(DATA_INPUT_RREADY),
    .I_RDATA(DATA_INPUT_RDATA),
    .I_RID(DATA_INPUT_RID),
    .I_RUSER(DATA_INPUT_RUSER),
    .I_RRESP(DATA_INPUT_RRESP),
    .I_RLAST(DATA_INPUT_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_INPUT_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_INPUT_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_INPUT_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_INPUT_BRESP),
    .I_BID(DATA_INPUT_BID),
    .I_BUSER(DATA_INPUT_BUSER)
);

conv1_DATA_WEIGHT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_WEIGHT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_WEIGHT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_WEIGHT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_WEIGHT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_WEIGHT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_WEIGHT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_WEIGHT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_WEIGHT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_WEIGHT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_WEIGHT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_WEIGHT_CACHE_VALUE ))
conv1_DATA_WEIGHT_m_axi_U(
    .AWVALID(m_axi_DATA_WEIGHT_AWVALID),
    .AWREADY(m_axi_DATA_WEIGHT_AWREADY),
    .AWADDR(m_axi_DATA_WEIGHT_AWADDR),
    .AWID(m_axi_DATA_WEIGHT_AWID),
    .AWLEN(m_axi_DATA_WEIGHT_AWLEN),
    .AWSIZE(m_axi_DATA_WEIGHT_AWSIZE),
    .AWBURST(m_axi_DATA_WEIGHT_AWBURST),
    .AWLOCK(m_axi_DATA_WEIGHT_AWLOCK),
    .AWCACHE(m_axi_DATA_WEIGHT_AWCACHE),
    .AWPROT(m_axi_DATA_WEIGHT_AWPROT),
    .AWQOS(m_axi_DATA_WEIGHT_AWQOS),
    .AWREGION(m_axi_DATA_WEIGHT_AWREGION),
    .AWUSER(m_axi_DATA_WEIGHT_AWUSER),
    .WVALID(m_axi_DATA_WEIGHT_WVALID),
    .WREADY(m_axi_DATA_WEIGHT_WREADY),
    .WDATA(m_axi_DATA_WEIGHT_WDATA),
    .WSTRB(m_axi_DATA_WEIGHT_WSTRB),
    .WLAST(m_axi_DATA_WEIGHT_WLAST),
    .WID(m_axi_DATA_WEIGHT_WID),
    .WUSER(m_axi_DATA_WEIGHT_WUSER),
    .ARVALID(m_axi_DATA_WEIGHT_ARVALID),
    .ARREADY(m_axi_DATA_WEIGHT_ARREADY),
    .ARADDR(m_axi_DATA_WEIGHT_ARADDR),
    .ARID(m_axi_DATA_WEIGHT_ARID),
    .ARLEN(m_axi_DATA_WEIGHT_ARLEN),
    .ARSIZE(m_axi_DATA_WEIGHT_ARSIZE),
    .ARBURST(m_axi_DATA_WEIGHT_ARBURST),
    .ARLOCK(m_axi_DATA_WEIGHT_ARLOCK),
    .ARCACHE(m_axi_DATA_WEIGHT_ARCACHE),
    .ARPROT(m_axi_DATA_WEIGHT_ARPROT),
    .ARQOS(m_axi_DATA_WEIGHT_ARQOS),
    .ARREGION(m_axi_DATA_WEIGHT_ARREGION),
    .ARUSER(m_axi_DATA_WEIGHT_ARUSER),
    .RVALID(m_axi_DATA_WEIGHT_RVALID),
    .RREADY(m_axi_DATA_WEIGHT_RREADY),
    .RDATA(m_axi_DATA_WEIGHT_RDATA),
    .RLAST(m_axi_DATA_WEIGHT_RLAST),
    .RID(m_axi_DATA_WEIGHT_RID),
    .RUSER(m_axi_DATA_WEIGHT_RUSER),
    .RRESP(m_axi_DATA_WEIGHT_RRESP),
    .BVALID(m_axi_DATA_WEIGHT_BVALID),
    .BREADY(m_axi_DATA_WEIGHT_BREADY),
    .BRESP(m_axi_DATA_WEIGHT_BRESP),
    .BID(m_axi_DATA_WEIGHT_BID),
    .BUSER(m_axi_DATA_WEIGHT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_WEIGHT_ARVALID),
    .I_ARREADY(DATA_WEIGHT_ARREADY),
    .I_ARADDR(DATA_WEIGHT_addr_reg_2142),
    .I_ARID(1'd0),
    .I_ARLEN(32'd5),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_WEIGHT_RVALID),
    .I_RREADY(DATA_WEIGHT_RREADY),
    .I_RDATA(DATA_WEIGHT_RDATA),
    .I_RID(DATA_WEIGHT_RID),
    .I_RUSER(DATA_WEIGHT_RUSER),
    .I_RRESP(DATA_WEIGHT_RRESP),
    .I_RLAST(DATA_WEIGHT_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_WEIGHT_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_WEIGHT_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_WEIGHT_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_WEIGHT_BRESP),
    .I_BID(DATA_WEIGHT_BID),
    .I_BUSER(DATA_WEIGHT_BUSER)
);

conv1_DATA_BIAS_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_BIAS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_BIAS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_BIAS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_BIAS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_BIAS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_BIAS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_BIAS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BIAS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_BIAS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_BIAS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_BIAS_CACHE_VALUE ))
conv1_DATA_BIAS_m_axi_U(
    .AWVALID(m_axi_DATA_BIAS_AWVALID),
    .AWREADY(m_axi_DATA_BIAS_AWREADY),
    .AWADDR(m_axi_DATA_BIAS_AWADDR),
    .AWID(m_axi_DATA_BIAS_AWID),
    .AWLEN(m_axi_DATA_BIAS_AWLEN),
    .AWSIZE(m_axi_DATA_BIAS_AWSIZE),
    .AWBURST(m_axi_DATA_BIAS_AWBURST),
    .AWLOCK(m_axi_DATA_BIAS_AWLOCK),
    .AWCACHE(m_axi_DATA_BIAS_AWCACHE),
    .AWPROT(m_axi_DATA_BIAS_AWPROT),
    .AWQOS(m_axi_DATA_BIAS_AWQOS),
    .AWREGION(m_axi_DATA_BIAS_AWREGION),
    .AWUSER(m_axi_DATA_BIAS_AWUSER),
    .WVALID(m_axi_DATA_BIAS_WVALID),
    .WREADY(m_axi_DATA_BIAS_WREADY),
    .WDATA(m_axi_DATA_BIAS_WDATA),
    .WSTRB(m_axi_DATA_BIAS_WSTRB),
    .WLAST(m_axi_DATA_BIAS_WLAST),
    .WID(m_axi_DATA_BIAS_WID),
    .WUSER(m_axi_DATA_BIAS_WUSER),
    .ARVALID(m_axi_DATA_BIAS_ARVALID),
    .ARREADY(m_axi_DATA_BIAS_ARREADY),
    .ARADDR(m_axi_DATA_BIAS_ARADDR),
    .ARID(m_axi_DATA_BIAS_ARID),
    .ARLEN(m_axi_DATA_BIAS_ARLEN),
    .ARSIZE(m_axi_DATA_BIAS_ARSIZE),
    .ARBURST(m_axi_DATA_BIAS_ARBURST),
    .ARLOCK(m_axi_DATA_BIAS_ARLOCK),
    .ARCACHE(m_axi_DATA_BIAS_ARCACHE),
    .ARPROT(m_axi_DATA_BIAS_ARPROT),
    .ARQOS(m_axi_DATA_BIAS_ARQOS),
    .ARREGION(m_axi_DATA_BIAS_ARREGION),
    .ARUSER(m_axi_DATA_BIAS_ARUSER),
    .RVALID(m_axi_DATA_BIAS_RVALID),
    .RREADY(m_axi_DATA_BIAS_RREADY),
    .RDATA(m_axi_DATA_BIAS_RDATA),
    .RLAST(m_axi_DATA_BIAS_RLAST),
    .RID(m_axi_DATA_BIAS_RID),
    .RUSER(m_axi_DATA_BIAS_RUSER),
    .RRESP(m_axi_DATA_BIAS_RRESP),
    .BVALID(m_axi_DATA_BIAS_BVALID),
    .BREADY(m_axi_DATA_BIAS_BREADY),
    .BRESP(m_axi_DATA_BIAS_BRESP),
    .BID(m_axi_DATA_BIAS_BID),
    .BUSER(m_axi_DATA_BIAS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_BIAS_ARVALID),
    .I_ARREADY(DATA_BIAS_ARREADY),
    .I_ARADDR(DATA_BIAS_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_BIAS_RVALID),
    .I_RREADY(DATA_BIAS_RREADY),
    .I_RDATA(DATA_BIAS_RDATA),
    .I_RID(DATA_BIAS_RID),
    .I_RUSER(DATA_BIAS_RUSER),
    .I_RRESP(DATA_BIAS_RRESP),
    .I_RLAST(DATA_BIAS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_BIAS_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_BIAS_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_BIAS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_BIAS_BRESP),
    .I_BID(DATA_BIAS_BID),
    .I_BUSER(DATA_BIAS_BUSER)
);

conv1_DATA_OUTPUT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_OUTPUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_OUTPUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_OUTPUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_OUTPUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_OUTPUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_OUTPUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_OUTPUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_OUTPUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_OUTPUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_OUTPUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_OUTPUT_CACHE_VALUE ))
conv1_DATA_OUTPUT_m_axi_U(
    .AWVALID(m_axi_DATA_OUTPUT_AWVALID),
    .AWREADY(m_axi_DATA_OUTPUT_AWREADY),
    .AWADDR(m_axi_DATA_OUTPUT_AWADDR),
    .AWID(m_axi_DATA_OUTPUT_AWID),
    .AWLEN(m_axi_DATA_OUTPUT_AWLEN),
    .AWSIZE(m_axi_DATA_OUTPUT_AWSIZE),
    .AWBURST(m_axi_DATA_OUTPUT_AWBURST),
    .AWLOCK(m_axi_DATA_OUTPUT_AWLOCK),
    .AWCACHE(m_axi_DATA_OUTPUT_AWCACHE),
    .AWPROT(m_axi_DATA_OUTPUT_AWPROT),
    .AWQOS(m_axi_DATA_OUTPUT_AWQOS),
    .AWREGION(m_axi_DATA_OUTPUT_AWREGION),
    .AWUSER(m_axi_DATA_OUTPUT_AWUSER),
    .WVALID(m_axi_DATA_OUTPUT_WVALID),
    .WREADY(m_axi_DATA_OUTPUT_WREADY),
    .WDATA(m_axi_DATA_OUTPUT_WDATA),
    .WSTRB(m_axi_DATA_OUTPUT_WSTRB),
    .WLAST(m_axi_DATA_OUTPUT_WLAST),
    .WID(m_axi_DATA_OUTPUT_WID),
    .WUSER(m_axi_DATA_OUTPUT_WUSER),
    .ARVALID(m_axi_DATA_OUTPUT_ARVALID),
    .ARREADY(m_axi_DATA_OUTPUT_ARREADY),
    .ARADDR(m_axi_DATA_OUTPUT_ARADDR),
    .ARID(m_axi_DATA_OUTPUT_ARID),
    .ARLEN(m_axi_DATA_OUTPUT_ARLEN),
    .ARSIZE(m_axi_DATA_OUTPUT_ARSIZE),
    .ARBURST(m_axi_DATA_OUTPUT_ARBURST),
    .ARLOCK(m_axi_DATA_OUTPUT_ARLOCK),
    .ARCACHE(m_axi_DATA_OUTPUT_ARCACHE),
    .ARPROT(m_axi_DATA_OUTPUT_ARPROT),
    .ARQOS(m_axi_DATA_OUTPUT_ARQOS),
    .ARREGION(m_axi_DATA_OUTPUT_ARREGION),
    .ARUSER(m_axi_DATA_OUTPUT_ARUSER),
    .RVALID(m_axi_DATA_OUTPUT_RVALID),
    .RREADY(m_axi_DATA_OUTPUT_RREADY),
    .RDATA(m_axi_DATA_OUTPUT_RDATA),
    .RLAST(m_axi_DATA_OUTPUT_RLAST),
    .RID(m_axi_DATA_OUTPUT_RID),
    .RUSER(m_axi_DATA_OUTPUT_RUSER),
    .RRESP(m_axi_DATA_OUTPUT_RRESP),
    .BVALID(m_axi_DATA_OUTPUT_BVALID),
    .BREADY(m_axi_DATA_OUTPUT_BREADY),
    .BRESP(m_axi_DATA_OUTPUT_BRESP),
    .BID(m_axi_DATA_OUTPUT_BID),
    .BUSER(m_axi_DATA_OUTPUT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_OUTPUT_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_OUTPUT_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_OUTPUT_RDATA),
    .I_RID(DATA_OUTPUT_RID),
    .I_RUSER(DATA_OUTPUT_RUSER),
    .I_RRESP(DATA_OUTPUT_RRESP),
    .I_RLAST(DATA_OUTPUT_RLAST),
    .I_AWVALID(DATA_OUTPUT_AWVALID),
    .I_AWREADY(DATA_OUTPUT_AWREADY),
    .I_AWADDR(DATA_OUTPUT_addr_reg_2754),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(DATA_OUTPUT_WVALID),
    .I_WREADY(DATA_OUTPUT_WREADY),
    .I_WDATA(reg_941),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(DATA_OUTPUT_BVALID),
    .I_BREADY(DATA_OUTPUT_BREADY),
    .I_BRESP(DATA_OUTPUT_BRESP),
    .I_BID(DATA_OUTPUT_BID),
    .I_BUSER(DATA_OUTPUT_BUSER)
);

conv1_input_oc_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
input_oc_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_oc_0_address0),
    .ce0(input_oc_0_ce0),
    .we0(input_oc_0_we0),
    .d0(DATA_INPUT_addr_read_reg_2110),
    .q0(input_oc_0_q0),
    .address1(input_oc_0_address1),
    .ce1(input_oc_0_ce1),
    .q1(input_oc_0_q1)
);

conv1_weights_oc_0 #(
    .DataWidth( 32 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
weights_oc_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weights_oc_0_address0),
    .ce0(weights_oc_0_ce0),
    .we0(weights_oc_0_we0),
    .d0(DATA_WEIGHT_addr_rea_reg_2161),
    .q0(weights_oc_0_q0),
    .address1(weights_oc_0_address1),
    .ce1(weights_oc_0_ce1),
    .q1(weights_oc_0_q1)
);

conv1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_805_p0),
    .din1(grp_fu_805_p1),
    .ce(grp_fu_805_ce),
    .dout(grp_fu_805_p2)
);

conv1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fadd_32ns_3bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_810_p0),
    .din1(grp_fu_810_p1),
    .ce(grp_fu_810_ce),
    .dout(grp_fu_810_p2)
);

conv1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fmul_32ns_3cud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_814_p0),
    .din1(grp_fu_814_p1),
    .ce(grp_fu_814_ce),
    .dout(grp_fu_814_p2)
);

conv1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fmul_32ns_3cud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_818_p0),
    .din1(grp_fu_818_p1),
    .ce(grp_fu_818_ce),
    .dout(grp_fu_818_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state23) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_1090_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state23)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_1090_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_BIAS_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_2971)) begin
            if ((1'b0 == ap_block_pp0_stage7_11001)) begin
                ap_reg_ioackin_DATA_BIAS_ARREADY <= 1'b0;
            end else if (((1'b1 == DATA_BIAS_ARREADY) & (1'b0 == ap_block_pp0_stage7_01001))) begin
                ap_reg_ioackin_DATA_BIAS_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_INPUT_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if ((ap_sig_ioackin_DATA_INPUT_ARREADY == 1'b1)) begin
                ap_reg_ioackin_DATA_INPUT_ARREADY <= 1'b0;
            end else if ((1'b1 == DATA_INPUT_ARREADY)) begin
                ap_reg_ioackin_DATA_INPUT_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_OUTPUT_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_2976)) begin
            if ((1'b0 == ap_block_pp0_stage6_11001)) begin
                ap_reg_ioackin_DATA_OUTPUT_AWREADY <= 1'b0;
            end else if (((1'b1 == DATA_OUTPUT_AWREADY) & (1'b0 == ap_block_pp0_stage6_01001))) begin
                ap_reg_ioackin_DATA_OUTPUT_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_OUTPUT_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_2980)) begin
            if ((1'b0 == ap_block_pp0_stage7_11001)) begin
                ap_reg_ioackin_DATA_OUTPUT_WREADY <= 1'b0;
            end else if (((1'b1 == DATA_OUTPUT_WREADY) & (1'b0 == ap_block_pp0_stage7_01001))) begin
                ap_reg_ioackin_DATA_OUTPUT_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_WEIGHT_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            if ((ap_sig_ioackin_DATA_WEIGHT_ARREADY == 1'b1)) begin
                ap_reg_ioackin_DATA_WEIGHT_ARREADY <= 1'b0;
            end else if ((1'b1 == DATA_WEIGHT_ARREADY)) begin
                ap_reg_ioackin_DATA_WEIGHT_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_1090_p2 == 1'd1))) begin
        co_reg_760 <= 3'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        co_reg_760 <= tmp_5_mid2_reg_2185;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_1090_p2 == 1'd1))) begin
        h_reg_782 <= 5'd0;
    end else if (((exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        h_reg_782 <= tmp_9_mid2_reg_2272;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_1023_p2 == 1'd1))) begin
        i1_reg_716 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond6_fu_1124_p2 == 1'd1))) begin
        i1_reg_716 <= i_2_reg_2119;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == DATA_INPUT_RVALID) & (exitcond8_fu_1065_p2 == 1'd0)) & (exitcond8_fu_1065_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_reg_694 <= i_1_reg_2071;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_694 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_1090_p2 == 1'd1))) begin
        indvar_flatten1_reg_749 <= 13'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten1_reg_749 <= indvar_flatten_next1_reg_2170;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_1090_p2 == 1'd1))) begin
        indvar_flatten_reg_771 <= 10'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_771 <= indvar_flatten_next_reg_2467;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == DATA_WEIGHT_RVALID) & (exitcond5_fu_1178_p2 == 1'd0)) & (exitcond5_fu_1178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        j2_reg_727 <= j_2_reg_2132;
    end else if (((exitcond7_fu_1090_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        j2_reg_727 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_705 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_705 <= j_1_reg_2100;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        k_reg_738 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        k_reg_738 <= k_1_reg_2151;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        reg_822 <= weights_oc_0_q1;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_822 <= weights_oc_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        reg_828 <= weights_oc_0_q0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_828 <= weights_oc_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        reg_834 <= input_oc_0_q1;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_834 <= input_oc_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)))) begin
        reg_840 <= input_oc_0_q0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_840 <= input_oc_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_1090_p2 == 1'd1))) begin
        w_reg_794 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_reg_794 <= w_1_reg_2286;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        DATA_BIAS_addr_read_reg_2743 <= DATA_BIAS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == DATA_INPUT_RVALID) & (exitcond8_fu_1065_p2 == 1'd0)) & (exitcond8_fu_1065_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        DATA_INPUT_addr_read_reg_2110 <= DATA_INPUT_RDATA;
        tmp_14_reg_2105 <= tmp_14_fu_1081_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        DATA_OUTPUT_addr_reg_2754 <= output8_sum_fu_2037_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == DATA_WEIGHT_RVALID) & (exitcond5_fu_1178_p2 == 1'd0)) & (exitcond5_fu_1178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        DATA_WEIGHT_addr_rea_reg_2161 <= DATA_WEIGHT_RDATA;
        tmp_74_reg_2156 <= tmp_74_fu_1194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_1124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        DATA_WEIGHT_addr_reg_2142 <= tmp_87_fu_1167_p2;
        tmp_73_reg_2137 <= tmp_73_fu_1161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (exitcond_flatten1_reg_2166_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        bias6_sum_reg_2732 <= bias6_sum_fu_1960_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_1199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_mid_reg_2226 <= exitcond2_mid_fu_1257_p2;
        exitcond_flatten_reg_2175 <= exitcond_flatten_fu_1217_p2;
        indvar_flatten_op_reg_2249 <= indvar_flatten_op_fu_1277_p2;
        tmp_18_reg_2198 <= tmp_18_fu_1241_p1;
        w_mid2_reg_2235 <= w_mid2_fu_1269_p3;
        weights_oc_0_load_m_reg_2193 <= weights_oc_0_load_m_fu_1235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten1_reg_2166 <= exitcond_flatten1_fu_1199_p2;
        exitcond_flatten1_reg_2166_pp0_iter10_reg <= exitcond_flatten1_reg_2166_pp0_iter9_reg;
        exitcond_flatten1_reg_2166_pp0_iter1_reg <= exitcond_flatten1_reg_2166;
        exitcond_flatten1_reg_2166_pp0_iter2_reg <= exitcond_flatten1_reg_2166_pp0_iter1_reg;
        exitcond_flatten1_reg_2166_pp0_iter3_reg <= exitcond_flatten1_reg_2166_pp0_iter2_reg;
        exitcond_flatten1_reg_2166_pp0_iter4_reg <= exitcond_flatten1_reg_2166_pp0_iter3_reg;
        exitcond_flatten1_reg_2166_pp0_iter5_reg <= exitcond_flatten1_reg_2166_pp0_iter4_reg;
        exitcond_flatten1_reg_2166_pp0_iter6_reg <= exitcond_flatten1_reg_2166_pp0_iter5_reg;
        exitcond_flatten1_reg_2166_pp0_iter7_reg <= exitcond_flatten1_reg_2166_pp0_iter6_reg;
        exitcond_flatten1_reg_2166_pp0_iter8_reg <= exitcond_flatten1_reg_2166_pp0_iter7_reg;
        exitcond_flatten1_reg_2166_pp0_iter9_reg <= exitcond_flatten1_reg_2166_pp0_iter8_reg;
        tmp_14_2_4_reg_2662_pp0_iter2_reg <= tmp_14_2_4_reg_2662;
        tmp_14_2_4_reg_2662_pp0_iter3_reg <= tmp_14_2_4_reg_2662_pp0_iter2_reg;
        tmp_14_2_4_reg_2662_pp0_iter4_reg <= tmp_14_2_4_reg_2662_pp0_iter3_reg;
        tmp_14_2_4_reg_2662_pp0_iter5_reg <= tmp_14_2_4_reg_2662_pp0_iter4_reg;
        tmp_14_3_reg_2667_pp0_iter2_reg <= tmp_14_3_reg_2667;
        tmp_14_3_reg_2667_pp0_iter3_reg <= tmp_14_3_reg_2667_pp0_iter2_reg;
        tmp_14_3_reg_2667_pp0_iter4_reg <= tmp_14_3_reg_2667_pp0_iter3_reg;
        tmp_14_3_reg_2667_pp0_iter5_reg <= tmp_14_3_reg_2667_pp0_iter4_reg;
        tmp_14_3_reg_2667_pp0_iter6_reg <= tmp_14_3_reg_2667_pp0_iter5_reg;
        tmp_5_mid2_reg_2185_pp0_iter10_reg <= tmp_5_mid2_reg_2185_pp0_iter9_reg;
        tmp_5_mid2_reg_2185_pp0_iter1_reg <= tmp_5_mid2_reg_2185;
        tmp_5_mid2_reg_2185_pp0_iter2_reg <= tmp_5_mid2_reg_2185_pp0_iter1_reg;
        tmp_5_mid2_reg_2185_pp0_iter3_reg <= tmp_5_mid2_reg_2185_pp0_iter2_reg;
        tmp_5_mid2_reg_2185_pp0_iter4_reg <= tmp_5_mid2_reg_2185_pp0_iter3_reg;
        tmp_5_mid2_reg_2185_pp0_iter5_reg <= tmp_5_mid2_reg_2185_pp0_iter4_reg;
        tmp_5_mid2_reg_2185_pp0_iter6_reg <= tmp_5_mid2_reg_2185_pp0_iter5_reg;
        tmp_5_mid2_reg_2185_pp0_iter7_reg <= tmp_5_mid2_reg_2185_pp0_iter6_reg;
        tmp_5_mid2_reg_2185_pp0_iter8_reg <= tmp_5_mid2_reg_2185_pp0_iter7_reg;
        tmp_5_mid2_reg_2185_pp0_iter9_reg <= tmp_5_mid2_reg_2185_pp0_iter8_reg;
        w_mid2_reg_2235_pp0_iter10_reg <= w_mid2_reg_2235_pp0_iter9_reg;
        w_mid2_reg_2235_pp0_iter1_reg <= w_mid2_reg_2235;
        w_mid2_reg_2235_pp0_iter2_reg <= w_mid2_reg_2235_pp0_iter1_reg;
        w_mid2_reg_2235_pp0_iter3_reg <= w_mid2_reg_2235_pp0_iter2_reg;
        w_mid2_reg_2235_pp0_iter4_reg <= w_mid2_reg_2235_pp0_iter3_reg;
        w_mid2_reg_2235_pp0_iter5_reg <= w_mid2_reg_2235_pp0_iter4_reg;
        w_mid2_reg_2235_pp0_iter6_reg <= w_mid2_reg_2235_pp0_iter5_reg;
        w_mid2_reg_2235_pp0_iter7_reg <= w_mid2_reg_2235_pp0_iter6_reg;
        w_mid2_reg_2235_pp0_iter8_reg <= w_mid2_reg_2235_pp0_iter7_reg;
        w_mid2_reg_2235_pp0_iter9_reg <= w_mid2_reg_2235_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        h_mid_reg_2254 <= h_mid_fu_1283_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_2071 <= i_1_fu_1029_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_2_reg_2119 <= i_2_fu_1096_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_next1_reg_2170 <= indvar_flatten_next1_fu_1205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        indvar_flatten_next_reg_2467 <= indvar_flatten_next_fu_1678_p3;
        tmp_14_0_1_reg_2462 <= grp_fu_818_p2;
        tmp_8_reg_2452 <= grp_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_oc_0_load_24_reg_2687 <= input_oc_0_q0;
        tmp_14_3_1_reg_2677 <= grp_fu_814_p2;
        tmp_14_3_2_reg_2682 <= grp_fu_818_p2;
        weights_oc_0_load_24_reg_2672 <= weights_oc_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == DATA_INPUT_RVALID) & (exitcond8_fu_1065_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state10))) begin
        j_1_reg_2100 <= j_1_fu_1071_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_2_reg_2132 <= j_2_fu_1130_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == DATA_WEIGHT_RVALID) & (exitcond5_fu_1178_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state21))) begin
        k_1_reg_2151 <= k_1_fu_1184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        reg_846 <= weights_oc_0_q1;
        reg_851 <= weights_oc_0_q0;
        reg_856 <= input_oc_0_q1;
        reg_861 <= input_oc_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage12_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        reg_866 <= weights_oc_0_q1;
        reg_871 <= weights_oc_0_q0;
        reg_876 <= input_oc_0_q1;
        reg_881 <= input_oc_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_886 <= weights_oc_0_q1;
        reg_891 <= weights_oc_0_q0;
        reg_896 <= input_oc_0_q1;
        reg_901 <= input_oc_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage11_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_906 <= grp_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        reg_911 <= grp_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (exitcond_flatten1_reg_2166_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (exitcond_flatten1_reg_2166_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        reg_916 <= grp_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten1_reg_2166_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (exitcond_flatten1_reg_2166_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        reg_921 <= grp_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (exitcond_flatten1_reg_2166_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage12_11001) & (exitcond_flatten1_reg_2166_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        reg_926 <= grp_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (exitcond_flatten1_reg_2166_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond_flatten1_reg_2166_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_931 <= grp_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (exitcond_flatten1_reg_2166_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (exitcond_flatten1_reg_2166_pp0_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        reg_936 <= grp_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_2166_pp0_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (exitcond_flatten1_reg_2166_pp0_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
        reg_941 <= grp_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (exitcond_flatten1_reg_2166_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (exitcond_flatten1_reg_2166_pp0_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
        reg_947 <= grp_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten1_reg_2166_pp0_iter8_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (exitcond_flatten1_reg_2166_pp0_iter8_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
        reg_952 <= grp_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage12_11001) & (exitcond_flatten1_reg_2166_pp0_iter8_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (exitcond_flatten1_reg_2166_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
        reg_957 <= grp_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage9_11001) & (exitcond_flatten1_reg_2166_pp0_iter9_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
        reg_962 <= grp_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (exitcond_flatten1_reg_2166_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        sum_2_2_2_reg_2727 <= grp_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_10_cast_reg_2053[29 : 0] <= tmp_10_cast_fu_991_p1[29 : 0];
        tmp_12_cast_reg_2063[29 : 0] <= tmp_12_cast_fu_1019_p1[29 : 0];
        tmp_3_reg_2058[29 : 0] <= tmp_3_fu_1005_p1[29 : 0];
        tmp_reg_2048[29 : 0] <= tmp_fu_977_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_1023_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_10_reg_2081 <= tmp_10_fu_1047_p2;
        tmp_7_reg_2076[10 : 5] <= tmp_7_fu_1035_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_12_0_2_reg_2310 <= tmp_12_0_2_fu_1367_p2;
        tmp_12_0_3_reg_2323 <= tmp_12_0_3_fu_1384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_12_0_4_reg_2359 <= tmp_12_0_4_fu_1458_p2;
        tmp_25_reg_2346 <= tmp_25_fu_1439_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_1090_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_13_reg_2124 <= tmp_13_fu_1118_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_14_0_2_reg_2487 <= grp_fu_814_p2;
        tmp_14_0_3_reg_2497 <= grp_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_14_0_3_reg_2497_pp0_iter1_reg <= tmp_14_0_3_reg_2497;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_14_0_4_reg_2522 <= grp_fu_814_p2;
        tmp_14_1_reg_2527 <= grp_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        tmp_14_0_4_reg_2522_pp0_iter1_reg <= tmp_14_0_4_reg_2522;
        tmp_14_1_reg_2527_pp0_iter1_reg <= tmp_14_1_reg_2527;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_14_1_1_reg_2552 <= grp_fu_814_p2;
        tmp_14_1_2_reg_2557 <= grp_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        tmp_14_1_1_reg_2552_pp0_iter1_reg <= tmp_14_1_1_reg_2552;
        tmp_14_1_1_reg_2552_pp0_iter2_reg <= tmp_14_1_1_reg_2552_pp0_iter1_reg;
        tmp_14_1_2_reg_2557_pp0_iter1_reg <= tmp_14_1_2_reg_2557;
        tmp_14_1_2_reg_2557_pp0_iter2_reg <= tmp_14_1_2_reg_2557_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_14_1_3_reg_2582 <= grp_fu_814_p2;
        tmp_14_1_4_reg_2587 <= grp_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        tmp_14_1_3_reg_2582_pp0_iter1_reg <= tmp_14_1_3_reg_2582;
        tmp_14_1_3_reg_2582_pp0_iter2_reg <= tmp_14_1_3_reg_2582_pp0_iter1_reg;
        tmp_14_1_4_reg_2587_pp0_iter1_reg <= tmp_14_1_4_reg_2587;
        tmp_14_1_4_reg_2587_pp0_iter2_reg <= tmp_14_1_4_reg_2587_pp0_iter1_reg;
        tmp_14_1_4_reg_2587_pp0_iter3_reg <= tmp_14_1_4_reg_2587_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_14_2_1_reg_2617 <= grp_fu_818_p2;
        tmp_14_2_reg_2612 <= grp_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        tmp_14_2_1_reg_2617_pp0_iter1_reg <= tmp_14_2_1_reg_2617;
        tmp_14_2_1_reg_2617_pp0_iter2_reg <= tmp_14_2_1_reg_2617_pp0_iter1_reg;
        tmp_14_2_1_reg_2617_pp0_iter3_reg <= tmp_14_2_1_reg_2617_pp0_iter2_reg;
        tmp_14_2_reg_2612_pp0_iter1_reg <= tmp_14_2_reg_2612;
        tmp_14_2_reg_2612_pp0_iter2_reg <= tmp_14_2_reg_2612_pp0_iter1_reg;
        tmp_14_2_reg_2612_pp0_iter3_reg <= tmp_14_2_reg_2612_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        tmp_14_2_2_reg_2642 <= grp_fu_814_p2;
        tmp_14_2_3_reg_2647 <= grp_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        tmp_14_2_2_reg_2642_pp0_iter1_reg <= tmp_14_2_2_reg_2642;
        tmp_14_2_2_reg_2642_pp0_iter2_reg <= tmp_14_2_2_reg_2642_pp0_iter1_reg;
        tmp_14_2_2_reg_2642_pp0_iter3_reg <= tmp_14_2_2_reg_2642_pp0_iter2_reg;
        tmp_14_2_2_reg_2642_pp0_iter4_reg <= tmp_14_2_2_reg_2642_pp0_iter3_reg;
        tmp_14_2_3_reg_2647_pp0_iter1_reg <= tmp_14_2_3_reg_2647;
        tmp_14_2_3_reg_2647_pp0_iter2_reg <= tmp_14_2_3_reg_2647_pp0_iter1_reg;
        tmp_14_2_3_reg_2647_pp0_iter3_reg <= tmp_14_2_3_reg_2647_pp0_iter2_reg;
        tmp_14_2_3_reg_2647_pp0_iter4_reg <= tmp_14_2_3_reg_2647_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_14_2_4_reg_2662 <= grp_fu_814_p2;
        tmp_14_3_reg_2667 <= grp_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_14_3_1_reg_2677_pp0_iter2_reg <= tmp_14_3_1_reg_2677;
        tmp_14_3_1_reg_2677_pp0_iter3_reg <= tmp_14_3_1_reg_2677_pp0_iter2_reg;
        tmp_14_3_1_reg_2677_pp0_iter4_reg <= tmp_14_3_1_reg_2677_pp0_iter3_reg;
        tmp_14_3_1_reg_2677_pp0_iter5_reg <= tmp_14_3_1_reg_2677_pp0_iter4_reg;
        tmp_14_3_1_reg_2677_pp0_iter6_reg <= tmp_14_3_1_reg_2677_pp0_iter5_reg;
        tmp_14_3_2_reg_2682_pp0_iter2_reg <= tmp_14_3_2_reg_2682;
        tmp_14_3_2_reg_2682_pp0_iter3_reg <= tmp_14_3_2_reg_2682_pp0_iter2_reg;
        tmp_14_3_2_reg_2682_pp0_iter4_reg <= tmp_14_3_2_reg_2682_pp0_iter3_reg;
        tmp_14_3_2_reg_2682_pp0_iter5_reg <= tmp_14_3_2_reg_2682_pp0_iter4_reg;
        tmp_14_3_2_reg_2682_pp0_iter6_reg <= tmp_14_3_2_reg_2682_pp0_iter5_reg;
        tmp_9_mid2_reg_2272_pp0_iter10_reg <= tmp_9_mid2_reg_2272_pp0_iter9_reg;
        tmp_9_mid2_reg_2272_pp0_iter1_reg <= tmp_9_mid2_reg_2272;
        tmp_9_mid2_reg_2272_pp0_iter2_reg <= tmp_9_mid2_reg_2272_pp0_iter1_reg;
        tmp_9_mid2_reg_2272_pp0_iter3_reg <= tmp_9_mid2_reg_2272_pp0_iter2_reg;
        tmp_9_mid2_reg_2272_pp0_iter4_reg <= tmp_9_mid2_reg_2272_pp0_iter3_reg;
        tmp_9_mid2_reg_2272_pp0_iter5_reg <= tmp_9_mid2_reg_2272_pp0_iter4_reg;
        tmp_9_mid2_reg_2272_pp0_iter6_reg <= tmp_9_mid2_reg_2272_pp0_iter5_reg;
        tmp_9_mid2_reg_2272_pp0_iter7_reg <= tmp_9_mid2_reg_2272_pp0_iter6_reg;
        tmp_9_mid2_reg_2272_pp0_iter8_reg <= tmp_9_mid2_reg_2272_pp0_iter7_reg;
        tmp_9_mid2_reg_2272_pp0_iter9_reg <= tmp_9_mid2_reg_2272_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_14_3_3_reg_2692 <= grp_fu_814_p2;
        tmp_14_3_4_reg_2697 <= grp_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_14_3_3_reg_2692_pp0_iter2_reg <= tmp_14_3_3_reg_2692;
        tmp_14_3_3_reg_2692_pp0_iter3_reg <= tmp_14_3_3_reg_2692_pp0_iter2_reg;
        tmp_14_3_3_reg_2692_pp0_iter4_reg <= tmp_14_3_3_reg_2692_pp0_iter3_reg;
        tmp_14_3_3_reg_2692_pp0_iter5_reg <= tmp_14_3_3_reg_2692_pp0_iter4_reg;
        tmp_14_3_3_reg_2692_pp0_iter6_reg <= tmp_14_3_3_reg_2692_pp0_iter5_reg;
        tmp_14_3_3_reg_2692_pp0_iter7_reg <= tmp_14_3_3_reg_2692_pp0_iter6_reg;
        tmp_14_3_4_reg_2697_pp0_iter2_reg <= tmp_14_3_4_reg_2697;
        tmp_14_3_4_reg_2697_pp0_iter3_reg <= tmp_14_3_4_reg_2697_pp0_iter2_reg;
        tmp_14_3_4_reg_2697_pp0_iter4_reg <= tmp_14_3_4_reg_2697_pp0_iter3_reg;
        tmp_14_3_4_reg_2697_pp0_iter5_reg <= tmp_14_3_4_reg_2697_pp0_iter4_reg;
        tmp_14_3_4_reg_2697_pp0_iter6_reg <= tmp_14_3_4_reg_2697_pp0_iter5_reg;
        tmp_14_3_4_reg_2697_pp0_iter7_reg <= tmp_14_3_4_reg_2697_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_14_4_1_reg_2707 <= grp_fu_818_p2;
        tmp_14_4_reg_2702 <= grp_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_14_4_1_reg_2707_pp0_iter2_reg <= tmp_14_4_1_reg_2707;
        tmp_14_4_1_reg_2707_pp0_iter3_reg <= tmp_14_4_1_reg_2707_pp0_iter2_reg;
        tmp_14_4_1_reg_2707_pp0_iter4_reg <= tmp_14_4_1_reg_2707_pp0_iter3_reg;
        tmp_14_4_1_reg_2707_pp0_iter5_reg <= tmp_14_4_1_reg_2707_pp0_iter4_reg;
        tmp_14_4_1_reg_2707_pp0_iter6_reg <= tmp_14_4_1_reg_2707_pp0_iter5_reg;
        tmp_14_4_1_reg_2707_pp0_iter7_reg <= tmp_14_4_1_reg_2707_pp0_iter6_reg;
        tmp_14_4_1_reg_2707_pp0_iter8_reg <= tmp_14_4_1_reg_2707_pp0_iter7_reg;
        tmp_14_4_reg_2702_pp0_iter2_reg <= tmp_14_4_reg_2702;
        tmp_14_4_reg_2702_pp0_iter3_reg <= tmp_14_4_reg_2702_pp0_iter2_reg;
        tmp_14_4_reg_2702_pp0_iter4_reg <= tmp_14_4_reg_2702_pp0_iter3_reg;
        tmp_14_4_reg_2702_pp0_iter5_reg <= tmp_14_4_reg_2702_pp0_iter4_reg;
        tmp_14_4_reg_2702_pp0_iter6_reg <= tmp_14_4_reg_2702_pp0_iter5_reg;
        tmp_14_4_reg_2702_pp0_iter7_reg <= tmp_14_4_reg_2702_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_14_4_2_reg_2712 <= grp_fu_814_p2;
        tmp_14_4_3_reg_2717 <= grp_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_14_4_2_reg_2712_pp0_iter2_reg <= tmp_14_4_2_reg_2712;
        tmp_14_4_2_reg_2712_pp0_iter3_reg <= tmp_14_4_2_reg_2712_pp0_iter2_reg;
        tmp_14_4_2_reg_2712_pp0_iter4_reg <= tmp_14_4_2_reg_2712_pp0_iter3_reg;
        tmp_14_4_2_reg_2712_pp0_iter5_reg <= tmp_14_4_2_reg_2712_pp0_iter4_reg;
        tmp_14_4_2_reg_2712_pp0_iter6_reg <= tmp_14_4_2_reg_2712_pp0_iter5_reg;
        tmp_14_4_2_reg_2712_pp0_iter7_reg <= tmp_14_4_2_reg_2712_pp0_iter6_reg;
        tmp_14_4_2_reg_2712_pp0_iter8_reg <= tmp_14_4_2_reg_2712_pp0_iter7_reg;
        tmp_14_4_3_reg_2717_pp0_iter2_reg <= tmp_14_4_3_reg_2717;
        tmp_14_4_3_reg_2717_pp0_iter3_reg <= tmp_14_4_3_reg_2717_pp0_iter2_reg;
        tmp_14_4_3_reg_2717_pp0_iter4_reg <= tmp_14_4_3_reg_2717_pp0_iter3_reg;
        tmp_14_4_3_reg_2717_pp0_iter5_reg <= tmp_14_4_3_reg_2717_pp0_iter4_reg;
        tmp_14_4_3_reg_2717_pp0_iter6_reg <= tmp_14_4_3_reg_2717_pp0_iter5_reg;
        tmp_14_4_3_reg_2717_pp0_iter7_reg <= tmp_14_4_3_reg_2717_pp0_iter6_reg;
        tmp_14_4_3_reg_2717_pp0_iter8_reg <= tmp_14_4_3_reg_2717_pp0_iter7_reg;
        tmp_14_4_3_reg_2717_pp0_iter9_reg <= tmp_14_4_3_reg_2717_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_14_4_4_reg_2722 <= grp_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_14_4_4_reg_2722_pp0_iter2_reg <= tmp_14_4_4_reg_2722;
        tmp_14_4_4_reg_2722_pp0_iter3_reg <= tmp_14_4_4_reg_2722_pp0_iter2_reg;
        tmp_14_4_4_reg_2722_pp0_iter4_reg <= tmp_14_4_4_reg_2722_pp0_iter3_reg;
        tmp_14_4_4_reg_2722_pp0_iter5_reg <= tmp_14_4_4_reg_2722_pp0_iter4_reg;
        tmp_14_4_4_reg_2722_pp0_iter6_reg <= tmp_14_4_4_reg_2722_pp0_iter5_reg;
        tmp_14_4_4_reg_2722_pp0_iter7_reg <= tmp_14_4_4_reg_2722_pp0_iter6_reg;
        tmp_14_4_4_reg_2722_pp0_iter8_reg <= tmp_14_4_4_reg_2722_pp0_iter7_reg;
        tmp_14_4_4_reg_2722_pp0_iter9_reg <= tmp_14_4_4_reg_2722_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_14_cast_reg_2092[10 : 5] <= tmp_14_cast_fu_1062_p1[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_20_reg_2748 <= tmp_20_fu_2006_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (exitcond_flatten1_reg_2166 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_27_reg_2422 <= tmp_27_fu_1597_p3;
        tmp_29_reg_2429 <= tmp_29_fu_1622_p3;
        tmp_31_reg_2438 <= tmp_31_fu_1647_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_1199_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_5_mid2_reg_2185 <= tmp_5_mid2_fu_1223_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_9_mid2_reg_2272 <= tmp_9_mid2_fu_1310_p3;
        w_1_reg_2286 <= w_1_fu_1329_p2;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_DATA_BIAS_ARREADY == 1'b0) & (exitcond_flatten1_reg_2166_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_01001))) begin
        DATA_BIAS_ARVALID = 1'b1;
    end else begin
        DATA_BIAS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        DATA_BIAS_RREADY = 1'b1;
    end else begin
        DATA_BIAS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7) & (exitcond_flatten1_reg_2166_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        DATA_BIAS_blk_n_AR = m_axi_DATA_BIAS_ARREADY;
    end else begin
        DATA_BIAS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        DATA_BIAS_blk_n_R = m_axi_DATA_BIAS_RVALID;
    end else begin
        DATA_BIAS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_DATA_INPUT_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        DATA_INPUT_ARVALID = 1'b1;
    end else begin
        DATA_INPUT_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == DATA_INPUT_RVALID) & (exitcond8_fu_1065_p2 == 1'd0)) & (exitcond8_fu_1065_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        DATA_INPUT_RREADY = 1'b1;
    end else begin
        DATA_INPUT_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        DATA_INPUT_blk_n_AR = m_axi_DATA_INPUT_ARREADY;
    end else begin
        DATA_INPUT_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond8_fu_1065_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        DATA_INPUT_blk_n_R = m_axi_DATA_INPUT_RVALID;
    end else begin
        DATA_INPUT_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_DATA_OUTPUT_AWREADY == 1'b0) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage6_01001))) begin
        DATA_OUTPUT_AWVALID = 1'b1;
    end else begin
        DATA_OUTPUT_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        DATA_OUTPUT_BREADY = 1'b1;
    end else begin
        DATA_OUTPUT_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_DATA_OUTPUT_WREADY == 1'b0) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_01001))) begin
        DATA_OUTPUT_WVALID = 1'b1;
    end else begin
        DATA_OUTPUT_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        DATA_OUTPUT_blk_n_AW = m_axi_DATA_OUTPUT_AWREADY;
    end else begin
        DATA_OUTPUT_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage12) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        DATA_OUTPUT_blk_n_B = m_axi_DATA_OUTPUT_BVALID;
    end else begin
        DATA_OUTPUT_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        DATA_OUTPUT_blk_n_W = m_axi_DATA_OUTPUT_WREADY;
    end else begin
        DATA_OUTPUT_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_DATA_WEIGHT_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state14))) begin
        DATA_WEIGHT_ARVALID = 1'b1;
    end else begin
        DATA_WEIGHT_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == DATA_WEIGHT_RVALID) & (exitcond5_fu_1178_p2 == 1'd0)) & (exitcond5_fu_1178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        DATA_WEIGHT_RREADY = 1'b1;
    end else begin
        DATA_WEIGHT_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        DATA_WEIGHT_blk_n_AR = m_axi_DATA_WEIGHT_ARREADY;
    end else begin
        DATA_WEIGHT_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond5_fu_1178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        DATA_WEIGHT_blk_n_R = m_axi_DATA_WEIGHT_RVALID;
    end else begin
        DATA_WEIGHT_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_1199_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_co_phi_fu_764_p4 = tmp_5_mid2_reg_2185;
    end else begin
        ap_phi_mux_co_phi_fu_764_p4 = co_reg_760;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (exitcond_flatten1_reg_2166_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_h_phi_fu_786_p4 = tmp_9_mid2_reg_2272;
    end else begin
        ap_phi_mux_h_phi_fu_786_p4 = h_reg_782;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten1_phi_fu_753_p4 = indvar_flatten_next1_reg_2170;
    end else begin
        ap_phi_mux_indvar_flatten1_phi_fu_753_p4 = indvar_flatten1_reg_749;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_775_p4 = indvar_flatten_next_reg_2467;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_775_p4 = indvar_flatten_reg_771;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_2166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_w_phi_fu_798_p4 = w_1_reg_2286;
    end else begin
        ap_phi_mux_w_phi_fu_798_p4 = w_reg_794;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_DATA_BIAS_ARREADY == 1'b0)) begin
        ap_sig_ioackin_DATA_BIAS_ARREADY = DATA_BIAS_ARREADY;
    end else begin
        ap_sig_ioackin_DATA_BIAS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_DATA_INPUT_ARREADY == 1'b0)) begin
        ap_sig_ioackin_DATA_INPUT_ARREADY = DATA_INPUT_ARREADY;
    end else begin
        ap_sig_ioackin_DATA_INPUT_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_DATA_OUTPUT_AWREADY == 1'b0)) begin
        ap_sig_ioackin_DATA_OUTPUT_AWREADY = DATA_OUTPUT_AWREADY;
    end else begin
        ap_sig_ioackin_DATA_OUTPUT_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_DATA_OUTPUT_WREADY == 1'b0)) begin
        ap_sig_ioackin_DATA_OUTPUT_WREADY = DATA_OUTPUT_WREADY;
    end else begin
        ap_sig_ioackin_DATA_OUTPUT_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_DATA_WEIGHT_ARREADY == 1'b0)) begin
        ap_sig_ioackin_DATA_WEIGHT_ARREADY = DATA_WEIGHT_ARREADY;
    end else begin
        ap_sig_ioackin_DATA_WEIGHT_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_fu_805_ce = 1'b1;
    end else begin
        grp_fu_805_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage10)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage2)))) begin
        grp_fu_805_p0 = reg_931;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage5)))) begin
        grp_fu_805_p0 = reg_926;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3)))) begin
        grp_fu_805_p0 = reg_921;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        grp_fu_805_p0 = reg_916;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        grp_fu_805_p0 = reg_911;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_805_p0 = reg_906;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_805_p0 = tmp_8_reg_2452;
    end else begin
        grp_fu_805_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_805_p1 = tmp_14_2_2_reg_2642_pp0_iter4_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage10))) begin
        grp_fu_805_p1 = tmp_14_2_1_reg_2617_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        grp_fu_805_p1 = tmp_14_2_reg_2612_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_805_p1 = tmp_14_1_4_reg_2587_pp0_iter3_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage8))) begin
        grp_fu_805_p1 = tmp_14_1_3_reg_2582_pp0_iter2_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_805_p1 = tmp_14_1_2_reg_2557_pp0_iter2_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage11))) begin
        grp_fu_805_p1 = tmp_14_1_1_reg_2552_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_805_p1 = tmp_14_1_reg_2527_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_805_p1 = tmp_14_0_4_reg_2522_pp0_iter1_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
        grp_fu_805_p1 = tmp_14_0_3_reg_2497_pp0_iter1_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_805_p1 = tmp_14_0_2_reg_2487;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        grp_fu_805_p1 = tmp_14_0_1_reg_2462;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_805_p1 = 32'd0;
    end else begin
        grp_fu_805_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_fu_810_ce = 1'b1;
    end else begin
        grp_fu_810_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage10)))) begin
        grp_fu_810_p0 = reg_962;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage5)))) begin
        grp_fu_810_p0 = reg_957;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage3)))) begin
        grp_fu_810_p0 = reg_952;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
        grp_fu_810_p0 = reg_947;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
        grp_fu_810_p0 = reg_941;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        grp_fu_810_p0 = reg_936;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_810_p0 = sum_2_2_2_reg_2727;
    end else begin
        grp_fu_810_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_810_p1 = DATA_BIAS_addr_read_reg_2743;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage10))) begin
        grp_fu_810_p1 = tmp_14_4_4_reg_2722_pp0_iter9_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        grp_fu_810_p1 = tmp_14_4_3_reg_2717_pp0_iter9_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_810_p1 = tmp_14_4_2_reg_2712_pp0_iter8_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage8))) begin
        grp_fu_810_p1 = tmp_14_4_1_reg_2707_pp0_iter8_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_810_p1 = tmp_14_4_reg_2702_pp0_iter7_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage11))) begin
        grp_fu_810_p1 = tmp_14_3_4_reg_2697_pp0_iter7_reg;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        grp_fu_810_p1 = tmp_14_3_3_reg_2692_pp0_iter7_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        grp_fu_810_p1 = tmp_14_3_2_reg_2682_pp0_iter6_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage9))) begin
        grp_fu_810_p1 = tmp_14_3_1_reg_2677_pp0_iter6_reg;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_810_p1 = tmp_14_3_reg_2667_pp0_iter6_reg;
    end else if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_810_p1 = tmp_14_2_4_reg_2662_pp0_iter5_reg;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_810_p1 = tmp_14_2_3_reg_2647_pp0_iter4_reg;
    end else begin
        grp_fu_810_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_fu_814_ce = 1'b1;
    end else begin
        grp_fu_814_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_814_p0 = weights_oc_0_load_24_reg_2672;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_814_p0 = reg_886;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)))) begin
        grp_fu_814_p0 = reg_866;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_814_p0 = reg_846;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_fu_814_p0 = reg_822;
    end else begin
        grp_fu_814_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_814_p1 = input_oc_0_load_24_reg_2687;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_814_p1 = reg_896;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)))) begin
        grp_fu_814_p1 = reg_876;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_814_p1 = reg_856;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_fu_814_p1 = reg_834;
    end else begin
        grp_fu_814_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_fu_818_ce = 1'b1;
    end else begin
        grp_fu_818_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_818_p0 = reg_891;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)))) begin
        grp_fu_818_p0 = reg_871;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_818_p0 = reg_851;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_fu_818_p0 = reg_828;
    end else begin
        grp_fu_818_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_818_p1 = reg_901;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)))) begin
        grp_fu_818_p1 = reg_881;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_818_p1 = reg_861;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_fu_818_p1 = reg_840;
    end else begin
        grp_fu_818_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        input_oc_0_address0 = tmp_70_fu_1952_p1;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        input_oc_0_address0 = tmp_65_fu_1931_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11))) begin
        input_oc_0_address0 = tmp_52_fu_1889_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10))) begin
        input_oc_0_address0 = tmp_69_fu_1847_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9))) begin
        input_oc_0_address0 = tmp_59_fu_1805_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8))) begin
        input_oc_0_address0 = tmp_40_fu_1752_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        input_oc_0_address0 = tmp_63_fu_1721_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        input_oc_0_address0 = tmp_48_fu_1673_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        input_oc_0_address0 = tmp_67_fu_1554_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4))) begin
        input_oc_0_address0 = tmp_56_fu_1512_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        input_oc_0_address0 = tmp_36_fu_1453_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        input_oc_0_address0 = tmp_61_fu_1396_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_oc_0_address0 = tmp_34_fu_1324_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        input_oc_0_address0 = tmp_17_cast_fu_1086_p1;
    end else begin
        input_oc_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            input_oc_0_address1 = tmp_60_fu_1920_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11))) begin
            input_oc_0_address1 = tmp_42_fu_1878_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            input_oc_0_address1 = tmp_64_fu_1836_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            input_oc_0_address1 = tmp_50_fu_1794_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            input_oc_0_address1 = tmp_68_fu_1763_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            input_oc_0_address1 = tmp_58_fu_1710_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            input_oc_0_address1 = tmp_38_fu_1661_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            input_oc_0_address1 = tmp_62_fu_1543_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            input_oc_0_address1 = tmp_46_fu_1501_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            input_oc_0_address1 = tmp_66_fu_1470_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            input_oc_0_address1 = tmp_54_fu_1379_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_oc_0_address1 = tmp_44_fu_1342_p1;
        end else begin
            input_oc_0_address1 = 'bx;
        end
    end else begin
        input_oc_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        input_oc_0_ce0 = 1'b1;
    end else begin
        input_oc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        input_oc_0_ce1 = 1'b1;
    end else begin
        input_oc_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_oc_0_we0 = 1'b1;
    end else begin
        input_oc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_oc_0_address0 = weights_oc_0_load_2_12_fu_1941_p1;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        weights_oc_0_address0 = weights_oc_0_load_2_11_fu_1909_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11))) begin
        weights_oc_0_address0 = weights_oc_0_load_2_7_fu_1867_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10))) begin
        weights_oc_0_address0 = weights_oc_0_load_1_22_fu_1825_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9))) begin
        weights_oc_0_address0 = weights_oc_0_load_1_20_fu_1783_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8))) begin
        weights_oc_0_address0 = weights_oc_0_load_1_18_fu_1741_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        weights_oc_0_address0 = weights_oc_0_load_1_16_fu_1699_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        weights_oc_0_address0 = weights_oc_0_load_1_13_fu_1574_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        weights_oc_0_address0 = weights_oc_0_load_9_1_fu_1532_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4))) begin
        weights_oc_0_address0 = weights_oc_0_load_7_1_fu_1490_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        weights_oc_0_address0 = weights_oc_0_load_5_1_fu_1416_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        weights_oc_0_address0 = weights_oc_0_load_3_1_fu_1362_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        weights_oc_0_address0 = weights_oc_0_load_m_2_fu_1290_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        weights_oc_0_address0 = tmp_74_reg_2156;
    end else begin
        weights_oc_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            weights_oc_0_address1 = weights_oc_0_load_2_9_fu_1899_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11))) begin
            weights_oc_0_address1 = weights_oc_0_load_2_5_fu_1857_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            weights_oc_0_address1 = weights_oc_0_load_1_21_fu_1815_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            weights_oc_0_address1 = weights_oc_0_load_1_19_fu_1773_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            weights_oc_0_address1 = weights_oc_0_load_1_17_fu_1731_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            weights_oc_0_address1 = weights_oc_0_load_1_14_fu_1689_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            weights_oc_0_address1 = weights_oc_0_load_1_12_fu_1564_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            weights_oc_0_address1 = weights_oc_0_load_8_1_fu_1522_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
            weights_oc_0_address1 = weights_oc_0_load_6_1_fu_1480_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            weights_oc_0_address1 = weights_oc_0_load_4_1_fu_1406_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
            weights_oc_0_address1 = weights_oc_0_load_2_3_fu_1352_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            weights_oc_0_address1 = weights_oc_0_load_1_11_fu_1299_p1;
        end else begin
            weights_oc_0_address1 = 'bx;
        end
    end else begin
        weights_oc_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        weights_oc_0_ce0 = 1'b1;
    end else begin
        weights_oc_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        weights_oc_0_ce1 = 1'b1;
    end else begin
        weights_oc_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        weights_oc_0_we0 = 1'b1;
    end else begin
        weights_oc_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_1023_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_DATA_INPUT_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((1'b0 == DATA_INPUT_RVALID) & (exitcond8_fu_1065_p2 == 1'd0)) & (exitcond8_fu_1065_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((1'b0 == DATA_INPUT_RVALID) & (exitcond8_fu_1065_p2 == 1'd0)) & (exitcond8_fu_1065_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_1090_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond6_fu_1124_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (ap_sig_ioackin_DATA_WEIGHT_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if ((~((1'b0 == DATA_WEIGHT_RVALID) & (exitcond5_fu_1178_p2 == 1'd0)) & (exitcond5_fu_1178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if ((~((1'b0 == DATA_WEIGHT_RVALID) & (exitcond5_fu_1178_p2 == 1'd0)) & (exitcond5_fu_1178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten1_fu_1199_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten1_fu_1199_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((~((ap_enable_reg_pp0_iter9 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage12_subdone)) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter9 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage12_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DATA_BIAS_ARADDR = bias6_sum_cast_fu_1965_p1;

assign DATA_INPUT_ARADDR = tmp_11_fu_1052_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((1'b0 == DATA_OUTPUT_BVALID) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((1'b0 == DATA_OUTPUT_BVALID) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b0 == DATA_BIAS_RVALID) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b0 == DATA_BIAS_RVALID) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((1'b1 == ap_block_state159_io) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((1'b1 == ap_block_state159_io) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((1'b1 == ap_block_state160_io) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((1'b1 == ap_block_state147_io) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((1'b1 == ap_block_state160_io) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((1'b1 == ap_block_state147_io) & (ap_enable_reg_pp0_iter9 == 1'b1)));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10 = ((1'b0 == DATA_INPUT_RVALID) & (exitcond8_fu_1065_p2 == 1'd0));
end

assign ap_block_state100_pp0_stage12_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage5_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage6_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage7_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage8_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage9_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage10_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp0_stage11_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp0_stage12_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage3_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp0_stage4_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp0_stage5_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp0_stage6_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp0_stage7_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp0_stage8_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp0_stage9_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp0_stage10_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp0_stage11_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp0_stage12_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state127_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state128_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state129_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state130_pp0_stage3_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state131_pp0_stage4_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state132_pp0_stage5_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state133_pp0_stage6_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state134_pp0_stage7_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state135_pp0_stage8_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state136_pp0_stage9_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state137_pp0_stage10_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state138_pp0_stage11_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state139_pp0_stage12_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state140_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state141_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp0_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state143_pp0_stage3_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state144_pp0_stage4_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state145_pp0_stage5_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state146_pp0_stage6_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state147_io = ((ap_sig_ioackin_DATA_BIAS_ARREADY == 1'b0) & (exitcond_flatten1_reg_2166_pp0_iter9_reg == 1'd0));
end

assign ap_block_state147_pp0_stage7_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state148_pp0_stage8_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state149_pp0_stage9_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state150_pp0_stage10_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state151_pp0_stage11_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state152_pp0_stage12_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state153_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state154_pp0_stage1_iter10 = ((1'b0 == DATA_BIAS_RVALID) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0));
end

assign ap_block_state155_pp0_stage2_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state156_pp0_stage3_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state157_pp0_stage4_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state158_pp0_stage5_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state159_io = ((ap_sig_ioackin_DATA_OUTPUT_AWREADY == 1'b0) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0));
end

assign ap_block_state159_pp0_stage6_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state160_io = ((ap_sig_ioackin_DATA_OUTPUT_WREADY == 1'b0) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0));
end

assign ap_block_state160_pp0_stage7_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state161_pp0_stage8_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state162_pp0_stage9_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state163_pp0_stage10_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state164_pp0_stage11_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state165_pp0_stage12_iter10 = ((1'b0 == DATA_OUTPUT_BVALID) & (exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_block_state21 = ((1'b0 == DATA_WEIGHT_RVALID) & (exitcond5_fu_1178_p2 == 1'd0));
end

assign ap_block_state23_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage12_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage10_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage11_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage12_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage8_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage9_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage10_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage11_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage12_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage6_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage7_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage8_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage9_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage10_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage11_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage12_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage5_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage6_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage7_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage8_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage9_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage10_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage11_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_2971 = ((exitcond_flatten1_reg_2166_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7));
end

always @ (*) begin
    ap_condition_2976 = ((exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter10 == 1'b1));
end

always @ (*) begin
    ap_condition_2980 = ((exitcond_flatten1_reg_2166_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = 32'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias6_sum_cast_fu_1965_p1 = bias6_sum_reg_2732;

assign bias6_sum_fu_1960_p2 = (tmp_5_mid2_cast_fu_1957_p1 + tmp_10_cast_reg_2053);

assign co_1_fu_1211_p2 = (3'd1 + ap_phi_mux_co_phi_fu_764_p4);

assign exitcond2_mid_fu_1257_p2 = (not_exitcond_flatten_fu_1245_p2 & exitcond_fu_1251_p2);

assign exitcond5_fu_1178_p2 = ((k_reg_738 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond6_fu_1124_p2 = ((j2_reg_727 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond7_fu_1090_p2 = ((i1_reg_716 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond8_fu_1065_p2 = ((j_reg_705 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond9_fu_1023_p2 = ((i_reg_694 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_1199_p2 = ((ap_phi_mux_indvar_flatten1_phi_fu_753_p4 == 13'd4704) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_1217_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_775_p4 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond_fu_1251_p2 = ((ap_phi_mux_w_phi_fu_798_p4 == 5'd28) ? 1'b1 : 1'b0);

assign h_1_dup_fu_1304_p2 = (5'd1 + h_mid_fu_1283_p3);

assign h_1_mid1_fu_1421_p2 = (5'd2 + h_mid_reg_2254);

assign h_mid_fu_1283_p3 = ((exitcond_flatten_reg_2175[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_h_phi_fu_786_p4);

assign h_s_fu_1426_p2 = (5'd1 + h_reg_782);

assign i_1_fu_1029_p2 = (i_reg_694 + 6'd1);

assign i_2_fu_1096_p2 = (i1_reg_716 + 3'd1);

assign indvar_flatten_next1_fu_1205_p2 = (ap_phi_mux_indvar_flatten1_phi_fu_753_p4 + 13'd1);

assign indvar_flatten_next_fu_1678_p3 = ((exitcond_flatten_reg_2175[0:0] === 1'b1) ? 10'd1 : indvar_flatten_op_reg_2249);

assign indvar_flatten_op_fu_1277_p2 = (10'd1 + ap_phi_mux_indvar_flatten_phi_fu_775_p4);

assign j_1_fu_1071_p2 = (j_reg_705 + 6'd1);

assign j_2_fu_1130_p2 = (j2_reg_727 + 3'd1);

assign k_1_fu_1184_p2 = (k_reg_738 + 3'd1);

assign not_exitcond_flatten_fu_1245_p2 = (exitcond_flatten_fu_1217_p2 ^ 1'd1);

assign output7_fu_967_p4 = {{output_r[31:2]}};

assign output8_sum_fu_2037_p2 = (tmp_32_fu_2031_p2 + tmp_reg_2048);

assign p_shl1_fu_1982_p1 = tmp_15_fu_1975_p3;

assign p_shl2_fu_1993_p1 = tmp_16_fu_1986_p3;

assign p_shl9_fu_1157_p1 = tmp_86_fu_1149_p3;

assign p_shl_cast_fu_1114_p1 = tmp_12_fu_1106_p3;

assign tmp_10_cast_fu_991_p1 = tmp_1_fu_981_p4;

assign tmp_10_fu_1047_p2 = (tmp_9_fu_1043_p1 + tmp_12_cast_reg_2063);

assign tmp_11_fu_1052_p1 = tmp_10_reg_2081;

assign tmp_12_0_2_fu_1367_p2 = (5'd2 + w_mid2_reg_2235);

assign tmp_12_0_3_fu_1384_p2 = (5'd3 + w_mid2_reg_2235);

assign tmp_12_0_4_fu_1458_p2 = (5'd4 + w_mid2_reg_2235);

assign tmp_12_cast_fu_1019_p1 = tmp_5_fu_1009_p4;

assign tmp_12_fu_1106_p3 = {{i1_reg_716}, {2'd0}};

assign tmp_13_fu_1118_p2 = (tmp_1_cast_fu_1102_p1 + p_shl_cast_fu_1114_p1);

assign tmp_14_cast_fu_1062_p1 = tmp_7_reg_2076;

assign tmp_14_fu_1081_p2 = (tmp_14_cast_reg_2092 + tmp_3_cast_fu_1077_p1);

assign tmp_15_fu_1975_p3 = {{tmp_5_mid2_reg_2185_pp0_iter10_reg}, {5'd0}};

assign tmp_16_fu_1986_p3 = {{tmp_5_mid2_reg_2185_pp0_iter10_reg}, {2'd0}};

assign tmp_17_cast_fu_1086_p1 = tmp_14_reg_2105;

assign tmp_17_fu_1997_p2 = (p_shl1_fu_1982_p1 - p_shl2_fu_1993_p1);

assign tmp_18_fu_1241_p1 = weights_oc_0_load_m_fu_1235_p2[7:0];

assign tmp_19_fu_1263_p2 = (exitcond_flatten_fu_1217_p2 | exitcond2_mid_fu_1257_p2);

assign tmp_1_cast_fu_1102_p1 = i1_reg_716;

assign tmp_1_fu_981_p4 = {{bias[31:2]}};

assign tmp_20_fu_2006_p2 = (tmp_9_mid2_cast_fu_2003_p1 + tmp_17_fu_1997_p2);

assign tmp_21_fu_2012_p2 = tmp_20_reg_2748 << 64'd5;

assign tmp_22_fu_2017_p2 = tmp_20_reg_2748 << 64'd2;

assign tmp_23_fu_2022_p2 = (tmp_21_fu_2012_p2 - tmp_22_fu_2017_p2);

assign tmp_24_fu_1432_p3 = ((exitcond_flatten_reg_2175[0:0] === 1'b1) ? 5'd1 : h_s_fu_1426_p2);

assign tmp_25_fu_1439_p3 = ((exitcond2_mid_reg_2226[0:0] === 1'b1) ? h_1_mid1_fu_1421_p2 : tmp_24_fu_1432_p3);

assign tmp_26_fu_1590_p3 = ((exitcond_flatten_reg_2175[0:0] === 1'b1) ? 5'd2 : tmp_8_s_fu_1584_p2);

assign tmp_27_fu_1597_p3 = ((exitcond2_mid_reg_2226[0:0] === 1'b1) ? tmp_8_2_mid1_fu_1579_p2 : tmp_26_fu_1590_p3);

assign tmp_28_fu_1615_p3 = ((exitcond_flatten_reg_2175[0:0] === 1'b1) ? 5'd3 : tmp_8_1_fu_1609_p2);

assign tmp_29_fu_1622_p3 = ((exitcond2_mid_reg_2226[0:0] === 1'b1) ? tmp_8_3_mid1_fu_1604_p2 : tmp_28_fu_1615_p3);

assign tmp_30_fu_1640_p3 = ((exitcond_flatten_reg_2175[0:0] === 1'b1) ? 5'd4 : tmp_8_2_fu_1634_p2);

assign tmp_31_fu_1647_p3 = ((exitcond2_mid_reg_2226[0:0] === 1'b1) ? tmp_8_4_mid1_fu_1629_p2 : tmp_30_fu_1640_p3);

assign tmp_32_fu_2031_p2 = (tmp_6_fu_2028_p1 + tmp_23_fu_2022_p2);

assign tmp_33_fu_1317_p3 = {{tmp_9_mid2_fu_1310_p3}, {w_mid2_reg_2235}};

assign tmp_34_fu_1324_p1 = tmp_33_fu_1317_p3;

assign tmp_35_fu_1446_p3 = {{tmp_25_fu_1439_p3}, {w_mid2_reg_2235}};

assign tmp_36_fu_1453_p1 = tmp_35_fu_1446_p3;

assign tmp_37_fu_1654_p3 = {{tmp_27_fu_1597_p3}, {w_mid2_reg_2235}};

assign tmp_38_fu_1661_p1 = tmp_37_fu_1654_p3;

assign tmp_39_fu_1746_p3 = {{tmp_29_reg_2429}, {w_mid2_reg_2235}};

assign tmp_3_cast_fu_1077_p1 = j_reg_705;

assign tmp_3_fu_1005_p1 = weights3_fu_995_p4;

assign tmp_40_fu_1752_p1 = tmp_39_fu_1746_p3;

assign tmp_41_fu_1872_p3 = {{tmp_31_reg_2438}, {w_mid2_reg_2235}};

assign tmp_42_fu_1878_p1 = tmp_41_fu_1872_p3;

assign tmp_43_fu_1334_p3 = {{tmp_9_mid2_fu_1310_p3}, {w_1_fu_1329_p2}};

assign tmp_44_fu_1342_p1 = tmp_43_fu_1334_p3;

assign tmp_45_fu_1495_p3 = {{tmp_25_reg_2346}, {w_1_reg_2286}};

assign tmp_46_fu_1501_p1 = tmp_45_fu_1495_p3;

assign tmp_47_fu_1666_p3 = {{tmp_27_fu_1597_p3}, {w_1_reg_2286}};

assign tmp_48_fu_1673_p1 = tmp_47_fu_1666_p3;

assign tmp_49_fu_1788_p3 = {{tmp_29_reg_2429}, {w_1_reg_2286}};

assign tmp_50_fu_1794_p1 = tmp_49_fu_1788_p3;

assign tmp_51_fu_1883_p3 = {{tmp_31_reg_2438}, {w_1_reg_2286}};

assign tmp_52_fu_1889_p1 = tmp_51_fu_1883_p3;

assign tmp_53_fu_1372_p3 = {{tmp_9_mid2_reg_2272}, {tmp_12_0_2_fu_1367_p2}};

assign tmp_54_fu_1379_p1 = tmp_53_fu_1372_p3;

assign tmp_55_fu_1506_p3 = {{tmp_25_reg_2346}, {tmp_12_0_2_reg_2310}};

assign tmp_56_fu_1512_p1 = tmp_55_fu_1506_p3;

assign tmp_57_fu_1704_p3 = {{tmp_27_reg_2422}, {tmp_12_0_2_reg_2310}};

assign tmp_58_fu_1710_p1 = tmp_57_fu_1704_p3;

assign tmp_59_fu_1805_p1 = tmp_72_fu_1799_p3;

assign tmp_5_fu_1009_p4 = {{input_r[31:2]}};

assign tmp_5_mid2_cast_fu_1957_p1 = tmp_5_mid2_reg_2185_pp0_iter9_reg;

assign tmp_5_mid2_fu_1223_p3 = ((exitcond_flatten_fu_1217_p2[0:0] === 1'b1) ? co_1_fu_1211_p2 : ap_phi_mux_co_phi_fu_764_p4);

assign tmp_60_fu_1920_p1 = tmp_75_fu_1914_p3;

assign tmp_61_fu_1396_p1 = tmp_76_fu_1389_p3;

assign tmp_62_fu_1543_p1 = tmp_77_fu_1537_p3;

assign tmp_63_fu_1721_p1 = tmp_78_fu_1715_p3;

assign tmp_64_fu_1836_p1 = tmp_79_fu_1830_p3;

assign tmp_65_fu_1931_p1 = tmp_80_fu_1925_p3;

assign tmp_66_fu_1470_p1 = tmp_81_fu_1463_p3;

assign tmp_67_fu_1554_p1 = tmp_82_fu_1548_p3;

assign tmp_68_fu_1763_p1 = tmp_83_fu_1757_p3;

assign tmp_69_fu_1847_p1 = tmp_84_fu_1841_p3;

assign tmp_6_fu_2028_p1 = w_mid2_reg_2235_pp0_iter10_reg;

assign tmp_70_fu_1952_p1 = tmp_85_fu_1946_p3;

assign tmp_71_cast_fu_1145_p1 = tmp_71_fu_1140_p2;

assign tmp_71_fu_1140_p2 = (tmp_13_reg_2124 + tmp_7_cast_fu_1136_p1);

assign tmp_72_fu_1799_p3 = {{tmp_29_reg_2429}, {tmp_12_0_2_reg_2310}};

assign tmp_73_fu_1161_p2 = (tmp_71_cast_fu_1145_p1 + p_shl9_fu_1157_p1);

assign tmp_74_fu_1194_p2 = (tmp_s_fu_1190_p1 + tmp_73_reg_2137);

assign tmp_75_fu_1914_p3 = {{tmp_31_reg_2438}, {tmp_12_0_2_reg_2310}};

assign tmp_76_fu_1389_p3 = {{tmp_9_mid2_reg_2272}, {tmp_12_0_3_fu_1384_p2}};

assign tmp_77_fu_1537_p3 = {{tmp_25_reg_2346}, {tmp_12_0_3_reg_2323}};

assign tmp_78_fu_1715_p3 = {{tmp_27_reg_2422}, {tmp_12_0_3_reg_2323}};

assign tmp_79_fu_1830_p3 = {{tmp_29_reg_2429}, {tmp_12_0_3_reg_2323}};

assign tmp_7_cast_fu_1136_p1 = j2_reg_727;

assign tmp_7_fu_1035_p3 = {{i_reg_694}, {5'd0}};

assign tmp_80_fu_1925_p3 = {{tmp_31_reg_2438}, {tmp_12_0_3_reg_2323}};

assign tmp_81_fu_1463_p3 = {{tmp_9_mid2_reg_2272}, {tmp_12_0_4_fu_1458_p2}};

assign tmp_82_fu_1548_p3 = {{tmp_25_reg_2346}, {tmp_12_0_4_reg_2359}};

assign tmp_83_fu_1757_p3 = {{tmp_27_reg_2422}, {tmp_12_0_4_reg_2359}};

assign tmp_84_fu_1841_p3 = {{tmp_29_reg_2429}, {tmp_12_0_4_reg_2359}};

assign tmp_85_fu_1946_p3 = {{tmp_31_reg_2438}, {tmp_12_0_4_reg_2359}};

assign tmp_86_fu_1149_p3 = {{tmp_71_fu_1140_p2}, {2'd0}};

assign tmp_87_fu_1167_p2 = (tmp_73_fu_1161_p2 + tmp_3_reg_2058);

assign tmp_8_1_fu_1609_p2 = (5'd3 + h_reg_782);

assign tmp_8_2_fu_1634_p2 = (5'd4 + h_reg_782);

assign tmp_8_2_mid1_fu_1579_p2 = (5'd3 + h_mid_reg_2254);

assign tmp_8_3_mid1_fu_1604_p2 = (5'd4 + h_mid_reg_2254);

assign tmp_8_4_mid1_fu_1629_p2 = (5'd5 + h_mid_reg_2254);

assign tmp_8_s_fu_1584_p2 = (5'd2 + h_reg_782);

assign tmp_9_fu_1043_p1 = tmp_7_fu_1035_p3;

assign tmp_9_mid2_cast_fu_2003_p1 = tmp_9_mid2_reg_2272_pp0_iter10_reg;

assign tmp_9_mid2_fu_1310_p3 = ((exitcond2_mid_reg_2226[0:0] === 1'b1) ? h_1_dup_fu_1304_p2 : h_mid_fu_1283_p3);

assign tmp_fu_977_p1 = output7_fu_967_p4;

assign tmp_s_fu_1190_p1 = k_reg_738;

assign w_1_fu_1329_p2 = (5'd1 + w_mid2_reg_2235);

assign w_mid2_fu_1269_p3 = ((tmp_19_fu_1263_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_w_phi_fu_798_p4);

assign weights3_fu_995_p4 = {{weights[31:2]}};

assign weights_oc_0_load_1_10_fu_1820_p2 = (8'd19 + tmp_18_reg_2198);

assign weights_oc_0_load_1_11_fu_1299_p1 = weights_oc_0_load_1_2_fu_1294_p2;

assign weights_oc_0_load_1_12_fu_1564_p1 = weights_oc_0_load_1_4_fu_1559_p2;

assign weights_oc_0_load_1_13_fu_1574_p1 = weights_oc_0_load_1_6_fu_1569_p2;

assign weights_oc_0_load_1_14_fu_1689_p1 = weights_oc_0_load_1_8_fu_1684_p2;

assign weights_oc_0_load_1_15_fu_1694_p2 = (8'd13 + tmp_18_reg_2198);

assign weights_oc_0_load_1_16_fu_1699_p1 = weights_oc_0_load_1_15_fu_1694_p2;

assign weights_oc_0_load_1_17_fu_1731_p1 = weights_oc_0_load_1_1_fu_1726_p2;

assign weights_oc_0_load_1_18_fu_1741_p1 = weights_oc_0_load_1_3_fu_1736_p2;

assign weights_oc_0_load_1_19_fu_1773_p1 = weights_oc_0_load_1_5_fu_1768_p2;

assign weights_oc_0_load_1_1_fu_1726_p2 = (8'd14 + tmp_18_reg_2198);

assign weights_oc_0_load_1_20_fu_1783_p1 = weights_oc_0_load_1_7_fu_1778_p2;

assign weights_oc_0_load_1_21_fu_1815_p1 = weights_oc_0_load_1_9_fu_1810_p2;

assign weights_oc_0_load_1_22_fu_1825_p1 = weights_oc_0_load_1_10_fu_1820_p2;

assign weights_oc_0_load_1_2_fu_1294_p2 = (8'd1 + tmp_18_reg_2198);

assign weights_oc_0_load_1_3_fu_1736_p2 = (8'd15 + tmp_18_reg_2198);

assign weights_oc_0_load_1_4_fu_1559_p2 = (8'd10 + tmp_18_reg_2198);

assign weights_oc_0_load_1_5_fu_1768_p2 = (8'd16 + tmp_18_reg_2198);

assign weights_oc_0_load_1_6_fu_1569_p2 = (8'd11 + tmp_18_reg_2198);

assign weights_oc_0_load_1_7_fu_1778_p2 = (8'd17 + tmp_18_reg_2198);

assign weights_oc_0_load_1_8_fu_1684_p2 = (8'd12 + tmp_18_reg_2198);

assign weights_oc_0_load_1_9_fu_1810_p2 = (8'd18 + tmp_18_reg_2198);

assign weights_oc_0_load_2_10_fu_1904_p2 = (8'd23 + tmp_18_reg_2198);

assign weights_oc_0_load_2_11_fu_1909_p1 = weights_oc_0_load_2_10_fu_1904_p2;

assign weights_oc_0_load_2_12_fu_1941_p1 = weights_oc_0_load_2_1_fu_1936_p2;

assign weights_oc_0_load_2_1_fu_1936_p2 = (8'd24 + tmp_18_reg_2198);

assign weights_oc_0_load_2_2_fu_1347_p2 = (8'd2 + tmp_18_reg_2198);

assign weights_oc_0_load_2_3_fu_1352_p1 = weights_oc_0_load_2_2_fu_1347_p2;

assign weights_oc_0_load_2_4_fu_1852_p2 = (8'd20 + tmp_18_reg_2198);

assign weights_oc_0_load_2_5_fu_1857_p1 = weights_oc_0_load_2_4_fu_1852_p2;

assign weights_oc_0_load_2_6_fu_1862_p2 = (8'd21 + tmp_18_reg_2198);

assign weights_oc_0_load_2_7_fu_1867_p1 = weights_oc_0_load_2_6_fu_1862_p2;

assign weights_oc_0_load_2_8_fu_1894_p2 = (8'd22 + tmp_18_reg_2198);

assign weights_oc_0_load_2_9_fu_1899_p1 = weights_oc_0_load_2_8_fu_1894_p2;

assign weights_oc_0_load_3_1_fu_1362_p1 = weights_oc_0_load_3_2_fu_1357_p2;

assign weights_oc_0_load_3_2_fu_1357_p2 = (8'd3 + tmp_18_reg_2198);

assign weights_oc_0_load_4_1_fu_1406_p1 = weights_oc_0_load_4_2_fu_1401_p2;

assign weights_oc_0_load_4_2_fu_1401_p2 = (8'd4 + tmp_18_reg_2198);

assign weights_oc_0_load_5_1_fu_1416_p1 = weights_oc_0_load_5_2_fu_1411_p2;

assign weights_oc_0_load_5_2_fu_1411_p2 = (8'd5 + tmp_18_reg_2198);

assign weights_oc_0_load_6_1_fu_1480_p1 = weights_oc_0_load_6_2_fu_1475_p2;

assign weights_oc_0_load_6_2_fu_1475_p2 = (8'd6 + tmp_18_reg_2198);

assign weights_oc_0_load_7_1_fu_1490_p1 = weights_oc_0_load_7_2_fu_1485_p2;

assign weights_oc_0_load_7_2_fu_1485_p2 = (8'd7 + tmp_18_reg_2198);

assign weights_oc_0_load_8_1_fu_1522_p1 = weights_oc_0_load_8_2_fu_1517_p2;

assign weights_oc_0_load_8_2_fu_1517_p2 = (8'd8 + tmp_18_reg_2198);

assign weights_oc_0_load_9_1_fu_1532_p1 = weights_oc_0_load_9_2_fu_1527_p2;

assign weights_oc_0_load_9_2_fu_1527_p2 = (8'd9 + tmp_18_reg_2198);

assign weights_oc_0_load_m_2_fu_1290_p1 = weights_oc_0_load_m_reg_2193;

assign weights_oc_0_load_m_fu_1235_p1 = weights_oc_0_load_m_fu_1235_p10;

assign weights_oc_0_load_m_fu_1235_p10 = tmp_5_mid2_fu_1223_p3;

assign weights_oc_0_load_m_fu_1235_p2 = (9'd25 * weights_oc_0_load_m_fu_1235_p1);

always @ (posedge ap_clk) begin
    tmp_reg_2048[63:30] <= 34'b0000000000000000000000000000000000;
    tmp_10_cast_reg_2053[30] <= 1'b0;
    tmp_3_reg_2058[63:30] <= 34'b0000000000000000000000000000000000;
    tmp_12_cast_reg_2063[30] <= 1'b0;
    tmp_7_reg_2076[4:0] <= 5'b00000;
    tmp_14_cast_reg_2092[4:0] <= 5'b00000;
    tmp_14_cast_reg_2092[11] <= 1'b0;
end

endmodule //conv1
