// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fc_6.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fc_6::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fc_6::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> fc_6::ap_ST_fsm_state1 = "1";
const sc_lv<32> fc_6::ap_ST_fsm_state2 = "10";
const sc_lv<32> fc_6::ap_ST_fsm_state3 = "100";
const sc_lv<32> fc_6::ap_ST_fsm_state4 = "1000";
const sc_lv<32> fc_6::ap_ST_fsm_state5 = "10000";
const sc_lv<32> fc_6::ap_ST_fsm_state6 = "100000";
const sc_lv<32> fc_6::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> fc_6::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> fc_6::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> fc_6::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<32> fc_6::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<32> fc_6::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> fc_6::ap_const_lv1_0 = "0";
const sc_lv<3> fc_6::ap_const_lv3_0 = "000";
const sc_lv<2> fc_6::ap_const_lv2_0 = "00";
const sc_lv<4> fc_6::ap_const_lv4_0 = "0000";
const sc_lv<32> fc_6::ap_const_lv32_8 = "1000";
const sc_lv<32> fc_6::ap_const_lv32_10 = "10000";
const sc_lv<32> fc_6::ap_const_lv32_F = "1111";
const sc_lv<1> fc_6::ap_const_lv1_1 = "1";
const sc_lv<32> fc_6::ap_const_lv32_6 = "110";
const sc_lv<32> fc_6::ap_const_lv32_7 = "111";
const sc_lv<32> fc_6::ap_const_lv32_E = "1110";
const sc_lv<32> fc_6::ap_const_lv32_14 = "10100";
const sc_lv<32> fc_6::ap_const_lv32_19 = "11001";
const sc_lv<32> fc_6::ap_const_lv32_1E = "11110";
const sc_lv<32> fc_6::ap_const_lv32_1F = "11111";
const sc_lv<7> fc_6::ap_const_lv7_0 = "0000000";
const sc_lv<32> fc_6::ap_const_lv32_A = "1010";
const sc_lv<32> fc_6::ap_const_lv32_78 = "1111000";
const sc_lv<32> fc_6::ap_const_lv32_15 = "10101";
const sc_lv<32> fc_6::ap_const_lv32_1A = "11010";
const sc_lv<32> fc_6::ap_const_lv32_11 = "10001";
const sc_lv<4> fc_6::ap_const_lv4_A = "1010";
const sc_lv<4> fc_6::ap_const_lv4_1 = "1";
const sc_lv<7> fc_6::ap_const_lv7_78 = "1111000";
const sc_lv<7> fc_6::ap_const_lv7_1 = "1";
const bool fc_6::ap_const_boolean_1 = true;

fc_6::fc_6(sc_module_name name) : sc_module(name), mVcdFile(0) {
    conv1_fadd_32ns_3bkb_U59 = new conv1_fadd_32ns_3bkb<1,5,32,32,32>("conv1_fadd_32ns_3bkb_U59");
    conv1_fadd_32ns_3bkb_U59->clk(ap_clk);
    conv1_fadd_32ns_3bkb_U59->reset(ap_rst);
    conv1_fadd_32ns_3bkb_U59->din0(tmp_s_reg_141);
    conv1_fadd_32ns_3bkb_U59->din1(grp_fu_164_p1);
    conv1_fadd_32ns_3bkb_U59->ce(ap_var_for_const0);
    conv1_fadd_32ns_3bkb_U59->dout(grp_fu_164_p2);
    conv1_fmul_32ns_3cud_U60 = new conv1_fmul_32ns_3cud<1,4,32,32,32>("conv1_fmul_32ns_3cud_U60");
    conv1_fmul_32ns_3cud_U60->clk(ap_clk);
    conv1_fmul_32ns_3cud_U60->reset(ap_rst);
    conv1_fmul_32ns_3cud_U60->din0(weights_addr_read_reg_324);
    conv1_fmul_32ns_3cud_U60->din1(input_0_0_load_reg_329);
    conv1_fmul_32ns_3cud_U60->ce(ap_var_for_const0);
    conv1_fmul_32ns_3cud_U60->dout(grp_fu_169_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state16);
    sensitive << ( m_axi_bias_RVALID );
    sensitive << ( exitcond_fu_254_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond1_fu_188_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond1_fu_188_p2 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_bias_ARREADY);
    sensitive << ( m_axi_bias_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_bias_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_weights_ARREADY);
    sensitive << ( m_axi_weights_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_weights_ARREADY );

    SC_METHOD(thread_bias_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_bias_ARREADY );

    SC_METHOD(thread_bias_blk_n_R);
    sensitive << ( m_axi_bias_RVALID );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_254_p2 );

    SC_METHOD(thread_c_3_fu_260_p2);
    sensitive << ( c_reg_153 );

    SC_METHOD(thread_exitcond1_fu_188_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( n_reg_129 );

    SC_METHOD(thread_exitcond_fu_254_p2);
    sensitive << ( m_axi_bias_RVALID );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_254_p2 );
    sensitive << ( c_reg_153 );

    SC_METHOD(thread_grp_fu_164_p1);
    sensitive << ( bias_addr_read_reg_319 );
    sensitive << ( tmp_3_reg_334 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_input_0_0_address0);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_2_fu_266_p1 );

    SC_METHOD(thread_input_0_0_ce0);
    sensitive << ( m_axi_bias_RVALID );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_254_p2 );

    SC_METHOD(thread_m_axi_bias_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext2_fu_173_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_bias_ARREADY );

    SC_METHOD(thread_m_axi_bias_ARBURST);

    SC_METHOD(thread_m_axi_bias_ARCACHE);

    SC_METHOD(thread_m_axi_bias_ARID);

    SC_METHOD(thread_m_axi_bias_ARLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_bias_ARREADY );

    SC_METHOD(thread_m_axi_bias_ARLOCK);

    SC_METHOD(thread_m_axi_bias_ARPROT);

    SC_METHOD(thread_m_axi_bias_ARQOS);

    SC_METHOD(thread_m_axi_bias_ARREGION);

    SC_METHOD(thread_m_axi_bias_ARSIZE);

    SC_METHOD(thread_m_axi_bias_ARUSER);

    SC_METHOD(thread_m_axi_bias_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_bias_ARREADY );

    SC_METHOD(thread_m_axi_bias_AWADDR);

    SC_METHOD(thread_m_axi_bias_AWBURST);

    SC_METHOD(thread_m_axi_bias_AWCACHE);

    SC_METHOD(thread_m_axi_bias_AWID);

    SC_METHOD(thread_m_axi_bias_AWLEN);

    SC_METHOD(thread_m_axi_bias_AWLOCK);

    SC_METHOD(thread_m_axi_bias_AWPROT);

    SC_METHOD(thread_m_axi_bias_AWQOS);

    SC_METHOD(thread_m_axi_bias_AWREGION);

    SC_METHOD(thread_m_axi_bias_AWSIZE);

    SC_METHOD(thread_m_axi_bias_AWUSER);

    SC_METHOD(thread_m_axi_bias_AWVALID);

    SC_METHOD(thread_m_axi_bias_BREADY);

    SC_METHOD(thread_m_axi_bias_RREADY);
    sensitive << ( m_axi_bias_RVALID );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_254_p2 );

    SC_METHOD(thread_m_axi_bias_WDATA);

    SC_METHOD(thread_m_axi_bias_WID);

    SC_METHOD(thread_m_axi_bias_WLAST);

    SC_METHOD(thread_m_axi_bias_WSTRB);

    SC_METHOD(thread_m_axi_bias_WUSER);

    SC_METHOD(thread_m_axi_bias_WVALID);

    SC_METHOD(thread_m_axi_weights_ARADDR);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_45_fu_239_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_weights_ARREADY );

    SC_METHOD(thread_m_axi_weights_ARBURST);

    SC_METHOD(thread_m_axi_weights_ARCACHE);

    SC_METHOD(thread_m_axi_weights_ARID);

    SC_METHOD(thread_m_axi_weights_ARLEN);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_reg_ioackin_m_axi_weights_ARREADY );

    SC_METHOD(thread_m_axi_weights_ARLOCK);

    SC_METHOD(thread_m_axi_weights_ARPROT);

    SC_METHOD(thread_m_axi_weights_ARQOS);

    SC_METHOD(thread_m_axi_weights_ARREGION);

    SC_METHOD(thread_m_axi_weights_ARSIZE);

    SC_METHOD(thread_m_axi_weights_ARUSER);

    SC_METHOD(thread_m_axi_weights_ARVALID);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_reg_ioackin_m_axi_weights_ARREADY );

    SC_METHOD(thread_m_axi_weights_AWADDR);

    SC_METHOD(thread_m_axi_weights_AWBURST);

    SC_METHOD(thread_m_axi_weights_AWCACHE);

    SC_METHOD(thread_m_axi_weights_AWID);

    SC_METHOD(thread_m_axi_weights_AWLEN);

    SC_METHOD(thread_m_axi_weights_AWLOCK);

    SC_METHOD(thread_m_axi_weights_AWPROT);

    SC_METHOD(thread_m_axi_weights_AWQOS);

    SC_METHOD(thread_m_axi_weights_AWREGION);

    SC_METHOD(thread_m_axi_weights_AWSIZE);

    SC_METHOD(thread_m_axi_weights_AWUSER);

    SC_METHOD(thread_m_axi_weights_AWVALID);

    SC_METHOD(thread_m_axi_weights_BREADY);

    SC_METHOD(thread_m_axi_weights_RREADY);
    sensitive << ( m_axi_weights_RVALID );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_m_axi_weights_WDATA);

    SC_METHOD(thread_m_axi_weights_WID);

    SC_METHOD(thread_m_axi_weights_WLAST);

    SC_METHOD(thread_m_axi_weights_WSTRB);

    SC_METHOD(thread_m_axi_weights_WUSER);

    SC_METHOD(thread_m_axi_weights_WVALID);

    SC_METHOD(thread_n_1_fu_194_p2);
    sensitive << ( n_reg_129 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( output_addr_reg_301 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( tmp_1_reg_344 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_p_shl6_cast_fu_220_p1);
    sensitive << ( tmp_60_fu_212_p3 );

    SC_METHOD(thread_p_shl_cast_fu_208_p1);
    sensitive << ( tmp_59_fu_200_p3 );

    SC_METHOD(thread_sext2_fu_173_p1);
    sensitive << ( bias_offset );

    SC_METHOD(thread_tmp_2_fu_266_p1);
    sensitive << ( c_reg_153 );

    SC_METHOD(thread_tmp_43_fu_230_p1);
    sensitive << ( tmp_61_fu_224_p2 );

    SC_METHOD(thread_tmp_44_fu_234_p2);
    sensitive << ( weights_offset_cast_reg_277 );
    sensitive << ( tmp_43_fu_230_p1 );

    SC_METHOD(thread_tmp_45_fu_239_p1);
    sensitive << ( tmp_44_reg_290 );

    SC_METHOD(thread_tmp_59_fu_200_p3);
    sensitive << ( n_reg_129 );

    SC_METHOD(thread_tmp_60_fu_212_p3);
    sensitive << ( n_reg_129 );

    SC_METHOD(thread_tmp_61_fu_224_p2);
    sensitive << ( p_shl_cast_fu_208_p1 );
    sensitive << ( p_shl6_cast_fu_220_p1 );

    SC_METHOD(thread_tmp_fu_249_p1);
    sensitive << ( n_reg_129 );

    SC_METHOD(thread_weights_blk_n_AR);
    sensitive << ( m_axi_weights_ARREADY );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_weights_blk_n_R);
    sensitive << ( m_axi_weights_RVALID );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_weights_offset_cast_fu_184_p1);
    sensitive << ( weights_offset );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_weights_RVALID );
    sensitive << ( m_axi_bias_RVALID );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( exitcond_fu_254_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_bias_ARREADY );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond1_fu_188_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_weights_ARREADY );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000000000000000001";
    ap_reg_ioackin_m_axi_bias_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_weights_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fc_6_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_0_0_address0, "(port)input_0_0_address0");
    sc_trace(mVcdFile, input_0_0_ce0, "(port)input_0_0_ce0");
    sc_trace(mVcdFile, input_0_0_q0, "(port)input_0_0_q0");
    sc_trace(mVcdFile, m_axi_weights_AWVALID, "(port)m_axi_weights_AWVALID");
    sc_trace(mVcdFile, m_axi_weights_AWREADY, "(port)m_axi_weights_AWREADY");
    sc_trace(mVcdFile, m_axi_weights_AWADDR, "(port)m_axi_weights_AWADDR");
    sc_trace(mVcdFile, m_axi_weights_AWID, "(port)m_axi_weights_AWID");
    sc_trace(mVcdFile, m_axi_weights_AWLEN, "(port)m_axi_weights_AWLEN");
    sc_trace(mVcdFile, m_axi_weights_AWSIZE, "(port)m_axi_weights_AWSIZE");
    sc_trace(mVcdFile, m_axi_weights_AWBURST, "(port)m_axi_weights_AWBURST");
    sc_trace(mVcdFile, m_axi_weights_AWLOCK, "(port)m_axi_weights_AWLOCK");
    sc_trace(mVcdFile, m_axi_weights_AWCACHE, "(port)m_axi_weights_AWCACHE");
    sc_trace(mVcdFile, m_axi_weights_AWPROT, "(port)m_axi_weights_AWPROT");
    sc_trace(mVcdFile, m_axi_weights_AWQOS, "(port)m_axi_weights_AWQOS");
    sc_trace(mVcdFile, m_axi_weights_AWREGION, "(port)m_axi_weights_AWREGION");
    sc_trace(mVcdFile, m_axi_weights_AWUSER, "(port)m_axi_weights_AWUSER");
    sc_trace(mVcdFile, m_axi_weights_WVALID, "(port)m_axi_weights_WVALID");
    sc_trace(mVcdFile, m_axi_weights_WREADY, "(port)m_axi_weights_WREADY");
    sc_trace(mVcdFile, m_axi_weights_WDATA, "(port)m_axi_weights_WDATA");
    sc_trace(mVcdFile, m_axi_weights_WSTRB, "(port)m_axi_weights_WSTRB");
    sc_trace(mVcdFile, m_axi_weights_WLAST, "(port)m_axi_weights_WLAST");
    sc_trace(mVcdFile, m_axi_weights_WID, "(port)m_axi_weights_WID");
    sc_trace(mVcdFile, m_axi_weights_WUSER, "(port)m_axi_weights_WUSER");
    sc_trace(mVcdFile, m_axi_weights_ARVALID, "(port)m_axi_weights_ARVALID");
    sc_trace(mVcdFile, m_axi_weights_ARREADY, "(port)m_axi_weights_ARREADY");
    sc_trace(mVcdFile, m_axi_weights_ARADDR, "(port)m_axi_weights_ARADDR");
    sc_trace(mVcdFile, m_axi_weights_ARID, "(port)m_axi_weights_ARID");
    sc_trace(mVcdFile, m_axi_weights_ARLEN, "(port)m_axi_weights_ARLEN");
    sc_trace(mVcdFile, m_axi_weights_ARSIZE, "(port)m_axi_weights_ARSIZE");
    sc_trace(mVcdFile, m_axi_weights_ARBURST, "(port)m_axi_weights_ARBURST");
    sc_trace(mVcdFile, m_axi_weights_ARLOCK, "(port)m_axi_weights_ARLOCK");
    sc_trace(mVcdFile, m_axi_weights_ARCACHE, "(port)m_axi_weights_ARCACHE");
    sc_trace(mVcdFile, m_axi_weights_ARPROT, "(port)m_axi_weights_ARPROT");
    sc_trace(mVcdFile, m_axi_weights_ARQOS, "(port)m_axi_weights_ARQOS");
    sc_trace(mVcdFile, m_axi_weights_ARREGION, "(port)m_axi_weights_ARREGION");
    sc_trace(mVcdFile, m_axi_weights_ARUSER, "(port)m_axi_weights_ARUSER");
    sc_trace(mVcdFile, m_axi_weights_RVALID, "(port)m_axi_weights_RVALID");
    sc_trace(mVcdFile, m_axi_weights_RREADY, "(port)m_axi_weights_RREADY");
    sc_trace(mVcdFile, m_axi_weights_RDATA, "(port)m_axi_weights_RDATA");
    sc_trace(mVcdFile, m_axi_weights_RLAST, "(port)m_axi_weights_RLAST");
    sc_trace(mVcdFile, m_axi_weights_RID, "(port)m_axi_weights_RID");
    sc_trace(mVcdFile, m_axi_weights_RUSER, "(port)m_axi_weights_RUSER");
    sc_trace(mVcdFile, m_axi_weights_RRESP, "(port)m_axi_weights_RRESP");
    sc_trace(mVcdFile, m_axi_weights_BVALID, "(port)m_axi_weights_BVALID");
    sc_trace(mVcdFile, m_axi_weights_BREADY, "(port)m_axi_weights_BREADY");
    sc_trace(mVcdFile, m_axi_weights_BRESP, "(port)m_axi_weights_BRESP");
    sc_trace(mVcdFile, m_axi_weights_BID, "(port)m_axi_weights_BID");
    sc_trace(mVcdFile, m_axi_weights_BUSER, "(port)m_axi_weights_BUSER");
    sc_trace(mVcdFile, weights_offset, "(port)weights_offset");
    sc_trace(mVcdFile, m_axi_bias_AWVALID, "(port)m_axi_bias_AWVALID");
    sc_trace(mVcdFile, m_axi_bias_AWREADY, "(port)m_axi_bias_AWREADY");
    sc_trace(mVcdFile, m_axi_bias_AWADDR, "(port)m_axi_bias_AWADDR");
    sc_trace(mVcdFile, m_axi_bias_AWID, "(port)m_axi_bias_AWID");
    sc_trace(mVcdFile, m_axi_bias_AWLEN, "(port)m_axi_bias_AWLEN");
    sc_trace(mVcdFile, m_axi_bias_AWSIZE, "(port)m_axi_bias_AWSIZE");
    sc_trace(mVcdFile, m_axi_bias_AWBURST, "(port)m_axi_bias_AWBURST");
    sc_trace(mVcdFile, m_axi_bias_AWLOCK, "(port)m_axi_bias_AWLOCK");
    sc_trace(mVcdFile, m_axi_bias_AWCACHE, "(port)m_axi_bias_AWCACHE");
    sc_trace(mVcdFile, m_axi_bias_AWPROT, "(port)m_axi_bias_AWPROT");
    sc_trace(mVcdFile, m_axi_bias_AWQOS, "(port)m_axi_bias_AWQOS");
    sc_trace(mVcdFile, m_axi_bias_AWREGION, "(port)m_axi_bias_AWREGION");
    sc_trace(mVcdFile, m_axi_bias_AWUSER, "(port)m_axi_bias_AWUSER");
    sc_trace(mVcdFile, m_axi_bias_WVALID, "(port)m_axi_bias_WVALID");
    sc_trace(mVcdFile, m_axi_bias_WREADY, "(port)m_axi_bias_WREADY");
    sc_trace(mVcdFile, m_axi_bias_WDATA, "(port)m_axi_bias_WDATA");
    sc_trace(mVcdFile, m_axi_bias_WSTRB, "(port)m_axi_bias_WSTRB");
    sc_trace(mVcdFile, m_axi_bias_WLAST, "(port)m_axi_bias_WLAST");
    sc_trace(mVcdFile, m_axi_bias_WID, "(port)m_axi_bias_WID");
    sc_trace(mVcdFile, m_axi_bias_WUSER, "(port)m_axi_bias_WUSER");
    sc_trace(mVcdFile, m_axi_bias_ARVALID, "(port)m_axi_bias_ARVALID");
    sc_trace(mVcdFile, m_axi_bias_ARREADY, "(port)m_axi_bias_ARREADY");
    sc_trace(mVcdFile, m_axi_bias_ARADDR, "(port)m_axi_bias_ARADDR");
    sc_trace(mVcdFile, m_axi_bias_ARID, "(port)m_axi_bias_ARID");
    sc_trace(mVcdFile, m_axi_bias_ARLEN, "(port)m_axi_bias_ARLEN");
    sc_trace(mVcdFile, m_axi_bias_ARSIZE, "(port)m_axi_bias_ARSIZE");
    sc_trace(mVcdFile, m_axi_bias_ARBURST, "(port)m_axi_bias_ARBURST");
    sc_trace(mVcdFile, m_axi_bias_ARLOCK, "(port)m_axi_bias_ARLOCK");
    sc_trace(mVcdFile, m_axi_bias_ARCACHE, "(port)m_axi_bias_ARCACHE");
    sc_trace(mVcdFile, m_axi_bias_ARPROT, "(port)m_axi_bias_ARPROT");
    sc_trace(mVcdFile, m_axi_bias_ARQOS, "(port)m_axi_bias_ARQOS");
    sc_trace(mVcdFile, m_axi_bias_ARREGION, "(port)m_axi_bias_ARREGION");
    sc_trace(mVcdFile, m_axi_bias_ARUSER, "(port)m_axi_bias_ARUSER");
    sc_trace(mVcdFile, m_axi_bias_RVALID, "(port)m_axi_bias_RVALID");
    sc_trace(mVcdFile, m_axi_bias_RREADY, "(port)m_axi_bias_RREADY");
    sc_trace(mVcdFile, m_axi_bias_RDATA, "(port)m_axi_bias_RDATA");
    sc_trace(mVcdFile, m_axi_bias_RLAST, "(port)m_axi_bias_RLAST");
    sc_trace(mVcdFile, m_axi_bias_RID, "(port)m_axi_bias_RID");
    sc_trace(mVcdFile, m_axi_bias_RUSER, "(port)m_axi_bias_RUSER");
    sc_trace(mVcdFile, m_axi_bias_RRESP, "(port)m_axi_bias_RRESP");
    sc_trace(mVcdFile, m_axi_bias_BVALID, "(port)m_axi_bias_BVALID");
    sc_trace(mVcdFile, m_axi_bias_BREADY, "(port)m_axi_bias_BREADY");
    sc_trace(mVcdFile, m_axi_bias_BRESP, "(port)m_axi_bias_BRESP");
    sc_trace(mVcdFile, m_axi_bias_BID, "(port)m_axi_bias_BID");
    sc_trace(mVcdFile, m_axi_bias_BUSER, "(port)m_axi_bias_BUSER");
    sc_trace(mVcdFile, bias_offset, "(port)bias_offset");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, weights_blk_n_AR, "weights_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, weights_blk_n_R, "weights_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, bias_blk_n_AR, "bias_blk_n_AR");
    sc_trace(mVcdFile, bias_blk_n_R, "bias_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, exitcond_fu_254_p2, "exitcond_fu_254_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_bias_ARREADY, "ap_sig_ioackin_m_axi_bias_ARREADY");
    sc_trace(mVcdFile, weights_offset_cast_fu_184_p1, "weights_offset_cast_fu_184_p1");
    sc_trace(mVcdFile, weights_offset_cast_reg_277, "weights_offset_cast_reg_277");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, n_1_fu_194_p2, "n_1_fu_194_p2");
    sc_trace(mVcdFile, n_1_reg_285, "n_1_reg_285");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_44_fu_234_p2, "tmp_44_fu_234_p2");
    sc_trace(mVcdFile, tmp_44_reg_290, "tmp_44_reg_290");
    sc_trace(mVcdFile, exitcond1_fu_188_p2, "exitcond1_fu_188_p2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_weights_ARREADY, "ap_sig_ioackin_m_axi_weights_ARREADY");
    sc_trace(mVcdFile, output_addr_reg_301, "output_addr_reg_301");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, c_3_fu_260_p2, "c_3_fu_260_p2");
    sc_trace(mVcdFile, c_3_reg_309, "c_3_reg_309");
    sc_trace(mVcdFile, ap_block_state16, "ap_block_state16");
    sc_trace(mVcdFile, bias_addr_read_reg_319, "bias_addr_read_reg_319");
    sc_trace(mVcdFile, weights_addr_read_reg_324, "weights_addr_read_reg_324");
    sc_trace(mVcdFile, input_0_0_load_reg_329, "input_0_0_load_reg_329");
    sc_trace(mVcdFile, grp_fu_169_p2, "grp_fu_169_p2");
    sc_trace(mVcdFile, tmp_3_reg_334, "tmp_3_reg_334");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, grp_fu_164_p2, "grp_fu_164_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, tmp_1_reg_344, "tmp_1_reg_344");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, n_reg_129, "n_reg_129");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, tmp_s_reg_141, "tmp_s_reg_141");
    sc_trace(mVcdFile, c_reg_153, "c_reg_153");
    sc_trace(mVcdFile, tmp_fu_249_p1, "tmp_fu_249_p1");
    sc_trace(mVcdFile, tmp_2_fu_266_p1, "tmp_2_fu_266_p1");
    sc_trace(mVcdFile, sext2_fu_173_p1, "sext2_fu_173_p1");
    sc_trace(mVcdFile, tmp_45_fu_239_p1, "tmp_45_fu_239_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_bias_ARREADY, "ap_reg_ioackin_m_axi_bias_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_weights_ARREADY, "ap_reg_ioackin_m_axi_weights_ARREADY");
    sc_trace(mVcdFile, grp_fu_164_p1, "grp_fu_164_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, tmp_59_fu_200_p3, "tmp_59_fu_200_p3");
    sc_trace(mVcdFile, tmp_60_fu_212_p3, "tmp_60_fu_212_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_208_p1, "p_shl_cast_fu_208_p1");
    sc_trace(mVcdFile, p_shl6_cast_fu_220_p1, "p_shl6_cast_fu_220_p1");
    sc_trace(mVcdFile, tmp_61_fu_224_p2, "tmp_61_fu_224_p2");
    sc_trace(mVcdFile, tmp_43_fu_230_p1, "tmp_43_fu_230_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

fc_6::~fc_6() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete conv1_fadd_32ns_3bkb_U59;
    delete conv1_fmul_32ns_3cud_U60;
}

void fc_6::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fc_6::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_bias_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_bias_ARREADY.read(), ap_const_logic_0))) {
                ap_reg_ioackin_m_axi_bias_ARREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_axi_bias_ARREADY.read()))) {
                ap_reg_ioackin_m_axi_bias_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_weights_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_weights_ARREADY.read())) {
                ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_1;
            }
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        c_reg_153 = c_3_reg_309.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        c_reg_153 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        n_reg_129 = n_1_reg_285.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        n_reg_129 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        tmp_s_reg_141 = grp_fu_164_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        tmp_s_reg_141 = ap_const_lv32_0;
    }
    if ((!(esl_seteq<1,1,1>(m_axi_bias_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1))) {
        bias_addr_read_reg_319 = m_axi_bias_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && !(esl_seteq<1,1,1>(m_axi_bias_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1)))) {
        c_3_reg_309 = c_3_fu_260_p2.read();
    }
    if ((esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        input_0_0_load_reg_329 = input_0_0_q0.read();
        weights_addr_read_reg_324 = m_axi_weights_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        n_1_reg_285 = n_1_fu_194_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        output_addr_reg_301 =  (sc_lv<4>) (tmp_fu_249_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        tmp_1_reg_344 = grp_fu_164_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        tmp_3_reg_334 = grp_fu_169_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(exitcond1_fu_188_p2.read(), ap_const_lv1_0))) {
        tmp_44_reg_290 = tmp_44_fu_234_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        weights_offset_cast_reg_277 = weights_offset_cast_fu_184_p1.read();
    }
}

void fc_6::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fc_6::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void fc_6::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void fc_6::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void fc_6::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fc_6::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void fc_6::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void fc_6::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void fc_6::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void fc_6::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void fc_6::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void fc_6::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void fc_6::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fc_6::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fc_6::thread_ap_block_state16() {
    ap_block_state16 = (esl_seteq<1,1,1>(m_axi_bias_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1));
}

void fc_6::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_188_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fc_6::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fc_6::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_188_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fc_6::thread_ap_sig_ioackin_m_axi_bias_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_bias_ARREADY.read())) {
        ap_sig_ioackin_m_axi_bias_ARREADY = m_axi_bias_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_bias_ARREADY = ap_const_logic_1;
    }
}

void fc_6::thread_ap_sig_ioackin_m_axi_weights_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_weights_ARREADY.read())) {
        ap_sig_ioackin_m_axi_weights_ARREADY = m_axi_weights_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_weights_ARREADY = ap_const_logic_1;
    }
}

void fc_6::thread_bias_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        bias_blk_n_AR = m_axi_bias_ARREADY.read();
    } else {
        bias_blk_n_AR = ap_const_logic_1;
    }
}

void fc_6::thread_bias_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1))) {
        bias_blk_n_R = m_axi_bias_RVALID.read();
    } else {
        bias_blk_n_R = ap_const_logic_1;
    }
}

void fc_6::thread_c_3_fu_260_p2() {
    c_3_fu_260_p2 = (!c_reg_153.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(c_reg_153.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void fc_6::thread_exitcond1_fu_188_p2() {
    exitcond1_fu_188_p2 = (!n_reg_129.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(n_reg_129.read() == ap_const_lv4_A);
}

void fc_6::thread_exitcond_fu_254_p2() {
    exitcond_fu_254_p2 = (!c_reg_153.read().is_01() || !ap_const_lv7_78.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_153.read() == ap_const_lv7_78);
}

void fc_6::thread_grp_fu_164_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        grp_fu_164_p1 = bias_addr_read_reg_319.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        grp_fu_164_p1 = tmp_3_reg_334.read();
    } else {
        grp_fu_164_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fc_6::thread_input_0_0_address0() {
    input_0_0_address0 =  (sc_lv<7>) (tmp_2_fu_266_p1.read());
}

void fc_6::thread_input_0_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(m_axi_bias_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1)))) {
        input_0_0_ce0 = ap_const_logic_1;
    } else {
        input_0_0_ce0 = ap_const_logic_0;
    }
}

void fc_6::thread_m_axi_bias_ARADDR() {
    m_axi_bias_ARADDR =  (sc_lv<32>) (sext2_fu_173_p1.read());
}

void fc_6::thread_m_axi_bias_ARBURST() {
    m_axi_bias_ARBURST = ap_const_lv2_0;
}

void fc_6::thread_m_axi_bias_ARCACHE() {
    m_axi_bias_ARCACHE = ap_const_lv4_0;
}

void fc_6::thread_m_axi_bias_ARID() {
    m_axi_bias_ARID = ap_const_lv1_0;
}

void fc_6::thread_m_axi_bias_ARLEN() {
    m_axi_bias_ARLEN = ap_const_lv32_A;
}

void fc_6::thread_m_axi_bias_ARLOCK() {
    m_axi_bias_ARLOCK = ap_const_lv2_0;
}

void fc_6::thread_m_axi_bias_ARPROT() {
    m_axi_bias_ARPROT = ap_const_lv3_0;
}

void fc_6::thread_m_axi_bias_ARQOS() {
    m_axi_bias_ARQOS = ap_const_lv4_0;
}

void fc_6::thread_m_axi_bias_ARREGION() {
    m_axi_bias_ARREGION = ap_const_lv4_0;
}

void fc_6::thread_m_axi_bias_ARSIZE() {
    m_axi_bias_ARSIZE = ap_const_lv3_0;
}

void fc_6::thread_m_axi_bias_ARUSER() {
    m_axi_bias_ARUSER = ap_const_lv1_0;
}

void fc_6::thread_m_axi_bias_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_bias_ARREADY.read()))) {
        m_axi_bias_ARVALID = ap_const_logic_1;
    } else {
        m_axi_bias_ARVALID = ap_const_logic_0;
    }
}

void fc_6::thread_m_axi_bias_AWADDR() {
    m_axi_bias_AWADDR = ap_const_lv32_0;
}

void fc_6::thread_m_axi_bias_AWBURST() {
    m_axi_bias_AWBURST = ap_const_lv2_0;
}

void fc_6::thread_m_axi_bias_AWCACHE() {
    m_axi_bias_AWCACHE = ap_const_lv4_0;
}

void fc_6::thread_m_axi_bias_AWID() {
    m_axi_bias_AWID = ap_const_lv1_0;
}

void fc_6::thread_m_axi_bias_AWLEN() {
    m_axi_bias_AWLEN = ap_const_lv32_0;
}

void fc_6::thread_m_axi_bias_AWLOCK() {
    m_axi_bias_AWLOCK = ap_const_lv2_0;
}

void fc_6::thread_m_axi_bias_AWPROT() {
    m_axi_bias_AWPROT = ap_const_lv3_0;
}

void fc_6::thread_m_axi_bias_AWQOS() {
    m_axi_bias_AWQOS = ap_const_lv4_0;
}

void fc_6::thread_m_axi_bias_AWREGION() {
    m_axi_bias_AWREGION = ap_const_lv4_0;
}

void fc_6::thread_m_axi_bias_AWSIZE() {
    m_axi_bias_AWSIZE = ap_const_lv3_0;
}

void fc_6::thread_m_axi_bias_AWUSER() {
    m_axi_bias_AWUSER = ap_const_lv1_0;
}

void fc_6::thread_m_axi_bias_AWVALID() {
    m_axi_bias_AWVALID = ap_const_logic_0;
}

void fc_6::thread_m_axi_bias_BREADY() {
    m_axi_bias_BREADY = ap_const_logic_0;
}

void fc_6::thread_m_axi_bias_RREADY() {
    if ((!(esl_seteq<1,1,1>(m_axi_bias_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1))) {
        m_axi_bias_RREADY = ap_const_logic_1;
    } else {
        m_axi_bias_RREADY = ap_const_logic_0;
    }
}

void fc_6::thread_m_axi_bias_WDATA() {
    m_axi_bias_WDATA = ap_const_lv32_0;
}

void fc_6::thread_m_axi_bias_WID() {
    m_axi_bias_WID = ap_const_lv1_0;
}

void fc_6::thread_m_axi_bias_WLAST() {
    m_axi_bias_WLAST = ap_const_logic_0;
}

void fc_6::thread_m_axi_bias_WSTRB() {
    m_axi_bias_WSTRB = ap_const_lv4_0;
}

void fc_6::thread_m_axi_bias_WUSER() {
    m_axi_bias_WUSER = ap_const_lv1_0;
}

void fc_6::thread_m_axi_bias_WVALID() {
    m_axi_bias_WVALID = ap_const_logic_0;
}

void fc_6::thread_m_axi_weights_ARADDR() {
    m_axi_weights_ARADDR =  (sc_lv<32>) (tmp_45_fu_239_p1.read());
}

void fc_6::thread_m_axi_weights_ARBURST() {
    m_axi_weights_ARBURST = ap_const_lv2_0;
}

void fc_6::thread_m_axi_weights_ARCACHE() {
    m_axi_weights_ARCACHE = ap_const_lv4_0;
}

void fc_6::thread_m_axi_weights_ARID() {
    m_axi_weights_ARID = ap_const_lv1_0;
}

void fc_6::thread_m_axi_weights_ARLEN() {
    m_axi_weights_ARLEN = ap_const_lv32_78;
}

void fc_6::thread_m_axi_weights_ARLOCK() {
    m_axi_weights_ARLOCK = ap_const_lv2_0;
}

void fc_6::thread_m_axi_weights_ARPROT() {
    m_axi_weights_ARPROT = ap_const_lv3_0;
}

void fc_6::thread_m_axi_weights_ARQOS() {
    m_axi_weights_ARQOS = ap_const_lv4_0;
}

void fc_6::thread_m_axi_weights_ARREGION() {
    m_axi_weights_ARREGION = ap_const_lv4_0;
}

void fc_6::thread_m_axi_weights_ARSIZE() {
    m_axi_weights_ARSIZE = ap_const_lv3_0;
}

void fc_6::thread_m_axi_weights_ARUSER() {
    m_axi_weights_ARUSER = ap_const_lv1_0;
}

void fc_6::thread_m_axi_weights_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_weights_ARREADY.read()))) {
        m_axi_weights_ARVALID = ap_const_logic_1;
    } else {
        m_axi_weights_ARVALID = ap_const_logic_0;
    }
}

void fc_6::thread_m_axi_weights_AWADDR() {
    m_axi_weights_AWADDR = ap_const_lv32_0;
}

void fc_6::thread_m_axi_weights_AWBURST() {
    m_axi_weights_AWBURST = ap_const_lv2_0;
}

void fc_6::thread_m_axi_weights_AWCACHE() {
    m_axi_weights_AWCACHE = ap_const_lv4_0;
}

void fc_6::thread_m_axi_weights_AWID() {
    m_axi_weights_AWID = ap_const_lv1_0;
}

void fc_6::thread_m_axi_weights_AWLEN() {
    m_axi_weights_AWLEN = ap_const_lv32_0;
}

void fc_6::thread_m_axi_weights_AWLOCK() {
    m_axi_weights_AWLOCK = ap_const_lv2_0;
}

void fc_6::thread_m_axi_weights_AWPROT() {
    m_axi_weights_AWPROT = ap_const_lv3_0;
}

void fc_6::thread_m_axi_weights_AWQOS() {
    m_axi_weights_AWQOS = ap_const_lv4_0;
}

void fc_6::thread_m_axi_weights_AWREGION() {
    m_axi_weights_AWREGION = ap_const_lv4_0;
}

void fc_6::thread_m_axi_weights_AWSIZE() {
    m_axi_weights_AWSIZE = ap_const_lv3_0;
}

void fc_6::thread_m_axi_weights_AWUSER() {
    m_axi_weights_AWUSER = ap_const_lv1_0;
}

void fc_6::thread_m_axi_weights_AWVALID() {
    m_axi_weights_AWVALID = ap_const_logic_0;
}

void fc_6::thread_m_axi_weights_BREADY() {
    m_axi_weights_BREADY = ap_const_logic_0;
}

void fc_6::thread_m_axi_weights_RREADY() {
    if ((esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        m_axi_weights_RREADY = ap_const_logic_1;
    } else {
        m_axi_weights_RREADY = ap_const_logic_0;
    }
}

void fc_6::thread_m_axi_weights_WDATA() {
    m_axi_weights_WDATA = ap_const_lv32_0;
}

void fc_6::thread_m_axi_weights_WID() {
    m_axi_weights_WID = ap_const_lv1_0;
}

void fc_6::thread_m_axi_weights_WLAST() {
    m_axi_weights_WLAST = ap_const_logic_0;
}

void fc_6::thread_m_axi_weights_WSTRB() {
    m_axi_weights_WSTRB = ap_const_lv4_0;
}

void fc_6::thread_m_axi_weights_WUSER() {
    m_axi_weights_WUSER = ap_const_lv1_0;
}

void fc_6::thread_m_axi_weights_WVALID() {
    m_axi_weights_WVALID = ap_const_logic_0;
}

void fc_6::thread_n_1_fu_194_p2() {
    n_1_fu_194_p2 = (!n_reg_129.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(n_reg_129.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fc_6::thread_output_r_address0() {
    output_r_address0 = output_addr_reg_301.read();
}

void fc_6::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void fc_6::thread_output_r_d0() {
    output_r_d0 = tmp_1_reg_344.read();
}

void fc_6::thread_output_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void fc_6::thread_p_shl6_cast_fu_220_p1() {
    p_shl6_cast_fu_220_p1 = esl_zext<12,7>(tmp_60_fu_212_p3.read());
}

void fc_6::thread_p_shl_cast_fu_208_p1() {
    p_shl_cast_fu_208_p1 = esl_zext<12,11>(tmp_59_fu_200_p3.read());
}

void fc_6::thread_sext2_fu_173_p1() {
    sext2_fu_173_p1 = esl_zext<64,30>(bias_offset.read());
}

void fc_6::thread_tmp_2_fu_266_p1() {
    tmp_2_fu_266_p1 = esl_zext<64,7>(c_reg_153.read());
}

void fc_6::thread_tmp_43_fu_230_p1() {
    tmp_43_fu_230_p1 = esl_sext<32,12>(tmp_61_fu_224_p2.read());
}

void fc_6::thread_tmp_44_fu_234_p2() {
    tmp_44_fu_234_p2 = (!weights_offset_cast_reg_277.read().is_01() || !tmp_43_fu_230_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(weights_offset_cast_reg_277.read()) + sc_bigint<32>(tmp_43_fu_230_p1.read()));
}

void fc_6::thread_tmp_45_fu_239_p1() {
    tmp_45_fu_239_p1 = esl_sext<64,32>(tmp_44_reg_290.read());
}

void fc_6::thread_tmp_59_fu_200_p3() {
    tmp_59_fu_200_p3 = esl_concat<4,7>(n_reg_129.read(), ap_const_lv7_0);
}

void fc_6::thread_tmp_60_fu_212_p3() {
    tmp_60_fu_212_p3 = esl_concat<4,3>(n_reg_129.read(), ap_const_lv3_0);
}

void fc_6::thread_tmp_61_fu_224_p2() {
    tmp_61_fu_224_p2 = (!p_shl_cast_fu_208_p1.read().is_01() || !p_shl6_cast_fu_220_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_shl_cast_fu_208_p1.read()) - sc_biguint<12>(p_shl6_cast_fu_220_p1.read()));
}

void fc_6::thread_tmp_fu_249_p1() {
    tmp_fu_249_p1 = esl_zext<64,4>(n_reg_129.read());
}

void fc_6::thread_weights_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        weights_blk_n_AR = m_axi_weights_ARREADY.read();
    } else {
        weights_blk_n_AR = ap_const_logic_1;
    }
}

void fc_6::thread_weights_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        weights_blk_n_R = m_axi_weights_RVALID.read();
    } else {
        weights_blk_n_R = ap_const_logic_1;
    }
}

void fc_6::thread_weights_offset_cast_fu_184_p1() {
    weights_offset_cast_fu_184_p1 = esl_zext<32,30>(weights_offset.read());
}

void fc_6::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_bias_ARREADY.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(exitcond1_fu_188_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_weights_ARREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((!(esl_seteq<1,1,1>(m_axi_bias_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else if ((!(esl_seteq<1,1,1>(m_axi_bias_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(exitcond_fu_254_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

