// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "store_output.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic store_output::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic store_output::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> store_output::ap_ST_fsm_state1 = "1";
const sc_lv<11> store_output::ap_ST_fsm_state2 = "10";
const sc_lv<11> store_output::ap_ST_fsm_state3 = "100";
const sc_lv<11> store_output::ap_ST_fsm_state4 = "1000";
const sc_lv<11> store_output::ap_ST_fsm_state5 = "10000";
const sc_lv<11> store_output::ap_ST_fsm_state6 = "100000";
const sc_lv<11> store_output::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> store_output::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> store_output::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> store_output::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> store_output::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> store_output::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> store_output::ap_const_lv1_0 = "0";
const sc_lv<3> store_output::ap_const_lv3_0 = "000";
const sc_lv<2> store_output::ap_const_lv2_0 = "00";
const sc_lv<4> store_output::ap_const_lv4_0 = "0000";
const sc_lv<32> store_output::ap_const_lv32_3 = "11";
const sc_lv<32> store_output::ap_const_lv32_6 = "110";
const sc_lv<32> store_output::ap_const_lv32_A = "1010";
const sc_lv<32> store_output::ap_const_lv32_1 = "1";
const sc_lv<32> store_output::ap_const_lv32_2 = "10";
const sc_lv<32> store_output::ap_const_lv32_4 = "100";
const sc_lv<32> store_output::ap_const_lv32_5 = "101";
const sc_lv<1> store_output::ap_const_lv1_1 = "1";
const sc_lv<32> store_output::ap_const_lv32_E = "1110";
const sc_lv<4> store_output::ap_const_lv4_F = "1111";
const sc_lv<3> store_output::ap_const_lv3_6 = "110";
const sc_lv<3> store_output::ap_const_lv3_1 = "1";
const sc_lv<4> store_output::ap_const_lv4_E = "1110";
const sc_lv<4> store_output::ap_const_lv4_1 = "1";
const bool store_output::ap_const_boolean_1 = true;

store_output::store_output(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_136_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_136_p2 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_output_r_AWREADY);
    sensitive << ( m_axi_output_r_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_output_r_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_output_r_WREADY);
    sensitive << ( m_axi_output_r_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_output_r_WREADY );

    SC_METHOD(thread_exitcond1_fu_182_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_110 );

    SC_METHOD(thread_exitcond2_fu_136_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_exitcond_fu_244_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_i_2_fu_142_p2);
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_j_2_fu_188_p2);
    sensitive << ( j_reg_110 );

    SC_METHOD(thread_k_2_fu_250_p2);
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_m_axi_output_r_ARADDR);

    SC_METHOD(thread_m_axi_output_r_ARBURST);

    SC_METHOD(thread_m_axi_output_r_ARCACHE);

    SC_METHOD(thread_m_axi_output_r_ARID);

    SC_METHOD(thread_m_axi_output_r_ARLEN);

    SC_METHOD(thread_m_axi_output_r_ARLOCK);

    SC_METHOD(thread_m_axi_output_r_ARPROT);

    SC_METHOD(thread_m_axi_output_r_ARQOS);

    SC_METHOD(thread_m_axi_output_r_ARREGION);

    SC_METHOD(thread_m_axi_output_r_ARSIZE);

    SC_METHOD(thread_m_axi_output_r_ARUSER);

    SC_METHOD(thread_m_axi_output_r_ARVALID);

    SC_METHOD(thread_m_axi_output_r_AWADDR);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( output_addr_reg_297 );
    sensitive << ( ap_reg_ioackin_m_axi_output_r_AWREADY );

    SC_METHOD(thread_m_axi_output_r_AWBURST);

    SC_METHOD(thread_m_axi_output_r_AWCACHE);

    SC_METHOD(thread_m_axi_output_r_AWID);

    SC_METHOD(thread_m_axi_output_r_AWLEN);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_m_axi_output_r_AWREADY );

    SC_METHOD(thread_m_axi_output_r_AWLOCK);

    SC_METHOD(thread_m_axi_output_r_AWPROT);

    SC_METHOD(thread_m_axi_output_r_AWQOS);

    SC_METHOD(thread_m_axi_output_r_AWREGION);

    SC_METHOD(thread_m_axi_output_r_AWSIZE);

    SC_METHOD(thread_m_axi_output_r_AWUSER);

    SC_METHOD(thread_m_axi_output_r_AWVALID);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_reg_ioackin_m_axi_output_r_AWREADY );

    SC_METHOD(thread_m_axi_output_r_BREADY);
    sensitive << ( m_axi_output_r_BVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_m_axi_output_r_RREADY);

    SC_METHOD(thread_m_axi_output_r_WDATA);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( output_oc_load_reg_316 );
    sensitive << ( ap_reg_ioackin_m_axi_output_r_WREADY );

    SC_METHOD(thread_m_axi_output_r_WID);

    SC_METHOD(thread_m_axi_output_r_WLAST);

    SC_METHOD(thread_m_axi_output_r_WSTRB);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_reg_ioackin_m_axi_output_r_WREADY );

    SC_METHOD(thread_m_axi_output_r_WUSER);

    SC_METHOD(thread_m_axi_output_r_WVALID);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_reg_ioackin_m_axi_output_r_WREADY );

    SC_METHOD(thread_output_oc_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_7_fu_260_p2 );

    SC_METHOD(thread_output_oc_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_r_blk_n_AW);
    sensitive << ( m_axi_output_r_AWREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_r_blk_n_B);
    sensitive << ( m_axi_output_r_BVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_output_r_blk_n_W);
    sensitive << ( m_axi_output_r_WREADY );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_p_shl1_cast_fu_168_p1);
    sensitive << ( tmp_s_fu_160_p3 );

    SC_METHOD(thread_p_shl2_fu_211_p1);
    sensitive << ( tmp_3_fu_203_p3 );

    SC_METHOD(thread_p_shl3_fu_223_p1);
    sensitive << ( tmp_4_fu_215_p3 );

    SC_METHOD(thread_p_shl_cast_fu_156_p1);
    sensitive << ( tmp_fu_148_p3 );

    SC_METHOD(thread_sext_fu_132_p1);
    sensitive << ( output_offset );

    SC_METHOD(thread_tmp_11_cast_fu_178_p1);
    sensitive << ( tmp_1_fu_172_p2 );

    SC_METHOD(thread_tmp_1_fu_172_p2);
    sensitive << ( p_shl_cast_fu_156_p1 );
    sensitive << ( p_shl1_cast_fu_168_p1 );

    SC_METHOD(thread_tmp_2_fu_198_p2);
    sensitive << ( tmp_11_cast_reg_279 );
    sensitive << ( tmp_7_cast_fu_194_p1 );

    SC_METHOD(thread_tmp_3_fu_203_p3);
    sensitive << ( tmp_2_fu_198_p2 );

    SC_METHOD(thread_tmp_4_fu_215_p3);
    sensitive << ( tmp_2_fu_198_p2 );

    SC_METHOD(thread_tmp_5_fu_227_p2);
    sensitive << ( p_shl2_fu_211_p1 );
    sensitive << ( p_shl3_fu_223_p1 );

    SC_METHOD(thread_tmp_6_fu_233_p2);
    sensitive << ( sext_reg_266 );
    sensitive << ( tmp_5_fu_227_p2 );

    SC_METHOD(thread_tmp_7_cast_fu_194_p1);
    sensitive << ( j_reg_110 );

    SC_METHOD(thread_tmp_7_fu_260_p2);
    sensitive << ( tmp_5_reg_292 );
    sensitive << ( tmp_9_fu_256_p1 );

    SC_METHOD(thread_tmp_9_fu_256_p1);
    sensitive << ( k_reg_121 );

    SC_METHOD(thread_tmp_fu_148_p3);
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_tmp_s_fu_160_p3);
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_output_r_BVALID );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_136_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_182_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_244_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_output_r_WREADY );
    sensitive << ( ap_sig_ioackin_m_axi_output_r_AWREADY );

    ap_CS_fsm = "00000000001";
    ap_reg_ioackin_m_axi_output_r_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_output_r_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "store_output_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_output_r_AWVALID, "(port)m_axi_output_r_AWVALID");
    sc_trace(mVcdFile, m_axi_output_r_AWREADY, "(port)m_axi_output_r_AWREADY");
    sc_trace(mVcdFile, m_axi_output_r_AWADDR, "(port)m_axi_output_r_AWADDR");
    sc_trace(mVcdFile, m_axi_output_r_AWID, "(port)m_axi_output_r_AWID");
    sc_trace(mVcdFile, m_axi_output_r_AWLEN, "(port)m_axi_output_r_AWLEN");
    sc_trace(mVcdFile, m_axi_output_r_AWSIZE, "(port)m_axi_output_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_output_r_AWBURST, "(port)m_axi_output_r_AWBURST");
    sc_trace(mVcdFile, m_axi_output_r_AWLOCK, "(port)m_axi_output_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_output_r_AWCACHE, "(port)m_axi_output_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_output_r_AWPROT, "(port)m_axi_output_r_AWPROT");
    sc_trace(mVcdFile, m_axi_output_r_AWQOS, "(port)m_axi_output_r_AWQOS");
    sc_trace(mVcdFile, m_axi_output_r_AWREGION, "(port)m_axi_output_r_AWREGION");
    sc_trace(mVcdFile, m_axi_output_r_AWUSER, "(port)m_axi_output_r_AWUSER");
    sc_trace(mVcdFile, m_axi_output_r_WVALID, "(port)m_axi_output_r_WVALID");
    sc_trace(mVcdFile, m_axi_output_r_WREADY, "(port)m_axi_output_r_WREADY");
    sc_trace(mVcdFile, m_axi_output_r_WDATA, "(port)m_axi_output_r_WDATA");
    sc_trace(mVcdFile, m_axi_output_r_WSTRB, "(port)m_axi_output_r_WSTRB");
    sc_trace(mVcdFile, m_axi_output_r_WLAST, "(port)m_axi_output_r_WLAST");
    sc_trace(mVcdFile, m_axi_output_r_WID, "(port)m_axi_output_r_WID");
    sc_trace(mVcdFile, m_axi_output_r_WUSER, "(port)m_axi_output_r_WUSER");
    sc_trace(mVcdFile, m_axi_output_r_ARVALID, "(port)m_axi_output_r_ARVALID");
    sc_trace(mVcdFile, m_axi_output_r_ARREADY, "(port)m_axi_output_r_ARREADY");
    sc_trace(mVcdFile, m_axi_output_r_ARADDR, "(port)m_axi_output_r_ARADDR");
    sc_trace(mVcdFile, m_axi_output_r_ARID, "(port)m_axi_output_r_ARID");
    sc_trace(mVcdFile, m_axi_output_r_ARLEN, "(port)m_axi_output_r_ARLEN");
    sc_trace(mVcdFile, m_axi_output_r_ARSIZE, "(port)m_axi_output_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_output_r_ARBURST, "(port)m_axi_output_r_ARBURST");
    sc_trace(mVcdFile, m_axi_output_r_ARLOCK, "(port)m_axi_output_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_output_r_ARCACHE, "(port)m_axi_output_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_output_r_ARPROT, "(port)m_axi_output_r_ARPROT");
    sc_trace(mVcdFile, m_axi_output_r_ARQOS, "(port)m_axi_output_r_ARQOS");
    sc_trace(mVcdFile, m_axi_output_r_ARREGION, "(port)m_axi_output_r_ARREGION");
    sc_trace(mVcdFile, m_axi_output_r_ARUSER, "(port)m_axi_output_r_ARUSER");
    sc_trace(mVcdFile, m_axi_output_r_RVALID, "(port)m_axi_output_r_RVALID");
    sc_trace(mVcdFile, m_axi_output_r_RREADY, "(port)m_axi_output_r_RREADY");
    sc_trace(mVcdFile, m_axi_output_r_RDATA, "(port)m_axi_output_r_RDATA");
    sc_trace(mVcdFile, m_axi_output_r_RLAST, "(port)m_axi_output_r_RLAST");
    sc_trace(mVcdFile, m_axi_output_r_RID, "(port)m_axi_output_r_RID");
    sc_trace(mVcdFile, m_axi_output_r_RUSER, "(port)m_axi_output_r_RUSER");
    sc_trace(mVcdFile, m_axi_output_r_RRESP, "(port)m_axi_output_r_RRESP");
    sc_trace(mVcdFile, m_axi_output_r_BVALID, "(port)m_axi_output_r_BVALID");
    sc_trace(mVcdFile, m_axi_output_r_BREADY, "(port)m_axi_output_r_BREADY");
    sc_trace(mVcdFile, m_axi_output_r_BRESP, "(port)m_axi_output_r_BRESP");
    sc_trace(mVcdFile, m_axi_output_r_BID, "(port)m_axi_output_r_BID");
    sc_trace(mVcdFile, m_axi_output_r_BUSER, "(port)m_axi_output_r_BUSER");
    sc_trace(mVcdFile, output_offset, "(port)output_offset");
    sc_trace(mVcdFile, output_oc_address0, "(port)output_oc_address0");
    sc_trace(mVcdFile, output_oc_ce0, "(port)output_oc_ce0");
    sc_trace(mVcdFile, output_oc_q0, "(port)output_oc_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, output_r_blk_n_AW, "output_r_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, output_r_blk_n_W, "output_r_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, output_r_blk_n_B, "output_r_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, sext_fu_132_p1, "sext_fu_132_p1");
    sc_trace(mVcdFile, sext_reg_266, "sext_reg_266");
    sc_trace(mVcdFile, i_2_fu_142_p2, "i_2_fu_142_p2");
    sc_trace(mVcdFile, i_2_reg_274, "i_2_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_11_cast_fu_178_p1, "tmp_11_cast_fu_178_p1");
    sc_trace(mVcdFile, tmp_11_cast_reg_279, "tmp_11_cast_reg_279");
    sc_trace(mVcdFile, exitcond2_fu_136_p2, "exitcond2_fu_136_p2");
    sc_trace(mVcdFile, j_2_fu_188_p2, "j_2_fu_188_p2");
    sc_trace(mVcdFile, j_2_reg_287, "j_2_reg_287");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_5_fu_227_p2, "tmp_5_fu_227_p2");
    sc_trace(mVcdFile, tmp_5_reg_292, "tmp_5_reg_292");
    sc_trace(mVcdFile, exitcond1_fu_182_p2, "exitcond1_fu_182_p2");
    sc_trace(mVcdFile, output_addr_reg_297, "output_addr_reg_297");
    sc_trace(mVcdFile, k_2_fu_250_p2, "k_2_fu_250_p2");
    sc_trace(mVcdFile, k_2_reg_306, "k_2_reg_306");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_fu_244_p2, "exitcond_fu_244_p2");
    sc_trace(mVcdFile, output_oc_load_reg_316, "output_oc_load_reg_316");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_reg_99, "i_reg_99");
    sc_trace(mVcdFile, j_reg_110, "j_reg_110");
    sc_trace(mVcdFile, k_reg_121, "k_reg_121");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_output_r_WREADY, "ap_sig_ioackin_m_axi_output_r_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_output_r_AWREADY, "ap_sig_ioackin_m_axi_output_r_AWREADY");
    sc_trace(mVcdFile, tmp_7_fu_260_p2, "tmp_7_fu_260_p2");
    sc_trace(mVcdFile, tmp_6_fu_233_p2, "tmp_6_fu_233_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_output_r_AWREADY, "ap_reg_ioackin_m_axi_output_r_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_output_r_WREADY, "ap_reg_ioackin_m_axi_output_r_WREADY");
    sc_trace(mVcdFile, tmp_fu_148_p3, "tmp_fu_148_p3");
    sc_trace(mVcdFile, tmp_s_fu_160_p3, "tmp_s_fu_160_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_156_p1, "p_shl_cast_fu_156_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_168_p1, "p_shl1_cast_fu_168_p1");
    sc_trace(mVcdFile, tmp_1_fu_172_p2, "tmp_1_fu_172_p2");
    sc_trace(mVcdFile, tmp_7_cast_fu_194_p1, "tmp_7_cast_fu_194_p1");
    sc_trace(mVcdFile, tmp_2_fu_198_p2, "tmp_2_fu_198_p2");
    sc_trace(mVcdFile, tmp_3_fu_203_p3, "tmp_3_fu_203_p3");
    sc_trace(mVcdFile, tmp_4_fu_215_p3, "tmp_4_fu_215_p3");
    sc_trace(mVcdFile, p_shl2_fu_211_p1, "p_shl2_fu_211_p1");
    sc_trace(mVcdFile, p_shl3_fu_223_p1, "p_shl3_fu_223_p1");
    sc_trace(mVcdFile, tmp_9_fu_256_p1, "tmp_9_fu_256_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

store_output::~store_output() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void store_output::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_output_r_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_output_r_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_output_r_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_output_r_AWREADY.read())) {
                ap_reg_ioackin_m_axi_output_r_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_output_r_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_output_r_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_output_r_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_output_r_WREADY.read())) {
                ap_reg_ioackin_m_axi_output_r_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_182_p2.read(), ap_const_lv1_1))) {
        i_reg_99 = i_2_reg_274.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_99 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_136_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_reg_110 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(m_axi_output_r_BVALID.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        j_reg_110 = j_2_reg_287.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_output_r_AWREADY.read(), ap_const_logic_1))) {
        k_reg_121 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_output_r_WREADY.read(), ap_const_logic_1))) {
        k_reg_121 = k_2_reg_306.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_2_reg_274 = i_2_fu_142_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_2_reg_287 = j_2_fu_188_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_2_reg_306 = k_2_fu_250_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_182_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        output_addr_reg_297 =  (sc_lv<32>) (tmp_6_fu_233_p2.read());
        tmp_5_reg_292 = tmp_5_fu_227_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        output_oc_load_reg_316 = output_oc_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sext_reg_266 = sext_fu_132_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_136_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_11_cast_reg_279 = tmp_11_cast_fu_178_p1.read();
    }
}

void store_output::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void store_output::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void store_output::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void store_output::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void store_output::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void store_output::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void store_output::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void store_output::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void store_output::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond2_fu_136_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void store_output::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void store_output::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_136_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void store_output::thread_ap_sig_ioackin_m_axi_output_r_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_output_r_AWREADY.read())) {
        ap_sig_ioackin_m_axi_output_r_AWREADY = m_axi_output_r_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_output_r_AWREADY = ap_const_logic_1;
    }
}

void store_output::thread_ap_sig_ioackin_m_axi_output_r_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_output_r_WREADY.read())) {
        ap_sig_ioackin_m_axi_output_r_WREADY = m_axi_output_r_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_output_r_WREADY = ap_const_logic_1;
    }
}

void store_output::thread_exitcond1_fu_182_p2() {
    exitcond1_fu_182_p2 = (!j_reg_110.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_110.read() == ap_const_lv4_E);
}

void store_output::thread_exitcond2_fu_136_p2() {
    exitcond2_fu_136_p2 = (!i_reg_99.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_99.read() == ap_const_lv3_6);
}

void store_output::thread_exitcond_fu_244_p2() {
    exitcond_fu_244_p2 = (!k_reg_121.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_121.read() == ap_const_lv4_E);
}

void store_output::thread_i_2_fu_142_p2() {
    i_2_fu_142_p2 = (!i_reg_99.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_99.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void store_output::thread_j_2_fu_188_p2() {
    j_2_fu_188_p2 = (!j_reg_110.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_reg_110.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void store_output::thread_k_2_fu_250_p2() {
    k_2_fu_250_p2 = (!k_reg_121.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(k_reg_121.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void store_output::thread_m_axi_output_r_ARADDR() {
    m_axi_output_r_ARADDR = ap_const_lv32_0;
}

void store_output::thread_m_axi_output_r_ARBURST() {
    m_axi_output_r_ARBURST = ap_const_lv2_0;
}

void store_output::thread_m_axi_output_r_ARCACHE() {
    m_axi_output_r_ARCACHE = ap_const_lv4_0;
}

void store_output::thread_m_axi_output_r_ARID() {
    m_axi_output_r_ARID = ap_const_lv1_0;
}

void store_output::thread_m_axi_output_r_ARLEN() {
    m_axi_output_r_ARLEN = ap_const_lv32_0;
}

void store_output::thread_m_axi_output_r_ARLOCK() {
    m_axi_output_r_ARLOCK = ap_const_lv2_0;
}

void store_output::thread_m_axi_output_r_ARPROT() {
    m_axi_output_r_ARPROT = ap_const_lv3_0;
}

void store_output::thread_m_axi_output_r_ARQOS() {
    m_axi_output_r_ARQOS = ap_const_lv4_0;
}

void store_output::thread_m_axi_output_r_ARREGION() {
    m_axi_output_r_ARREGION = ap_const_lv4_0;
}

void store_output::thread_m_axi_output_r_ARSIZE() {
    m_axi_output_r_ARSIZE = ap_const_lv3_0;
}

void store_output::thread_m_axi_output_r_ARUSER() {
    m_axi_output_r_ARUSER = ap_const_lv1_0;
}

void store_output::thread_m_axi_output_r_ARVALID() {
    m_axi_output_r_ARVALID = ap_const_logic_0;
}

void store_output::thread_m_axi_output_r_AWADDR() {
    m_axi_output_r_AWADDR = output_addr_reg_297.read();
}

void store_output::thread_m_axi_output_r_AWBURST() {
    m_axi_output_r_AWBURST = ap_const_lv2_0;
}

void store_output::thread_m_axi_output_r_AWCACHE() {
    m_axi_output_r_AWCACHE = ap_const_lv4_0;
}

void store_output::thread_m_axi_output_r_AWID() {
    m_axi_output_r_AWID = ap_const_lv1_0;
}

void store_output::thread_m_axi_output_r_AWLEN() {
    m_axi_output_r_AWLEN = ap_const_lv32_E;
}

void store_output::thread_m_axi_output_r_AWLOCK() {
    m_axi_output_r_AWLOCK = ap_const_lv2_0;
}

void store_output::thread_m_axi_output_r_AWPROT() {
    m_axi_output_r_AWPROT = ap_const_lv3_0;
}

void store_output::thread_m_axi_output_r_AWQOS() {
    m_axi_output_r_AWQOS = ap_const_lv4_0;
}

void store_output::thread_m_axi_output_r_AWREGION() {
    m_axi_output_r_AWREGION = ap_const_lv4_0;
}

void store_output::thread_m_axi_output_r_AWSIZE() {
    m_axi_output_r_AWSIZE = ap_const_lv3_0;
}

void store_output::thread_m_axi_output_r_AWUSER() {
    m_axi_output_r_AWUSER = ap_const_lv1_0;
}

void store_output::thread_m_axi_output_r_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_output_r_AWREADY.read()))) {
        m_axi_output_r_AWVALID = ap_const_logic_1;
    } else {
        m_axi_output_r_AWVALID = ap_const_logic_0;
    }
}

void store_output::thread_m_axi_output_r_BREADY() {
    if ((esl_seteq<1,1,1>(m_axi_output_r_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        m_axi_output_r_BREADY = ap_const_logic_1;
    } else {
        m_axi_output_r_BREADY = ap_const_logic_0;
    }
}

void store_output::thread_m_axi_output_r_RREADY() {
    m_axi_output_r_RREADY = ap_const_logic_0;
}

void store_output::thread_m_axi_output_r_WDATA() {
    m_axi_output_r_WDATA = output_oc_load_reg_316.read();
}

void store_output::thread_m_axi_output_r_WID() {
    m_axi_output_r_WID = ap_const_lv1_0;
}

void store_output::thread_m_axi_output_r_WLAST() {
    m_axi_output_r_WLAST = ap_const_logic_0;
}

void store_output::thread_m_axi_output_r_WSTRB() {
    m_axi_output_r_WSTRB = ap_const_lv4_F;
}

void store_output::thread_m_axi_output_r_WUSER() {
    m_axi_output_r_WUSER = ap_const_lv1_0;
}

void store_output::thread_m_axi_output_r_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_output_r_WREADY.read()))) {
        m_axi_output_r_WVALID = ap_const_logic_1;
    } else {
        m_axi_output_r_WVALID = ap_const_logic_0;
    }
}

void store_output::thread_output_oc_address0() {
    output_oc_address0 =  (sc_lv<11>) (tmp_7_fu_260_p2.read());
}

void store_output::thread_output_oc_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_oc_ce0 = ap_const_logic_1;
    } else {
        output_oc_ce0 = ap_const_logic_0;
    }
}

void store_output::thread_output_r_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        output_r_blk_n_AW = m_axi_output_r_AWREADY.read();
    } else {
        output_r_blk_n_AW = ap_const_logic_1;
    }
}

void store_output::thread_output_r_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        output_r_blk_n_B = m_axi_output_r_BVALID.read();
    } else {
        output_r_blk_n_B = ap_const_logic_1;
    }
}

void store_output::thread_output_r_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        output_r_blk_n_W = m_axi_output_r_WREADY.read();
    } else {
        output_r_blk_n_W = ap_const_logic_1;
    }
}

void store_output::thread_p_shl1_cast_fu_168_p1() {
    p_shl1_cast_fu_168_p1 = esl_zext<8,4>(tmp_s_fu_160_p3.read());
}

void store_output::thread_p_shl2_fu_211_p1() {
    p_shl2_fu_211_p1 = esl_sext<64,13>(tmp_3_fu_203_p3.read());
}

void store_output::thread_p_shl3_fu_223_p1() {
    p_shl3_fu_223_p1 = esl_sext<64,10>(tmp_4_fu_215_p3.read());
}

void store_output::thread_p_shl_cast_fu_156_p1() {
    p_shl_cast_fu_156_p1 = esl_zext<8,7>(tmp_fu_148_p3.read());
}

void store_output::thread_sext_fu_132_p1() {
    sext_fu_132_p1 = esl_zext<64,30>(output_offset.read());
}

void store_output::thread_tmp_11_cast_fu_178_p1() {
    tmp_11_cast_fu_178_p1 = esl_sext<9,8>(tmp_1_fu_172_p2.read());
}

void store_output::thread_tmp_1_fu_172_p2() {
    tmp_1_fu_172_p2 = (!p_shl_cast_fu_156_p1.read().is_01() || !p_shl1_cast_fu_168_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(p_shl_cast_fu_156_p1.read()) - sc_biguint<8>(p_shl1_cast_fu_168_p1.read()));
}

void store_output::thread_tmp_2_fu_198_p2() {
    tmp_2_fu_198_p2 = (!tmp_11_cast_reg_279.read().is_01() || !tmp_7_cast_fu_194_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(tmp_11_cast_reg_279.read()) + sc_biguint<9>(tmp_7_cast_fu_194_p1.read()));
}

void store_output::thread_tmp_3_fu_203_p3() {
    tmp_3_fu_203_p3 = esl_concat<9,4>(tmp_2_fu_198_p2.read(), ap_const_lv4_0);
}

void store_output::thread_tmp_4_fu_215_p3() {
    tmp_4_fu_215_p3 = esl_concat<9,1>(tmp_2_fu_198_p2.read(), ap_const_lv1_0);
}

void store_output::thread_tmp_5_fu_227_p2() {
    tmp_5_fu_227_p2 = (!p_shl2_fu_211_p1.read().is_01() || !p_shl3_fu_223_p1.read().is_01())? sc_lv<64>(): (sc_bigint<64>(p_shl2_fu_211_p1.read()) - sc_bigint<64>(p_shl3_fu_223_p1.read()));
}

void store_output::thread_tmp_6_fu_233_p2() {
    tmp_6_fu_233_p2 = (!sext_reg_266.read().is_01() || !tmp_5_fu_227_p2.read().is_01())? sc_lv<64>(): (sc_biguint<64>(sext_reg_266.read()) + sc_biguint<64>(tmp_5_fu_227_p2.read()));
}

void store_output::thread_tmp_7_cast_fu_194_p1() {
    tmp_7_cast_fu_194_p1 = esl_zext<9,4>(j_reg_110.read());
}

void store_output::thread_tmp_7_fu_260_p2() {
    tmp_7_fu_260_p2 = (!tmp_9_fu_256_p1.read().is_01() || !tmp_5_reg_292.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_9_fu_256_p1.read()) + sc_biguint<64>(tmp_5_reg_292.read()));
}

void store_output::thread_tmp_9_fu_256_p1() {
    tmp_9_fu_256_p1 = esl_zext<64,4>(k_reg_121.read());
}

void store_output::thread_tmp_fu_148_p3() {
    tmp_fu_148_p3 = esl_concat<3,4>(i_reg_99.read(), ap_const_lv4_0);
}

void store_output::thread_tmp_s_fu_160_p3() {
    tmp_s_fu_160_p3 = esl_concat<3,1>(i_reg_99.read(), ap_const_lv1_0);
}

void store_output::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_136_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_182_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_output_r_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond_fu_244_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_output_r_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(m_axi_output_r_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

}

