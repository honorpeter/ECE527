// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _store_weights_3_HH_
#define _store_weights_3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct store_weights_3 : public sc_module {
    // Port declarations 57
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_weights_AWVALID;
    sc_in< sc_logic > m_axi_weights_AWREADY;
    sc_out< sc_lv<32> > m_axi_weights_AWADDR;
    sc_out< sc_lv<1> > m_axi_weights_AWID;
    sc_out< sc_lv<32> > m_axi_weights_AWLEN;
    sc_out< sc_lv<3> > m_axi_weights_AWSIZE;
    sc_out< sc_lv<2> > m_axi_weights_AWBURST;
    sc_out< sc_lv<2> > m_axi_weights_AWLOCK;
    sc_out< sc_lv<4> > m_axi_weights_AWCACHE;
    sc_out< sc_lv<3> > m_axi_weights_AWPROT;
    sc_out< sc_lv<4> > m_axi_weights_AWQOS;
    sc_out< sc_lv<4> > m_axi_weights_AWREGION;
    sc_out< sc_lv<1> > m_axi_weights_AWUSER;
    sc_out< sc_logic > m_axi_weights_WVALID;
    sc_in< sc_logic > m_axi_weights_WREADY;
    sc_out< sc_lv<32> > m_axi_weights_WDATA;
    sc_out< sc_lv<4> > m_axi_weights_WSTRB;
    sc_out< sc_logic > m_axi_weights_WLAST;
    sc_out< sc_lv<1> > m_axi_weights_WID;
    sc_out< sc_lv<1> > m_axi_weights_WUSER;
    sc_out< sc_logic > m_axi_weights_ARVALID;
    sc_in< sc_logic > m_axi_weights_ARREADY;
    sc_out< sc_lv<32> > m_axi_weights_ARADDR;
    sc_out< sc_lv<1> > m_axi_weights_ARID;
    sc_out< sc_lv<32> > m_axi_weights_ARLEN;
    sc_out< sc_lv<3> > m_axi_weights_ARSIZE;
    sc_out< sc_lv<2> > m_axi_weights_ARBURST;
    sc_out< sc_lv<2> > m_axi_weights_ARLOCK;
    sc_out< sc_lv<4> > m_axi_weights_ARCACHE;
    sc_out< sc_lv<3> > m_axi_weights_ARPROT;
    sc_out< sc_lv<4> > m_axi_weights_ARQOS;
    sc_out< sc_lv<4> > m_axi_weights_ARREGION;
    sc_out< sc_lv<1> > m_axi_weights_ARUSER;
    sc_in< sc_logic > m_axi_weights_RVALID;
    sc_out< sc_logic > m_axi_weights_RREADY;
    sc_in< sc_lv<32> > m_axi_weights_RDATA;
    sc_in< sc_logic > m_axi_weights_RLAST;
    sc_in< sc_lv<1> > m_axi_weights_RID;
    sc_in< sc_lv<1> > m_axi_weights_RUSER;
    sc_in< sc_lv<2> > m_axi_weights_RRESP;
    sc_in< sc_logic > m_axi_weights_BVALID;
    sc_out< sc_logic > m_axi_weights_BREADY;
    sc_in< sc_lv<2> > m_axi_weights_BRESP;
    sc_in< sc_lv<1> > m_axi_weights_BID;
    sc_in< sc_lv<1> > m_axi_weights_BUSER;
    sc_in< sc_lv<30> > weights_offset;
    sc_out< sc_lv<9> > weights_oc_address0;
    sc_out< sc_logic > weights_oc_ce0;
    sc_out< sc_logic > weights_oc_we0;
    sc_out< sc_lv<32> > weights_oc_d0;
    sc_in< sc_lv<4> > input_channel;


    // Module declarations
    store_weights_3(sc_module_name name);
    SC_HAS_PROCESS(store_weights_3);

    ~store_weights_3();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > weights_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > weights_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<1> > exitcond_fu_312_p2;
    sc_signal< sc_lv<10> > tmp_cast_fu_140_p1;
    sc_signal< sc_lv<10> > tmp_cast_reg_337;
    sc_signal< sc_lv<64> > sext_fu_144_p1;
    sc_signal< sc_lv<64> > sext_reg_342;
    sc_signal< sc_lv<5> > i_2_fu_154_p2;
    sc_signal< sc_lv<5> > i_2_reg_350;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_19_fu_219_p2;
    sc_signal< sc_lv<64> > tmp_19_reg_355;
    sc_signal< sc_lv<1> > exitcond2_fu_148_p2;
    sc_signal< sc_lv<8> > tmp_21_fu_237_p2;
    sc_signal< sc_lv<8> > tmp_21_reg_360;
    sc_signal< sc_lv<3> > j_2_fu_249_p2;
    sc_signal< sc_lv<3> > j_2_reg_368;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > tmp_24_fu_280_p2;
    sc_signal< sc_lv<8> > tmp_24_reg_373;
    sc_signal< sc_lv<1> > exitcond1_fu_243_p2;
    sc_signal< sc_lv<32> > weights_addr_reg_379;
    sc_signal< sc_lv<10> > tmp_25_fu_306_p2;
    sc_signal< sc_lv<10> > tmp_25_reg_385;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<3> > k_2_fu_318_p2;
    sc_signal< sc_lv<3> > k_2_reg_393;
    sc_signal< bool > ap_block_state11;
    sc_signal< sc_lv<10> > tmp_26_fu_328_p2;
    sc_signal< sc_lv<10> > tmp_26_reg_398;
    sc_signal< sc_lv<32> > weights_addr_read_reg_403;
    sc_signal< sc_lv<5> > i_reg_107;
    sc_signal< sc_lv<3> > j_reg_118;
    sc_signal< sc_lv<3> > k_reg_129;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<64> > tmp_35_cast_fu_333_p1;
    sc_signal< sc_lv<64> > tmp_14_fu_285_p2;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_weights_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_weights_ARREADY;
    sc_signal< sc_lv<8> > tmp_s_fu_164_p3;
    sc_signal< sc_lv<6> > tmp_16_fu_176_p3;
    sc_signal< sc_lv<9> > p_shl2_cast_fu_172_p1;
    sc_signal< sc_lv<9> > p_shl3_cast_fu_184_p1;
    sc_signal< sc_lv<9> > tmp_17_fu_188_p2;
    sc_signal< sc_lv<10> > tmp_22_cast_fu_194_p1;
    sc_signal< sc_lv<10> > tmp_18_fu_198_p2;
    sc_signal< sc_lv<12> > tmp_fu_207_p3;
    sc_signal< sc_lv<64> > tmp_23_cast_fu_203_p1;
    sc_signal< sc_lv<64> > p_shl1_fu_215_p1;
    sc_signal< sc_lv<7> > tmp_20_fu_225_p3;
    sc_signal< sc_lv<8> > tmp_7_cast_fu_160_p1;
    sc_signal< sc_lv<8> > p_shl_cast_fu_233_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_255_p1;
    sc_signal< sc_lv<64> > tmp_22_fu_263_p2;
    sc_signal< sc_lv<64> > tmp_13_fu_268_p2;
    sc_signal< sc_lv<8> > tmp_9_cast_fu_259_p1;
    sc_signal< sc_lv<64> > tmp_23_fu_274_p2;
    sc_signal< sc_lv<10> > p_shl4_cast_fu_299_p3;
    sc_signal< sc_lv<10> > tmp_31_cast_fu_296_p1;
    sc_signal< sc_lv<10> > tmp_cast_8_fu_324_p1;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state1;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_state3;
    static const sc_lv<12> ap_ST_fsm_state4;
    static const sc_lv<12> ap_ST_fsm_state5;
    static const sc_lv<12> ap_ST_fsm_state6;
    static const sc_lv<12> ap_ST_fsm_state7;
    static const sc_lv<12> ap_ST_fsm_state8;
    static const sc_lv<12> ap_ST_fsm_state9;
    static const sc_lv<12> ap_ST_fsm_state10;
    static const sc_lv<12> ap_ST_fsm_state11;
    static const sc_lv<12> ap_ST_fsm_state12;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state11();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_weights_ARREADY();
    void thread_exitcond1_fu_243_p2();
    void thread_exitcond2_fu_148_p2();
    void thread_exitcond_fu_312_p2();
    void thread_i_2_fu_154_p2();
    void thread_j_2_fu_249_p2();
    void thread_k_2_fu_318_p2();
    void thread_m_axi_weights_ARADDR();
    void thread_m_axi_weights_ARBURST();
    void thread_m_axi_weights_ARCACHE();
    void thread_m_axi_weights_ARID();
    void thread_m_axi_weights_ARLEN();
    void thread_m_axi_weights_ARLOCK();
    void thread_m_axi_weights_ARPROT();
    void thread_m_axi_weights_ARQOS();
    void thread_m_axi_weights_ARREGION();
    void thread_m_axi_weights_ARSIZE();
    void thread_m_axi_weights_ARUSER();
    void thread_m_axi_weights_ARVALID();
    void thread_m_axi_weights_AWADDR();
    void thread_m_axi_weights_AWBURST();
    void thread_m_axi_weights_AWCACHE();
    void thread_m_axi_weights_AWID();
    void thread_m_axi_weights_AWLEN();
    void thread_m_axi_weights_AWLOCK();
    void thread_m_axi_weights_AWPROT();
    void thread_m_axi_weights_AWQOS();
    void thread_m_axi_weights_AWREGION();
    void thread_m_axi_weights_AWSIZE();
    void thread_m_axi_weights_AWUSER();
    void thread_m_axi_weights_AWVALID();
    void thread_m_axi_weights_BREADY();
    void thread_m_axi_weights_RREADY();
    void thread_m_axi_weights_WDATA();
    void thread_m_axi_weights_WID();
    void thread_m_axi_weights_WLAST();
    void thread_m_axi_weights_WSTRB();
    void thread_m_axi_weights_WUSER();
    void thread_m_axi_weights_WVALID();
    void thread_p_shl1_fu_215_p1();
    void thread_p_shl2_cast_fu_172_p1();
    void thread_p_shl3_cast_fu_184_p1();
    void thread_p_shl4_cast_fu_299_p3();
    void thread_p_shl_cast_fu_233_p1();
    void thread_sext_fu_144_p1();
    void thread_tmp_13_fu_268_p2();
    void thread_tmp_14_fu_285_p2();
    void thread_tmp_16_fu_176_p3();
    void thread_tmp_17_fu_188_p2();
    void thread_tmp_18_fu_198_p2();
    void thread_tmp_19_fu_219_p2();
    void thread_tmp_20_fu_225_p3();
    void thread_tmp_21_fu_237_p2();
    void thread_tmp_22_cast_fu_194_p1();
    void thread_tmp_22_fu_263_p2();
    void thread_tmp_23_cast_fu_203_p1();
    void thread_tmp_23_fu_274_p2();
    void thread_tmp_24_fu_280_p2();
    void thread_tmp_25_fu_306_p2();
    void thread_tmp_26_fu_328_p2();
    void thread_tmp_31_cast_fu_296_p1();
    void thread_tmp_35_cast_fu_333_p1();
    void thread_tmp_7_cast_fu_160_p1();
    void thread_tmp_9_cast_fu_259_p1();
    void thread_tmp_9_fu_255_p1();
    void thread_tmp_cast_8_fu_324_p1();
    void thread_tmp_cast_fu_140_p1();
    void thread_tmp_fu_207_p3();
    void thread_tmp_s_fu_164_p3();
    void thread_weights_blk_n_AR();
    void thread_weights_blk_n_R();
    void thread_weights_oc_address0();
    void thread_weights_oc_ce0();
    void thread_weights_oc_d0();
    void thread_weights_oc_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
