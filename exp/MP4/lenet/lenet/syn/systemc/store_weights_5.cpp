// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "store_weights_5.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic store_weights_5::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic store_weights_5::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> store_weights_5::ap_ST_fsm_state1 = "1";
const sc_lv<13> store_weights_5::ap_ST_fsm_state2 = "10";
const sc_lv<13> store_weights_5::ap_ST_fsm_state3 = "100";
const sc_lv<13> store_weights_5::ap_ST_fsm_state4 = "1000";
const sc_lv<13> store_weights_5::ap_ST_fsm_state5 = "10000";
const sc_lv<13> store_weights_5::ap_ST_fsm_state6 = "100000";
const sc_lv<13> store_weights_5::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> store_weights_5::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> store_weights_5::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> store_weights_5::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> store_weights_5::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> store_weights_5::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> store_weights_5::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> store_weights_5::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> store_weights_5::ap_const_lv1_0 = "0";
const sc_lv<3> store_weights_5::ap_const_lv3_0 = "000";
const sc_lv<2> store_weights_5::ap_const_lv2_0 = "00";
const sc_lv<4> store_weights_5::ap_const_lv4_0 = "0000";
const sc_lv<32> store_weights_5::ap_const_lv32_4 = "100";
const sc_lv<32> store_weights_5::ap_const_lv32_B = "1011";
const sc_lv<32> store_weights_5::ap_const_lv32_1 = "1";
const sc_lv<32> store_weights_5::ap_const_lv32_2 = "10";
const sc_lv<32> store_weights_5::ap_const_lv32_3 = "11";
const sc_lv<7> store_weights_5::ap_const_lv7_0 = "0000000";
const sc_lv<1> store_weights_5::ap_const_lv1_1 = "1";
const sc_lv<5> store_weights_5::ap_const_lv5_0 = "00000";
const sc_lv<32> store_weights_5::ap_const_lv32_C = "1100";
const sc_lv<32> store_weights_5::ap_const_lv32_A = "1010";
const sc_lv<32> store_weights_5::ap_const_lv32_5 = "101";
const sc_lv<7> store_weights_5::ap_const_lv7_78 = "1111000";
const sc_lv<7> store_weights_5::ap_const_lv7_1 = "1";
const sc_lv<5> store_weights_5::ap_const_lv5_10 = "10000";
const sc_lv<5> store_weights_5::ap_const_lv5_1 = "1";
const sc_lv<3> store_weights_5::ap_const_lv3_5 = "101";
const sc_lv<3> store_weights_5::ap_const_lv3_1 = "1";
const sc_lv<64> store_weights_5::ap_const_lv64_2 = "10";
const bool store_weights_5::ap_const_boolean_1 = true;

store_weights_5::store_weights_5(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state12);
    sensitive << ( m_axi_weights_RVALID );
    sensitive << ( exitcond_fu_258_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_147_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_147_p2 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_weights_ARREADY);
    sensitive << ( m_axi_weights_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_weights_ARREADY );

    SC_METHOD(thread_exitcond1_fu_214_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_reg_121 );

    SC_METHOD(thread_exitcond2_fu_171_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( l_reg_110 );

    SC_METHOD(thread_exitcond3_fu_147_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_exitcond_fu_258_p2);
    sensitive << ( m_axi_weights_RVALID );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond_fu_258_p2 );
    sensitive << ( k_reg_132 );

    SC_METHOD(thread_i_1_fu_153_p2);
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_j_1_fu_220_p2);
    sensitive << ( j_reg_121 );

    SC_METHOD(thread_k_1_fu_264_p2);
    sensitive << ( k_reg_132 );

    SC_METHOD(thread_l_1_fu_177_p2);
    sensitive << ( l_reg_110 );

    SC_METHOD(thread_m_axi_weights_ARADDR);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( weights_addr_reg_323 );
    sensitive << ( ap_reg_ioackin_m_axi_weights_ARREADY );

    SC_METHOD(thread_m_axi_weights_ARBURST);

    SC_METHOD(thread_m_axi_weights_ARCACHE);

    SC_METHOD(thread_m_axi_weights_ARID);

    SC_METHOD(thread_m_axi_weights_ARLEN);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_reg_ioackin_m_axi_weights_ARREADY );

    SC_METHOD(thread_m_axi_weights_ARLOCK);

    SC_METHOD(thread_m_axi_weights_ARPROT);

    SC_METHOD(thread_m_axi_weights_ARQOS);

    SC_METHOD(thread_m_axi_weights_ARREGION);

    SC_METHOD(thread_m_axi_weights_ARSIZE);

    SC_METHOD(thread_m_axi_weights_ARUSER);

    SC_METHOD(thread_m_axi_weights_ARVALID);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_reg_ioackin_m_axi_weights_ARREADY );

    SC_METHOD(thread_m_axi_weights_AWADDR);

    SC_METHOD(thread_m_axi_weights_AWBURST);

    SC_METHOD(thread_m_axi_weights_AWCACHE);

    SC_METHOD(thread_m_axi_weights_AWID);

    SC_METHOD(thread_m_axi_weights_AWLEN);

    SC_METHOD(thread_m_axi_weights_AWLOCK);

    SC_METHOD(thread_m_axi_weights_AWPROT);

    SC_METHOD(thread_m_axi_weights_AWQOS);

    SC_METHOD(thread_m_axi_weights_AWREGION);

    SC_METHOD(thread_m_axi_weights_AWSIZE);

    SC_METHOD(thread_m_axi_weights_AWUSER);

    SC_METHOD(thread_m_axi_weights_AWVALID);

    SC_METHOD(thread_m_axi_weights_BREADY);

    SC_METHOD(thread_m_axi_weights_RREADY);
    sensitive << ( m_axi_weights_RVALID );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond_fu_258_p2 );

    SC_METHOD(thread_m_axi_weights_WDATA);

    SC_METHOD(thread_m_axi_weights_WID);

    SC_METHOD(thread_m_axi_weights_WLAST);

    SC_METHOD(thread_m_axi_weights_WSTRB);

    SC_METHOD(thread_m_axi_weights_WUSER);

    SC_METHOD(thread_m_axi_weights_WVALID);

    SC_METHOD(thread_p_shl_fu_204_p1);
    sensitive << ( tmp_1_fu_196_p3 );

    SC_METHOD(thread_sext_fu_143_p1);
    sensitive << ( weights_offset );

    SC_METHOD(thread_tmp_1_cast_fu_167_p1);
    sensitive << ( tmp_fu_159_p3 );

    SC_METHOD(thread_tmp_1_fu_196_p3);
    sensitive << ( tmp_3_fu_187_p2 );

    SC_METHOD(thread_tmp_2_cast_fu_183_p1);
    sensitive << ( l_reg_110 );

    SC_METHOD(thread_tmp_2_fu_235_p2);
    sensitive << ( tmp_8_fu_230_p2 );

    SC_METHOD(thread_tmp_3_cast_fu_192_p1);
    sensitive << ( tmp_3_fu_187_p2 );

    SC_METHOD(thread_tmp_3_fu_187_p2);
    sensitive << ( tmp_1_cast_reg_292 );
    sensitive << ( tmp_2_cast_fu_183_p1 );

    SC_METHOD(thread_tmp_4_fu_226_p1);
    sensitive << ( j_reg_121 );

    SC_METHOD(thread_tmp_5_fu_247_p2);
    sensitive << ( sext_reg_279 );
    sensitive << ( tmp_s_fu_241_p2 );

    SC_METHOD(thread_tmp_6_fu_270_p1);
    sensitive << ( k_reg_132 );

    SC_METHOD(thread_tmp_7_fu_208_p2);
    sensitive << ( tmp_3_cast_fu_192_p1 );
    sensitive << ( p_shl_fu_204_p1 );

    SC_METHOD(thread_tmp_8_fu_230_p2);
    sensitive << ( tmp_7_reg_305 );
    sensitive << ( tmp_4_fu_226_p1 );

    SC_METHOD(thread_tmp_9_fu_274_p2);
    sensitive << ( tmp_s_reg_318 );
    sensitive << ( tmp_6_fu_270_p1 );

    SC_METHOD(thread_tmp_fu_159_p3);
    sensitive << ( i_reg_99 );

    SC_METHOD(thread_tmp_s_fu_241_p2);
    sensitive << ( tmp_8_fu_230_p2 );
    sensitive << ( tmp_2_fu_235_p2 );

    SC_METHOD(thread_weights_blk_n_AR);
    sensitive << ( m_axi_weights_ARREADY );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_weights_blk_n_R);
    sensitive << ( m_axi_weights_RVALID );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond_fu_258_p2 );

    SC_METHOD(thread_weights_oc_address0);
    sensitive << ( tmp_9_reg_337 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_weights_oc_ce0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_weights_oc_d0);
    sensitive << ( weights_addr_read_reg_342 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_weights_oc_we0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_weights_RVALID );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond_fu_258_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_147_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_171_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_214_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_weights_ARREADY );

    ap_CS_fsm = "0000000000001";
    ap_reg_ioackin_m_axi_weights_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "store_weights_5_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_weights_AWVALID, "(port)m_axi_weights_AWVALID");
    sc_trace(mVcdFile, m_axi_weights_AWREADY, "(port)m_axi_weights_AWREADY");
    sc_trace(mVcdFile, m_axi_weights_AWADDR, "(port)m_axi_weights_AWADDR");
    sc_trace(mVcdFile, m_axi_weights_AWID, "(port)m_axi_weights_AWID");
    sc_trace(mVcdFile, m_axi_weights_AWLEN, "(port)m_axi_weights_AWLEN");
    sc_trace(mVcdFile, m_axi_weights_AWSIZE, "(port)m_axi_weights_AWSIZE");
    sc_trace(mVcdFile, m_axi_weights_AWBURST, "(port)m_axi_weights_AWBURST");
    sc_trace(mVcdFile, m_axi_weights_AWLOCK, "(port)m_axi_weights_AWLOCK");
    sc_trace(mVcdFile, m_axi_weights_AWCACHE, "(port)m_axi_weights_AWCACHE");
    sc_trace(mVcdFile, m_axi_weights_AWPROT, "(port)m_axi_weights_AWPROT");
    sc_trace(mVcdFile, m_axi_weights_AWQOS, "(port)m_axi_weights_AWQOS");
    sc_trace(mVcdFile, m_axi_weights_AWREGION, "(port)m_axi_weights_AWREGION");
    sc_trace(mVcdFile, m_axi_weights_AWUSER, "(port)m_axi_weights_AWUSER");
    sc_trace(mVcdFile, m_axi_weights_WVALID, "(port)m_axi_weights_WVALID");
    sc_trace(mVcdFile, m_axi_weights_WREADY, "(port)m_axi_weights_WREADY");
    sc_trace(mVcdFile, m_axi_weights_WDATA, "(port)m_axi_weights_WDATA");
    sc_trace(mVcdFile, m_axi_weights_WSTRB, "(port)m_axi_weights_WSTRB");
    sc_trace(mVcdFile, m_axi_weights_WLAST, "(port)m_axi_weights_WLAST");
    sc_trace(mVcdFile, m_axi_weights_WID, "(port)m_axi_weights_WID");
    sc_trace(mVcdFile, m_axi_weights_WUSER, "(port)m_axi_weights_WUSER");
    sc_trace(mVcdFile, m_axi_weights_ARVALID, "(port)m_axi_weights_ARVALID");
    sc_trace(mVcdFile, m_axi_weights_ARREADY, "(port)m_axi_weights_ARREADY");
    sc_trace(mVcdFile, m_axi_weights_ARADDR, "(port)m_axi_weights_ARADDR");
    sc_trace(mVcdFile, m_axi_weights_ARID, "(port)m_axi_weights_ARID");
    sc_trace(mVcdFile, m_axi_weights_ARLEN, "(port)m_axi_weights_ARLEN");
    sc_trace(mVcdFile, m_axi_weights_ARSIZE, "(port)m_axi_weights_ARSIZE");
    sc_trace(mVcdFile, m_axi_weights_ARBURST, "(port)m_axi_weights_ARBURST");
    sc_trace(mVcdFile, m_axi_weights_ARLOCK, "(port)m_axi_weights_ARLOCK");
    sc_trace(mVcdFile, m_axi_weights_ARCACHE, "(port)m_axi_weights_ARCACHE");
    sc_trace(mVcdFile, m_axi_weights_ARPROT, "(port)m_axi_weights_ARPROT");
    sc_trace(mVcdFile, m_axi_weights_ARQOS, "(port)m_axi_weights_ARQOS");
    sc_trace(mVcdFile, m_axi_weights_ARREGION, "(port)m_axi_weights_ARREGION");
    sc_trace(mVcdFile, m_axi_weights_ARUSER, "(port)m_axi_weights_ARUSER");
    sc_trace(mVcdFile, m_axi_weights_RVALID, "(port)m_axi_weights_RVALID");
    sc_trace(mVcdFile, m_axi_weights_RREADY, "(port)m_axi_weights_RREADY");
    sc_trace(mVcdFile, m_axi_weights_RDATA, "(port)m_axi_weights_RDATA");
    sc_trace(mVcdFile, m_axi_weights_RLAST, "(port)m_axi_weights_RLAST");
    sc_trace(mVcdFile, m_axi_weights_RID, "(port)m_axi_weights_RID");
    sc_trace(mVcdFile, m_axi_weights_RUSER, "(port)m_axi_weights_RUSER");
    sc_trace(mVcdFile, m_axi_weights_RRESP, "(port)m_axi_weights_RRESP");
    sc_trace(mVcdFile, m_axi_weights_BVALID, "(port)m_axi_weights_BVALID");
    sc_trace(mVcdFile, m_axi_weights_BREADY, "(port)m_axi_weights_BREADY");
    sc_trace(mVcdFile, m_axi_weights_BRESP, "(port)m_axi_weights_BRESP");
    sc_trace(mVcdFile, m_axi_weights_BID, "(port)m_axi_weights_BID");
    sc_trace(mVcdFile, m_axi_weights_BUSER, "(port)m_axi_weights_BUSER");
    sc_trace(mVcdFile, weights_offset, "(port)weights_offset");
    sc_trace(mVcdFile, weights_oc_address0, "(port)weights_oc_address0");
    sc_trace(mVcdFile, weights_oc_ce0, "(port)weights_oc_ce0");
    sc_trace(mVcdFile, weights_oc_we0, "(port)weights_oc_we0");
    sc_trace(mVcdFile, weights_oc_d0, "(port)weights_oc_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, weights_blk_n_AR, "weights_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, weights_blk_n_R, "weights_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, exitcond_fu_258_p2, "exitcond_fu_258_p2");
    sc_trace(mVcdFile, sext_fu_143_p1, "sext_fu_143_p1");
    sc_trace(mVcdFile, sext_reg_279, "sext_reg_279");
    sc_trace(mVcdFile, i_1_fu_153_p2, "i_1_fu_153_p2");
    sc_trace(mVcdFile, i_1_reg_287, "i_1_reg_287");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_cast_fu_167_p1, "tmp_1_cast_fu_167_p1");
    sc_trace(mVcdFile, tmp_1_cast_reg_292, "tmp_1_cast_reg_292");
    sc_trace(mVcdFile, exitcond3_fu_147_p2, "exitcond3_fu_147_p2");
    sc_trace(mVcdFile, l_1_fu_177_p2, "l_1_fu_177_p2");
    sc_trace(mVcdFile, l_1_reg_300, "l_1_reg_300");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_7_fu_208_p2, "tmp_7_fu_208_p2");
    sc_trace(mVcdFile, tmp_7_reg_305, "tmp_7_reg_305");
    sc_trace(mVcdFile, exitcond2_fu_171_p2, "exitcond2_fu_171_p2");
    sc_trace(mVcdFile, j_1_fu_220_p2, "j_1_fu_220_p2");
    sc_trace(mVcdFile, j_1_reg_313, "j_1_reg_313");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_s_fu_241_p2, "tmp_s_fu_241_p2");
    sc_trace(mVcdFile, tmp_s_reg_318, "tmp_s_reg_318");
    sc_trace(mVcdFile, exitcond1_fu_214_p2, "exitcond1_fu_214_p2");
    sc_trace(mVcdFile, weights_addr_reg_323, "weights_addr_reg_323");
    sc_trace(mVcdFile, k_1_fu_264_p2, "k_1_fu_264_p2");
    sc_trace(mVcdFile, k_1_reg_332, "k_1_reg_332");
    sc_trace(mVcdFile, ap_block_state12, "ap_block_state12");
    sc_trace(mVcdFile, tmp_9_fu_274_p2, "tmp_9_fu_274_p2");
    sc_trace(mVcdFile, tmp_9_reg_337, "tmp_9_reg_337");
    sc_trace(mVcdFile, weights_addr_read_reg_342, "weights_addr_read_reg_342");
    sc_trace(mVcdFile, i_reg_99, "i_reg_99");
    sc_trace(mVcdFile, l_reg_110, "l_reg_110");
    sc_trace(mVcdFile, j_reg_121, "j_reg_121");
    sc_trace(mVcdFile, k_reg_132, "k_reg_132");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_5_fu_247_p2, "tmp_5_fu_247_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_weights_ARREADY, "ap_reg_ioackin_m_axi_weights_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_weights_ARREADY, "ap_sig_ioackin_m_axi_weights_ARREADY");
    sc_trace(mVcdFile, tmp_fu_159_p3, "tmp_fu_159_p3");
    sc_trace(mVcdFile, tmp_2_cast_fu_183_p1, "tmp_2_cast_fu_183_p1");
    sc_trace(mVcdFile, tmp_3_fu_187_p2, "tmp_3_fu_187_p2");
    sc_trace(mVcdFile, tmp_1_fu_196_p3, "tmp_1_fu_196_p3");
    sc_trace(mVcdFile, tmp_3_cast_fu_192_p1, "tmp_3_cast_fu_192_p1");
    sc_trace(mVcdFile, p_shl_fu_204_p1, "p_shl_fu_204_p1");
    sc_trace(mVcdFile, tmp_4_fu_226_p1, "tmp_4_fu_226_p1");
    sc_trace(mVcdFile, tmp_8_fu_230_p2, "tmp_8_fu_230_p2");
    sc_trace(mVcdFile, tmp_2_fu_235_p2, "tmp_2_fu_235_p2");
    sc_trace(mVcdFile, tmp_6_fu_270_p1, "tmp_6_fu_270_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

store_weights_5::~store_weights_5() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void store_weights_5::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_weights_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_weights_ARREADY.read())) {
                ap_reg_ioackin_m_axi_weights_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_171_p2.read(), ap_const_lv1_1))) {
        i_reg_99 = i_1_reg_287.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_99 = ap_const_lv7_0;
    }
    if ((!(esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_1))) {
        j_reg_121 = j_1_reg_313.read();
    } else if ((esl_seteq<1,1,1>(exitcond2_fu_171_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        j_reg_121 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        k_reg_132 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        k_reg_132 = k_1_reg_332.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_214_p2.read(), ap_const_lv1_1))) {
        l_reg_110 = l_1_reg_300.read();
    } else if ((esl_seteq<1,1,1>(exitcond3_fu_147_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        l_reg_110 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_287 = i_1_fu_153_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_1_reg_313 = j_1_fu_220_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && !(esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_0)))) {
        k_1_reg_332 = k_1_fu_264_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        l_1_reg_300 = l_1_fu_177_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sext_reg_279 = sext_fu_143_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_147_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_1_cast_reg_292 = tmp_1_cast_fu_167_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_171_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_7_reg_305 = tmp_7_fu_208_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        tmp_9_reg_337 = tmp_9_fu_274_p2.read();
        weights_addr_read_reg_342 = m_axi_weights_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_214_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_s_reg_318 = tmp_s_fu_241_p2.read();
        weights_addr_reg_323 =  (sc_lv<32>) (tmp_5_fu_247_p2.read());
    }
}

void store_weights_5::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void store_weights_5::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void store_weights_5::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void store_weights_5::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void store_weights_5::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void store_weights_5::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void store_weights_5::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void store_weights_5::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void store_weights_5::thread_ap_block_state12() {
    ap_block_state12 = (esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_0));
}

void store_weights_5::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond3_fu_147_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void store_weights_5::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void store_weights_5::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_147_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void store_weights_5::thread_ap_sig_ioackin_m_axi_weights_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_weights_ARREADY.read())) {
        ap_sig_ioackin_m_axi_weights_ARREADY = m_axi_weights_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_weights_ARREADY = ap_const_logic_1;
    }
}

void store_weights_5::thread_exitcond1_fu_214_p2() {
    exitcond1_fu_214_p2 = (!j_reg_121.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_121.read() == ap_const_lv3_5);
}

void store_weights_5::thread_exitcond2_fu_171_p2() {
    exitcond2_fu_171_p2 = (!l_reg_110.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(l_reg_110.read() == ap_const_lv5_10);
}

void store_weights_5::thread_exitcond3_fu_147_p2() {
    exitcond3_fu_147_p2 = (!i_reg_99.read().is_01() || !ap_const_lv7_78.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_99.read() == ap_const_lv7_78);
}

void store_weights_5::thread_exitcond_fu_258_p2() {
    exitcond_fu_258_p2 = (!k_reg_132.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_132.read() == ap_const_lv3_5);
}

void store_weights_5::thread_i_1_fu_153_p2() {
    i_1_fu_153_p2 = (!i_reg_99.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_99.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void store_weights_5::thread_j_1_fu_220_p2() {
    j_1_fu_220_p2 = (!j_reg_121.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_121.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void store_weights_5::thread_k_1_fu_264_p2() {
    k_1_fu_264_p2 = (!k_reg_132.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_reg_132.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void store_weights_5::thread_l_1_fu_177_p2() {
    l_1_fu_177_p2 = (!l_reg_110.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(l_reg_110.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void store_weights_5::thread_m_axi_weights_ARADDR() {
    m_axi_weights_ARADDR = weights_addr_reg_323.read();
}

void store_weights_5::thread_m_axi_weights_ARBURST() {
    m_axi_weights_ARBURST = ap_const_lv2_0;
}

void store_weights_5::thread_m_axi_weights_ARCACHE() {
    m_axi_weights_ARCACHE = ap_const_lv4_0;
}

void store_weights_5::thread_m_axi_weights_ARID() {
    m_axi_weights_ARID = ap_const_lv1_0;
}

void store_weights_5::thread_m_axi_weights_ARLEN() {
    m_axi_weights_ARLEN = ap_const_lv32_5;
}

void store_weights_5::thread_m_axi_weights_ARLOCK() {
    m_axi_weights_ARLOCK = ap_const_lv2_0;
}

void store_weights_5::thread_m_axi_weights_ARPROT() {
    m_axi_weights_ARPROT = ap_const_lv3_0;
}

void store_weights_5::thread_m_axi_weights_ARQOS() {
    m_axi_weights_ARQOS = ap_const_lv4_0;
}

void store_weights_5::thread_m_axi_weights_ARREGION() {
    m_axi_weights_ARREGION = ap_const_lv4_0;
}

void store_weights_5::thread_m_axi_weights_ARSIZE() {
    m_axi_weights_ARSIZE = ap_const_lv3_0;
}

void store_weights_5::thread_m_axi_weights_ARUSER() {
    m_axi_weights_ARUSER = ap_const_lv1_0;
}

void store_weights_5::thread_m_axi_weights_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_weights_ARREADY.read()))) {
        m_axi_weights_ARVALID = ap_const_logic_1;
    } else {
        m_axi_weights_ARVALID = ap_const_logic_0;
    }
}

void store_weights_5::thread_m_axi_weights_AWADDR() {
    m_axi_weights_AWADDR = ap_const_lv32_0;
}

void store_weights_5::thread_m_axi_weights_AWBURST() {
    m_axi_weights_AWBURST = ap_const_lv2_0;
}

void store_weights_5::thread_m_axi_weights_AWCACHE() {
    m_axi_weights_AWCACHE = ap_const_lv4_0;
}

void store_weights_5::thread_m_axi_weights_AWID() {
    m_axi_weights_AWID = ap_const_lv1_0;
}

void store_weights_5::thread_m_axi_weights_AWLEN() {
    m_axi_weights_AWLEN = ap_const_lv32_0;
}

void store_weights_5::thread_m_axi_weights_AWLOCK() {
    m_axi_weights_AWLOCK = ap_const_lv2_0;
}

void store_weights_5::thread_m_axi_weights_AWPROT() {
    m_axi_weights_AWPROT = ap_const_lv3_0;
}

void store_weights_5::thread_m_axi_weights_AWQOS() {
    m_axi_weights_AWQOS = ap_const_lv4_0;
}

void store_weights_5::thread_m_axi_weights_AWREGION() {
    m_axi_weights_AWREGION = ap_const_lv4_0;
}

void store_weights_5::thread_m_axi_weights_AWSIZE() {
    m_axi_weights_AWSIZE = ap_const_lv3_0;
}

void store_weights_5::thread_m_axi_weights_AWUSER() {
    m_axi_weights_AWUSER = ap_const_lv1_0;
}

void store_weights_5::thread_m_axi_weights_AWVALID() {
    m_axi_weights_AWVALID = ap_const_logic_0;
}

void store_weights_5::thread_m_axi_weights_BREADY() {
    m_axi_weights_BREADY = ap_const_logic_0;
}

void store_weights_5::thread_m_axi_weights_RREADY() {
    if ((!(esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        m_axi_weights_RREADY = ap_const_logic_1;
    } else {
        m_axi_weights_RREADY = ap_const_logic_0;
    }
}

void store_weights_5::thread_m_axi_weights_WDATA() {
    m_axi_weights_WDATA = ap_const_lv32_0;
}

void store_weights_5::thread_m_axi_weights_WID() {
    m_axi_weights_WID = ap_const_lv1_0;
}

void store_weights_5::thread_m_axi_weights_WLAST() {
    m_axi_weights_WLAST = ap_const_logic_0;
}

void store_weights_5::thread_m_axi_weights_WSTRB() {
    m_axi_weights_WSTRB = ap_const_lv4_0;
}

void store_weights_5::thread_m_axi_weights_WUSER() {
    m_axi_weights_WUSER = ap_const_lv1_0;
}

void store_weights_5::thread_m_axi_weights_WVALID() {
    m_axi_weights_WVALID = ap_const_logic_0;
}

void store_weights_5::thread_p_shl_fu_204_p1() {
    p_shl_fu_204_p1 = esl_zext<64,14>(tmp_1_fu_196_p3.read());
}

void store_weights_5::thread_sext_fu_143_p1() {
    sext_fu_143_p1 = esl_zext<64,30>(weights_offset.read());
}

void store_weights_5::thread_tmp_1_cast_fu_167_p1() {
    tmp_1_cast_fu_167_p1 = esl_zext<12,11>(tmp_fu_159_p3.read());
}

void store_weights_5::thread_tmp_1_fu_196_p3() {
    tmp_1_fu_196_p3 = esl_concat<12,2>(tmp_3_fu_187_p2.read(), ap_const_lv2_0);
}

void store_weights_5::thread_tmp_2_cast_fu_183_p1() {
    tmp_2_cast_fu_183_p1 = esl_zext<12,5>(l_reg_110.read());
}

void store_weights_5::thread_tmp_2_fu_235_p2() {
    tmp_2_fu_235_p2 = (!ap_const_lv64_2.is_01())? sc_lv<64>(): tmp_8_fu_230_p2.read() << (unsigned short)ap_const_lv64_2.to_uint();
}

void store_weights_5::thread_tmp_3_cast_fu_192_p1() {
    tmp_3_cast_fu_192_p1 = esl_zext<64,12>(tmp_3_fu_187_p2.read());
}

void store_weights_5::thread_tmp_3_fu_187_p2() {
    tmp_3_fu_187_p2 = (!tmp_1_cast_reg_292.read().is_01() || !tmp_2_cast_fu_183_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_1_cast_reg_292.read()) + sc_biguint<12>(tmp_2_cast_fu_183_p1.read()));
}

void store_weights_5::thread_tmp_4_fu_226_p1() {
    tmp_4_fu_226_p1 = esl_zext<64,3>(j_reg_121.read());
}

void store_weights_5::thread_tmp_5_fu_247_p2() {
    tmp_5_fu_247_p2 = (!sext_reg_279.read().is_01() || !tmp_s_fu_241_p2.read().is_01())? sc_lv<64>(): (sc_biguint<64>(sext_reg_279.read()) + sc_biguint<64>(tmp_s_fu_241_p2.read()));
}

void store_weights_5::thread_tmp_6_fu_270_p1() {
    tmp_6_fu_270_p1 = esl_zext<64,3>(k_reg_132.read());
}

void store_weights_5::thread_tmp_7_fu_208_p2() {
    tmp_7_fu_208_p2 = (!tmp_3_cast_fu_192_p1.read().is_01() || !p_shl_fu_204_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_3_cast_fu_192_p1.read()) + sc_biguint<64>(p_shl_fu_204_p1.read()));
}

void store_weights_5::thread_tmp_8_fu_230_p2() {
    tmp_8_fu_230_p2 = (!tmp_7_reg_305.read().is_01() || !tmp_4_fu_226_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_7_reg_305.read()) + sc_biguint<64>(tmp_4_fu_226_p1.read()));
}

void store_weights_5::thread_tmp_9_fu_274_p2() {
    tmp_9_fu_274_p2 = (!tmp_6_fu_270_p1.read().is_01() || !tmp_s_reg_318.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_6_fu_270_p1.read()) + sc_biguint<64>(tmp_s_reg_318.read()));
}

void store_weights_5::thread_tmp_fu_159_p3() {
    tmp_fu_159_p3 = esl_concat<7,4>(i_reg_99.read(), ap_const_lv4_0);
}

void store_weights_5::thread_tmp_s_fu_241_p2() {
    tmp_s_fu_241_p2 = (!tmp_8_fu_230_p2.read().is_01() || !tmp_2_fu_235_p2.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_8_fu_230_p2.read()) + sc_biguint<64>(tmp_2_fu_235_p2.read()));
}

void store_weights_5::thread_weights_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        weights_blk_n_AR = m_axi_weights_ARREADY.read();
    } else {
        weights_blk_n_AR = ap_const_logic_1;
    }
}

void store_weights_5::thread_weights_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0))) {
        weights_blk_n_R = m_axi_weights_RVALID.read();
    } else {
        weights_blk_n_R = ap_const_logic_1;
    }
}

void store_weights_5::thread_weights_oc_address0() {
    weights_oc_address0 =  (sc_lv<16>) (tmp_9_reg_337.read());
}

void store_weights_5::thread_weights_oc_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        weights_oc_ce0 = ap_const_logic_1;
    } else {
        weights_oc_ce0 = ap_const_logic_0;
    }
}

void store_weights_5::thread_weights_oc_d0() {
    weights_oc_d0 = weights_addr_read_reg_342.read();
}

void store_weights_5::thread_weights_oc_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        weights_oc_we0 = ap_const_logic_1;
    } else {
        weights_oc_we0 = ap_const_logic_0;
    }
}

void store_weights_5::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond3_fu_147_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_171_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond1_fu_214_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_weights_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((!(esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else if ((!(esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_weights_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond_fu_258_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXX";
            break;
    }
}

}

