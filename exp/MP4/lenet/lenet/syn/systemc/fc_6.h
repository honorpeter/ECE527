// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fc_6_HH_
#define _fc_6_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "conv1_fadd_32ns_3bkb.h"
#include "conv1_fmul_32ns_3cud.h"

namespace ap_rtl {

struct fc_6 : public sc_module {
    // Port declarations 105
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > input_0_0_address0;
    sc_out< sc_logic > input_0_0_ce0;
    sc_in< sc_lv<32> > input_0_0_q0;
    sc_out< sc_logic > m_axi_weights_AWVALID;
    sc_in< sc_logic > m_axi_weights_AWREADY;
    sc_out< sc_lv<32> > m_axi_weights_AWADDR;
    sc_out< sc_lv<1> > m_axi_weights_AWID;
    sc_out< sc_lv<32> > m_axi_weights_AWLEN;
    sc_out< sc_lv<3> > m_axi_weights_AWSIZE;
    sc_out< sc_lv<2> > m_axi_weights_AWBURST;
    sc_out< sc_lv<2> > m_axi_weights_AWLOCK;
    sc_out< sc_lv<4> > m_axi_weights_AWCACHE;
    sc_out< sc_lv<3> > m_axi_weights_AWPROT;
    sc_out< sc_lv<4> > m_axi_weights_AWQOS;
    sc_out< sc_lv<4> > m_axi_weights_AWREGION;
    sc_out< sc_lv<1> > m_axi_weights_AWUSER;
    sc_out< sc_logic > m_axi_weights_WVALID;
    sc_in< sc_logic > m_axi_weights_WREADY;
    sc_out< sc_lv<32> > m_axi_weights_WDATA;
    sc_out< sc_lv<4> > m_axi_weights_WSTRB;
    sc_out< sc_logic > m_axi_weights_WLAST;
    sc_out< sc_lv<1> > m_axi_weights_WID;
    sc_out< sc_lv<1> > m_axi_weights_WUSER;
    sc_out< sc_logic > m_axi_weights_ARVALID;
    sc_in< sc_logic > m_axi_weights_ARREADY;
    sc_out< sc_lv<32> > m_axi_weights_ARADDR;
    sc_out< sc_lv<1> > m_axi_weights_ARID;
    sc_out< sc_lv<32> > m_axi_weights_ARLEN;
    sc_out< sc_lv<3> > m_axi_weights_ARSIZE;
    sc_out< sc_lv<2> > m_axi_weights_ARBURST;
    sc_out< sc_lv<2> > m_axi_weights_ARLOCK;
    sc_out< sc_lv<4> > m_axi_weights_ARCACHE;
    sc_out< sc_lv<3> > m_axi_weights_ARPROT;
    sc_out< sc_lv<4> > m_axi_weights_ARQOS;
    sc_out< sc_lv<4> > m_axi_weights_ARREGION;
    sc_out< sc_lv<1> > m_axi_weights_ARUSER;
    sc_in< sc_logic > m_axi_weights_RVALID;
    sc_out< sc_logic > m_axi_weights_RREADY;
    sc_in< sc_lv<32> > m_axi_weights_RDATA;
    sc_in< sc_logic > m_axi_weights_RLAST;
    sc_in< sc_lv<1> > m_axi_weights_RID;
    sc_in< sc_lv<1> > m_axi_weights_RUSER;
    sc_in< sc_lv<2> > m_axi_weights_RRESP;
    sc_in< sc_logic > m_axi_weights_BVALID;
    sc_out< sc_logic > m_axi_weights_BREADY;
    sc_in< sc_lv<2> > m_axi_weights_BRESP;
    sc_in< sc_lv<1> > m_axi_weights_BID;
    sc_in< sc_lv<1> > m_axi_weights_BUSER;
    sc_in< sc_lv<30> > weights_offset;
    sc_out< sc_logic > m_axi_bias_AWVALID;
    sc_in< sc_logic > m_axi_bias_AWREADY;
    sc_out< sc_lv<32> > m_axi_bias_AWADDR;
    sc_out< sc_lv<1> > m_axi_bias_AWID;
    sc_out< sc_lv<32> > m_axi_bias_AWLEN;
    sc_out< sc_lv<3> > m_axi_bias_AWSIZE;
    sc_out< sc_lv<2> > m_axi_bias_AWBURST;
    sc_out< sc_lv<2> > m_axi_bias_AWLOCK;
    sc_out< sc_lv<4> > m_axi_bias_AWCACHE;
    sc_out< sc_lv<3> > m_axi_bias_AWPROT;
    sc_out< sc_lv<4> > m_axi_bias_AWQOS;
    sc_out< sc_lv<4> > m_axi_bias_AWREGION;
    sc_out< sc_lv<1> > m_axi_bias_AWUSER;
    sc_out< sc_logic > m_axi_bias_WVALID;
    sc_in< sc_logic > m_axi_bias_WREADY;
    sc_out< sc_lv<32> > m_axi_bias_WDATA;
    sc_out< sc_lv<4> > m_axi_bias_WSTRB;
    sc_out< sc_logic > m_axi_bias_WLAST;
    sc_out< sc_lv<1> > m_axi_bias_WID;
    sc_out< sc_lv<1> > m_axi_bias_WUSER;
    sc_out< sc_logic > m_axi_bias_ARVALID;
    sc_in< sc_logic > m_axi_bias_ARREADY;
    sc_out< sc_lv<32> > m_axi_bias_ARADDR;
    sc_out< sc_lv<1> > m_axi_bias_ARID;
    sc_out< sc_lv<32> > m_axi_bias_ARLEN;
    sc_out< sc_lv<3> > m_axi_bias_ARSIZE;
    sc_out< sc_lv<2> > m_axi_bias_ARBURST;
    sc_out< sc_lv<2> > m_axi_bias_ARLOCK;
    sc_out< sc_lv<4> > m_axi_bias_ARCACHE;
    sc_out< sc_lv<3> > m_axi_bias_ARPROT;
    sc_out< sc_lv<4> > m_axi_bias_ARQOS;
    sc_out< sc_lv<4> > m_axi_bias_ARREGION;
    sc_out< sc_lv<1> > m_axi_bias_ARUSER;
    sc_in< sc_logic > m_axi_bias_RVALID;
    sc_out< sc_logic > m_axi_bias_RREADY;
    sc_in< sc_lv<32> > m_axi_bias_RDATA;
    sc_in< sc_logic > m_axi_bias_RLAST;
    sc_in< sc_lv<1> > m_axi_bias_RID;
    sc_in< sc_lv<1> > m_axi_bias_RUSER;
    sc_in< sc_lv<2> > m_axi_bias_RRESP;
    sc_in< sc_logic > m_axi_bias_BVALID;
    sc_out< sc_logic > m_axi_bias_BREADY;
    sc_in< sc_lv<2> > m_axi_bias_BRESP;
    sc_in< sc_lv<1> > m_axi_bias_BID;
    sc_in< sc_lv<1> > m_axi_bias_BUSER;
    sc_in< sc_lv<30> > bias_offset;
    sc_out< sc_lv<4> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<32> > output_r_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    fc_6(sc_module_name name);
    SC_HAS_PROCESS(fc_6);

    ~fc_6();

    sc_trace_file* mVcdFile;

    conv1_fadd_32ns_3bkb<1,5,32,32,32>* conv1_fadd_32ns_3bkb_U59;
    conv1_fmul_32ns_3cud<1,4,32,32,32>* conv1_fmul_32ns_3cud_U60;
    sc_signal< sc_lv<32> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > weights_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > weights_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_logic > bias_blk_n_AR;
    sc_signal< sc_logic > bias_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<1> > exitcond_fu_254_p2;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_bias_ARREADY;
    sc_signal< sc_lv<32> > weights_offset_cast_fu_184_p1;
    sc_signal< sc_lv<32> > weights_offset_cast_reg_277;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > n_1_fu_194_p2;
    sc_signal< sc_lv<4> > n_1_reg_285;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > tmp_44_fu_234_p2;
    sc_signal< sc_lv<32> > tmp_44_reg_290;
    sc_signal< sc_lv<1> > exitcond1_fu_188_p2;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_weights_ARREADY;
    sc_signal< sc_lv<4> > output_addr_reg_301;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<7> > c_3_fu_260_p2;
    sc_signal< sc_lv<7> > c_3_reg_309;
    sc_signal< bool > ap_block_state16;
    sc_signal< sc_lv<32> > bias_addr_read_reg_319;
    sc_signal< sc_lv<32> > weights_addr_read_reg_324;
    sc_signal< sc_lv<32> > input_0_0_load_reg_329;
    sc_signal< sc_lv<32> > grp_fu_169_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_334;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<32> > grp_fu_164_p2;
    sc_signal< sc_logic > ap_CS_fsm_state26;
    sc_signal< sc_lv<32> > tmp_1_reg_344;
    sc_signal< sc_logic > ap_CS_fsm_state31;
    sc_signal< sc_lv<4> > n_reg_129;
    sc_signal< sc_logic > ap_CS_fsm_state32;
    sc_signal< sc_lv<32> > tmp_s_reg_141;
    sc_signal< sc_lv<7> > c_reg_153;
    sc_signal< sc_lv<64> > tmp_fu_249_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_266_p1;
    sc_signal< sc_lv<64> > sext2_fu_173_p1;
    sc_signal< sc_lv<64> > tmp_45_fu_239_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_bias_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_weights_ARREADY;
    sc_signal< sc_lv<32> > grp_fu_164_p1;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_logic > ap_CS_fsm_state27;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_lv<11> > tmp_59_fu_200_p3;
    sc_signal< sc_lv<7> > tmp_60_fu_212_p3;
    sc_signal< sc_lv<12> > p_shl_cast_fu_208_p1;
    sc_signal< sc_lv<12> > p_shl6_cast_fu_220_p1;
    sc_signal< sc_lv<12> > tmp_61_fu_224_p2;
    sc_signal< sc_lv<32> > tmp_43_fu_230_p1;
    sc_signal< sc_lv<32> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_ST_fsm_state1;
    static const sc_lv<32> ap_ST_fsm_state2;
    static const sc_lv<32> ap_ST_fsm_state3;
    static const sc_lv<32> ap_ST_fsm_state4;
    static const sc_lv<32> ap_ST_fsm_state5;
    static const sc_lv<32> ap_ST_fsm_state6;
    static const sc_lv<32> ap_ST_fsm_state7;
    static const sc_lv<32> ap_ST_fsm_state8;
    static const sc_lv<32> ap_ST_fsm_state9;
    static const sc_lv<32> ap_ST_fsm_state10;
    static const sc_lv<32> ap_ST_fsm_state11;
    static const sc_lv<32> ap_ST_fsm_state12;
    static const sc_lv<32> ap_ST_fsm_state13;
    static const sc_lv<32> ap_ST_fsm_state14;
    static const sc_lv<32> ap_ST_fsm_state15;
    static const sc_lv<32> ap_ST_fsm_state16;
    static const sc_lv<32> ap_ST_fsm_state17;
    static const sc_lv<32> ap_ST_fsm_state18;
    static const sc_lv<32> ap_ST_fsm_state19;
    static const sc_lv<32> ap_ST_fsm_state20;
    static const sc_lv<32> ap_ST_fsm_state21;
    static const sc_lv<32> ap_ST_fsm_state22;
    static const sc_lv<32> ap_ST_fsm_state23;
    static const sc_lv<32> ap_ST_fsm_state24;
    static const sc_lv<32> ap_ST_fsm_state25;
    static const sc_lv<32> ap_ST_fsm_state26;
    static const sc_lv<32> ap_ST_fsm_state27;
    static const sc_lv<32> ap_ST_fsm_state28;
    static const sc_lv<32> ap_ST_fsm_state29;
    static const sc_lv<32> ap_ST_fsm_state30;
    static const sc_lv<32> ap_ST_fsm_state31;
    static const sc_lv<32> ap_ST_fsm_state32;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_78;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<7> ap_const_lv7_78;
    static const sc_lv<7> ap_const_lv7_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state26();
    void thread_ap_CS_fsm_state27();
    void thread_ap_CS_fsm_state31();
    void thread_ap_CS_fsm_state32();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state16();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_bias_ARREADY();
    void thread_ap_sig_ioackin_m_axi_weights_ARREADY();
    void thread_bias_blk_n_AR();
    void thread_bias_blk_n_R();
    void thread_c_3_fu_260_p2();
    void thread_exitcond1_fu_188_p2();
    void thread_exitcond_fu_254_p2();
    void thread_grp_fu_164_p1();
    void thread_input_0_0_address0();
    void thread_input_0_0_ce0();
    void thread_m_axi_bias_ARADDR();
    void thread_m_axi_bias_ARBURST();
    void thread_m_axi_bias_ARCACHE();
    void thread_m_axi_bias_ARID();
    void thread_m_axi_bias_ARLEN();
    void thread_m_axi_bias_ARLOCK();
    void thread_m_axi_bias_ARPROT();
    void thread_m_axi_bias_ARQOS();
    void thread_m_axi_bias_ARREGION();
    void thread_m_axi_bias_ARSIZE();
    void thread_m_axi_bias_ARUSER();
    void thread_m_axi_bias_ARVALID();
    void thread_m_axi_bias_AWADDR();
    void thread_m_axi_bias_AWBURST();
    void thread_m_axi_bias_AWCACHE();
    void thread_m_axi_bias_AWID();
    void thread_m_axi_bias_AWLEN();
    void thread_m_axi_bias_AWLOCK();
    void thread_m_axi_bias_AWPROT();
    void thread_m_axi_bias_AWQOS();
    void thread_m_axi_bias_AWREGION();
    void thread_m_axi_bias_AWSIZE();
    void thread_m_axi_bias_AWUSER();
    void thread_m_axi_bias_AWVALID();
    void thread_m_axi_bias_BREADY();
    void thread_m_axi_bias_RREADY();
    void thread_m_axi_bias_WDATA();
    void thread_m_axi_bias_WID();
    void thread_m_axi_bias_WLAST();
    void thread_m_axi_bias_WSTRB();
    void thread_m_axi_bias_WUSER();
    void thread_m_axi_bias_WVALID();
    void thread_m_axi_weights_ARADDR();
    void thread_m_axi_weights_ARBURST();
    void thread_m_axi_weights_ARCACHE();
    void thread_m_axi_weights_ARID();
    void thread_m_axi_weights_ARLEN();
    void thread_m_axi_weights_ARLOCK();
    void thread_m_axi_weights_ARPROT();
    void thread_m_axi_weights_ARQOS();
    void thread_m_axi_weights_ARREGION();
    void thread_m_axi_weights_ARSIZE();
    void thread_m_axi_weights_ARUSER();
    void thread_m_axi_weights_ARVALID();
    void thread_m_axi_weights_AWADDR();
    void thread_m_axi_weights_AWBURST();
    void thread_m_axi_weights_AWCACHE();
    void thread_m_axi_weights_AWID();
    void thread_m_axi_weights_AWLEN();
    void thread_m_axi_weights_AWLOCK();
    void thread_m_axi_weights_AWPROT();
    void thread_m_axi_weights_AWQOS();
    void thread_m_axi_weights_AWREGION();
    void thread_m_axi_weights_AWSIZE();
    void thread_m_axi_weights_AWUSER();
    void thread_m_axi_weights_AWVALID();
    void thread_m_axi_weights_BREADY();
    void thread_m_axi_weights_RREADY();
    void thread_m_axi_weights_WDATA();
    void thread_m_axi_weights_WID();
    void thread_m_axi_weights_WLAST();
    void thread_m_axi_weights_WSTRB();
    void thread_m_axi_weights_WUSER();
    void thread_m_axi_weights_WVALID();
    void thread_n_1_fu_194_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_p_shl6_cast_fu_220_p1();
    void thread_p_shl_cast_fu_208_p1();
    void thread_sext2_fu_173_p1();
    void thread_tmp_2_fu_266_p1();
    void thread_tmp_43_fu_230_p1();
    void thread_tmp_44_fu_234_p2();
    void thread_tmp_45_fu_239_p1();
    void thread_tmp_59_fu_200_p3();
    void thread_tmp_60_fu_212_p3();
    void thread_tmp_61_fu_224_p2();
    void thread_tmp_fu_249_p1();
    void thread_weights_blk_n_AR();
    void thread_weights_blk_n_R();
    void thread_weights_offset_cast_fu_184_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
