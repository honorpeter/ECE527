// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "store_input.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic store_input::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic store_input::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> store_input::ap_ST_fsm_state1 = "1";
const sc_lv<11> store_input::ap_ST_fsm_state2 = "10";
const sc_lv<11> store_input::ap_ST_fsm_state3 = "100";
const sc_lv<11> store_input::ap_ST_fsm_state4 = "1000";
const sc_lv<11> store_input::ap_ST_fsm_state5 = "10000";
const sc_lv<11> store_input::ap_ST_fsm_state6 = "100000";
const sc_lv<11> store_input::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> store_input::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> store_input::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> store_input::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> store_input::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> store_input::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> store_input::ap_const_lv1_0 = "0";
const sc_lv<3> store_input::ap_const_lv3_0 = "000";
const sc_lv<2> store_input::ap_const_lv2_0 = "00";
const sc_lv<4> store_input::ap_const_lv4_0 = "0000";
const sc_lv<32> store_input::ap_const_lv32_2 = "10";
const sc_lv<32> store_input::ap_const_lv32_9 = "1001";
const sc_lv<32> store_input::ap_const_lv32_1 = "1";
const sc_lv<32> store_input::ap_const_lv32_8 = "1000";
const sc_lv<6> store_input::ap_const_lv6_0 = "000000";
const sc_lv<1> store_input::ap_const_lv1_1 = "1";
const sc_lv<32> store_input::ap_const_lv32_A = "1010";
const sc_lv<32> store_input::ap_const_lv32_20 = "100000";
const sc_lv<6> store_input::ap_const_lv6_20 = "100000";
const sc_lv<6> store_input::ap_const_lv6_1 = "1";
const sc_lv<5> store_input::ap_const_lv5_0 = "00000";
const bool store_input::ap_const_boolean_1 = true;

store_input::store_input(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state10);
    sensitive << ( m_axi_input_r_RVALID );
    sensitive << ( exitcond_fu_145_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_103_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_103_p2 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_input_r_ARREADY);
    sensitive << ( m_axi_input_r_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_input_r_ARREADY );

    SC_METHOD(thread_exitcond1_fu_103_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_exitcond_fu_145_p2);
    sensitive << ( m_axi_input_r_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_145_p2 );
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_i_5_fu_109_p2);
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_input_oc_0_address0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_28_cast_fu_166_p1 );

    SC_METHOD(thread_input_oc_0_ce0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_input_oc_0_d0);
    sensitive << ( input_addr_read_reg_217 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_input_oc_0_we0);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_input_r_blk_n_AR);
    sensitive << ( m_axi_input_r_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_input_r_blk_n_R);
    sensitive << ( m_axi_input_r_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_145_p2 );

    SC_METHOD(thread_j_4_fu_151_p2);
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_m_axi_input_r_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_12_fu_132_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_input_r_ARREADY );

    SC_METHOD(thread_m_axi_input_r_ARBURST);

    SC_METHOD(thread_m_axi_input_r_ARCACHE);

    SC_METHOD(thread_m_axi_input_r_ARID);

    SC_METHOD(thread_m_axi_input_r_ARLEN);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_m_axi_input_r_ARREADY );

    SC_METHOD(thread_m_axi_input_r_ARLOCK);

    SC_METHOD(thread_m_axi_input_r_ARPROT);

    SC_METHOD(thread_m_axi_input_r_ARQOS);

    SC_METHOD(thread_m_axi_input_r_ARREGION);

    SC_METHOD(thread_m_axi_input_r_ARSIZE);

    SC_METHOD(thread_m_axi_input_r_ARUSER);

    SC_METHOD(thread_m_axi_input_r_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_m_axi_input_r_ARREADY );

    SC_METHOD(thread_m_axi_input_r_AWADDR);

    SC_METHOD(thread_m_axi_input_r_AWBURST);

    SC_METHOD(thread_m_axi_input_r_AWCACHE);

    SC_METHOD(thread_m_axi_input_r_AWID);

    SC_METHOD(thread_m_axi_input_r_AWLEN);

    SC_METHOD(thread_m_axi_input_r_AWLOCK);

    SC_METHOD(thread_m_axi_input_r_AWPROT);

    SC_METHOD(thread_m_axi_input_r_AWQOS);

    SC_METHOD(thread_m_axi_input_r_AWREGION);

    SC_METHOD(thread_m_axi_input_r_AWSIZE);

    SC_METHOD(thread_m_axi_input_r_AWUSER);

    SC_METHOD(thread_m_axi_input_r_AWVALID);

    SC_METHOD(thread_m_axi_input_r_BREADY);

    SC_METHOD(thread_m_axi_input_r_RREADY);
    sensitive << ( m_axi_input_r_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_145_p2 );

    SC_METHOD(thread_m_axi_input_r_WDATA);

    SC_METHOD(thread_m_axi_input_r_WID);

    SC_METHOD(thread_m_axi_input_r_WLAST);

    SC_METHOD(thread_m_axi_input_r_WSTRB);

    SC_METHOD(thread_m_axi_input_r_WUSER);

    SC_METHOD(thread_m_axi_input_r_WVALID);

    SC_METHOD(thread_sext_cast_fu_99_p1);
    sensitive << ( input_offset );

    SC_METHOD(thread_tmp_10_fu_123_p1);
    sensitive << ( tmp_fu_115_p3 );

    SC_METHOD(thread_tmp_11_fu_127_p2);
    sensitive << ( sext_cast_reg_170 );
    sensitive << ( tmp_10_fu_123_p1 );

    SC_METHOD(thread_tmp_12_fu_132_p1);
    sensitive << ( tmp_11_reg_188 );

    SC_METHOD(thread_tmp_27_cast_fu_142_p1);
    sensitive << ( tmp_reg_183 );

    SC_METHOD(thread_tmp_28_cast_fu_166_p1);
    sensitive << ( tmp_s_reg_212 );

    SC_METHOD(thread_tmp_cast_fu_157_p1);
    sensitive << ( j_reg_88 );

    SC_METHOD(thread_tmp_fu_115_p3);
    sensitive << ( i_reg_77 );

    SC_METHOD(thread_tmp_s_fu_161_p2);
    sensitive << ( tmp_27_cast_reg_199 );
    sensitive << ( tmp_cast_fu_157_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_input_r_RVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_145_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_103_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_input_r_ARREADY );

    ap_CS_fsm = "00000000001";
    ap_reg_ioackin_m_axi_input_r_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "store_input_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_input_r_AWVALID, "(port)m_axi_input_r_AWVALID");
    sc_trace(mVcdFile, m_axi_input_r_AWREADY, "(port)m_axi_input_r_AWREADY");
    sc_trace(mVcdFile, m_axi_input_r_AWADDR, "(port)m_axi_input_r_AWADDR");
    sc_trace(mVcdFile, m_axi_input_r_AWID, "(port)m_axi_input_r_AWID");
    sc_trace(mVcdFile, m_axi_input_r_AWLEN, "(port)m_axi_input_r_AWLEN");
    sc_trace(mVcdFile, m_axi_input_r_AWSIZE, "(port)m_axi_input_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_input_r_AWBURST, "(port)m_axi_input_r_AWBURST");
    sc_trace(mVcdFile, m_axi_input_r_AWLOCK, "(port)m_axi_input_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_input_r_AWCACHE, "(port)m_axi_input_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_input_r_AWPROT, "(port)m_axi_input_r_AWPROT");
    sc_trace(mVcdFile, m_axi_input_r_AWQOS, "(port)m_axi_input_r_AWQOS");
    sc_trace(mVcdFile, m_axi_input_r_AWREGION, "(port)m_axi_input_r_AWREGION");
    sc_trace(mVcdFile, m_axi_input_r_AWUSER, "(port)m_axi_input_r_AWUSER");
    sc_trace(mVcdFile, m_axi_input_r_WVALID, "(port)m_axi_input_r_WVALID");
    sc_trace(mVcdFile, m_axi_input_r_WREADY, "(port)m_axi_input_r_WREADY");
    sc_trace(mVcdFile, m_axi_input_r_WDATA, "(port)m_axi_input_r_WDATA");
    sc_trace(mVcdFile, m_axi_input_r_WSTRB, "(port)m_axi_input_r_WSTRB");
    sc_trace(mVcdFile, m_axi_input_r_WLAST, "(port)m_axi_input_r_WLAST");
    sc_trace(mVcdFile, m_axi_input_r_WID, "(port)m_axi_input_r_WID");
    sc_trace(mVcdFile, m_axi_input_r_WUSER, "(port)m_axi_input_r_WUSER");
    sc_trace(mVcdFile, m_axi_input_r_ARVALID, "(port)m_axi_input_r_ARVALID");
    sc_trace(mVcdFile, m_axi_input_r_ARREADY, "(port)m_axi_input_r_ARREADY");
    sc_trace(mVcdFile, m_axi_input_r_ARADDR, "(port)m_axi_input_r_ARADDR");
    sc_trace(mVcdFile, m_axi_input_r_ARID, "(port)m_axi_input_r_ARID");
    sc_trace(mVcdFile, m_axi_input_r_ARLEN, "(port)m_axi_input_r_ARLEN");
    sc_trace(mVcdFile, m_axi_input_r_ARSIZE, "(port)m_axi_input_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_input_r_ARBURST, "(port)m_axi_input_r_ARBURST");
    sc_trace(mVcdFile, m_axi_input_r_ARLOCK, "(port)m_axi_input_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_input_r_ARCACHE, "(port)m_axi_input_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_input_r_ARPROT, "(port)m_axi_input_r_ARPROT");
    sc_trace(mVcdFile, m_axi_input_r_ARQOS, "(port)m_axi_input_r_ARQOS");
    sc_trace(mVcdFile, m_axi_input_r_ARREGION, "(port)m_axi_input_r_ARREGION");
    sc_trace(mVcdFile, m_axi_input_r_ARUSER, "(port)m_axi_input_r_ARUSER");
    sc_trace(mVcdFile, m_axi_input_r_RVALID, "(port)m_axi_input_r_RVALID");
    sc_trace(mVcdFile, m_axi_input_r_RREADY, "(port)m_axi_input_r_RREADY");
    sc_trace(mVcdFile, m_axi_input_r_RDATA, "(port)m_axi_input_r_RDATA");
    sc_trace(mVcdFile, m_axi_input_r_RLAST, "(port)m_axi_input_r_RLAST");
    sc_trace(mVcdFile, m_axi_input_r_RID, "(port)m_axi_input_r_RID");
    sc_trace(mVcdFile, m_axi_input_r_RUSER, "(port)m_axi_input_r_RUSER");
    sc_trace(mVcdFile, m_axi_input_r_RRESP, "(port)m_axi_input_r_RRESP");
    sc_trace(mVcdFile, m_axi_input_r_BVALID, "(port)m_axi_input_r_BVALID");
    sc_trace(mVcdFile, m_axi_input_r_BREADY, "(port)m_axi_input_r_BREADY");
    sc_trace(mVcdFile, m_axi_input_r_BRESP, "(port)m_axi_input_r_BRESP");
    sc_trace(mVcdFile, m_axi_input_r_BID, "(port)m_axi_input_r_BID");
    sc_trace(mVcdFile, m_axi_input_r_BUSER, "(port)m_axi_input_r_BUSER");
    sc_trace(mVcdFile, input_offset, "(port)input_offset");
    sc_trace(mVcdFile, input_oc_0_address0, "(port)input_oc_0_address0");
    sc_trace(mVcdFile, input_oc_0_ce0, "(port)input_oc_0_ce0");
    sc_trace(mVcdFile, input_oc_0_we0, "(port)input_oc_0_we0");
    sc_trace(mVcdFile, input_oc_0_d0, "(port)input_oc_0_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, input_r_blk_n_AR, "input_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, input_r_blk_n_R, "input_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, exitcond_fu_145_p2, "exitcond_fu_145_p2");
    sc_trace(mVcdFile, sext_cast_fu_99_p1, "sext_cast_fu_99_p1");
    sc_trace(mVcdFile, sext_cast_reg_170, "sext_cast_reg_170");
    sc_trace(mVcdFile, i_5_fu_109_p2, "i_5_fu_109_p2");
    sc_trace(mVcdFile, i_5_reg_178, "i_5_reg_178");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_115_p3, "tmp_fu_115_p3");
    sc_trace(mVcdFile, tmp_reg_183, "tmp_reg_183");
    sc_trace(mVcdFile, exitcond1_fu_103_p2, "exitcond1_fu_103_p2");
    sc_trace(mVcdFile, tmp_11_fu_127_p2, "tmp_11_fu_127_p2");
    sc_trace(mVcdFile, tmp_11_reg_188, "tmp_11_reg_188");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_input_r_ARREADY, "ap_sig_ioackin_m_axi_input_r_ARREADY");
    sc_trace(mVcdFile, tmp_27_cast_fu_142_p1, "tmp_27_cast_fu_142_p1");
    sc_trace(mVcdFile, tmp_27_cast_reg_199, "tmp_27_cast_reg_199");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, j_4_fu_151_p2, "j_4_fu_151_p2");
    sc_trace(mVcdFile, j_4_reg_207, "j_4_reg_207");
    sc_trace(mVcdFile, ap_block_state10, "ap_block_state10");
    sc_trace(mVcdFile, tmp_s_fu_161_p2, "tmp_s_fu_161_p2");
    sc_trace(mVcdFile, tmp_s_reg_212, "tmp_s_reg_212");
    sc_trace(mVcdFile, input_addr_read_reg_217, "input_addr_read_reg_217");
    sc_trace(mVcdFile, i_reg_77, "i_reg_77");
    sc_trace(mVcdFile, j_reg_88, "j_reg_88");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_28_cast_fu_166_p1, "tmp_28_cast_fu_166_p1");
    sc_trace(mVcdFile, tmp_12_fu_132_p1, "tmp_12_fu_132_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_input_r_ARREADY, "ap_reg_ioackin_m_axi_input_r_ARREADY");
    sc_trace(mVcdFile, tmp_10_fu_123_p1, "tmp_10_fu_123_p1");
    sc_trace(mVcdFile, tmp_cast_fu_157_p1, "tmp_cast_fu_157_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

store_input::~store_input() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void store_input::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_input_r_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_input_r_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_input_r_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_input_r_ARREADY.read())) {
                ap_reg_ioackin_m_axi_input_r_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((!(esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_1))) {
        i_reg_77 = i_5_reg_178.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_77 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        j_reg_88 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        j_reg_88 = j_4_reg_207.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_5_reg_178 = i_5_fu_109_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        input_addr_read_reg_217 = m_axi_input_r_RDATA.read();
        tmp_s_reg_212 = tmp_s_fu_161_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_0)))) {
        j_4_reg_207 = j_4_fu_151_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sext_cast_reg_170 = sext_cast_fu_99_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_103_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_11_reg_188 = tmp_11_fu_127_p2.read();
        tmp_reg_183 = tmp_fu_115_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_27_cast_reg_199 = tmp_27_cast_fu_142_p1.read();
    }
}

void store_input::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void store_input::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void store_input::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void store_input::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void store_input::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void store_input::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void store_input::thread_ap_block_state10() {
    ap_block_state10 = (esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_0));
}

void store_input::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_103_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void store_input::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void store_input::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_103_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void store_input::thread_ap_sig_ioackin_m_axi_input_r_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_input_r_ARREADY.read())) {
        ap_sig_ioackin_m_axi_input_r_ARREADY = m_axi_input_r_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_input_r_ARREADY = ap_const_logic_1;
    }
}

void store_input::thread_exitcond1_fu_103_p2() {
    exitcond1_fu_103_p2 = (!i_reg_77.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_77.read() == ap_const_lv6_20);
}

void store_input::thread_exitcond_fu_145_p2() {
    exitcond_fu_145_p2 = (!j_reg_88.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_88.read() == ap_const_lv6_20);
}

void store_input::thread_i_5_fu_109_p2() {
    i_5_fu_109_p2 = (!i_reg_77.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_77.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void store_input::thread_input_oc_0_address0() {
    input_oc_0_address0 =  (sc_lv<10>) (tmp_28_cast_fu_166_p1.read());
}

void store_input::thread_input_oc_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        input_oc_0_ce0 = ap_const_logic_1;
    } else {
        input_oc_0_ce0 = ap_const_logic_0;
    }
}

void store_input::thread_input_oc_0_d0() {
    input_oc_0_d0 = input_addr_read_reg_217.read();
}

void store_input::thread_input_oc_0_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        input_oc_0_we0 = ap_const_logic_1;
    } else {
        input_oc_0_we0 = ap_const_logic_0;
    }
}

void store_input::thread_input_r_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        input_r_blk_n_AR = m_axi_input_r_ARREADY.read();
    } else {
        input_r_blk_n_AR = ap_const_logic_1;
    }
}

void store_input::thread_input_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0))) {
        input_r_blk_n_R = m_axi_input_r_RVALID.read();
    } else {
        input_r_blk_n_R = ap_const_logic_1;
    }
}

void store_input::thread_j_4_fu_151_p2() {
    j_4_fu_151_p2 = (!j_reg_88.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_reg_88.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void store_input::thread_m_axi_input_r_ARADDR() {
    m_axi_input_r_ARADDR =  (sc_lv<32>) (tmp_12_fu_132_p1.read());
}

void store_input::thread_m_axi_input_r_ARBURST() {
    m_axi_input_r_ARBURST = ap_const_lv2_0;
}

void store_input::thread_m_axi_input_r_ARCACHE() {
    m_axi_input_r_ARCACHE = ap_const_lv4_0;
}

void store_input::thread_m_axi_input_r_ARID() {
    m_axi_input_r_ARID = ap_const_lv1_0;
}

void store_input::thread_m_axi_input_r_ARLEN() {
    m_axi_input_r_ARLEN = ap_const_lv32_20;
}

void store_input::thread_m_axi_input_r_ARLOCK() {
    m_axi_input_r_ARLOCK = ap_const_lv2_0;
}

void store_input::thread_m_axi_input_r_ARPROT() {
    m_axi_input_r_ARPROT = ap_const_lv3_0;
}

void store_input::thread_m_axi_input_r_ARQOS() {
    m_axi_input_r_ARQOS = ap_const_lv4_0;
}

void store_input::thread_m_axi_input_r_ARREGION() {
    m_axi_input_r_ARREGION = ap_const_lv4_0;
}

void store_input::thread_m_axi_input_r_ARSIZE() {
    m_axi_input_r_ARSIZE = ap_const_lv3_0;
}

void store_input::thread_m_axi_input_r_ARUSER() {
    m_axi_input_r_ARUSER = ap_const_lv1_0;
}

void store_input::thread_m_axi_input_r_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_input_r_ARREADY.read()))) {
        m_axi_input_r_ARVALID = ap_const_logic_1;
    } else {
        m_axi_input_r_ARVALID = ap_const_logic_0;
    }
}

void store_input::thread_m_axi_input_r_AWADDR() {
    m_axi_input_r_AWADDR = ap_const_lv32_0;
}

void store_input::thread_m_axi_input_r_AWBURST() {
    m_axi_input_r_AWBURST = ap_const_lv2_0;
}

void store_input::thread_m_axi_input_r_AWCACHE() {
    m_axi_input_r_AWCACHE = ap_const_lv4_0;
}

void store_input::thread_m_axi_input_r_AWID() {
    m_axi_input_r_AWID = ap_const_lv1_0;
}

void store_input::thread_m_axi_input_r_AWLEN() {
    m_axi_input_r_AWLEN = ap_const_lv32_0;
}

void store_input::thread_m_axi_input_r_AWLOCK() {
    m_axi_input_r_AWLOCK = ap_const_lv2_0;
}

void store_input::thread_m_axi_input_r_AWPROT() {
    m_axi_input_r_AWPROT = ap_const_lv3_0;
}

void store_input::thread_m_axi_input_r_AWQOS() {
    m_axi_input_r_AWQOS = ap_const_lv4_0;
}

void store_input::thread_m_axi_input_r_AWREGION() {
    m_axi_input_r_AWREGION = ap_const_lv4_0;
}

void store_input::thread_m_axi_input_r_AWSIZE() {
    m_axi_input_r_AWSIZE = ap_const_lv3_0;
}

void store_input::thread_m_axi_input_r_AWUSER() {
    m_axi_input_r_AWUSER = ap_const_lv1_0;
}

void store_input::thread_m_axi_input_r_AWVALID() {
    m_axi_input_r_AWVALID = ap_const_logic_0;
}

void store_input::thread_m_axi_input_r_BREADY() {
    m_axi_input_r_BREADY = ap_const_logic_0;
}

void store_input::thread_m_axi_input_r_RREADY() {
    if ((!(esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        m_axi_input_r_RREADY = ap_const_logic_1;
    } else {
        m_axi_input_r_RREADY = ap_const_logic_0;
    }
}

void store_input::thread_m_axi_input_r_WDATA() {
    m_axi_input_r_WDATA = ap_const_lv32_0;
}

void store_input::thread_m_axi_input_r_WID() {
    m_axi_input_r_WID = ap_const_lv1_0;
}

void store_input::thread_m_axi_input_r_WLAST() {
    m_axi_input_r_WLAST = ap_const_logic_0;
}

void store_input::thread_m_axi_input_r_WSTRB() {
    m_axi_input_r_WSTRB = ap_const_lv4_0;
}

void store_input::thread_m_axi_input_r_WUSER() {
    m_axi_input_r_WUSER = ap_const_lv1_0;
}

void store_input::thread_m_axi_input_r_WVALID() {
    m_axi_input_r_WVALID = ap_const_logic_0;
}

void store_input::thread_sext_cast_fu_99_p1() {
    sext_cast_fu_99_p1 = esl_zext<31,30>(input_offset.read());
}

void store_input::thread_tmp_10_fu_123_p1() {
    tmp_10_fu_123_p1 = esl_zext<31,11>(tmp_fu_115_p3.read());
}

void store_input::thread_tmp_11_fu_127_p2() {
    tmp_11_fu_127_p2 = (!sext_cast_reg_170.read().is_01() || !tmp_10_fu_123_p1.read().is_01())? sc_lv<31>(): (sc_biguint<31>(sext_cast_reg_170.read()) + sc_biguint<31>(tmp_10_fu_123_p1.read()));
}

void store_input::thread_tmp_12_fu_132_p1() {
    tmp_12_fu_132_p1 = esl_zext<64,31>(tmp_11_reg_188.read());
}

void store_input::thread_tmp_27_cast_fu_142_p1() {
    tmp_27_cast_fu_142_p1 = esl_zext<12,11>(tmp_reg_183.read());
}

void store_input::thread_tmp_28_cast_fu_166_p1() {
    tmp_28_cast_fu_166_p1 = esl_zext<64,12>(tmp_s_reg_212.read());
}

void store_input::thread_tmp_cast_fu_157_p1() {
    tmp_cast_fu_157_p1 = esl_zext<12,6>(j_reg_88.read());
}

void store_input::thread_tmp_fu_115_p3() {
    tmp_fu_115_p3 = esl_concat<6,5>(i_reg_77.read(), ap_const_lv5_0);
}

void store_input::thread_tmp_s_fu_161_p2() {
    tmp_s_fu_161_p2 = (!tmp_27_cast_reg_199.read().is_01() || !tmp_cast_fu_157_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_27_cast_reg_199.read()) + sc_biguint<12>(tmp_cast_fu_157_p1.read()));
}

void store_input::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_103_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_input_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((!(esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(m_axi_input_r_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(exitcond_fu_145_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

}

