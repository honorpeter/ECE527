// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _store_bias_HH_
#define _store_bias_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct store_bias : public sc_module {
    // Port declarations 56
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_bias_AWVALID;
    sc_in< sc_logic > m_axi_bias_AWREADY;
    sc_out< sc_lv<32> > m_axi_bias_AWADDR;
    sc_out< sc_lv<1> > m_axi_bias_AWID;
    sc_out< sc_lv<32> > m_axi_bias_AWLEN;
    sc_out< sc_lv<3> > m_axi_bias_AWSIZE;
    sc_out< sc_lv<2> > m_axi_bias_AWBURST;
    sc_out< sc_lv<2> > m_axi_bias_AWLOCK;
    sc_out< sc_lv<4> > m_axi_bias_AWCACHE;
    sc_out< sc_lv<3> > m_axi_bias_AWPROT;
    sc_out< sc_lv<4> > m_axi_bias_AWQOS;
    sc_out< sc_lv<4> > m_axi_bias_AWREGION;
    sc_out< sc_lv<1> > m_axi_bias_AWUSER;
    sc_out< sc_logic > m_axi_bias_WVALID;
    sc_in< sc_logic > m_axi_bias_WREADY;
    sc_out< sc_lv<32> > m_axi_bias_WDATA;
    sc_out< sc_lv<4> > m_axi_bias_WSTRB;
    sc_out< sc_logic > m_axi_bias_WLAST;
    sc_out< sc_lv<1> > m_axi_bias_WID;
    sc_out< sc_lv<1> > m_axi_bias_WUSER;
    sc_out< sc_logic > m_axi_bias_ARVALID;
    sc_in< sc_logic > m_axi_bias_ARREADY;
    sc_out< sc_lv<32> > m_axi_bias_ARADDR;
    sc_out< sc_lv<1> > m_axi_bias_ARID;
    sc_out< sc_lv<32> > m_axi_bias_ARLEN;
    sc_out< sc_lv<3> > m_axi_bias_ARSIZE;
    sc_out< sc_lv<2> > m_axi_bias_ARBURST;
    sc_out< sc_lv<2> > m_axi_bias_ARLOCK;
    sc_out< sc_lv<4> > m_axi_bias_ARCACHE;
    sc_out< sc_lv<3> > m_axi_bias_ARPROT;
    sc_out< sc_lv<4> > m_axi_bias_ARQOS;
    sc_out< sc_lv<4> > m_axi_bias_ARREGION;
    sc_out< sc_lv<1> > m_axi_bias_ARUSER;
    sc_in< sc_logic > m_axi_bias_RVALID;
    sc_out< sc_logic > m_axi_bias_RREADY;
    sc_in< sc_lv<32> > m_axi_bias_RDATA;
    sc_in< sc_logic > m_axi_bias_RLAST;
    sc_in< sc_lv<1> > m_axi_bias_RID;
    sc_in< sc_lv<1> > m_axi_bias_RUSER;
    sc_in< sc_lv<2> > m_axi_bias_RRESP;
    sc_in< sc_logic > m_axi_bias_BVALID;
    sc_out< sc_logic > m_axi_bias_BREADY;
    sc_in< sc_lv<2> > m_axi_bias_BRESP;
    sc_in< sc_lv<1> > m_axi_bias_BID;
    sc_in< sc_lv<1> > m_axi_bias_BUSER;
    sc_in< sc_lv<30> > bias_offset;
    sc_out< sc_lv<3> > bias_oc_address0;
    sc_out< sc_logic > bias_oc_ce0;
    sc_out< sc_logic > bias_oc_we0;
    sc_out< sc_lv<32> > bias_oc_d0;


    // Module declarations
    store_bias(sc_module_name name);
    SC_HAS_PROCESS(store_bias);

    ~store_bias();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > bias_blk_n_AR;
    sc_signal< sc_logic > bias_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > exitcond_fu_94_p2;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_bias_ARREADY;
    sc_signal< sc_lv<3> > i_8_fu_100_p2;
    sc_signal< sc_lv<3> > i_8_reg_120;
    sc_signal< bool > ap_block_state8;
    sc_signal< sc_lv<32> > bias_addr_read_reg_125;
    sc_signal< sc_lv<3> > i_reg_71;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<64> > tmp_fu_106_p1;
    sc_signal< sc_lv<64> > sext_fu_83_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_bias_ARREADY;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_bias_ARREADY();
    void thread_bias_blk_n_AR();
    void thread_bias_blk_n_R();
    void thread_bias_oc_address0();
    void thread_bias_oc_ce0();
    void thread_bias_oc_d0();
    void thread_bias_oc_we0();
    void thread_exitcond_fu_94_p2();
    void thread_i_8_fu_100_p2();
    void thread_m_axi_bias_ARADDR();
    void thread_m_axi_bias_ARBURST();
    void thread_m_axi_bias_ARCACHE();
    void thread_m_axi_bias_ARID();
    void thread_m_axi_bias_ARLEN();
    void thread_m_axi_bias_ARLOCK();
    void thread_m_axi_bias_ARPROT();
    void thread_m_axi_bias_ARQOS();
    void thread_m_axi_bias_ARREGION();
    void thread_m_axi_bias_ARSIZE();
    void thread_m_axi_bias_ARUSER();
    void thread_m_axi_bias_ARVALID();
    void thread_m_axi_bias_AWADDR();
    void thread_m_axi_bias_AWBURST();
    void thread_m_axi_bias_AWCACHE();
    void thread_m_axi_bias_AWID();
    void thread_m_axi_bias_AWLEN();
    void thread_m_axi_bias_AWLOCK();
    void thread_m_axi_bias_AWPROT();
    void thread_m_axi_bias_AWQOS();
    void thread_m_axi_bias_AWREGION();
    void thread_m_axi_bias_AWSIZE();
    void thread_m_axi_bias_AWUSER();
    void thread_m_axi_bias_AWVALID();
    void thread_m_axi_bias_BREADY();
    void thread_m_axi_bias_RREADY();
    void thread_m_axi_bias_WDATA();
    void thread_m_axi_bias_WID();
    void thread_m_axi_bias_WLAST();
    void thread_m_axi_bias_WSTRB();
    void thread_m_axi_bias_WUSER();
    void thread_m_axi_bias_WVALID();
    void thread_sext_fu_83_p1();
    void thread_tmp_fu_106_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
