// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_0_address0,
        input_0_0_ce0,
        input_0_0_q0,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        weights_offset,
        m_axi_bias_AWVALID,
        m_axi_bias_AWREADY,
        m_axi_bias_AWADDR,
        m_axi_bias_AWID,
        m_axi_bias_AWLEN,
        m_axi_bias_AWSIZE,
        m_axi_bias_AWBURST,
        m_axi_bias_AWLOCK,
        m_axi_bias_AWCACHE,
        m_axi_bias_AWPROT,
        m_axi_bias_AWQOS,
        m_axi_bias_AWREGION,
        m_axi_bias_AWUSER,
        m_axi_bias_WVALID,
        m_axi_bias_WREADY,
        m_axi_bias_WDATA,
        m_axi_bias_WSTRB,
        m_axi_bias_WLAST,
        m_axi_bias_WID,
        m_axi_bias_WUSER,
        m_axi_bias_ARVALID,
        m_axi_bias_ARREADY,
        m_axi_bias_ARADDR,
        m_axi_bias_ARID,
        m_axi_bias_ARLEN,
        m_axi_bias_ARSIZE,
        m_axi_bias_ARBURST,
        m_axi_bias_ARLOCK,
        m_axi_bias_ARCACHE,
        m_axi_bias_ARPROT,
        m_axi_bias_ARQOS,
        m_axi_bias_ARREGION,
        m_axi_bias_ARUSER,
        m_axi_bias_RVALID,
        m_axi_bias_RREADY,
        m_axi_bias_RDATA,
        m_axi_bias_RLAST,
        m_axi_bias_RID,
        m_axi_bias_RUSER,
        m_axi_bias_RRESP,
        m_axi_bias_BVALID,
        m_axi_bias_BREADY,
        m_axi_bias_BRESP,
        m_axi_bias_BID,
        m_axi_bias_BUSER,
        bias_offset,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_0_0_address0;
output   input_0_0_ce0;
input  [31:0] input_0_0_q0;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [31:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [31:0] m_axi_weights_WDATA;
output  [3:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [31:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [31:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [29:0] weights_offset;
output   m_axi_bias_AWVALID;
input   m_axi_bias_AWREADY;
output  [31:0] m_axi_bias_AWADDR;
output  [0:0] m_axi_bias_AWID;
output  [31:0] m_axi_bias_AWLEN;
output  [2:0] m_axi_bias_AWSIZE;
output  [1:0] m_axi_bias_AWBURST;
output  [1:0] m_axi_bias_AWLOCK;
output  [3:0] m_axi_bias_AWCACHE;
output  [2:0] m_axi_bias_AWPROT;
output  [3:0] m_axi_bias_AWQOS;
output  [3:0] m_axi_bias_AWREGION;
output  [0:0] m_axi_bias_AWUSER;
output   m_axi_bias_WVALID;
input   m_axi_bias_WREADY;
output  [31:0] m_axi_bias_WDATA;
output  [3:0] m_axi_bias_WSTRB;
output   m_axi_bias_WLAST;
output  [0:0] m_axi_bias_WID;
output  [0:0] m_axi_bias_WUSER;
output   m_axi_bias_ARVALID;
input   m_axi_bias_ARREADY;
output  [31:0] m_axi_bias_ARADDR;
output  [0:0] m_axi_bias_ARID;
output  [31:0] m_axi_bias_ARLEN;
output  [2:0] m_axi_bias_ARSIZE;
output  [1:0] m_axi_bias_ARBURST;
output  [1:0] m_axi_bias_ARLOCK;
output  [3:0] m_axi_bias_ARCACHE;
output  [2:0] m_axi_bias_ARPROT;
output  [3:0] m_axi_bias_ARQOS;
output  [3:0] m_axi_bias_ARREGION;
output  [0:0] m_axi_bias_ARUSER;
input   m_axi_bias_RVALID;
output   m_axi_bias_RREADY;
input  [31:0] m_axi_bias_RDATA;
input   m_axi_bias_RLAST;
input  [0:0] m_axi_bias_RID;
input  [0:0] m_axi_bias_RUSER;
input  [1:0] m_axi_bias_RRESP;
input   m_axi_bias_BVALID;
output   m_axi_bias_BREADY;
input  [1:0] m_axi_bias_BRESP;
input  [0:0] m_axi_bias_BID;
input  [0:0] m_axi_bias_BUSER;
input  [29:0] bias_offset;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_0_ce0;
reg m_axi_weights_ARVALID;
reg m_axi_weights_RREADY;
reg m_axi_bias_ARVALID;
reg m_axi_bias_RREADY;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_blk_n_AR;
wire    ap_CS_fsm_state9;
reg    weights_blk_n_R;
wire    ap_CS_fsm_state17;
reg    bias_blk_n_AR;
reg    bias_blk_n_R;
wire    ap_CS_fsm_state16;
wire   [0:0] exitcond_fu_254_p2;
reg    ap_sig_ioackin_m_axi_bias_ARREADY;
wire   [31:0] weights_offset_cast_fu_184_p1;
reg   [31:0] weights_offset_cast_reg_277;
wire    ap_CS_fsm_state7;
wire   [3:0] n_1_fu_194_p2;
reg   [3:0] n_1_reg_285;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_44_fu_234_p2;
reg   [31:0] tmp_44_reg_290;
wire   [0:0] exitcond1_fu_188_p2;
reg    ap_sig_ioackin_m_axi_weights_ARREADY;
reg   [3:0] output_addr_reg_301;
wire    ap_CS_fsm_state15;
wire   [6:0] c_3_fu_260_p2;
reg   [6:0] c_3_reg_309;
reg    ap_block_state16;
reg   [31:0] bias_addr_read_reg_319;
reg   [31:0] weights_addr_read_reg_324;
reg   [31:0] input_0_0_load_reg_329;
wire   [31:0] grp_fu_169_p2;
reg   [31:0] tmp_3_reg_334;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_164_p2;
wire    ap_CS_fsm_state26;
reg   [31:0] tmp_1_reg_344;
wire    ap_CS_fsm_state31;
reg   [3:0] n_reg_129;
wire    ap_CS_fsm_state32;
reg   [31:0] tmp_s_reg_141;
reg   [6:0] c_reg_153;
wire   [63:0] tmp_fu_249_p1;
wire   [63:0] tmp_2_fu_266_p1;
wire   [63:0] sext2_fu_173_p1;
wire  signed [63:0] tmp_45_fu_239_p1;
reg    ap_reg_ioackin_m_axi_bias_ARREADY;
reg    ap_reg_ioackin_m_axi_weights_ARREADY;
reg   [31:0] grp_fu_164_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state18;
wire   [10:0] tmp_59_fu_200_p3;
wire   [6:0] tmp_60_fu_212_p3;
wire   [11:0] p_shl_cast_fu_208_p1;
wire   [11:0] p_shl6_cast_fu_220_p1;
wire   [11:0] tmp_61_fu_224_p2;
wire  signed [31:0] tmp_43_fu_230_p1;
reg   [31:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 ap_reg_ioackin_m_axi_bias_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_weights_ARREADY = 1'b0;
end

conv1_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fadd_32ns_3bkb_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_141),
    .din1(grp_fu_164_p1),
    .ce(1'b1),
    .dout(grp_fu_164_p2)
);

conv1_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv1_fmul_32ns_3cud_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_addr_read_reg_324),
    .din1(input_0_0_load_reg_329),
    .ce(1'b1),
    .dout(grp_fu_169_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_bias_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0))) begin
                ap_reg_ioackin_m_axi_bias_ARREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (m_axi_bias_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_bias_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            if ((ap_sig_ioackin_m_axi_weights_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b0;
            end else if ((m_axi_weights_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weights_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        c_reg_153 <= c_3_reg_309;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        c_reg_153 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        n_reg_129 <= n_1_reg_285;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        n_reg_129 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_s_reg_141 <= grp_fu_164_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_s_reg_141 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_bias_RVALID == 1'b0) & (exitcond_fu_254_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16) & (exitcond_fu_254_p2 == 1'd1))) begin
        bias_addr_read_reg_319 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_bias_RVALID == 1'b0) & (exitcond_fu_254_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16))) begin
        c_3_reg_309 <= c_3_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        input_0_0_load_reg_329 <= input_0_0_q0;
        weights_addr_read_reg_324 <= m_axi_weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        n_1_reg_285 <= n_1_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_addr_reg_301 <= tmp_fu_249_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_1_reg_344 <= grp_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_3_reg_334 <= grp_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_188_p2 == 1'd0))) begin
        tmp_44_reg_290 <= tmp_44_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_offset_cast_reg_277[29 : 0] <= weights_offset_cast_fu_184_p1[29 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_188_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_188_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_bias_ARREADY = m_axi_bias_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_bias_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_weights_ARREADY = m_axi_weights_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weights_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bias_blk_n_AR = m_axi_bias_ARREADY;
    end else begin
        bias_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (exitcond_fu_254_p2 == 1'd1))) begin
        bias_blk_n_R = m_axi_bias_RVALID;
    end else begin
        bias_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_164_p1 = bias_addr_read_reg_319;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_164_p1 = tmp_3_reg_334;
    end else begin
        grp_fu_164_p1 = 'bx;
    end
end

always @ (*) begin
    if ((~((m_axi_bias_RVALID == 1'b0) & (exitcond_fu_254_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16))) begin
        input_0_0_ce0 = 1'b1;
    end else begin
        input_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_reg_ioackin_m_axi_bias_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_bias_ARVALID = 1'b1;
    end else begin
        m_axi_bias_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_bias_RVALID == 1'b0) & (exitcond_fu_254_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16) & (exitcond_fu_254_p2 == 1'd1))) begin
        m_axi_bias_RREADY = 1'b1;
    end else begin
        m_axi_bias_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_weights_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_weights_ARVALID = 1'b1;
    end else begin
        m_axi_weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        m_axi_weights_RREADY = 1'b1;
    end else begin
        m_axi_weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_blk_n_AR = m_axi_weights_ARREADY;
    end else begin
        weights_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        weights_blk_n_R = m_axi_weights_RVALID;
    end else begin
        weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_sig_ioackin_m_axi_bias_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_sig_ioackin_m_axi_weights_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if ((~((m_axi_bias_RVALID == 1'b0) & (exitcond_fu_254_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16) & (exitcond_fu_254_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if ((~((m_axi_bias_RVALID == 1'b0) & (exitcond_fu_254_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state16) & (exitcond_fu_254_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((m_axi_weights_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state16 = ((m_axi_bias_RVALID == 1'b0) & (exitcond_fu_254_p2 == 1'd1));
end

assign c_3_fu_260_p2 = (c_reg_153 + 7'd1);

assign exitcond1_fu_188_p2 = ((n_reg_129 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_254_p2 = ((c_reg_153 == 7'd120) ? 1'b1 : 1'b0);

assign input_0_0_address0 = tmp_2_fu_266_p1;

assign m_axi_bias_ARADDR = sext2_fu_173_p1;

assign m_axi_bias_ARBURST = 2'd0;

assign m_axi_bias_ARCACHE = 4'd0;

assign m_axi_bias_ARID = 1'd0;

assign m_axi_bias_ARLEN = 32'd10;

assign m_axi_bias_ARLOCK = 2'd0;

assign m_axi_bias_ARPROT = 3'd0;

assign m_axi_bias_ARQOS = 4'd0;

assign m_axi_bias_ARREGION = 4'd0;

assign m_axi_bias_ARSIZE = 3'd0;

assign m_axi_bias_ARUSER = 1'd0;

assign m_axi_bias_AWADDR = 32'd0;

assign m_axi_bias_AWBURST = 2'd0;

assign m_axi_bias_AWCACHE = 4'd0;

assign m_axi_bias_AWID = 1'd0;

assign m_axi_bias_AWLEN = 32'd0;

assign m_axi_bias_AWLOCK = 2'd0;

assign m_axi_bias_AWPROT = 3'd0;

assign m_axi_bias_AWQOS = 4'd0;

assign m_axi_bias_AWREGION = 4'd0;

assign m_axi_bias_AWSIZE = 3'd0;

assign m_axi_bias_AWUSER = 1'd0;

assign m_axi_bias_AWVALID = 1'b0;

assign m_axi_bias_BREADY = 1'b0;

assign m_axi_bias_WDATA = 32'd0;

assign m_axi_bias_WID = 1'd0;

assign m_axi_bias_WLAST = 1'b0;

assign m_axi_bias_WSTRB = 4'd0;

assign m_axi_bias_WUSER = 1'd0;

assign m_axi_bias_WVALID = 1'b0;

assign m_axi_weights_ARADDR = tmp_45_fu_239_p1;

assign m_axi_weights_ARBURST = 2'd0;

assign m_axi_weights_ARCACHE = 4'd0;

assign m_axi_weights_ARID = 1'd0;

assign m_axi_weights_ARLEN = 32'd120;

assign m_axi_weights_ARLOCK = 2'd0;

assign m_axi_weights_ARPROT = 3'd0;

assign m_axi_weights_ARQOS = 4'd0;

assign m_axi_weights_ARREGION = 4'd0;

assign m_axi_weights_ARSIZE = 3'd0;

assign m_axi_weights_ARUSER = 1'd0;

assign m_axi_weights_AWADDR = 32'd0;

assign m_axi_weights_AWBURST = 2'd0;

assign m_axi_weights_AWCACHE = 4'd0;

assign m_axi_weights_AWID = 1'd0;

assign m_axi_weights_AWLEN = 32'd0;

assign m_axi_weights_AWLOCK = 2'd0;

assign m_axi_weights_AWPROT = 3'd0;

assign m_axi_weights_AWQOS = 4'd0;

assign m_axi_weights_AWREGION = 4'd0;

assign m_axi_weights_AWSIZE = 3'd0;

assign m_axi_weights_AWUSER = 1'd0;

assign m_axi_weights_AWVALID = 1'b0;

assign m_axi_weights_BREADY = 1'b0;

assign m_axi_weights_WDATA = 32'd0;

assign m_axi_weights_WID = 1'd0;

assign m_axi_weights_WLAST = 1'b0;

assign m_axi_weights_WSTRB = 4'd0;

assign m_axi_weights_WUSER = 1'd0;

assign m_axi_weights_WVALID = 1'b0;

assign n_1_fu_194_p2 = (n_reg_129 + 4'd1);

assign output_r_address0 = output_addr_reg_301;

assign output_r_d0 = tmp_1_reg_344;

assign p_shl6_cast_fu_220_p1 = tmp_60_fu_212_p3;

assign p_shl_cast_fu_208_p1 = tmp_59_fu_200_p3;

assign sext2_fu_173_p1 = bias_offset;

assign tmp_2_fu_266_p1 = c_reg_153;

assign tmp_43_fu_230_p1 = $signed(tmp_61_fu_224_p2);

assign tmp_44_fu_234_p2 = ($signed(weights_offset_cast_reg_277) + $signed(tmp_43_fu_230_p1));

assign tmp_45_fu_239_p1 = $signed(tmp_44_reg_290);

assign tmp_59_fu_200_p3 = {{n_reg_129}, {7'd0}};

assign tmp_60_fu_212_p3 = {{n_reg_129}, {3'd0}};

assign tmp_61_fu_224_p2 = (p_shl_cast_fu_208_p1 - p_shl6_cast_fu_220_p1);

assign tmp_fu_249_p1 = n_reg_129;

assign weights_offset_cast_fu_184_p1 = weights_offset;

always @ (posedge ap_clk) begin
    weights_offset_cast_reg_277[31:30] <= 2'b00;
end

endmodule //fc_6
